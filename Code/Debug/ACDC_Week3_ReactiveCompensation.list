
ACDC_Week3_ReactiveCompensation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000c458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800c5e8  0800c5e8  0001c5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d384  0800d384  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d38c  0800d38c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d38c  0800d38c  0001d38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d390  0800d390  0001d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d394  00020000  2**2
=======
  1 .text         0000c060  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  0800c1f0  0800c1f0  0001c1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf64  0800cf64  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf6c  0800cf6c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800cf74  00020000  2**2
>>>>>>> parent of 9e7a168 (最终版本)
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00003284  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000347c  2000347c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   00019905  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f5a  00000000  00000000  00039b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0003da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  0003ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a09  00000000  00000000  0003fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dcf4  00000000  00000000  000685c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc58f  00000000  00000000  000862bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  0016284c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a58  00000000  00000000  00162914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  0016836c  2**0
=======
 13 .debug_info   0001dfaf  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df9  00000000  00000000  0003e1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00041fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  00043078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025710  00000000  00000000  00043f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ebf  00000000  00000000  00069660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc373  00000000  00000000  0008151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  0015d892  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057e4  00000000  00000000  0015d95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00163140  2**0
>>>>>>> parent of 9e7a168 (最终版本)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	0800c5d0 	.word	0x0800c5d0
=======
 80001b0:	0800c1d8 	.word	0x0800c1d8
>>>>>>> parent of 9e7a168 (最终版本)

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800c5d0 	.word	0x0800c5d0
=======
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800c1d8 	.word	0x0800c1d8
>>>>>>> parent of 9e7a168 (最终版本)

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

<<<<<<< HEAD
08000ff8 <MX_ADC1_Init>:
=======
08000ff0 <HAL_TIM_PeriodElapsedCallback>:
int flag_Start_Running=0;
int time_Point_PLL =10;
int flag_Protect=0;
extern int flag_screen;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	ed2d 8b02 	vpush	{d8}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b65      	ldr	r3, [pc, #404]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 81cf 	bne.w	80013a8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
    {
//    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
    	//记录一个定时器time,用两次time值相减可以得到对应的任意事件的两项
    	time_Tim1++;
 800100a:	4b64      	ldr	r3, [pc, #400]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a62      	ldr	r2, [pc, #392]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001012:	6013      	str	r3, [r2, #0]
    	if(time_Tim1>Control_Frequency){
 8001014:	4b61      	ldr	r3, [pc, #388]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f644 6220 	movw	r2, #20000	; 0x4e20
 800101c:	4293      	cmp	r3, r2
 800101e:	dd15      	ble.n	800104c <HAL_TIM_PeriodElapsedCallback+0x5c>
    		time_Tim1-=Control_Frequency;
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa7d 	bl	8000524 <__aeabi_i2d>
 800102a:	a357      	add	r3, pc, #348	; (adr r3, 8001188 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff f92a 	bl	8000288 <__aeabi_dsub>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd8c 	bl	8000b58 <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001044:	6013      	str	r3, [r2, #0]
    		flag_screen=1;
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
    	}
    	if(time_Tim1%(4000)==0){
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001052:	fb83 1302 	smull	r1, r3, r3, r2
 8001056:	1219      	asrs	r1, r3, #8
 8001058:	17d3      	asrs	r3, r2, #31
 800105a:	1acb      	subs	r3, r1, r3
 800105c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x7e>
    		Key_Detect();
 800106a:	f000 fb37 	bl	80016dc <Key_Detect>
    	}
//    	进行ADC(3us)和进行数据的存储(2.2us)
//    	进行正弦运算注意角度是弧度制 1.8us
//    	对输入电压、输入电流、Io电流进行Park运算，这个100后续要变 1us
    	ADC_DAC_get_and_show();
 800106e:	f000 fcdb 	bl	8001a28 <ADC_DAC_get_and_show>
//    	PLL锁相，先得角速度再积分，角度大于2pi则减
//    	ws加一个滤波器，滤出高频分量，用2kHz滤波器 4us
    	ws=0.9f*ws+0.1f*PID_realize(&PLL,0,-Usq);
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80011ac <HAL_TIM_PeriodElapsedCallback+0x1bc>
 800107c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eef1 7a67 	vneg.f32	s15, s15
 800108a:	eef0 0a67 	vmov.f32	s1, s15
 800108e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80011b4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001092:	4849      	ldr	r0, [pc, #292]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001094:	f001 fb07 	bl	80026a6 <PID_realize>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80011bc <HAL_TIM_PeriodElapsedCallback+0x1cc>
 80010a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010aa:	edc3 7a00 	vstr	s15, [r3]
    	thetas+=ws*Control_Time;
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa41 	bl	8000548 <__aeabi_f2d>
 80010c6:	a332      	add	r3, pc, #200	; (adr r3, 8001190 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa94 	bl	80005f8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f8d8 	bl	800028c <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd80 	bl	8000be8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80010ec:	6013      	str	r3, [r2, #0]
    	if(thetas>=2*PI){thetas-=2*PI;}
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80011c4 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 80010f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	db09      	blt.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x126>
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80011c4 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 800110c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
//    	判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
//    	如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
    	PLL_Success_Detect();
 8001116:	f000 f983 	bl	8001420 <PLL_Success_Detect>
    	//电压外环
    	ref_IoIVd=0.7f*ref_IoIVd+0.3f*PID_realize(&pid_Udc,ref_Udc,Udc);
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80011cc <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8001124:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	eef0 0a47 	vmov.f32	s1, s14
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800113e:	f001 fab2 	bl	80026a6 <PID_realize>
 8001142:	eef0 7a40 	vmov.f32	s15, s0
 8001146:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80011dc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001154:	edc3 7a00 	vstr	s15, [r3]
    	//设定电流q轴值 本来是1.414 因为校正电流变为1.414*0.993 使得电流可以在2A时约对应的是2A，0.01f作为偏置使得在初始状态下无功最小,然后做拟合
    	if(ref_Isqrms==0){
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d145      	bne.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x204>
    		ref_IoIVq=Usd*0.00345f+0.01f;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80011e8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001176:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80011ec <HAL_TIM_PeriodElapsedCallback+0x1fc>
 800117a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001180:	edc3 7a00 	vstr	s15, [r3]
 8001184:	e04d      	b.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x232>
 8001186:	bf00      	nop
 8001188:	00000000 	.word	0x00000000
 800118c:	40d38800 	.word	0x40d38800
 8001190:	eb1c432d 	.word	0xeb1c432d
 8001194:	3f0a36e2 	.word	0x3f0a36e2
 8001198:	200033f4 	.word	0x200033f4
 800119c:	20000218 	.word	0x20000218
 80011a0:	20000010 	.word	0x20000010
 80011a4:	10624dd3 	.word	0x10624dd3
 80011a8:	20003318 	.word	0x20003318
 80011ac:	3f666666 	.word	0x3f666666
 80011b0:	20003258 	.word	0x20003258
 80011b4:	00000000 	.word	0x00000000
 80011b8:	20003298 	.word	0x20003298
 80011bc:	3dcccccd 	.word	0x3dcccccd
 80011c0:	20003310 	.word	0x20003310
 80011c4:	40c90fdb 	.word	0x40c90fdb
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	3f333333 	.word	0x3f333333
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20003360 	.word	0x20003360
 80011d8:	2000325c 	.word	0x2000325c
 80011dc:	3e99999a 	.word	0x3e99999a
 80011e0:	20003130 	.word	0x20003130
 80011e4:	20003378 	.word	0x20003378
 80011e8:	3b621965 	.word	0x3b621965
 80011ec:	3c23d70a 	.word	0x3c23d70a
 80011f0:	20003134 	.word	0x20003134
    	}else
    		ref_IoIVq=Usd*0.00345f+ref_Isqrms*1.3632f-0.1263f;
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80013b8 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 80011fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001202:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80013c0 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 800120c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
//    		//电流环测试
//    		ref_IoIVd=0.4;
//    		ref_IoIVq=2.8;
//        	UIq=PID_realize(&pid_IoIVq,ref_IoIVq,IoIVq);
//        	UId=PID_realize(&pid_IoIVd,ref_IoIVd,IoIVd);
    	UId=PID_realize(&pid_IoIVd,ref_IoIVd,IoIVd);
 8001222:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	eef0 0a47 	vmov.f32	s1, s14
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	4867      	ldr	r0, [pc, #412]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8001238:	f001 fa35 	bl	80026a6 <PID_realize>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
//    	UIq=PID_realize(&pid_IoIVq,ref_Isq,Isq);
    	UIq=PID_realize(&pid_IoIVq,ref_IoIVq,IoIVq);
 8001246:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	eef0 0a47 	vmov.f32	s1, s14
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	4861      	ldr	r0, [pc, #388]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800125c:	f001 fa23 	bl	80026a6 <PID_realize>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
    	//前馈和限制
    	Dd=(Usd+IoIVq*Xs-UId)/Udc;
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800126c:	ed93 7a00 	vldr	s14, [r3]
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001290:	ed93 7a00 	vldr	s14, [r3]
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800129a:	edc3 7a00 	vstr	s15, [r3]
    	Dq=(Usq-IoIVd*Xs-UIq)/Udc;
 800129e:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80012a6:	edd3 6a00 	vldr	s13, [r3]
 80012aa:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]
//	    	else if (Dq<-0.8) Dq=-0.8;

//    	开环测试
//    	Dd=0.5;Dq=0;
    	//占空比Park逆变换
    	arm_inv_park_f32(Dd,Dq,&Dalpha,&Dbeta,sin_thetas,cos_thetas);
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61f8      	str	r0, [r7, #28]
 80012e4:	61b9      	str	r1, [r7, #24]
 80012e6:	4947      	ldr	r1, [pc, #284]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80012e8:	6179      	str	r1, [r7, #20]
 80012ea:	4947      	ldr	r1, [pc, #284]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80012ec:	6139      	str	r1, [r7, #16]
 80012ee:	60fa      	str	r2, [r7, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 80012f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8001302:	edd7 7a03 	vldr	s15, [r7, #12]
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001314:	ed97 7a07 	vldr	s14, [r7, #28]
 8001318:	edd7 7a03 	vldr	s15, [r7, #12]
 800131c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001320:	edd7 6a06 	vldr	s13, [r7, #24]
 8001324:	edd7 7a02 	vldr	s15, [r7, #8]
 8001328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	edc3 7a00 	vstr	s15, [r3]
  }
 8001336:	bf00      	nop
    	//单极性倍频输出
    	D1=(1+Dalpha)*0.5f;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001346:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
    	D2=(1-Dalpha)*0.5f;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800135e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
    	TIM1->CCR1=Tim2_ARR*D1;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001414 <HAL_TIM_PeriodElapsedCallback+0x424>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 2a90 	vmov	r2, s15
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
    	TIM1->CCR2=Tim2_ARR*D2;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001414 <HAL_TIM_PeriodElapsedCallback+0x424>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800139a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139e:	ee17 2a90 	vmov	r2, s15
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
    	//进行系统保护
    	System_Protect();
 80013a4:	f000 f956 	bl	8001654 <System_Protect>
    }
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	ecbd 8b02 	vpop	{d8}
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	20003378 	.word	0x20003378
 80013b8:	3b621965 	.word	0x3b621965
 80013bc:	20003130 	.word	0x20003130
 80013c0:	3fae7d56 	.word	0x3fae7d56
 80013c4:	3e0154ca 	.word	0x3e0154ca
 80013c8:	20003134 	.word	0x20003134
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20003254 	.word	0x20003254
 80013d4:	2000331c 	.word	0x2000331c
 80013d8:	20003314 	.word	0x20003314
 80013dc:	20003394 	.word	0x20003394
 80013e0:	200032d0 	.word	0x200032d0
 80013e4:	20003374 	.word	0x20003374
 80013e8:	20000004 	.word	0x20000004
 80013ec:	20003360 	.word	0x20003360
 80013f0:	20003398 	.word	0x20003398
 80013f4:	20003258 	.word	0x20003258
 80013f8:	20003308 	.word	0x20003308
 80013fc:	2000335c 	.word	0x2000335c
 8001400:	2000337c 	.word	0x2000337c
 8001404:	20003354 	.word	0x20003354
 8001408:	20003380 	.word	0x20003380
 800140c:	20003390 	.word	0x20003390
 8001410:	20003370 	.word	0x20003370
 8001414:	43c80000 	.word	0x43c80000
 8001418:	40010000 	.word	0x40010000
 800141c:	00000000 	.word	0x00000000

08001420 <PLL_Success_Detect>:
extern int ad5_avg_flag;
void PLL_Success_Detect(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	//判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
	//如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
	if(time_Point_PLL>Control_Frequency)
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <PLL_Success_Detect+0x1e0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f644 6220 	movw	r2, #20000	; 0x4e20
 800142c:	4293      	cmp	r3, r2
 800142e:	dd12      	ble.n	8001456 <PLL_Success_Detect+0x36>
		time_Point_PLL-=Control_Frequency;
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <PLL_Success_Detect+0x1e0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	a36b      	add	r3, pc, #428	; (adr r3, 80015e8 <PLL_Success_Detect+0x1c8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7fe ff22 	bl	8000288 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb84 	bl	8000b58 <__aeabi_d2iz>
 8001450:	4603      	mov	r3, r0
 8001452:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <PLL_Success_Detect+0x1e0>)
 8001454:	6013      	str	r3, [r2, #0]
	if(flag_Start_Running==0){
 8001456:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <PLL_Success_Detect+0x1e4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d153      	bne.n	8001506 <PLL_Success_Detect+0xe6>
		if(flag_PLL<10){
 800145e:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <PLL_Success_Detect+0x1e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b09      	cmp	r3, #9
 8001464:	dc4c      	bgt.n	8001500 <PLL_Success_Detect+0xe0>
			if(time_Tim1==time_Point_PLL){
 8001466:	4b69      	ldr	r3, [pc, #420]	; (800160c <PLL_Success_Detect+0x1ec>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <PLL_Success_Detect+0x1e0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d149      	bne.n	8001506 <PLL_Success_Detect+0xe6>
				if((Usq<0.2||Usq>-0.2)&&(Usd>5||Usd<-5)){
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <PLL_Success_Detect+0x1f0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f866 	bl	8000548 <__aeabi_f2d>
 800147c:	a35c      	add	r3, pc, #368	; (adr r3, 80015f0 <PLL_Success_Detect+0x1d0>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff fb2b 	bl	8000adc <__aeabi_dcmplt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10c      	bne.n	80014a6 <PLL_Success_Detect+0x86>
 800148c:	4b60      	ldr	r3, [pc, #384]	; (8001610 <PLL_Success_Detect+0x1f0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	a358      	add	r3, pc, #352	; (adr r3, 80015f8 <PLL_Success_Detect+0x1d8>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01f      	beq.n	80014e6 <PLL_Success_Detect+0xc6>
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <PLL_Success_Detect+0x1f4>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	dc09      	bgt.n	80014ce <PLL_Success_Detect+0xae>
 80014ba:	4b56      	ldr	r3, [pc, #344]	; (8001614 <PLL_Success_Detect+0x1f4>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	d50b      	bpl.n	80014e6 <PLL_Success_Detect+0xc6>
					time_Point_PLL+=400;
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <PLL_Success_Detect+0x1e0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <PLL_Success_Detect+0x1e0>)
 80014d8:	6013      	str	r3, [r2, #0]
					flag_PLL+=1;
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e00f      	b.n	8001506 <PLL_Success_Detect+0xe6>
				}
				else{
					flag_PLL-=5;
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3b05      	subs	r3, #5
 80014ec:	4a46      	ldr	r2, [pc, #280]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014ee:	6013      	str	r3, [r2, #0]
					if(flag_PLL<0)
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da06      	bge.n	8001506 <PLL_Success_Detect+0xe6>
						flag_PLL=0;
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <PLL_Success_Detect+0x1e8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e002      	b.n	8001506 <PLL_Success_Detect+0xe6>
				}
			}
		}
		else{
			flag_Start_Running=1;
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <PLL_Success_Detect+0x1e4>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
		}
	}
	if(flag_Start_Running==1&&ad5_avg_flag==1&&flag_Protect==0){
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <PLL_Success_Detect+0x1e4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d168      	bne.n	80015e0 <PLL_Success_Detect+0x1c0>
 800150e:	4b42      	ldr	r3, [pc, #264]	; (8001618 <PLL_Success_Detect+0x1f8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d164      	bne.n	80015e0 <PLL_Success_Detect+0x1c0>
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <PLL_Success_Detect+0x1fc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d160      	bne.n	80015e0 <PLL_Success_Detect+0x1c0>
		if(thetas<0.03f+PI/2&&thetas>-0.03f+PI/2){
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <PLL_Success_Detect+0x200>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001624 <PLL_Success_Detect+0x204>
 8001528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001530:	d400      	bmi.n	8001534 <PLL_Success_Detect+0x114>
			flag_Start_Running=2;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		}
	  }

}
 8001532:	e055      	b.n	80015e0 <PLL_Success_Detect+0x1c0>
		if(thetas<0.03f+PI/2&&thetas>-0.03f+PI/2){
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <PLL_Success_Detect+0x200>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001628 <PLL_Success_Detect+0x208>
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	dc00      	bgt.n	800154a <PLL_Success_Detect+0x12a>
}
 8001548:	e04a      	b.n	80015e0 <PLL_Success_Detect+0x1c0>
			PID_init(&pid_Udc,0.016f, 0.25f,0,2,-2,0.4,Control_Time);
 800154a:	ed9f 3a38 	vldr	s6, [pc, #224]	; 800162c <PLL_Success_Detect+0x20c>
 800154e:	eddf 2a38 	vldr	s5, [pc, #224]	; 8001630 <PLL_Success_Detect+0x210>
 8001552:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 8001556:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800155a:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8001634 <PLL_Success_Detect+0x214>
 800155e:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8001562:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001638 <PLL_Success_Detect+0x218>
 8001566:	4835      	ldr	r0, [pc, #212]	; (800163c <PLL_Success_Detect+0x21c>)
 8001568:	f001 f814 	bl	8002594 <PID_init>
			PID_init(&pid_IoIVd,8.0f,1400,0,15,-15,0,Control_Time);
 800156c:	ed9f 3a2f 	vldr	s6, [pc, #188]	; 800162c <PLL_Success_Detect+0x20c>
 8001570:	eddf 2a30 	vldr	s5, [pc, #192]	; 8001634 <PLL_Success_Detect+0x214>
 8001574:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 8001578:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800157c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8001634 <PLL_Success_Detect+0x214>
 8001580:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8001640 <PLL_Success_Detect+0x220>
 8001584:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8001588:	482e      	ldr	r0, [pc, #184]	; (8001644 <PLL_Success_Detect+0x224>)
 800158a:	f001 f803 	bl	8002594 <PID_init>
			PID_init(&pid_IoIVq,8.0f,1400,0,15,-15,0,Control_Time);
 800158e:	ed9f 3a27 	vldr	s6, [pc, #156]	; 800162c <PLL_Success_Detect+0x20c>
 8001592:	eddf 2a28 	vldr	s5, [pc, #160]	; 8001634 <PLL_Success_Detect+0x214>
 8001596:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 800159a:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800159e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001634 <PLL_Success_Detect+0x214>
 80015a2:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001640 <PLL_Success_Detect+0x220>
 80015a6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <PLL_Success_Detect+0x228>)
 80015ac:	f000 fff2 	bl	8002594 <PID_init>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015b0:	2100      	movs	r1, #0
 80015b2:	4826      	ldr	r0, [pc, #152]	; (800164c <PLL_Success_Detect+0x22c>)
 80015b4:	f003 ffec 	bl	8005590 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015b8:	2104      	movs	r1, #4
 80015ba:	4824      	ldr	r0, [pc, #144]	; (800164c <PLL_Success_Detect+0x22c>)
 80015bc:	f003 ffe8 	bl	8005590 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80015c0:	2100      	movs	r1, #0
 80015c2:	4822      	ldr	r0, [pc, #136]	; (800164c <PLL_Success_Detect+0x22c>)
 80015c4:	f004 fee6 	bl	8006394 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80015c8:	2104      	movs	r1, #4
 80015ca:	4820      	ldr	r0, [pc, #128]	; (800164c <PLL_Success_Detect+0x22c>)
 80015cc:	f004 fee2 	bl	8006394 <HAL_TIMEx_PWMN_Start>
			flag_Start_Running=2;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <PLL_Success_Detect+0x1e4>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	481d      	ldr	r0, [pc, #116]	; (8001650 <PLL_Success_Detect+0x230>)
 80015dc:	f003 fa30 	bl	8004a40 <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40d38800 	.word	0x40d38800
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fc99999 	.word	0x3fc99999
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	bfc99999 	.word	0xbfc99999
 8001600:	20000000 	.word	0x20000000
 8001604:	20000220 	.word	0x20000220
 8001608:	2000021c 	.word	0x2000021c
 800160c:	20000218 	.word	0x20000218
 8001610:	20003258 	.word	0x20003258
 8001614:	20003378 	.word	0x20003378
 8001618:	20000234 	.word	0x20000234
 800161c:	20000224 	.word	0x20000224
 8001620:	20003310 	.word	0x20003310
 8001624:	3fcce6e5 	.word	0x3fcce6e5
 8001628:	3fc538d1 	.word	0x3fc538d1
 800162c:	3851b717 	.word	0x3851b717
 8001630:	3ecccccd 	.word	0x3ecccccd
 8001634:	00000000 	.word	0x00000000
 8001638:	3c83126f 	.word	0x3c83126f
 800163c:	2000325c 	.word	0x2000325c
 8001640:	44af0000 	.word	0x44af0000
 8001644:	2000331c 	.word	0x2000331c
 8001648:	200032d0 	.word	0x200032d0
 800164c:	200033ac 	.word	0x200033ac
 8001650:	40020000 	.word	0x40020000

08001654 <System_Protect>:

void System_Protect(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if(Is>10||Us>80||Udc>65){
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <System_Protect+0x6c>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	dc14      	bgt.n	8001696 <System_Protect+0x42>
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <System_Protect+0x70>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80016c8 <System_Protect+0x74>
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	dc0a      	bgt.n	8001696 <System_Protect+0x42>
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <System_Protect+0x78>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016d0 <System_Protect+0x7c>
 800168a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	dc00      	bgt.n	8001696 <System_Protect+0x42>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
//		  flag_Start_Running=0;
//		  flag_PLL=0;
	}
}
 8001694:	e012      	b.n	80016bc <System_Protect+0x68>
		flag_Protect=1;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <System_Protect+0x80>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <System_Protect+0x84>)
 80016a0:	f004 f83e 	bl	8005720 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80016a4:	2104      	movs	r1, #4
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <System_Protect+0x84>)
 80016a8:	f004 f83a 	bl	8005720 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <System_Protect+0x84>)
 80016b0:	f004 ff2a 	bl	8006508 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <System_Protect+0x84>)
 80016b8:	f004 ff26 	bl	8006508 <HAL_TIMEx_PWMN_Stop>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000338c 	.word	0x2000338c
 80016c4:	20003368 	.word	0x20003368
 80016c8:	42a00000 	.word	0x42a00000
 80016cc:	20003360 	.word	0x20003360
 80016d0:	42820000 	.word	0x42820000
 80016d4:	20000224 	.word	0x20000224
 80016d8:	200033ac 	.word	0x200033ac

080016dc <Key_Detect>:


void Key_Detect(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)== GPIO_PIN_RESET){
 80016e0:	2104      	movs	r1, #4
 80016e2:	481c      	ldr	r0, [pc, #112]	; (8001754 <Key_Detect+0x78>)
 80016e4:	f003 f994 	bl	8004a10 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <Key_Detect+0x26>
		ref_Isqrms+=0.1f;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <Key_Detect+0x7c>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800175c <Key_Detect+0x80>
 80016f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <Key_Detect+0x7c>)
 80016fe:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001702:	2108      	movs	r1, #8
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <Key_Detect+0x78>)
 8001706:	f003 f983 	bl	8004a10 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <Key_Detect+0x48>
		ref_Isqrms-=0.1f;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <Key_Detect+0x7c>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800175c <Key_Detect+0x80>
 800171a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <Key_Detect+0x7c>)
 8001720:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)== GPIO_PIN_RESET){
 8001724:	2120      	movs	r1, #32
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <Key_Detect+0x78>)
 8001728:	f003 f972 	bl	8004a10 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <Key_Detect+0x5e>
		ref_Isqrms=0;
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <Key_Detect+0x7c>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_4)== GPIO_PIN_RESET){
 800173a:	2110      	movs	r1, #16
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <Key_Detect+0x78>)
 800173e:	f003 f967 	bl	8004a10 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <Key_Detect+0x74>
		ref_Isqrms=2;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <Key_Detect+0x7c>)
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	601a      	str	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	20003130 	.word	0x20003130
 800175c:	3dcccccd 	.word	0x3dcccccd

08001760 <MX_ADC1_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
=======
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
=======
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <MX_ADC1_Init+0x15c>)
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <MX_ADC1_Init+0x160>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <MX_ADC1_Init+0x15c>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <MX_ADC1_Init+0x15c>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <MX_ADC1_Init+0x15c>)
 800103a:	4a48      	ldr	r2, [pc, #288]	; (800115c <MX_ADC1_Init+0x164>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001046:	2208      	movs	r2, #8
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <MX_ADC1_Init+0x15c>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	483e      	ldr	r0, [pc, #248]	; (8001154 <MX_ADC1_Init+0x15c>)
 800105a:	f002 fa19 	bl	8003490 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f001 fdfa 	bl	8002c5c <Error_Handler>
=======
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001774:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <MX_ADC1_Init+0x160>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <MX_ADC1_Init+0x15c>)
 800177a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001780:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001788:	2201      	movs	r2, #1
 800178a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <MX_ADC1_Init+0x15c>)
 800178e:	2201      	movs	r2, #1
 8001790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <MX_ADC1_Init+0x15c>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017a2:	4a48      	ldr	r2, [pc, #288]	; (80018c4 <MX_ADC1_Init+0x164>)
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a6:	4b45      	ldr	r3, [pc, #276]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017ae:	2208      	movs	r2, #8
 80017b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017b2:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c0:	483e      	ldr	r0, [pc, #248]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017c2:	f001 fd7b 	bl	80032bc <HAL_ADC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017cc:	f000 fe92 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
<<<<<<< HEAD
 8001068:	2302      	movs	r3, #2
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4836      	ldr	r0, [pc, #216]	; (8001154 <MX_ADC1_Init+0x15c>)
 800107a:	f002 fb7b 	bl	8003774 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f001 fdea 	bl	8002c5c <Error_Handler>
=======
 80017d0:	2302      	movs	r3, #2
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4836      	ldr	r0, [pc, #216]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017e2:	f001 fedd 	bl	80035a0 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017ec:	f000 fe82 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
<<<<<<< HEAD
 8001088:	2303      	movs	r3, #3
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	482f      	ldr	r0, [pc, #188]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001096:	f002 fb6d 	bl	8003774 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f001 fddc 	bl	8002c5c <Error_Handler>
=======
 80017f0:	2303      	movs	r3, #3
 80017f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	482f      	ldr	r0, [pc, #188]	; (80018bc <MX_ADC1_Init+0x15c>)
 80017fe:	f001 fecf 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001808:	f000 fe74 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
<<<<<<< HEAD
 80010a4:	2306      	movs	r3, #6
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010b2:	f002 fb5f 	bl	8003774 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010bc:	f001 fdce 	bl	8002c5c <Error_Handler>
=======
 800180c:	2306      	movs	r3, #6
 800180e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001810:	2303      	movs	r3, #3
 8001812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4828      	ldr	r0, [pc, #160]	; (80018bc <MX_ADC1_Init+0x15c>)
 800181a:	f001 fec1 	bl	80035a0 <HAL_ADC_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001824:	f000 fe66 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
<<<<<<< HEAD
 80010c0:	2307      	movs	r3, #7
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010ce:	f002 fb51 	bl	8003774 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010d8:	f001 fdc0 	bl	8002c5c <Error_Handler>
=======
 8001828:	2307      	movs	r3, #7
 800182a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4821      	ldr	r0, [pc, #132]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001836:	f001 feb3 	bl	80035a0 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001840:	f000 fe58 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< HEAD
 80010dc:	2308      	movs	r3, #8
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010e0:	2305      	movs	r3, #5
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010ea:	f002 fb43 	bl	8003774 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010f4:	f001 fdb2 	bl	8002c5c <Error_Handler>
=======
 8001844:	2308      	movs	r3, #8
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001848:	2305      	movs	r3, #5
 800184a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	4619      	mov	r1, r3
 8001850:	481a      	ldr	r0, [pc, #104]	; (80018bc <MX_ADC1_Init+0x15c>)
 8001852:	f001 fea5 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800185c:	f000 fe4a 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< HEAD
 80010f8:	2309      	movs	r3, #9
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010fc:	2306      	movs	r3, #6
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001106:	f002 fb35 	bl	8003774 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001110:	f001 fda4 	bl	8002c5c <Error_Handler>
=======
 8001860:	2309      	movs	r3, #9
 8001862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001864:	2306      	movs	r3, #6
 8001866:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_ADC1_Init+0x15c>)
 800186e:	f001 fe97 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001878:	f000 fe3c 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
<<<<<<< HEAD
 8001114:	230e      	movs	r3, #14
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001118:	2307      	movs	r3, #7
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001122:	f002 fb27 	bl	8003774 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800112c:	f001 fd96 	bl	8002c5c <Error_Handler>
=======
 800187c:	230e      	movs	r3, #14
 800187e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001880:	2307      	movs	r3, #7
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_ADC1_Init+0x15c>)
 800188a:	f001 fe89 	bl	80035a0 <HAL_ADC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001894:	f000 fe2e 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
<<<<<<< HEAD
 8001130:	230f      	movs	r3, #15
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x15c>)
 800113e:	f002 fb19 	bl	8003774 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001148:	f001 fd88 	bl	8002c5c <Error_Handler>
=======
 8001898:	230f      	movs	r3, #15
 800189a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_ADC1_Init+0x15c>)
 80018a6:	f001 fe7b 	bl	80035a0 <HAL_ADC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80018b0:	f000 fe20 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000214 	.word	0x20000214
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_ADC_MspInit+0x144>)
 800117e:	4293      	cmp	r3, r2
 8001180:	f040 808c 	bne.w	800129c <HAL_ADC_MspInit+0x13c>
=======
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20003174 	.word	0x20003174
 80018c0:	40012000 	.word	0x40012000
 80018c4:	0f000001 	.word	0x0f000001

080018c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_ADC_MspInit+0x144>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	f040 808c 	bne.w	8001a04 <HAL_ADC_MspInit+0x13c>
>>>>>>> parent of 9e7a168 (最终版本)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6453      	str	r3, [r2, #68]	; 0x44
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
=======
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6453      	str	r3, [r2, #68]	; 0x44
 80018fc:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a3f      	ldr	r2, [pc, #252]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_ADC_MspInit+0x148>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 80011f4:	23cc      	movs	r3, #204	; 0xcc
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4829      	ldr	r0, [pc, #164]	; (80012ac <HAL_ADC_MspInit+0x14c>)
 8001208:	f003 fb50 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800120c:	2330      	movs	r3, #48	; 0x30
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4824      	ldr	r0, [pc, #144]	; (80012b0 <HAL_ADC_MspInit+0x150>)
 8001220:	f003 fb44 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	481f      	ldr	r0, [pc, #124]	; (80012b4 <HAL_ADC_MspInit+0x154>)
 8001238:	f003 fb38 	bl	80048ac <HAL_GPIO_Init>
=======
 800195c:	23cc      	movs	r3, #204	; 0xcc
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4829      	ldr	r0, [pc, #164]	; (8001a14 <HAL_ADC_MspInit+0x14c>)
 8001970:	f002 feb2 	bl	80046d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001974:	2330      	movs	r3, #48	; 0x30
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4824      	ldr	r0, [pc, #144]	; (8001a18 <HAL_ADC_MspInit+0x150>)
 8001988:	f002 fea6 	bl	80046d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198c:	2303      	movs	r3, #3
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	481f      	ldr	r0, [pc, #124]	; (8001a1c <HAL_ADC_MspInit+0x154>)
 80019a0:	f002 fe9a 	bl	80046d8 <HAL_GPIO_Init>
>>>>>>> parent of 9e7a168 (最终版本)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_ADC_MspInit+0x15c>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001282:	f002 ff11 	bl	80040a8 <HAL_DMA_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800128c:	f001 fce6 	bl	8002c5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6393      	str	r3, [r2, #56]	; 0x38
=======
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_ADC_MspInit+0x15c>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019ea:	f002 fa73 	bl	8003ed4 <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80019f4:	f000 fd7e 	bl	80024f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_ADC_MspInit+0x158>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
<<<<<<< HEAD
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40012000 	.word	0x40012000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	2000025c 	.word	0x2000025c
 80012bc:	40026410 	.word	0x40026410

080012c0 <MX_DAC_Init>:
=======
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40012000 	.word	0x40012000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	200031c4 	.word	0x200031c4
 8001a24:	40026410 	.word	0x40026410

08001a28 <ADC_DAC_get_and_show>:
int time=0;
int ad5_avg_flag=0;
float Isd_screen,Isq_screen;
extern float Usrms,Isrms,PF;
void ADC_DAC_get_and_show()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	; 0x50
 8001a2c:	af00      	add	r7, sp, #0
	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <ADC_DAC_get_and_show+0x40>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <ADC_DAC_get_and_show+0x44>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <ADC_DAC_get_and_show+0x48>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ADC_DAC_get_and_show+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <ADC_DAC_get_and_show+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <ADC_DAC_get_and_show+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <ADC_DAC_get_and_show+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <ADC_DAC_get_and_show+0x5c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <ADC_DAC_get_and_show+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e092      	b.n	8001b8c <ADC_DAC_get_and_show+0x164>
 8001a66:	bf00      	nop
 8001a68:	200031bc 	.word	0x200031bc
 8001a6c:	20003170 	.word	0x20003170
 8001a70:	20003224 	.word	0x20003224
 8001a74:	2000322c 	.word	0x2000322c
 8001a78:	20003148 	.word	0x20003148
 8001a7c:	20003234 	.word	0x20003234
 8001a80:	2000323c 	.word	0x2000323c
 8001a84:	20003230 	.word	0x20003230
 8001a88:	20003228 	.word	0x20003228
	{
			ad1 += ADC_Value[i++];
 8001a8c:	4bae      	ldr	r3, [pc, #696]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	b2d1      	uxtb	r1, r2
 8001a94:	4aac      	ldr	r2, [pc, #688]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001a96:	7011      	strb	r1, [r2, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4bac      	ldr	r3, [pc, #688]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	4aab      	ldr	r2, [pc, #684]	; (8001d50 <ADC_DAC_get_and_show+0x328>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4ba9      	ldr	r3, [pc, #676]	; (8001d50 <ADC_DAC_get_and_show+0x328>)
 8001aaa:	601a      	str	r2, [r3, #0]
			ad2 += ADC_Value[i++];
 8001aac:	4ba6      	ldr	r3, [pc, #664]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	b2d1      	uxtb	r1, r2
 8001ab4:	4aa4      	ldr	r2, [pc, #656]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001ab6:	7011      	strb	r1, [r2, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	4aa4      	ldr	r2, [pc, #656]	; (8001d54 <ADC_DAC_get_and_show+0x32c>)
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4ba2      	ldr	r3, [pc, #648]	; (8001d54 <ADC_DAC_get_and_show+0x32c>)
 8001aca:	601a      	str	r2, [r3, #0]
			ad3 += ADC_Value[i++];
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	b2d1      	uxtb	r1, r2
 8001ad4:	4a9c      	ldr	r2, [pc, #624]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001ad6:	7011      	strb	r1, [r2, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b9c      	ldr	r3, [pc, #624]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	4a9d      	ldr	r2, [pc, #628]	; (8001d58 <ADC_DAC_get_and_show+0x330>)
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b9b      	ldr	r3, [pc, #620]	; (8001d58 <ADC_DAC_get_and_show+0x330>)
 8001aea:	601a      	str	r2, [r3, #0]
			ad4 += ADC_Value[i++];
 8001aec:	4b96      	ldr	r3, [pc, #600]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	b2d1      	uxtb	r1, r2
 8001af4:	4a94      	ldr	r2, [pc, #592]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001af6:	7011      	strb	r1, [r2, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	4a96      	ldr	r2, [pc, #600]	; (8001d5c <ADC_DAC_get_and_show+0x334>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b94      	ldr	r3, [pc, #592]	; (8001d5c <ADC_DAC_get_and_show+0x334>)
 8001b0a:	601a      	str	r2, [r3, #0]
			ad5 += ADC_Value[i++];
 8001b0c:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	b2d1      	uxtb	r1, r2
 8001b14:	4a8c      	ldr	r2, [pc, #560]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b16:	7011      	strb	r1, [r2, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	4a8f      	ldr	r2, [pc, #572]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001b2a:	601a      	str	r2, [r3, #0]
			ad6 += ADC_Value[i++];
 8001b2c:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	b2d1      	uxtb	r1, r2
 8001b34:	4a84      	ldr	r2, [pc, #528]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b36:	7011      	strb	r1, [r2, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	4a88      	ldr	r2, [pc, #544]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001b4a:	601a      	str	r2, [r3, #0]
			ad7 += ADC_Value[i++];
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	b2d1      	uxtb	r1, r2
 8001b54:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b56:	7011      	strb	r1, [r2, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	4a81      	ldr	r2, [pc, #516]	; (8001d68 <ADC_DAC_get_and_show+0x340>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <ADC_DAC_get_and_show+0x340>)
 8001b6a:	601a      	str	r2, [r3, #0]
			ad8 += ADC_Value[i++];
 8001b6c:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	b2d1      	uxtb	r1, r2
 8001b74:	4a74      	ldr	r2, [pc, #464]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b76:	7011      	strb	r1, [r2, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <ADC_DAC_get_and_show+0x324>)
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <ADC_DAC_get_and_show+0x344>)
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <ADC_DAC_get_and_show+0x344>)
 8001b8a:	601a      	str	r2, [r3, #0]
	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 8001b8c:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <ADC_DAC_get_and_show+0x320>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b07      	cmp	r3, #7
 8001b92:	f67f af7b 	bls.w	8001a8c <ADC_DAC_get_and_show+0x64>
	}
	ad1/=(ADC_num/8);
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <ADC_DAC_get_and_show+0x328>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <ADC_DAC_get_and_show+0x328>)
 8001b9c:	6013      	str	r3, [r2, #0]
	ad2/=(ADC_num/8);
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <ADC_DAC_get_and_show+0x32c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <ADC_DAC_get_and_show+0x32c>)
 8001ba4:	6013      	str	r3, [r2, #0]
	ad3/=(ADC_num/8);
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <ADC_DAC_get_and_show+0x330>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6b      	ldr	r2, [pc, #428]	; (8001d58 <ADC_DAC_get_and_show+0x330>)
 8001bac:	6013      	str	r3, [r2, #0]
	ad4/=(ADC_num/8);
 8001bae:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <ADC_DAC_get_and_show+0x334>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <ADC_DAC_get_and_show+0x334>)
 8001bb4:	6013      	str	r3, [r2, #0]
	ad5/=(ADC_num/8);
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001bbc:	6013      	str	r3, [r2, #0]
	ad6/=(ADC_num/8);
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a68      	ldr	r2, [pc, #416]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001bc4:	6013      	str	r3, [r2, #0]
	ad7/=(ADC_num/8);
 8001bc6:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <ADC_DAC_get_and_show+0x340>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a67      	ldr	r2, [pc, #412]	; (8001d68 <ADC_DAC_get_and_show+0x340>)
 8001bcc:	6013      	str	r3, [r2, #0]
	ad8/=(ADC_num/8);
 8001bce:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <ADC_DAC_get_and_show+0x344>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a66      	ldr	r2, [pc, #408]	; (8001d6c <ADC_DAC_get_and_show+0x344>)
 8001bd4:	6013      	str	r3, [r2, #0]

//	Us ad1-ad2 10kHz滤波器滤�??
//	Us=0.8f*Us+0.2f*(ad1-ad2)/4096.0f*3.3f*18.292f*0.99425f;
	Us=0.8f*Us+0.2f*(ad1-ad2)*0.014652f;
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <ADC_DAC_get_and_show+0x348>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001d74 <ADC_DAC_get_and_show+0x34c>
 8001be0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be4:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <ADC_DAC_get_and_show+0x328>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <ADC_DAC_get_and_show+0x32c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001d78 <ADC_DAC_get_and_show+0x350>
 8001bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001d7c <ADC_DAC_get_and_show+0x354>
 8001c02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <ADC_DAC_get_and_show+0x348>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]

//	Is ad3-ad4 10kHz滤波器滤�??
//	Is=0.8f*Is+0.2f*((ad3-ad3_avg)/4096.0f*3.3f)*1.6835f*1.19;
	Is=0.8f*Is+0.2f*(ad3-ad4)*0.001614f;
 8001c10:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <ADC_DAC_get_and_show+0x358>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001d74 <ADC_DAC_get_and_show+0x34c>
 8001c1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <ADC_DAC_get_and_show+0x330>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <ADC_DAC_get_and_show+0x334>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001d78 <ADC_DAC_get_and_show+0x350>
 8001c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c38:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001d84 <ADC_DAC_get_and_show+0x35c>
 8001c3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <ADC_DAC_get_and_show+0x358>)
 8001c46:	edc3 7a00 	vstr	s15, [r3]


//	IoIV ad5-ad6 10kHz滤波 注意是负的！！！这个地方的符号要细致的看
//	IoIV=0.8f*Is+0.2f*((ad5-ad6)/4096.0f*3.3f)*3.7037f;
	IoIV=0.7f*IoIV+0.3f*(ad5-ad6-ad5_avg)*-0.002984f;
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <ADC_DAC_get_and_show+0x360>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001d8c <ADC_DAC_get_and_show+0x364>
 8001c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <ADC_DAC_get_and_show+0x368>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d94 <ADC_DAC_get_and_show+0x36c>
 8001c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c78:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001d98 <ADC_DAC_get_and_show+0x370>
 8001c7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <ADC_DAC_get_and_show+0x360>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
//	Udc ad7-ad8
	//对母线直流电压用4kHz的低通滤波器进行滤波，对�????50Hz幅�?�差0.9999，角�????1°不到，应该可用，如果不行就用8kHz
//	Udc=0.95f*Udc+0.05f*(ad4-ad5)/4096.0f*3.3f*26.49989f;
	Udc=0.95f*Udc+0.05f*(ad7-ad8)*0.021350f;
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <ADC_DAC_get_and_show+0x374>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001da0 <ADC_DAC_get_and_show+0x378>
 8001c94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <ADC_DAC_get_and_show+0x340>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <ADC_DAC_get_and_show+0x344>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001caa:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001da4 <ADC_DAC_get_and_show+0x37c>
 8001cae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001da8 <ADC_DAC_get_and_show+0x380>
 8001cb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <ADC_DAC_get_and_show+0x374>)
 8001cc0:	edc3 7a00 	vstr	s15, [r3]

	if(ad5_avg_flag==0){
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <ADC_DAC_get_and_show+0x384>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d12b      	bne.n	8001d24 <ADC_DAC_get_and_show+0x2fc>
		time++;
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <ADC_DAC_get_and_show+0x388>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <ADC_DAC_get_and_show+0x388>)
 8001cd4:	6013      	str	r3, [r2, #0]
		ad5_sum+=(ad5-ad6)*ADC5_AVG_Weight;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <ADC_DAC_get_and_show+0x338>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <ADC_DAC_get_and_show+0x33c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001db4 <ADC_DAC_get_and_show+0x38c>
 8001cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <ADC_DAC_get_and_show+0x390>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <ADC_DAC_get_and_show+0x390>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
		if(time>=ADC5_AVG_NUM){
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <ADC_DAC_get_and_show+0x388>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	db0b      	blt.n	8001d24 <ADC_DAC_get_and_show+0x2fc>
			ad5_avg_flag=1;
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <ADC_DAC_get_and_show+0x384>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
			ad5_avg=ad5_sum;
 8001d12:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <ADC_DAC_get_and_show+0x390>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1c:	ee17 2a90 	vmov	r2, s15
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <ADC_DAC_get_and_show+0x368>)
 8001d22:	601a      	str	r2, [r3, #0]
		}
	}

	enQueue(&Us_queue,Us);
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <ADC_DAC_get_and_show+0x348>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	ee17 1a90 	vmov	r1, s15
 8001d32:	4822      	ldr	r0, [pc, #136]	; (8001dbc <ADC_DAC_get_and_show+0x394>)
 8001d34:	f000 fd10 	bl	8002758 <enQueue>
	enQueue(&Is_queue,Is);
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <ADC_DAC_get_and_show+0x358>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d42:	ee17 1a90 	vmov	r1, s15
 8001d46:	e03b      	b.n	8001dc0 <ADC_DAC_get_and_show+0x398>
 8001d48:	200031bc 	.word	0x200031bc
 8001d4c:	20003150 	.word	0x20003150
 8001d50:	20003170 	.word	0x20003170
 8001d54:	20003224 	.word	0x20003224
 8001d58:	2000322c 	.word	0x2000322c
 8001d5c:	20003148 	.word	0x20003148
 8001d60:	20003234 	.word	0x20003234
 8001d64:	2000323c 	.word	0x2000323c
 8001d68:	20003230 	.word	0x20003230
 8001d6c:	20003228 	.word	0x20003228
 8001d70:	20003368 	.word	0x20003368
 8001d74:	3f4ccccd 	.word	0x3f4ccccd
 8001d78:	3e4ccccd 	.word	0x3e4ccccd
 8001d7c:	3c700ef1 	.word	0x3c700ef1
 8001d80:	2000338c 	.word	0x2000338c
 8001d84:	3ad38cda 	.word	0x3ad38cda
 8001d88:	20003364 	.word	0x20003364
 8001d8c:	3f333333 	.word	0x3f333333
 8001d90:	2000022c 	.word	0x2000022c
 8001d94:	3e99999a 	.word	0x3e99999a
 8001d98:	bb438f36 	.word	0xbb438f36
 8001d9c:	20003360 	.word	0x20003360
 8001da0:	3f733333 	.word	0x3f733333
 8001da4:	3d4ccccd 	.word	0x3d4ccccd
 8001da8:	3caee632 	.word	0x3caee632
 8001dac:	20000234 	.word	0x20000234
 8001db0:	20000230 	.word	0x20000230
 8001db4:	3a03126f 	.word	0x3a03126f
 8001db8:	20000228 	.word	0x20000228
 8001dbc:	20000238 	.word	0x20000238
 8001dc0:	48cd      	ldr	r0, [pc, #820]	; (80020f8 <ADC_DAC_get_and_show+0x6d0>)
 8001dc2:	f000 fcc9 	bl	8002758 <enQueue>
	enQueue(&IoIV_queue,IoIV);
 8001dc6:	4bcd      	ldr	r3, [pc, #820]	; (80020fc <ADC_DAC_get_and_show+0x6d4>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd0:	ee17 1a90 	vmov	r1, s15
 8001dd4:	48ca      	ldr	r0, [pc, #808]	; (8002100 <ADC_DAC_get_and_show+0x6d8>)
 8001dd6:	f000 fcbf 	bl	8002758 <enQueue>

	//进行正弦运算 注意角度是弧度制 1.8us

	sin_thetas=arm_sin_f32(thetas);
 8001dda:	4bca      	ldr	r3, [pc, #808]	; (8002104 <ADC_DAC_get_and_show+0x6dc>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	f005 fc5c 	bl	80076a0 <arm_sin_f32>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	4bc6      	ldr	r3, [pc, #792]	; (8002108 <ADC_DAC_get_and_show+0x6e0>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
	cos_thetas=arm_cos_f32(thetas);
 8001df2:	4bc4      	ldr	r3, [pc, #784]	; (8002104 <ADC_DAC_get_and_show+0x6dc>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfc:	f005 fc96 	bl	800772c <arm_cos_f32>
 8001e00:	eef0 7a40 	vmov.f32	s15, s0
 8001e04:	4bc1      	ldr	r3, [pc, #772]	; (800210c <ADC_DAC_get_and_show+0x6e4>)
 8001e06:	edc3 7a00 	vstr	s15, [r3]

	//对输入电压�?�输入电流�?�Io电流进行Park运算，这�??100后续要变 1us

	arm_park_f32(Us,Us_queue.data[(Us_queue.rear-100+maxsize)%maxsize],
 8001e0a:	4bc1      	ldr	r3, [pc, #772]	; (8002110 <ADC_DAC_get_and_show+0x6e8>)
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	4bc1      	ldr	r3, [pc, #772]	; (8002114 <ADC_DAC_get_and_show+0x6ec>)
 8001e10:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001e14:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8001e18:	4bbf      	ldr	r3, [pc, #764]	; (8002118 <ADC_DAC_get_and_show+0x6f0>)
 8001e1a:	fb83 0302 	smull	r0, r3, r3, r2
 8001e1e:	1198      	asrs	r0, r3, #6
 8001e20:	17d3      	asrs	r3, r2, #31
 8001e22:	1ac3      	subs	r3, r0, r3
 8001e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e28:	fb00 f303 	mul.w	r3, r0, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	4ab9      	ldr	r2, [pc, #740]	; (8002114 <ADC_DAC_get_and_show+0x6ec>)
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	4bb2      	ldr	r3, [pc, #712]	; (8002108 <ADC_DAC_get_and_show+0x6e0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4bb2      	ldr	r3, [pc, #712]	; (800210c <ADC_DAC_get_and_show+0x6e4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6179      	str	r1, [r7, #20]
 8001e46:	edc7 7a04 	vstr	s15, [r7, #16]
 8001e4a:	49b4      	ldr	r1, [pc, #720]	; (800211c <ADC_DAC_get_and_show+0x6f4>)
 8001e4c:	60f9      	str	r1, [r7, #12]
 8001e4e:	49b4      	ldr	r1, [pc, #720]	; (8002120 <ADC_DAC_get_and_show+0x6f8>)
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001e56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e5a:	edd7 7a00 	vldr	s15, [r7]
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e88:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e8c:	edd7 7a00 	vldr	s15, [r7]
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
  }
 8001e9e:	bf00      	nop
			&Usd,&Usq,sin_thetas,cos_thetas);
	Usrms=0.997f*Usrms+0.003f*Usd*0.7071f;
 8001ea0:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <ADC_DAC_get_and_show+0x6fc>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002128 <ADC_DAC_get_and_show+0x700>
 8001eaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eae:	4b9b      	ldr	r3, [pc, #620]	; (800211c <ADC_DAC_get_and_show+0x6f4>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800212c <ADC_DAC_get_and_show+0x704>
 8001eb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ebc:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8002130 <ADC_DAC_get_and_show+0x708>
 8001ec0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <ADC_DAC_get_and_show+0x6fc>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
	//Isd、Isq过滤波器

	arm_park_f32(Is,Is_queue.data[(Is_queue.rear-100+maxsize)%maxsize],
 8001ece:	4b99      	ldr	r3, [pc, #612]	; (8002134 <ADC_DAC_get_and_show+0x70c>)
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <ADC_DAC_get_and_show+0x6d0>)
 8001ed4:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001ed8:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8001edc:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <ADC_DAC_get_and_show+0x6f0>)
 8001ede:	fb83 0302 	smull	r0, r3, r3, r2
 8001ee2:	1198      	asrs	r0, r3, #6
 8001ee4:	17d3      	asrs	r3, r2, #31
 8001ee6:	1ac3      	subs	r3, r0, r3
 8001ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eec:	fb00 f303 	mul.w	r3, r0, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a81      	ldr	r2, [pc, #516]	; (80020f8 <ADC_DAC_get_and_show+0x6d0>)
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	4b81      	ldr	r3, [pc, #516]	; (8002108 <ADC_DAC_get_and_show+0x6e0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b81      	ldr	r3, [pc, #516]	; (800210c <ADC_DAC_get_and_show+0x6e4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001f0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001f0e:	498a      	ldr	r1, [pc, #552]	; (8002138 <ADC_DAC_get_and_show+0x710>)
 8001f10:	6279      	str	r1, [r7, #36]	; 0x24
 8001f12:	498a      	ldr	r1, [pc, #552]	; (800213c <ADC_DAC_get_and_show+0x714>)
 8001f14:	6239      	str	r1, [r7, #32]
 8001f16:	61fa      	str	r2, [r7, #28]
 8001f18:	61bb      	str	r3, [r7, #24]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001f1a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f26:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001f3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f40:	eeb1 7a67 	vneg.f32	s14, s15
 8001f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
  }
 8001f62:	bf00      	nop
			&Isd,&Isq,sin_thetas,cos_thetas);
	Isd_screen=0.997f*Isd_screen+0.003f*Isd;
 8001f64:	4b76      	ldr	r3, [pc, #472]	; (8002140 <ADC_DAC_get_and_show+0x718>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002128 <ADC_DAC_get_and_show+0x700>
 8001f6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f72:	4b71      	ldr	r3, [pc, #452]	; (8002138 <ADC_DAC_get_and_show+0x710>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800212c <ADC_DAC_get_and_show+0x704>
 8001f7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	4b6e      	ldr	r3, [pc, #440]	; (8002140 <ADC_DAC_get_and_show+0x718>)
 8001f86:	edc3 7a00 	vstr	s15, [r3]
	Isq_screen=0.997f*Isq_screen+0.003f*Isq;
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <ADC_DAC_get_and_show+0x71c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002128 <ADC_DAC_get_and_show+0x700>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <ADC_DAC_get_and_show+0x714>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	eddf 6a63 	vldr	s13, [pc, #396]	; 800212c <ADC_DAC_get_and_show+0x704>
 8001fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	4b66      	ldr	r3, [pc, #408]	; (8002144 <ADC_DAC_get_and_show+0x71c>)
 8001fac:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32(Isd_screen*Isd_screen+Isq_screen*Isq_screen,&Isrms);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	; (8002140 <ADC_DAC_get_and_show+0x718>)
 8001fb2:	ed93 7a00 	vldr	s14, [r3]
 8001fb6:	4b62      	ldr	r3, [pc, #392]	; (8002140 <ADC_DAC_get_and_show+0x718>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <ADC_DAC_get_and_show+0x71c>)
 8001fc2:	edd3 6a00 	vldr	s13, [r3]
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <ADC_DAC_get_and_show+0x71c>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <ADC_DAC_get_and_show+0x720>)
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001fdc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	db09      	blt.n	8001ffe <ADC_DAC_get_and_show+0x5d6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001fea:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001fee:	f00a f8c9 	bl	800c184 <sqrtf>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001ffc:	e004      	b.n	8002008 <ADC_DAC_get_and_show+0x5e0>
    }
    else
    {
      *pOut = 0.0f;
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002006:	bf00      	nop
	PF=Isd_screen/Isrms;
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <ADC_DAC_get_and_show+0x718>)
 800200a:	edd3 6a00 	vldr	s13, [r3]
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <ADC_DAC_get_and_show+0x720>)
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <ADC_DAC_get_and_show+0x724>)
 800201a:	edc3 7a00 	vstr	s15, [r3]
	Isrms*=0.7071f;
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <ADC_DAC_get_and_show+0x720>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002130 <ADC_DAC_get_and_show+0x708>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <ADC_DAC_get_and_show+0x720>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
//	Isd=0.95f*Isd+0.05f*Isd_temp;
//	Isq=0.95f*Isq+0.05f*Isq_temp;
	arm_park_f32(IoIV,IoIV_queue.data[(IoIV_queue.rear-100+maxsize)%maxsize],
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <ADC_DAC_get_and_show+0x6d4>)
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <ADC_DAC_get_and_show+0x6d8>)
 8002038:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 800203c:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <ADC_DAC_get_and_show+0x6f0>)
 8002042:	fb83 0302 	smull	r0, r3, r3, r2
 8002046:	1198      	asrs	r0, r3, #6
 8002048:	17d3      	asrs	r3, r2, #31
 800204a:	1ac3      	subs	r3, r0, r3
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <ADC_DAC_get_and_show+0x6d8>)
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	4b28      	ldr	r3, [pc, #160]	; (8002108 <ADC_DAC_get_and_show+0x6e0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <ADC_DAC_get_and_show+0x6e4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	64f9      	str	r1, [r7, #76]	; 0x4c
 800206e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8002072:	4937      	ldr	r1, [pc, #220]	; (8002150 <ADC_DAC_get_and_show+0x728>)
 8002074:	6479      	str	r1, [r7, #68]	; 0x44
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <ADC_DAC_get_and_show+0x72c>)
 8002078:	6439      	str	r1, [r7, #64]	; 0x40
 800207a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800207e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002082:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800208e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209c:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80020a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020a4:	eeb1 7a67 	vneg.f32	s14, s15
 80020a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80020b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c2:	edc3 7a00 	vstr	s15, [r3]
  }
 80020c6:	bf00      	nop
			&IoIVd,&IoIVq,sin_thetas,cos_thetas);

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048+100*IoIV);
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <ADC_DAC_get_and_show+0x6d4>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002158 <ADC_DAC_get_and_show+0x730>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800215c <ADC_DAC_get_and_show+0x734>
 80020da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e2:	ee17 3a90 	vmov	r3, s15
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	481d      	ldr	r0, [pc, #116]	; (8002160 <ADC_DAC_get_and_show+0x738>)
 80020ec:	f001 fe7d 	bl	8003dea <HAL_DAC_SetValue>
}
 80020f0:	bf00      	nop
 80020f2:	3750      	adds	r7, #80	; 0x50
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200011e0 	.word	0x200011e0
 80020fc:	20003364 	.word	0x20003364
 8002100:	20002188 	.word	0x20002188
 8002104:	20003310 	.word	0x20003310
 8002108:	2000335c 	.word	0x2000335c
 800210c:	2000337c 	.word	0x2000337c
 8002110:	20003368 	.word	0x20003368
 8002114:	20000238 	.word	0x20000238
 8002118:	10624dd3 	.word	0x10624dd3
 800211c:	20003378 	.word	0x20003378
 8002120:	20003258 	.word	0x20003258
 8002124:	20003358 	.word	0x20003358
 8002128:	3f7f3b64 	.word	0x3f7f3b64
 800212c:	3b449ba6 	.word	0x3b449ba6
 8002130:	3f350481 	.word	0x3f350481
 8002134:	2000338c 	.word	0x2000338c
 8002138:	20003384 	.word	0x20003384
 800213c:	20003388 	.word	0x20003388
 8002140:	20003144 	.word	0x20003144
 8002144:	20003238 	.word	0x20003238
 8002148:	20003294 	.word	0x20003294
 800214c:	2000336c 	.word	0x2000336c
 8002150:	20003254 	.word	0x20003254
 8002154:	20003394 	.word	0x20003394
 8002158:	42c80000 	.word	0x42c80000
 800215c:	45000000 	.word	0x45000000
 8002160:	20003240 	.word	0x20003240

08002164 <MX_DAC_Init>:
>>>>>>> parent of 9e7a168 (最终版本)

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
<<<<<<< HEAD
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
=======
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
=======
 800216a:	463b      	mov	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
<<<<<<< HEAD
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_DAC_Init+0x4c>)
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_DAC_Init+0x50>)
 80012d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_DAC_Init+0x4c>)
 80012d6:	f002 fdfe 	bl	8003ed6 <HAL_DAC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012e0:	f001 fcbc 	bl	8002c5c <Error_Handler>
=======
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <MX_DAC_Init+0x4c>)
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <MX_DAC_Init+0x50>)
 8002176:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <MX_DAC_Init+0x4c>)
 800217a:	f001 fdc2 	bl	8003d02 <HAL_DAC_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002184:	f000 f9b6 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
<<<<<<< HEAD
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_DAC_Init+0x4c>)
 80012f4:	f002 fe88 	bl	8004008 <HAL_DAC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012fe:	f001 fcad 	bl	8002c5c <Error_Handler>
=======
 8002188:	2300      	movs	r3, #0
 800218a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	4806      	ldr	r0, [pc, #24]	; (80021b0 <MX_DAC_Init+0x4c>)
 8002198:	f001 fe4c 	bl	8003e34 <HAL_DAC_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80021a2:	f000 f9a7 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
<<<<<<< HEAD
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200002bc 	.word	0x200002bc
 8001310:	40007400 	.word	0x40007400

08001314 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_DAC_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d127      	bne.n	8001386 <HAL_DAC_MspInit+0x72>
=======
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20003240 	.word	0x20003240
 80021b4:	40007400 	.word	0x40007400

080021b8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_DAC_MspInit+0x7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d127      	bne.n	800222a <HAL_DAC_MspInit+0x72>
>>>>>>> parent of 9e7a168 (最终版本)
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
<<<<<<< HEAD
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_DAC_MspInit+0x80>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_DAC_MspInit+0x80>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
=======
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_DAC_MspInit+0x80>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_DAC_MspInit+0x80>)
 80021e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_DAC_MspInit+0x80>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_DAC_MspInit+0x80>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_DAC_MspInit+0x80>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_DAC_MspInit+0x80>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< HEAD
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_DAC_MspInit+0x84>)
 8001382:	f003 fa93 	bl	80048ac <HAL_GPIO_Init>
=======
 8002212:	2310      	movs	r3, #16
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002216:	2303      	movs	r3, #3
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_DAC_MspInit+0x84>)
 8002226:	f002 fa57 	bl	80046d8 <HAL_GPIO_Init>
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40007400 	.word	0x40007400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <MX_DMA_Init>:
=======
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40007400 	.word	0x40007400
 8002238:	40023800 	.word	0x40023800
 800223c:	40020000 	.word	0x40020000

08002240 <MX_DMA_Init>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< HEAD
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
=======
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_DMA_Init+0x3c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <MX_DMA_Init+0x3c>)
 8002250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_DMA_Init+0x3c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
<<<<<<< HEAD
 80013be:	2200      	movs	r2, #0
 80013c0:	2101      	movs	r1, #1
 80013c2:	2038      	movs	r0, #56	; 0x38
 80013c4:	f002 fd51 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013c8:	2038      	movs	r0, #56	; 0x38
 80013ca:	f002 fd6a 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <PI_Control>:
#include "main.h"

pid_p pid_Udc,pid_IoIVd,pid_IoIVq;
/*控制设计*/
float ref_Udc=50,ref_IoIVd=0.5,ref_Isqrms=0,ref_IoIVq=0;
void PI_Control(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	ed2d 8b02 	vpush	{d8}
 80013e2:	af00      	add	r7, sp, #0
	//电压外环
	ref_IoIVd=0.7f*ref_IoIVd+0.3f*PID_realize(&pid_Udc,ref_Udc,Udc);
 80013e4:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <PI_Control+0x104>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80014e4 <PI_Control+0x108>
 80013ee:	ee27 8a87 	vmul.f32	s16, s15, s14
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <PI_Control+0x10c>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <PI_Control+0x110>)
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	eef0 0a47 	vmov.f32	s1, s14
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	483a      	ldr	r0, [pc, #232]	; (80014f0 <PI_Control+0x114>)
 8001408:	f000 fea7 	bl	800215a <PID_realize>
 800140c:	eef0 7a40 	vmov.f32	s15, s0
 8001410:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80014f4 <PI_Control+0x118>
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	ee78 7a27 	vadd.f32	s15, s16, s15
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <PI_Control+0x104>)
 800141e:	edc3 7a00 	vstr	s15, [r3]
	Control_Value_Set();
 8001422:	f000 f881 	bl	8001528 <Control_Value_Set>
//    		//电流环测试
//    		ref_IoIVd=0.4;
//    		ref_IoIVq=2.8;
//        	UIq=PID_realize(&pid_IoIVq,ref_IoIVq,IoIVq);
//        	UId=PID_realize(&pid_IoIVd,ref_IoIVd,IoIVd);
	UId=PID_realize(&pid_IoIVd,ref_IoIVd,IoIVd);
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <PI_Control+0x104>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <PI_Control+0x11c>)
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	eef0 0a47 	vmov.f32	s1, s14
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	4830      	ldr	r0, [pc, #192]	; (80014fc <PI_Control+0x120>)
 800143c:	f000 fe8d 	bl	800215a <PID_realize>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <PI_Control+0x124>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
//    	UIq=PID_realize(&pid_IoIVq,ref_Isq,Isq);
	UIq=PID_realize(&pid_IoIVq,ref_IoIVq,IoIVq);
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <PI_Control+0x128>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <PI_Control+0x12c>)
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	eef0 0a47 	vmov.f32	s1, s14
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	482b      	ldr	r0, [pc, #172]	; (800150c <PI_Control+0x130>)
 8001460:	f000 fe7b 	bl	800215a <PID_realize>
 8001464:	eef0 7a40 	vmov.f32	s15, s0
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <PI_Control+0x134>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
	//前馈和限制
	Dd=(Usd+IoIVq*Xs-UId)/Udc;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <PI_Control+0x12c>)
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <PI_Control+0x138>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <PI_Control+0x13c>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <PI_Control+0x124>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <PI_Control+0x110>)
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <PI_Control+0x140>)
 800149e:	edc3 7a00 	vstr	s15, [r3]
	Dq=(Usq-IoIVd*Xs-UIq)/Udc;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <PI_Control+0x144>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <PI_Control+0x11c>)
 80014aa:	edd3 6a00 	vldr	s13, [r3]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <PI_Control+0x138>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <PI_Control+0x134>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <PI_Control+0x110>)
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <PI_Control+0x148>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
//	    	if(Dq>0.8)Dq=0.8;
//	    	else if (Dq<-0.8) Dq=-0.8;
=======
 8002262:	2200      	movs	r2, #0
 8002264:	2101      	movs	r1, #1
 8002266:	2038      	movs	r0, #56	; 0x38
 8002268:	f001 fd15 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800226c:	2038      	movs	r0, #56	; 0x38
 800226e:	f001 fd2e 	bl	8003cce <HAL_NVIC_EnableIRQ>

}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b33      	ldr	r3, [pc, #204]	; (8002368 <MX_GPIO_Init+0xe8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a24      	ldr	r2, [pc, #144]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_GPIO_Init+0xe8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_GPIO_Init+0xe8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <MX_GPIO_Init+0xe8>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_GPIO_Init+0xe8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2102      	movs	r1, #2
 8002326:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_GPIO_Init+0xec>)
 8002328:	f002 fb8a 	bl	8004a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800232c:	233c      	movs	r3, #60	; 0x3c
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_GPIO_Init+0xf0>)
 8002340:	f002 f9ca 	bl	80046d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002344:	2302      	movs	r3, #2
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_GPIO_Init+0xec>)
 800235c:	f002 f9bc 	bl	80046d8 <HAL_GPIO_Init>
>>>>>>> parent of 9e7a168 (最终版本)

//    	开环测试
//    	Dd=0.5;Dq=0;
}
<<<<<<< HEAD
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	ecbd 8b02 	vpop	{d8}
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000004 	.word	0x20000004
 80014e4:	3f333333 	.word	0x3f333333
 80014e8:	20000000 	.word	0x20000000
 80014ec:	200003e8 	.word	0x200003e8
 80014f0:	200002d0 	.word	0x200002d0
 80014f4:	3e99999a 	.word	0x3e99999a
 80014f8:	20003304 	.word	0x20003304
 80014fc:	20000308 	.word	0x20000308
 8001500:	20003314 	.word	0x20003314
 8001504:	2000037c 	.word	0x2000037c
 8001508:	20003308 	.word	0x20003308
 800150c:	20000340 	.word	0x20000340
 8001510:	20003318 	.word	0x20003318
 8001514:	20000008 	.word	0x20000008
 8001518:	200032f4 	.word	0x200032f4
 800151c:	2000331c 	.word	0x2000331c
 8001520:	200032f8 	.word	0x200032f8
 8001524:	20003320 	.word	0x20003320

08001528 <Control_Value_Set>:

void Control_Value_Set(){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	//设定电流q轴值 本来是1.414 因为校正电流变为1.414*0.993 使得电流可以在2A时约对应的是2A，0.01f作为偏置使得在初始状态下无功最小,然后做拟合
	if(ref_Isqrms==0){
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <Control_Value_Set+0x6c>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	d10e      	bne.n	800155a <Control_Value_Set+0x32>
		ref_IoIVq=Usd*0.00345f+0.01f;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <Control_Value_Set+0x70>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800159c <Control_Value_Set+0x74>
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015a0 <Control_Value_Set+0x78>
 800154e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <Control_Value_Set+0x7c>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
	}else
		ref_IoIVq=Usd*0.00345f+ref_Isqrms*1.3632f-0.1263f;
}
 8001558:	e016      	b.n	8001588 <Control_Value_Set+0x60>
		ref_IoIVq=Usd*0.00345f+ref_Isqrms*1.3632f-0.1263f;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <Control_Value_Set+0x70>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800159c <Control_Value_Set+0x74>
 8001564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <Control_Value_Set+0x6c>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80015a8 <Control_Value_Set+0x80>
 8001572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015ac <Control_Value_Set+0x84>
 800157e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <Control_Value_Set+0x7c>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000378 	.word	0x20000378
 8001598:	200032f4 	.word	0x200032f4
 800159c:	3b621965 	.word	0x3b621965
 80015a0:	3c23d70a 	.word	0x3c23d70a
 80015a4:	2000037c 	.word	0x2000037c
 80015a8:	3fae7d56 	.word	0x3fae7d56
 80015ac:	3e0154ca 	.word	0x3e0154ca

080015b0 <PWM_Output>:
 *  Created on: Jul 25, 2022
 *      Author: EVA
 */
#include "main.h"

void PWM_Output(){
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
	//占空比Park逆变换
	arm_inv_park_f32(Dd,Dq,&Dalpha,&Dbeta,sin_thetas,cos_thetas);
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <PWM_Output+0xe4>)
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <PWM_Output+0xe8>)
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <PWM_Output+0xec>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <PWM_Output+0xf0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6178      	str	r0, [r7, #20]
 80015c8:	6139      	str	r1, [r7, #16]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <PWM_Output+0xf4>)
 80015cc:	60f9      	str	r1, [r7, #12]
 80015ce:	4936      	ldr	r1, [pc, #216]	; (80016a8 <PWM_Output+0xf8>)
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 80015d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80015da:	edd7 7a00 	vldr	s15, [r7]
 80015de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80015f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	edd7 6a04 	vldr	s13, [r7, #16]
 8001608:	edd7 7a00 	vldr	s15, [r7]
 800160c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	edc3 7a00 	vstr	s15, [r3]
  }
 800161a:	bf00      	nop
	//单极性倍频输出
	D1=(1+Dalpha)*0.5f;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <PWM_Output+0xf4>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800162a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <PWM_Output+0xfc>)
 8001634:	edc3 7a00 	vstr	s15, [r3]
	D2=(1-Dalpha)*0.5f;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <PWM_Output+0xf4>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <PWM_Output+0x100>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
	TIM1->CCR1=Tim2_ARR*D1;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <PWM_Output+0xfc>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80016b4 <PWM_Output+0x104>
 800165e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <PWM_Output+0x108>)
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=Tim2_ARR*D2;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <PWM_Output+0x100>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80016b4 <PWM_Output+0x104>
 8001678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <PWM_Output+0x108>)
 800167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001682:	ee17 2a90 	vmov	r2, s15
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000331c 	.word	0x2000331c
 8001698:	20003320 	.word	0x20003320
 800169c:	2000330c 	.word	0x2000330c
 80016a0:	20003310 	.word	0x20003310
 80016a4:	20003324 	.word	0x20003324
 80016a8:	20003328 	.word	0x20003328
 80016ac:	2000332c 	.word	0x2000332c
 80016b0:	20003330 	.word	0x20003330
 80016b4:	43c80000 	.word	0x43c80000
 80016b8:	40010000 	.word	0x40010000

080016bc <ADC_DAC_get_and_show>:
/*ADC采样后真实的电路参数*/
float Isd_temp,Isq_temp;
float Isd_screen,Isq_screen;

void ADC_DAC_get_and_show()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	ADC_To_adx();
 80016c0:	f000 f82a 	bl	8001718 <ADC_To_adx>
	ADC_ad5_avg_Get();
 80016c4:	f000 f904 	bl	80018d0 <ADC_ad5_avg_Get>
	ADC_Real_Value_Get();
 80016c8:	f000 f948 	bl	800195c <ADC_Real_Value_Get>
	ADC_Queue_Save();
 80016cc:	f000 f9f2 	bl	8001ab4 <ADC_Queue_Save>
	ADC_Sine_Calculate();
 80016d0:	f000 fa1e 	bl	8001b10 <ADC_Sine_Calculate>
	ADC_Park_Transform();
 80016d4:	f000 fa3e 	bl	8001b54 <ADC_Park_Transform>
	ADC_Paremeters_Calc();
 80016d8:	f000 fb44 	bl	8001d64 <ADC_Paremeters_Calc>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048+100*IoIV);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <ADC_DAC_get_and_show+0x4c>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800170c <ADC_DAC_get_and_show+0x50>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001710 <ADC_DAC_get_and_show+0x54>
 80016ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <ADC_DAC_get_and_show+0x58>)
 8001700:	f002 fc5d 	bl	8003fbe <HAL_DAC_SetValue>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003ec 	.word	0x200003ec
 800170c:	42c80000 	.word	0x42c80000
 8001710:	45000000 	.word	0x45000000
 8001714:	200002bc 	.word	0x200002bc

08001718 <ADC_To_adx>:

void ADC_To_adx(){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 800171c:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <ADC_To_adx+0x190>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <ADC_To_adx+0x194>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <ADC_To_adx+0x198>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <ADC_To_adx+0x19c>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <ADC_To_adx+0x1a0>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4b60      	ldr	r3, [pc, #384]	; (80018bc <ADC_To_adx+0x1a4>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <ADC_To_adx+0x1a8>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <ADC_To_adx+0x1ac>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <ADC_To_adx+0x1b0>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e07f      	b.n	8001854 <ADC_To_adx+0x13c>
	{
			ad1 += ADC_Value[i++];
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <ADC_To_adx+0x190>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	b2d1      	uxtb	r1, r2
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <ADC_To_adx+0x190>)
 800175e:	7011      	strb	r1, [r2, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <ADC_To_adx+0x1b4>)
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <ADC_To_adx+0x194>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4413      	add	r3, r2
 800176e:	461a      	mov	r2, r3
 8001770:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <ADC_To_adx+0x194>)
 8001772:	601a      	str	r2, [r3, #0]
			ad2 += ADC_Value[i++];
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <ADC_To_adx+0x190>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	b2d1      	uxtb	r1, r2
 800177c:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <ADC_To_adx+0x190>)
 800177e:	7011      	strb	r1, [r2, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <ADC_To_adx+0x1b4>)
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <ADC_To_adx+0x198>)
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	4413      	add	r3, r2
 800178e:	461a      	mov	r2, r3
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <ADC_To_adx+0x198>)
 8001792:	601a      	str	r2, [r3, #0]
			ad3 += ADC_Value[i++];
 8001794:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <ADC_To_adx+0x190>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	b2d1      	uxtb	r1, r2
 800179c:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <ADC_To_adx+0x190>)
 800179e:	7011      	strb	r1, [r2, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <ADC_To_adx+0x1b4>)
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <ADC_To_adx+0x19c>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <ADC_To_adx+0x19c>)
 80017b2:	601a      	str	r2, [r3, #0]
			ad4 += ADC_Value[i++];
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <ADC_To_adx+0x190>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	b2d1      	uxtb	r1, r2
 80017bc:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <ADC_To_adx+0x190>)
 80017be:	7011      	strb	r1, [r2, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <ADC_To_adx+0x1b4>)
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <ADC_To_adx+0x1a0>)
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <ADC_To_adx+0x1a0>)
 80017d2:	601a      	str	r2, [r3, #0]
			ad5 += ADC_Value[i++];
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <ADC_To_adx+0x190>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	b2d1      	uxtb	r1, r2
 80017dc:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <ADC_To_adx+0x190>)
 80017de:	7011      	strb	r1, [r2, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <ADC_To_adx+0x1b4>)
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	4a34      	ldr	r2, [pc, #208]	; (80018bc <ADC_To_adx+0x1a4>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <ADC_To_adx+0x1a4>)
 80017f2:	601a      	str	r2, [r3, #0]
			ad6 += ADC_Value[i++];
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <ADC_To_adx+0x190>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	b2d1      	uxtb	r1, r2
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <ADC_To_adx+0x190>)
 80017fe:	7011      	strb	r1, [r2, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <ADC_To_adx+0x1b4>)
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <ADC_To_adx+0x1a8>)
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	4413      	add	r3, r2
 800180e:	461a      	mov	r2, r3
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <ADC_To_adx+0x1a8>)
 8001812:	601a      	str	r2, [r3, #0]
			ad7 += ADC_Value[i++];
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <ADC_To_adx+0x190>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	b2d1      	uxtb	r1, r2
 800181c:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <ADC_To_adx+0x190>)
 800181e:	7011      	strb	r1, [r2, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <ADC_To_adx+0x1b4>)
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <ADC_To_adx+0x1ac>)
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	4413      	add	r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <ADC_To_adx+0x1ac>)
 8001832:	601a      	str	r2, [r3, #0]
			ad8 += ADC_Value[i++];
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <ADC_To_adx+0x190>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	b2d1      	uxtb	r1, r2
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <ADC_To_adx+0x190>)
 800183e:	7011      	strb	r1, [r2, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <ADC_To_adx+0x1b4>)
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <ADC_To_adx+0x1b0>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <ADC_To_adx+0x1b0>)
 8001852:	601a      	str	r2, [r3, #0]
	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <ADC_To_adx+0x190>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b07      	cmp	r3, #7
 800185a:	f67f af7b 	bls.w	8001754 <ADC_To_adx+0x3c>
	}
	ad1/=(ADC_num/8);
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <ADC_To_adx+0x194>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <ADC_To_adx+0x194>)
 8001864:	6013      	str	r3, [r2, #0]
	ad2/=(ADC_num/8);
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <ADC_To_adx+0x198>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <ADC_To_adx+0x198>)
 800186c:	6013      	str	r3, [r2, #0]
	ad3/=(ADC_num/8);
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <ADC_To_adx+0x19c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <ADC_To_adx+0x19c>)
 8001874:	6013      	str	r3, [r2, #0]
	ad4/=(ADC_num/8);
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <ADC_To_adx+0x1a0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <ADC_To_adx+0x1a0>)
 800187c:	6013      	str	r3, [r2, #0]
	ad5/=(ADC_num/8);
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <ADC_To_adx+0x1a4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <ADC_To_adx+0x1a4>)
 8001884:	6013      	str	r3, [r2, #0]
	ad6/=(ADC_num/8);
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <ADC_To_adx+0x1a8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <ADC_To_adx+0x1a8>)
 800188c:	6013      	str	r3, [r2, #0]
	ad7/=(ADC_num/8);
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <ADC_To_adx+0x1ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <ADC_To_adx+0x1ac>)
 8001894:	6013      	str	r3, [r2, #0]
	ad8/=(ADC_num/8);
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <ADC_To_adx+0x1b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <ADC_To_adx+0x1b0>)
 800189c:	6013      	str	r3, [r2, #0]

}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	200003a0 	.word	0x200003a0
 80018ac:	200003a4 	.word	0x200003a4
 80018b0:	200003a8 	.word	0x200003a8
 80018b4:	200003ac 	.word	0x200003ac
 80018b8:	200003b0 	.word	0x200003b0
 80018bc:	200003b4 	.word	0x200003b4
 80018c0:	200003b8 	.word	0x200003b8
 80018c4:	200003bc 	.word	0x200003bc
 80018c8:	200003c0 	.word	0x200003c0
 80018cc:	20000380 	.word	0x20000380

080018d0 <ADC_ad5_avg_Get>:
const float ADC5_AVG_Weight = 50e-5;//=1/2000
float ad5_sum=0;
int ad5_avg=0;
int time=0;
int ad5_avg_flag=0;
void ADC_ad5_avg_Get(){
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	if(ad5_avg_flag==0){
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <ADC_ad5_avg_Get+0x70>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d12b      	bne.n	8001934 <ADC_ad5_avg_Get+0x64>
		time++;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <ADC_ad5_avg_Get+0x74>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <ADC_ad5_avg_Get+0x74>)
 80018e4:	6013      	str	r3, [r2, #0]
		ad5_sum+=(ad5-ad6)*ADC5_AVG_Weight;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <ADC_ad5_avg_Get+0x78>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <ADC_ad5_avg_Get+0x7c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001950 <ADC_ad5_avg_Get+0x80>
 80018fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <ADC_ad5_avg_Get+0x84>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <ADC_ad5_avg_Get+0x84>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
		if(time>=ADC5_AVG_NUM){
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <ADC_ad5_avg_Get+0x74>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001918:	4293      	cmp	r3, r2
 800191a:	db0b      	blt.n	8001934 <ADC_ad5_avg_Get+0x64>
			ad5_avg_flag=1;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <ADC_ad5_avg_Get+0x70>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
			ad5_avg=ad5_sum;
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <ADC_ad5_avg_Get+0x84>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192c:	ee17 2a90 	vmov	r2, s15
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <ADC_ad5_avg_Get+0x88>)
 8001932:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200003d8 	.word	0x200003d8
 8001944:	200003d4 	.word	0x200003d4
 8001948:	200003b4 	.word	0x200003b4
 800194c:	200003b8 	.word	0x200003b8
 8001950:	3a03126f 	.word	0x3a03126f
 8001954:	200003cc 	.word	0x200003cc
 8001958:	200003d0 	.word	0x200003d0

0800195c <ADC_Real_Value_Get>:
void ADC_Real_Value_Get(){
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	//	Us ad1-ad2 10kHz滤波器滤�??
	//	Us=0.8f*Us+0.2f*(ad1-ad2)/4096.0f*3.3f*18.292f*修正
		Us=0.8f*Us+0.2f*(ad1-ad2)*0.014745f;
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <ADC_Real_Value_Get+0xfc>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001a5c <ADC_Real_Value_Get+0x100>
 800196a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <ADC_Real_Value_Get+0x104>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <ADC_Real_Value_Get+0x108>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001a68 <ADC_Real_Value_Get+0x10c>
 8001984:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001988:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001a6c <ADC_Real_Value_Get+0x110>
 800198c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <ADC_Real_Value_Get+0xfc>)
 8001996:	edc3 7a00 	vstr	s15, [r3]

	//	Is ad3-ad4 10kHz滤波器滤�??
	//	Is=0.8f*Is+0.2f*((ad3-ad3_avg)/4096.0f*3.3f)*1.6835f*1.19;
		Is=0.8f*Is+0.2f*(ad3-ad4)*0.001614f;
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <ADC_Real_Value_Get+0x114>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001a5c <ADC_Real_Value_Get+0x100>
 80019a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <ADC_Real_Value_Get+0x118>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <ADC_Real_Value_Get+0x11c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ba:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001a68 <ADC_Real_Value_Get+0x10c>
 80019be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019c2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001a7c <ADC_Real_Value_Get+0x120>
 80019c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <ADC_Real_Value_Get+0x114>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]


	//	IoIV ad5-ad6 10kHz滤波 注意是负的！！！这个地方的符号要细致的看
	//	IoIV=0.8f*Is+0.2f*((ad5-ad6)/4096.0f*3.3f)*3.7037f;
		IoIV=0.7f*IoIV+0.3f*(ad5-ad6-ad5_avg)*-0.002984f;
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <ADC_Real_Value_Get+0x124>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001a84 <ADC_Real_Value_Get+0x128>
 80019de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <ADC_Real_Value_Get+0x12c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <ADC_Real_Value_Get+0x130>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <ADC_Real_Value_Get+0x134>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001a94 <ADC_Real_Value_Get+0x138>
 80019fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a02:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001a98 <ADC_Real_Value_Get+0x13c>
 8001a06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <ADC_Real_Value_Get+0x124>)
 8001a10:	edc3 7a00 	vstr	s15, [r3]
	//	Udc ad7-ad8
		//对母线直流电压用4kHz的低通滤波器进行滤波，对�????50Hz幅�?�差0.9999，角�????1°不到，应该可用，如果不行就用8kHz
	//	Udc=0.95f*Udc+0.05f*(ad4-ad5)/4096.0f*3.3f*26.49989f;
		Udc=0.95f*Udc+0.05f*(ad7-ad8)*0.021350f;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <ADC_Real_Value_Get+0x140>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001aa0 <ADC_Real_Value_Get+0x144>
 8001a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <ADC_Real_Value_Get+0x148>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <ADC_Real_Value_Get+0x14c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a34:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001aac <ADC_Real_Value_Get+0x150>
 8001a38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001ab0 <ADC_Real_Value_Get+0x154>
 8001a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <ADC_Real_Value_Get+0x140>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	200003e0 	.word	0x200003e0
 8001a5c:	3f4ccccd 	.word	0x3f4ccccd
 8001a60:	200003a4 	.word	0x200003a4
 8001a64:	200003a8 	.word	0x200003a8
 8001a68:	3e4ccccd 	.word	0x3e4ccccd
 8001a6c:	3c719503 	.word	0x3c719503
 8001a70:	200003e4 	.word	0x200003e4
 8001a74:	200003ac 	.word	0x200003ac
 8001a78:	200003b0 	.word	0x200003b0
 8001a7c:	3ad38cda 	.word	0x3ad38cda
 8001a80:	200003ec 	.word	0x200003ec
 8001a84:	3f333333 	.word	0x3f333333
 8001a88:	200003b4 	.word	0x200003b4
 8001a8c:	200003b8 	.word	0x200003b8
 8001a90:	200003d0 	.word	0x200003d0
 8001a94:	3e99999a 	.word	0x3e99999a
 8001a98:	bb438f36 	.word	0xbb438f36
 8001a9c:	200003e8 	.word	0x200003e8
 8001aa0:	3f733333 	.word	0x3f733333
 8001aa4:	200003bc 	.word	0x200003bc
 8001aa8:	200003c0 	.word	0x200003c0
 8001aac:	3d4ccccd 	.word	0x3d4ccccd
 8001ab0:	3caee632 	.word	0x3caee632

08001ab4 <ADC_Queue_Save>:
void ADC_Queue_Save(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	enQueue(&Us_queue,Us);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <ADC_Queue_Save+0x44>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 1a90 	vmov	r1, s15
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <ADC_Queue_Save+0x48>)
 8001ac8:	f000 fda0 	bl	800260c <enQueue>
	enQueue(&Is_queue,Is);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <ADC_Queue_Save+0x4c>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad6:	ee17 1a90 	vmov	r1, s15
 8001ada:	480a      	ldr	r0, [pc, #40]	; (8001b04 <ADC_Queue_Save+0x50>)
 8001adc:	f000 fd96 	bl	800260c <enQueue>
	enQueue(&IoIV_queue,IoIV);
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <ADC_Queue_Save+0x54>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aea:	ee17 1a90 	vmov	r1, s15
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <ADC_Queue_Save+0x58>)
 8001af0:	f000 fd8c 	bl	800260c <enQueue>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200003e0 	.word	0x200003e0
 8001afc:	200003f0 	.word	0x200003f0
 8001b00:	200003e4 	.word	0x200003e4
 8001b04:	20001398 	.word	0x20001398
 8001b08:	200003ec 	.word	0x200003ec
 8001b0c:	20002340 	.word	0x20002340

08001b10 <ADC_Sine_Calculate>:
void ADC_Sine_Calculate(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	//进行正弦运算 注意角度是弧度制 1.8us

	sin_thetas=arm_sin_f32(thetas);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <ADC_Sine_Calculate+0x38>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	f005 ff79 	bl	8007a14 <arm_sin_f32>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <ADC_Sine_Calculate+0x3c>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]
	cos_thetas=arm_cos_f32(thetas);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <ADC_Sine_Calculate+0x38>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	f005 ffb3 	bl	8007aa0 <arm_cos_f32>
 8001b3a:	eef0 7a40 	vmov.f32	s15, s0
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <ADC_Sine_Calculate+0x40>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20003338 	.word	0x20003338
 8001b4c:	2000330c 	.word	0x2000330c
 8001b50:	20003310 	.word	0x20003310

08001b54 <ADC_Park_Transform>:
void ADC_Park_Transform(){
 8001b54:	b480      	push	{r7}
 8001b56:	b093      	sub	sp, #76	; 0x4c
 8001b58:	af00      	add	r7, sp, #0
	//对输入电压�?�输入电流�?�Io电流进行Park运算，这�??100后续要变 1us

	arm_park_f32(Us,Us_queue.data[(Us_queue.rear-100+maxsize)%maxsize],
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <ADC_Park_Transform+0x1d4>)
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <ADC_Park_Transform+0x1d8>)
 8001b60:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001b64:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8001b68:	4b71      	ldr	r3, [pc, #452]	; (8001d30 <ADC_Park_Transform+0x1dc>)
 8001b6a:	fb83 0302 	smull	r0, r3, r3, r2
 8001b6e:	1198      	asrs	r0, r3, #6
 8001b70:	17d3      	asrs	r3, r2, #31
 8001b72:	1ac3      	subs	r3, r0, r3
 8001b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b78:	fb00 f303 	mul.w	r3, r0, r3
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <ADC_Park_Transform+0x1d8>)
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <ADC_Park_Transform+0x1e0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <ADC_Park_Transform+0x1e4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6179      	str	r1, [r7, #20]
 8001b96:	edc7 7a04 	vstr	s15, [r7, #16]
 8001b9a:	4968      	ldr	r1, [pc, #416]	; (8001d3c <ADC_Park_Transform+0x1e8>)
 8001b9c:	60f9      	str	r1, [r7, #12]
 8001b9e:	4968      	ldr	r1, [pc, #416]	; (8001d40 <ADC_Park_Transform+0x1ec>)
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001ba6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001baa:	edd7 7a00 	vldr	s15, [r7]
 8001bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb2:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8001bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bdc:	edd7 7a00 	vldr	s15, [r7]
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	edc3 7a00 	vstr	s15, [r3]
  }
 8001bee:	bf00      	nop
			&Usd,&Usq,sin_thetas,cos_thetas);

	//Isd、Isq过滤波器

	arm_park_f32(Is,Is_queue.data[(Is_queue.rear-100+maxsize)%maxsize],
 8001bf0:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <ADC_Park_Transform+0x1f0>)
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <ADC_Park_Transform+0x1f4>)
 8001bf6:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001bfa:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <ADC_Park_Transform+0x1dc>)
 8001c00:	fb83 0302 	smull	r0, r3, r3, r2
 8001c04:	1198      	asrs	r0, r3, #6
 8001c06:	17d3      	asrs	r3, r2, #31
 8001c08:	1ac3      	subs	r3, r0, r3
 8001c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0e:	fb00 f303 	mul.w	r3, r0, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <ADC_Park_Transform+0x1f4>)
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <ADC_Park_Transform+0x1e0>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <ADC_Park_Transform+0x1e4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001c2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001c30:	4946      	ldr	r1, [pc, #280]	; (8001d4c <ADC_Park_Transform+0x1f8>)
 8001c32:	6279      	str	r1, [r7, #36]	; 0x24
 8001c34:	4946      	ldr	r1, [pc, #280]	; (8001d50 <ADC_Park_Transform+0x1fc>)
 8001c36:	6239      	str	r1, [r7, #32]
 8001c38:	61fa      	str	r2, [r7, #28]
 8001c3a:	61bb      	str	r3, [r7, #24]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001c3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001c5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c62:	eeb1 7a67 	vneg.f32	s14, s15
 8001c66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	edc3 7a00 	vstr	s15, [r3]
  }
 8001c84:	bf00      	nop
			&Isd,&Isq,sin_thetas,cos_thetas);

	arm_park_f32(IoIV,IoIV_queue.data[(IoIV_queue.rear-100+maxsize)%maxsize],
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <ADC_Park_Transform+0x200>)
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <ADC_Park_Transform+0x204>)
 8001c8c:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001c90:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <ADC_Park_Transform+0x1dc>)
 8001c96:	fb83 0302 	smull	r0, r3, r3, r2
 8001c9a:	1198      	asrs	r0, r3, #6
 8001c9c:	17d3      	asrs	r3, r2, #31
 8001c9e:	1ac3      	subs	r3, r0, r3
 8001ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca4:	fb00 f303 	mul.w	r3, r0, r3
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <ADC_Park_Transform+0x204>)
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <ADC_Park_Transform+0x1e0>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <ADC_Park_Transform+0x1e4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6479      	str	r1, [r7, #68]	; 0x44
 8001cc2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8001cc6:	4925      	ldr	r1, [pc, #148]	; (8001d5c <ADC_Park_Transform+0x208>)
 8001cc8:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001cca:	4925      	ldr	r1, [pc, #148]	; (8001d60 <ADC_Park_Transform+0x20c>)
 8001ccc:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cce:	637a      	str	r2, [r7, #52]	; 0x34
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001cd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001cd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cde:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001ce2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001cf4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf8:	eeb1 7a67 	vneg.f32	s14, s15
 8001cfc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d04:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001d08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	edc3 7a00 	vstr	s15, [r3]
  }
 8001d1a:	bf00      	nop
			&IoIVd,&IoIVq,sin_thetas,cos_thetas);
}
 8001d1c:	bf00      	nop
 8001d1e:	374c      	adds	r7, #76	; 0x4c
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	200003e0 	.word	0x200003e0
 8001d2c:	200003f0 	.word	0x200003f0
 8001d30:	10624dd3 	.word	0x10624dd3
 8001d34:	2000330c 	.word	0x2000330c
 8001d38:	20003310 	.word	0x20003310
 8001d3c:	200032f4 	.word	0x200032f4
 8001d40:	200032f8 	.word	0x200032f8
 8001d44:	200003e4 	.word	0x200003e4
 8001d48:	20001398 	.word	0x20001398
 8001d4c:	200032fc 	.word	0x200032fc
 8001d50:	20003300 	.word	0x20003300
 8001d54:	200003ec 	.word	0x200003ec
 8001d58:	20002340 	.word	0x20002340
 8001d5c:	20003304 	.word	0x20003304
 8001d60:	20003308 	.word	0x20003308

08001d64 <ADC_Paremeters_Calc>:

void ADC_Paremeters_Calc(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	Usrms=0.995f*Usrms+0.005f*Usd*0.7071f;
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <ADC_Paremeters_Calc+0x10c>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001e74 <ADC_Paremeters_Calc+0x110>
 8001d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <ADC_Paremeters_Calc+0x114>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001e7c <ADC_Paremeters_Calc+0x118>
 8001d82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d86:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001e80 <ADC_Paremeters_Calc+0x11c>
 8001d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <ADC_Paremeters_Calc+0x10c>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	Isd_screen=0.997f*Isd_screen+0.003f*Isd;
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <ADC_Paremeters_Calc+0x120>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001e88 <ADC_Paremeters_Calc+0x124>
 8001da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <ADC_Paremeters_Calc+0x128>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e90 <ADC_Paremeters_Calc+0x12c>
 8001db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <ADC_Paremeters_Calc+0x120>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Isq_screen=0.997f*Isq_screen+0.003f*Isq;
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <ADC_Paremeters_Calc+0x130>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001e88 <ADC_Paremeters_Calc+0x124>
 8001dc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <ADC_Paremeters_Calc+0x134>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001e90 <ADC_Paremeters_Calc+0x12c>
 8001dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <ADC_Paremeters_Calc+0x130>)
 8001de0:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32(Isd_screen*Isd_screen+Isq_screen*Isq_screen,&Isrms);
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <ADC_Paremeters_Calc+0x120>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <ADC_Paremeters_Calc+0x120>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <ADC_Paremeters_Calc+0x130>)
 8001df6:	edd3 6a00 	vldr	s13, [r3]
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <ADC_Paremeters_Calc+0x130>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <ADC_Paremeters_Calc+0x138>)
 8001e0e:	603b      	str	r3, [r7, #0]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	db09      	blt.n	8001e32 <ADC_Paremeters_Calc+0xce>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001e1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e22:	f00a fbb3 	bl	800c58c <sqrtf>
 8001e26:	eef0 7a40 	vmov.f32	s15, s0
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001e30:	e004      	b.n	8001e3c <ADC_Paremeters_Calc+0xd8>
    }
    else
    {
      *pOut = 0.0f;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001e3a:	bf00      	nop
	PF=Isd_screen/Isrms;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <ADC_Paremeters_Calc+0x120>)
 8001e3e:	edd3 6a00 	vldr	s13, [r3]
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <ADC_Paremeters_Calc+0x138>)
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <ADC_Paremeters_Calc+0x13c>)
 8001e4e:	edc3 7a00 	vstr	s15, [r3]
	Isrms*=0.7071f;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <ADC_Paremeters_Calc+0x138>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001e80 <ADC_Paremeters_Calc+0x11c>
 8001e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <ADC_Paremeters_Calc+0x138>)
 8001e62:	edc3 7a00 	vstr	s15, [r3]
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200032e8 	.word	0x200032e8
 8001e74:	3f7eb852 	.word	0x3f7eb852
 8001e78:	200032f4 	.word	0x200032f4
 8001e7c:	3ba3d70a 	.word	0x3ba3d70a
 8001e80:	3f350481 	.word	0x3f350481
 8001e84:	200003c4 	.word	0x200003c4
 8001e88:	3f7f3b64 	.word	0x3f7f3b64
 8001e8c:	200032fc 	.word	0x200032fc
 8001e90:	3b449ba6 	.word	0x3b449ba6
 8001e94:	200003c8 	.word	0x200003c8
 8001e98:	20003300 	.word	0x20003300
 8001e9c:	200032ec 	.word	0x200032ec
 8001ea0:	200032f0 	.word	0x200032f0
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <Clock_Timer>:
 *      Author: EVA
 */
#include "main.h"

int time_Tim1=0;
void Clock_Timer(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	time_Tim1++;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <Clock_Timer+0x50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <Clock_Timer+0x50>)
 8001eb4:	6013      	str	r3, [r2, #0]
	if(time_Tim1>Control_Frequency){
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <Clock_Timer+0x50>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	dd12      	ble.n	8001ee8 <Clock_Timer+0x40>
		time_Tim1-=Control_Frequency;
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <Clock_Timer+0x50>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	a308      	add	r3, pc, #32	; (adr r3, 8001ef0 <Clock_Timer+0x48>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe f9d9 	bl	8000288 <__aeabi_dsub>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe3b 	bl	8000b58 <__aeabi_d2iz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <Clock_Timer+0x50>)
 8001ee6:	6013      	str	r3, [r2, #0]
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	40d38800 	.word	0x40d38800
 8001ef8:	200003dc 	.word	0x200003dc

08001efc <Key_Clock>:
 *  Created on: Jul 25, 2022
 *      Author: EVA
 */
#include "main.h"

void Key_Clock(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	if(time_Tim1%(4000)==0){
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <Key_Clock+0x2c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <Key_Clock+0x30>)
 8001f06:	fb83 1302 	smull	r1, r3, r3, r2
 8001f0a:	1219      	asrs	r1, r3, #8
 8001f0c:	17d3      	asrs	r3, r2, #31
 8001f0e:	1acb      	subs	r3, r1, r3
 8001f10:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <Key_Clock+0x26>
		Key_Detect();
 8001f1e:	f000 f807 	bl	8001f30 <Key_Detect>
	}
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200003dc 	.word	0x200003dc
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <Key_Detect>:

void Key_Detect(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001f34:	2104      	movs	r1, #4
 8001f36:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <Key_Detect+0x78>)
 8001f38:	f002 fe54 	bl	8004be4 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <Key_Detect+0x26>
		ref_Isqrms+=0.1f;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <Key_Detect+0x7c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001fb0 <Key_Detect+0x80>
 8001f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <Key_Detect+0x7c>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001f56:	2108      	movs	r1, #8
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <Key_Detect+0x78>)
 8001f5a:	f002 fe43 	bl	8004be4 <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <Key_Detect+0x48>
		ref_Isqrms-=0.1f;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <Key_Detect+0x7c>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001fb0 <Key_Detect+0x80>
 8001f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <Key_Detect+0x7c>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)== GPIO_PIN_RESET){
 8001f78:	2120      	movs	r1, #32
 8001f7a:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <Key_Detect+0x78>)
 8001f7c:	f002 fe32 	bl	8004be4 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <Key_Detect+0x5e>
		ref_Isqrms=0;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <Key_Detect+0x7c>)
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_4)== GPIO_PIN_RESET){
 8001f8e:	2110      	movs	r1, #16
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <Key_Detect+0x78>)
 8001f92:	f002 fe27 	bl	8004be4 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <Key_Detect+0x74>
		ref_Isqrms=2;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <Key_Detect+0x7c>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	20000378 	.word	0x20000378
 8001fb0:	3dcccccd 	.word	0x3dcccccd

08001fb4 <PID_Limit>:
#include <eva_pid.h>
=======
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000
 8002370:	40021000 	.word	0x40021000

08002374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002378:	f000 ff0a 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800237c:	f000 f850 	bl	8002420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002380:	f7ff ff7e 	bl	8002280 <MX_GPIO_Init>
  MX_DMA_Init();
 8002384:	f7ff ff5c 	bl	8002240 <MX_DMA_Init>
  MX_ADC1_Init();
 8002388:	f7ff f9ea 	bl	8001760 <MX_ADC1_Init>
  MX_TIM1_Init();
 800238c:	f000 fcd4 	bl	8002d38 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002390:	f000 fd7e 	bl	8002e90 <MX_TIM2_Init>
  MX_DAC_Init();
 8002394:	f7ff fee6 	bl	8002164 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8002398:	f000 fe44 	bl	8003024 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800239c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a0:	f000 ff68 	bl	8003274 <HAL_Delay>
	printf("BL(200);\r\n");
 80023a4:	4812      	ldr	r0, [pc, #72]	; (80023f0 <main+0x7c>)
 80023a6:	f006 f9fd 	bl	80087a4 <puts>
	HAL_Delay(40);
 80023aa:	2028      	movs	r0, #40	; 0x28
 80023ac:	f000 ff62 	bl	8003274 <HAL_Delay>
//  Keyboard_Init();


  //TIM中断控制程序打开
  HAL_TIM_Base_Start_IT(&htim2);
 80023b0:	4810      	ldr	r0, [pc, #64]	; (80023f4 <main+0x80>)
 80023b2:	f003 f823 	bl	80053fc <HAL_TIM_Base_Start_IT>
  //ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, ADC_num);
 80023b6:	2208      	movs	r2, #8
 80023b8:	490f      	ldr	r1, [pc, #60]	; (80023f8 <main+0x84>)
 80023ba:	4810      	ldr	r0, [pc, #64]	; (80023fc <main+0x88>)
 80023bc:	f000 ffc2 	bl	8003344 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80023c0:	2100      	movs	r1, #0
 80023c2:	480f      	ldr	r0, [pc, #60]	; (8002400 <main+0x8c>)
 80023c4:	f001 fcbf 	bl	8003d46 <HAL_DAC_Start>

  //注意KPKI 在幅值为1时根据Simulink得到对应的是314 1725，可以根据此来定
  //20Vp Vs 20 100, Reset 才能正常使用10V时，就做了延�??????
  PID_init(&PLL,20,180,0,500,100,314,Control_Time);
 80023c8:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8002404 <main+0x90>
 80023cc:	eddf 2a0e 	vldr	s5, [pc, #56]	; 8002408 <main+0x94>
 80023d0:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 800240c <main+0x98>
 80023d4:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8002410 <main+0x9c>
 80023d8:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8002414 <main+0xa0>
 80023dc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002418 <main+0xa4>
 80023e0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <main+0xa8>)
 80023e6:	f000 f8d5 	bl	8002594 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Screen_Print();
 80023ea:	f000 fa1b 	bl	8002824 <Screen_Print>
 80023ee:	e7fc      	b.n	80023ea <main+0x76>
 80023f0:	0800c1f0 	.word	0x0800c1f0
 80023f4:	200033f4 	.word	0x200033f4
 80023f8:	20003150 	.word	0x20003150
 80023fc:	20003174 	.word	0x20003174
 8002400:	20003240 	.word	0x20003240
 8002404:	3851b717 	.word	0x3851b717
 8002408:	439d0000 	.word	0x439d0000
 800240c:	42c80000 	.word	0x42c80000
 8002410:	43fa0000 	.word	0x43fa0000
 8002414:	00000000 	.word	0x00000000
 8002418:	43340000 	.word	0x43340000
 800241c:	20003298 	.word	0x20003298

08002420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	; 0x50
 8002424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002426:	f107 0320 	add.w	r3, r7, #32
 800242a:	2230      	movs	r2, #48	; 0x30
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fa06 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <SystemClock_Config+0xcc>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <SystemClock_Config+0xcc>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <SystemClock_Config+0xcc>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <SystemClock_Config+0xd0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <SystemClock_Config+0xd0>)
 800246a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <SystemClock_Config+0xd0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247c:	2301      	movs	r3, #1
 800247e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002486:	2302      	movs	r3, #2
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002490:	2308      	movs	r3, #8
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 8002494:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800249a:	2302      	movs	r3, #2
 800249c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800249e:	2304      	movs	r3, #4
 80024a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fae4 	bl	8004a74 <HAL_RCC_OscConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024b2:	f000 f81f 	bl	80024f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b6:	230f      	movs	r3, #15
 80024b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ba:	2302      	movs	r3, #2
 80024bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	2105      	movs	r1, #5
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fd45 	bl	8004f64 <HAL_RCC_ClockConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024e0:	f000 f808 	bl	80024f4 <Error_Handler>
  }
}
 80024e4:	bf00      	nop
 80024e6:	3750      	adds	r7, #80	; 0x50
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40007000 	.word	0x40007000

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	e7fe      	b.n	80024fc <Error_Handler+0x8>
	...

08002500 <PID_Limit>:
#include "pid.h"
>>>>>>> parent of 9e7a168 (最终版本)
#include "main.h"


void PID_Limit(pid_p *pid)
{
<<<<<<< HEAD
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	if(pid->result > pid->max_output)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	dd14      	ble.n	8001ffc <PID_Limit+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	481a      	ldr	r0, [pc, #104]	; (8002044 <PID_Limit+0x90>)
 8001fda:	f002 fe1b 	bl	8004c14 <HAL_GPIO_WritePin>
		pid->integral=pid->max_output_integral;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	621a      	str	r2, [r3, #32]
		pid->result =pid->max_output;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	4813      	ldr	r0, [pc, #76]	; (8002044 <PID_Limit+0x90>)
 8001ff6:	f002 fe0d 	bl	8004c14 <HAL_GPIO_WritePin>
=======
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if(pid->result > pid->max_output)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	ed93 7a07 	vldr	s14, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd14      	ble.n	8002548 <PID_Limit+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <PID_Limit+0x90>)
 8002526:	f002 fa8b 	bl	8004a40 <HAL_GPIO_WritePin>
		pid->integral=pid->max_output_integral;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	621a      	str	r2, [r3, #32]
		pid->result =pid->max_output;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <PID_Limit+0x90>)
 8002542:	f002 fa7d 	bl	8004a40 <HAL_GPIO_WritePin>
>>>>>>> parent of 9e7a168 (最终版本)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
		pid->integral=pid->min_out_integral;
		pid->result=pid->min_output;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
	}
}
<<<<<<< HEAD
 8001ffa:	e01f      	b.n	800203c <PID_Limit+0x88>
	else if(pid->result < pid->min_output){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	ed93 7a07 	vldr	s14, [r3, #28]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	d400      	bmi.n	8002014 <PID_Limit+0x60>
}
 8002012:	e013      	b.n	800203c <PID_Limit+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <PID_Limit+0x90>)
 800201c:	f002 fdfa 	bl	8004c14 <HAL_GPIO_WritePin>
		pid->integral=pid->min_out_integral;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	621a      	str	r2, [r3, #32]
		pid->result=pid->min_output;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <PID_Limit+0x90>)
 8002038:	f002 fdec 	bl	8004c14 <HAL_GPIO_WritePin>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40020800 	.word	0x40020800

08002048 <PID_init>:

void PID_init(pid_p *pid,float kp,float ki, float kd,float max_output,float min_output, float initial_result,float Ts)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	61f8      	str	r0, [r7, #28]
 8002050:	ed87 0a06 	vstr	s0, [r7, #24]
 8002054:	edc7 0a05 	vstr	s1, [r7, #20]
 8002058:	ed87 1a04 	vstr	s2, [r7, #16]
 800205c:	edc7 1a03 	vstr	s3, [r7, #12]
 8002060:	ed87 2a02 	vstr	s4, [r7, #8]
 8002064:	edc7 2a01 	vstr	s5, [r7, #4]
 8002068:	ed87 3a00 	vstr	s6, [r7]
    //printf("PID_init begin \n");
    pid->REF= 0.0f;		  	// ????????
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
    pid->ACTUAL= 0.0f;			// adc?????
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    pid->err= 0.0f;				    // ???????????
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
    pid->err_last=0.0f;			    // ??????
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
    pid->integral= 0.0f;			  	// ???
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
    pid->Kp= kp;				    // ????
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	611a      	str	r2, [r3, #16]
    pid->Ki= ki*Ts;				    // ????
 800209a:	ed97 7a05 	vldr	s14, [r7, #20]
 800209e:	edd7 7a00 	vldr	s15, [r7]
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	edc3 7a05 	vstr	s15, [r3, #20]
    pid->Kd= kd;				    // ????
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	619a      	str	r2, [r3, #24]
    pid->result=0;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
    //printf("PID_init end \n");
    pid->max_output=max_output;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    pid->min_output=min_output;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
    pid->max_output_integral=pid->max_output/pid->Ki;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80020d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pid->min_out_integral=pid->min_output/pid->Ki;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pid->integral=initial_result/ki;
 80020f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80020f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	ed93 7a04 	vldr	s14, [r3, #16]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	edd3 6a05 	vldr	s13, [r3, #20]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	edd3 6a06 	vldr	s13, [r3, #24]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	ed93 6a02 	vldr	s12, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	edd3 7a03 	vldr	s15, [r3, #12]
 800213a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	edc3 7a07 	vstr	s15, [r3, #28]
    PID_Limit(pid);
 800214c:	69f8      	ldr	r0, [r7, #28]
 800214e:	f7ff ff31 	bl	8001fb4 <PID_Limit>
}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <PID_realize>:

float PID_realize(pid_p *pid, float vref, float v_now)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	ed87 0a02 	vstr	s0, [r7, #8]
 8002166:	edc7 0a01 	vstr	s1, [r7, #4]

    pid->REF = vref;			// ???????
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	601a      	str	r2, [r3, #0]
    pid->ACTUAL = v_now;	// ?????? = ADC_Value * 3.3f/ 4096
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]
    pid->err =   pid->REF - pid->ACTUAL;	//????
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edc3 7a02 	vstr	s15, [r3, #8]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	edd3 7a02 	vldr	s15, [r3, #8]
 8002198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	edd3 6a05 	vldr	s13, [r3, #20]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	edd3 6a06 	vldr	s13, [r3, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	ed93 6a02 	vldr	s12, [r3, #8]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	edd3 7a03 	vldr	s15, [r3, #12]
 80021c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edc3 7a07 	vstr	s15, [r3, #28]
    pid->integral += pid->err;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->err_last = pid->err;				//???????
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	60da      	str	r2, [r3, #12]
    PID_Limit(pid);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fede 	bl	8001fb4 <PID_Limit>
    return pid->result;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	ee07 3a90 	vmov	s15, r3
}
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	0000      	movs	r0, r0
 800220c:	0000      	movs	r0, r0
	...

08002210 <PLL_Realize>:
int flag_PLL=0;
int flag_Start_Running=0;



void PLL_Realize(){
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	ed2d 8b02 	vpush	{d8}
 8002216:	af00      	add	r7, sp, #0
	//    	PLL锁相，先得角速度再积分，角度大于2pi则减
	//    	ws加一个滤波器，滤出高频分量，用2kHz滤波器 4us
	    	ws=0.9f*ws+0.1f*PID_realize(&PLL,0,-Usq);
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <PLL_Realize+0xc8>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80022dc <PLL_Realize+0xcc>
 8002222:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <PLL_Realize+0xd0>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eef1 7a67 	vneg.f32	s15, s15
 8002230:	eef0 0a67 	vmov.f32	s1, s15
 8002234:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80022e4 <PLL_Realize+0xd4>
 8002238:	482b      	ldr	r0, [pc, #172]	; (80022e8 <PLL_Realize+0xd8>)
 800223a:	f7ff ff8e 	bl	800215a <PID_realize>
 800223e:	eef0 7a40 	vmov.f32	s15, s0
 8002242:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80022ec <PLL_Realize+0xdc>
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <PLL_Realize+0xc8>)
 8002250:	edc3 7a00 	vstr	s15, [r3]
	    	thetas+=ws*Control_Time;
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <PLL_Realize+0xe0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f975 	bl	8000548 <__aeabi_f2d>
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <PLL_Realize+0xc8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f96e 	bl	8000548 <__aeabi_f2d>
 800226c:	a318      	add	r3, pc, #96	; (adr r3, 80022d0 <PLL_Realize+0xc0>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f9c1 	bl	80005f8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f7fe f805 	bl	800028c <__adddf3>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fcad 	bl	8000be8 <__aeabi_d2f>
 800228e:	4603      	mov	r3, r0
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <PLL_Realize+0xe0>)
 8002292:	6013      	str	r3, [r2, #0]
	    	if(thetas>=2*PI){thetas-=2*PI;}
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <PLL_Realize+0xe0>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80022f4 <PLL_Realize+0xe4>
 800229e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	db09      	blt.n	80022bc <PLL_Realize+0xac>
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <PLL_Realize+0xe0>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80022f4 <PLL_Realize+0xe4>
 80022b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <PLL_Realize+0xe0>)
 80022b8:	edc3 7a00 	vstr	s15, [r3]
	//    	判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
	//    	如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
	    	PLL_Success_Detect();
 80022bc:	f000 f81c 	bl	80022f8 <PLL_Success_Detect>
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	ecbd 8b02 	vpop	{d8}
 80022c8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w
 80022d0:	eb1c432d 	.word	0xeb1c432d
 80022d4:	3f0a36e2 	.word	0x3f0a36e2
 80022d8:	20003334 	.word	0x20003334
 80022dc:	3f666666 	.word	0x3f666666
 80022e0:	200032f8 	.word	0x200032f8
 80022e4:	00000000 	.word	0x00000000
 80022e8:	2000333c 	.word	0x2000333c
 80022ec:	3dcccccd 	.word	0x3dcccccd
 80022f0:	20003338 	.word	0x20003338
 80022f4:	40c90fdb 	.word	0x40c90fdb

080022f8 <PLL_Success_Detect>:

void PLL_Success_Detect(void){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	//判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
	//如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
	if(time_Point_PLL>=Control_Frequency)
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <PLL_Success_Detect+0x108>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002304:	4293      	cmp	r3, r2
 8002306:	dd12      	ble.n	800232e <PLL_Success_Detect+0x36>
		time_Point_PLL-=Control_Frequency;
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <PLL_Success_Detect+0x108>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f909 	bl	8000524 <__aeabi_i2d>
 8002312:	a335      	add	r3, pc, #212	; (adr r3, 80023e8 <PLL_Success_Detect+0xf0>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fd ffb6 	bl	8000288 <__aeabi_dsub>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc18 	bl	8000b58 <__aeabi_d2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <PLL_Success_Detect+0x108>)
 800232c:	6013      	str	r3, [r2, #0]
	if(flag_Start_Running==0){
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <PLL_Success_Detect+0x10c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d153      	bne.n	80023de <PLL_Success_Detect+0xe6>
		if(flag_PLL<10){
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <PLL_Success_Detect+0x110>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b09      	cmp	r3, #9
 800233c:	dc4c      	bgt.n	80023d8 <PLL_Success_Detect+0xe0>
			if(time_Tim1==time_Point_PLL){
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <PLL_Success_Detect+0x114>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <PLL_Success_Detect+0x108>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d149      	bne.n	80023de <PLL_Success_Detect+0xe6>
				if((Usq<0.2||Usq>-0.2)&&(Usd>5||Usd<-5)){
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <PLL_Success_Detect+0x118>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8fa 	bl	8000548 <__aeabi_f2d>
 8002354:	a326      	add	r3, pc, #152	; (adr r3, 80023f0 <PLL_Success_Detect+0xf8>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe fbbf 	bl	8000adc <__aeabi_dcmplt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10c      	bne.n	800237e <PLL_Success_Detect+0x86>
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <PLL_Success_Detect+0x118>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8ed 	bl	8000548 <__aeabi_f2d>
 800236e:	a322      	add	r3, pc, #136	; (adr r3, 80023f8 <PLL_Success_Detect+0x100>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01f      	beq.n	80023be <PLL_Success_Detect+0xc6>
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <PLL_Success_Detect+0x11c>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	dc09      	bgt.n	80023a6 <PLL_Success_Detect+0xae>
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <PLL_Success_Detect+0x11c>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800239c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	d50b      	bpl.n	80023be <PLL_Success_Detect+0xc6>
					time_Point_PLL+=400;
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <PLL_Success_Detect+0x108>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <PLL_Success_Detect+0x108>)
 80023b0:	6013      	str	r3, [r2, #0]
					flag_PLL+=1;
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <PLL_Success_Detect+0x110>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <PLL_Success_Detect+0x110>)
 80023ba:	6013      	str	r3, [r2, #0]
			flag_Start_Running=1;
		}
	}


}
 80023bc:	e00f      	b.n	80023de <PLL_Success_Detect+0xe6>
					flag_PLL-=5;
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <PLL_Success_Detect+0x110>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3b05      	subs	r3, #5
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <PLL_Success_Detect+0x110>)
 80023c6:	6013      	str	r3, [r2, #0]
					if(flag_PLL<0)
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <PLL_Success_Detect+0x110>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	da06      	bge.n	80023de <PLL_Success_Detect+0xe6>
						flag_PLL=0;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <PLL_Success_Detect+0x110>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	e002      	b.n	80023de <PLL_Success_Detect+0xe6>
			flag_Start_Running=1;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <PLL_Success_Detect+0x10c>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	f3af 8000 	nop.w
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40d38800 	.word	0x40d38800
 80023f0:	9999999a 	.word	0x9999999a
 80023f4:	3fc99999 	.word	0x3fc99999
 80023f8:	9999999a 	.word	0x9999999a
 80023fc:	bfc99999 	.word	0xbfc99999
 8002400:	2000000c 	.word	0x2000000c
 8002404:	20003378 	.word	0x20003378
 8002408:	20003374 	.word	0x20003374
 800240c:	200003dc 	.word	0x200003dc
 8002410:	200032f8 	.word	0x200032f8
 8002414:	200032f4 	.word	0x200032f4

08002418 <System_Protect>:
 */
#include "main.h"


int flag_Protect=0;
void System_Protect(void){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	if(flag_Start_Running==1&&ad5_avg_flag==1&&flag_Protect==0){
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <System_Protect+0x198>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d166      	bne.n	80024f2 <System_Protect+0xda>
 8002424:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <System_Protect+0x19c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d162      	bne.n	80024f2 <System_Protect+0xda>
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <System_Protect+0x1a0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d15e      	bne.n	80024f2 <System_Protect+0xda>
			if(thetas<0.03f+PI/2&&thetas>-0.03f+PI/2){
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <System_Protect+0x1a4>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80025c0 <System_Protect+0x1a8>
 800243e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d554      	bpl.n	80024f2 <System_Protect+0xda>
 8002448:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <System_Protect+0x1a4>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80025c4 <System_Protect+0x1ac>
 8002452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd4a      	ble.n	80024f2 <System_Protect+0xda>
				PID_init(&pid_Udc,0.016f, 0.25f,0,2,-2,0.4,Control_Time);
 800245c:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 80025c8 <System_Protect+0x1b0>
 8002460:	eddf 2a5a 	vldr	s5, [pc, #360]	; 80025cc <System_Protect+0x1b4>
 8002464:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 8002468:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800246c:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80025d0 <System_Protect+0x1b8>
 8002470:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8002474:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80025d4 <System_Protect+0x1bc>
 8002478:	4857      	ldr	r0, [pc, #348]	; (80025d8 <System_Protect+0x1c0>)
 800247a:	f7ff fde5 	bl	8002048 <PID_init>
				PID_init(&pid_IoIVd,8.0f,1400,0,15,-15,0,Control_Time);
 800247e:	ed9f 3a52 	vldr	s6, [pc, #328]	; 80025c8 <System_Protect+0x1b0>
 8002482:	eddf 2a53 	vldr	s5, [pc, #332]	; 80025d0 <System_Protect+0x1b8>
 8002486:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 800248a:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800248e:	ed9f 1a50 	vldr	s2, [pc, #320]	; 80025d0 <System_Protect+0x1b8>
 8002492:	eddf 0a52 	vldr	s1, [pc, #328]	; 80025dc <System_Protect+0x1c4>
 8002496:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800249a:	4851      	ldr	r0, [pc, #324]	; (80025e0 <System_Protect+0x1c8>)
 800249c:	f7ff fdd4 	bl	8002048 <PID_init>
				PID_init(&pid_IoIVq,8.0f,1400,0,15,-15,0,Control_Time);
 80024a0:	ed9f 3a49 	vldr	s6, [pc, #292]	; 80025c8 <System_Protect+0x1b0>
 80024a4:	eddf 2a4a 	vldr	s5, [pc, #296]	; 80025d0 <System_Protect+0x1b8>
 80024a8:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 80024ac:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 80024b0:	ed9f 1a47 	vldr	s2, [pc, #284]	; 80025d0 <System_Protect+0x1b8>
 80024b4:	eddf 0a49 	vldr	s1, [pc, #292]	; 80025dc <System_Protect+0x1c4>
 80024b8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80024bc:	4849      	ldr	r0, [pc, #292]	; (80025e4 <System_Protect+0x1cc>)
 80024be:	f7ff fdc3 	bl	8002048 <PID_init>
				//开关打开
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80024c2:	2100      	movs	r1, #0
 80024c4:	4848      	ldr	r0, [pc, #288]	; (80025e8 <System_Protect+0x1d0>)
 80024c6:	f003 f971 	bl	80057ac <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80024ca:	2104      	movs	r1, #4
 80024cc:	4846      	ldr	r0, [pc, #280]	; (80025e8 <System_Protect+0x1d0>)
 80024ce:	f003 f96d 	bl	80057ac <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80024d2:	2100      	movs	r1, #0
 80024d4:	4844      	ldr	r0, [pc, #272]	; (80025e8 <System_Protect+0x1d0>)
 80024d6:	f004 f86b 	bl	80065b0 <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80024da:	2104      	movs	r1, #4
 80024dc:	4842      	ldr	r0, [pc, #264]	; (80025e8 <System_Protect+0x1d0>)
 80024de:	f004 f867 	bl	80065b0 <HAL_TIMEx_PWMN_Start>
				flag_Start_Running=2;
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <System_Protect+0x198>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2102      	movs	r1, #2
 80024ec:	483f      	ldr	r0, [pc, #252]	; (80025ec <System_Protect+0x1d4>)
 80024ee:	f002 fb91 	bl	8004c14 <HAL_GPIO_WritePin>
			}
		  }
	if(Isrms>4.3||Usrms>35||Udc>65){
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <System_Protect+0x1d8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f826 	bl	8000548 <__aeabi_f2d>
 80024fc:	a32a      	add	r3, pc, #168	; (adr r3, 80025a8 <System_Protect+0x190>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d113      	bne.n	8002534 <System_Protect+0x11c>
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <System_Protect+0x1dc>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80025f8 <System_Protect+0x1e0>
 8002516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	dc09      	bgt.n	8002534 <System_Protect+0x11c>
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <System_Protect+0x1e4>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002600 <System_Protect+0x1e8>
 800252a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	dd12      	ble.n	800255a <System_Protect+0x142>
		  flag_Protect=1;
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <System_Protect+0x1a0>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800253a:	2100      	movs	r1, #0
 800253c:	482a      	ldr	r0, [pc, #168]	; (80025e8 <System_Protect+0x1d0>)
 800253e:	f003 f9fd 	bl	800593c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002542:	2104      	movs	r1, #4
 8002544:	4828      	ldr	r0, [pc, #160]	; (80025e8 <System_Protect+0x1d0>)
 8002546:	f003 f9f9 	bl	800593c <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 800254a:	2100      	movs	r1, #0
 800254c:	4826      	ldr	r0, [pc, #152]	; (80025e8 <System_Protect+0x1d0>)
 800254e:	f004 f8e9 	bl	8006724 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 8002552:	2104      	movs	r1, #4
 8002554:	4824      	ldr	r0, [pc, #144]	; (80025e8 <System_Protect+0x1d0>)
 8002556:	f004 f8e5 	bl	8006724 <HAL_TIMEx_PWMN_Stop>

	}
	if(Isrms<3.5&&Usrms<32&&flag_Protect==1){
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <System_Protect+0x1d8>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8002564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d400      	bmi.n	8002570 <System_Protect+0x158>
		  flag_Protect=0;
		  flag_Start_Running=0;
		  flag_PLL=0;
	}
}
 800256e:	e017      	b.n	80025a0 <System_Protect+0x188>
	if(Isrms<3.5&&Usrms<32&&flag_Protect==1){
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <System_Protect+0x1dc>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002604 <System_Protect+0x1ec>
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d400      	bmi.n	8002586 <System_Protect+0x16e>
}
 8002584:	e00c      	b.n	80025a0 <System_Protect+0x188>
	if(Isrms<3.5&&Usrms<32&&flag_Protect==1){
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <System_Protect+0x1a0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <System_Protect+0x188>
		  flag_Protect=0;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <System_Protect+0x1a0>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		  flag_Start_Running=0;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <System_Protect+0x198>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
		  flag_PLL=0;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <System_Protect+0x1f0>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	f3af 8000 	nop.w
 80025a8:	33333333 	.word	0x33333333
 80025ac:	40113333 	.word	0x40113333
 80025b0:	20003378 	.word	0x20003378
 80025b4:	200003d8 	.word	0x200003d8
 80025b8:	2000337c 	.word	0x2000337c
 80025bc:	20003338 	.word	0x20003338
 80025c0:	3fcce6e5 	.word	0x3fcce6e5
 80025c4:	3fc538d1 	.word	0x3fc538d1
 80025c8:	3851b717 	.word	0x3851b717
 80025cc:	3ecccccd 	.word	0x3ecccccd
 80025d0:	00000000 	.word	0x00000000
 80025d4:	3c83126f 	.word	0x3c83126f
 80025d8:	200002d0 	.word	0x200002d0
 80025dc:	44af0000 	.word	0x44af0000
 80025e0:	20000308 	.word	0x20000308
 80025e4:	20000340 	.word	0x20000340
 80025e8:	20003394 	.word	0x20003394
 80025ec:	40020000 	.word	0x40020000
 80025f0:	200032ec 	.word	0x200032ec
 80025f4:	200032e8 	.word	0x200032e8
 80025f8:	420c0000 	.word	0x420c0000
 80025fc:	200003e8 	.word	0x200003e8
 8002600:	42820000 	.word	0x42820000
 8002604:	42000000 	.word	0x42000000
 8002608:	20003374 	.word	0x20003374

0800260c <enQueue>:
=======
 8002546:	e01f      	b.n	8002588 <PID_Limit+0x88>
	else if(pid->result < pid->min_output){
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	ed93 7a07 	vldr	s14, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d400      	bmi.n	8002560 <PID_Limit+0x60>
}
 800255e:	e013      	b.n	8002588 <PID_Limit+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <PID_Limit+0x90>)
 8002568:	f002 fa6a 	bl	8004a40 <HAL_GPIO_WritePin>
		pid->integral=pid->min_out_integral;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	621a      	str	r2, [r3, #32]
		pid->result=pid->min_output;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002582:	4803      	ldr	r0, [pc, #12]	; (8002590 <PID_Limit+0x90>)
 8002584:	f002 fa5c 	bl	8004a40 <HAL_GPIO_WritePin>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40020800 	.word	0x40020800

08002594 <PID_init>:

void PID_init(pid_p *pid,float kp,float ki, float kd,float max_output,float min_output, float initial_result,float Ts)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	61f8      	str	r0, [r7, #28]
 800259c:	ed87 0a06 	vstr	s0, [r7, #24]
 80025a0:	edc7 0a05 	vstr	s1, [r7, #20]
 80025a4:	ed87 1a04 	vstr	s2, [r7, #16]
 80025a8:	edc7 1a03 	vstr	s3, [r7, #12]
 80025ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80025b0:	edc7 2a01 	vstr	s5, [r7, #4]
 80025b4:	ed87 3a00 	vstr	s6, [r7]
    //printf("PID_init begin \n");
    pid->REF= 0.0f;		  	// ????????
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    pid->ACTUAL= 0.0f;			// adc?????
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
    pid->err= 0.0f;				    // ???????????
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    pid->err_last=0.0f;			    // ??????
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    pid->integral= 0.0f;			  	// ???
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
    pid->Kp= kp;				    // ????
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	611a      	str	r2, [r3, #16]
    pid->Ki= ki*Ts;				    // ????
 80025e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80025ea:	edd7 7a00 	vldr	s15, [r7]
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	edc3 7a05 	vstr	s15, [r3, #20]
    pid->Kd= kd;				    // ????
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	619a      	str	r2, [r3, #24]
    pid->result=0;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
    //printf("PID_init end \n");
    pid->max_output=max_output;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
    pid->min_output=min_output;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
    pid->max_output_integral=pid->max_output/pid->Ki;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	ed93 7a05 	vldr	s14, [r3, #20]
 800261e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pid->min_out_integral=pid->min_output/pid->Ki;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	ed93 7a05 	vldr	s14, [r3, #20]
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pid->integral=initial_result/ki;
 800263e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002642:	ed97 7a05 	vldr	s14, [r7, #20]
 8002646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	ed93 7a04 	vldr	s14, [r3, #16]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	edd3 7a02 	vldr	s15, [r3, #8]
 800265c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	edd3 6a05 	vldr	s13, [r3, #20]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	edd3 7a08 	vldr	s15, [r3, #32]
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	edd3 6a06 	vldr	s13, [r3, #24]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	edd3 7a03 	vldr	s15, [r3, #12]
 8002686:	ee76 7a67 	vsub.f32	s15, s12, s15
 800268a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	edc3 7a07 	vstr	s15, [r3, #28]
    PID_Limit(pid);
 8002698:	69f8      	ldr	r0, [r7, #28]
 800269a:	f7ff ff31 	bl	8002500 <PID_Limit>
}
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <PID_realize>:

float PID_realize(pid_p *pid, float vref, float v_now)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80026b2:	edc7 0a01 	vstr	s1, [r7, #4]

    pid->REF = vref;			// ???????
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	601a      	str	r2, [r3, #0]
    pid->ACTUAL = v_now;	// ?????? = ADC_Value * 3.3f/ 4096
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	605a      	str	r2, [r3, #4]
    pid->err =   pid->REF - pid->ACTUAL;	//????
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	ed93 7a00 	vldr	s14, [r3]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	edc3 7a02 	vstr	s15, [r3, #8]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ed93 7a04 	vldr	s14, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80026f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	edd3 6a06 	vldr	s13, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	ed93 6a02 	vldr	s12, [r3, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 7a03 	vldr	s15, [r3, #12]
 800270e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	edc3 7a07 	vstr	s15, [r3, #28]
    pid->integral += pid->err;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	ed93 7a08 	vldr	s14, [r3, #32]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a02 	vldr	s15, [r3, #8]
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->err_last = pid->err;				//???????
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	60da      	str	r2, [r3, #12]
    PID_Limit(pid);
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff fede 	bl	8002500 <PID_Limit>
    return pid->result;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	ee07 3a90 	vmov	s15, r3
}
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <enQueue>:
>>>>>>> parent of 9e7a168 (最终版本)
//判断循环队列是否为空
int isEmpty(SqQueue qu){
	return (qu.front ==qu.rear?1:0);
}
//元素进循环队列
int enQueue(SqQueue *qu,int x){
<<<<<<< HEAD
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
	if((qu->rear+1)%maxsize ==qu->front){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <enQueue+0x74>)
 8002620:	fb83 1302 	smull	r1, r3, r3, r2
 8002624:	1199      	asrs	r1, r3, #6
 8002626:	17d3      	asrs	r3, r2, #31
 8002628:	1acb      	subs	r3, r1, r3
 800262a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	f8d2 2fa0 	ldr.w	r2, [r2, #4000]	; 0xfa0
 800263a:	4293      	cmp	r3, r2
 800263c:	d102      	bne.n	8002644 <enQueue+0x38>
		deQueue(qu);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f820 	bl	8002684 <deQueue>
	}
	qu->data[qu->rear]=x;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	qu->rear=(qu->rear+1)%maxsize;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <enQueue+0x74>)
 800265c:	fb83 1302 	smull	r1, r3, r3, r2
 8002660:	1199      	asrs	r1, r3, #6
 8002662:	17d3      	asrs	r3, r2, #31
 8002664:	1acb      	subs	r3, r1, r3
 8002666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <deQueue>:
//元素出循环队列
int deQueue(SqQueue *qu){
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(qu->rear ==qu->front){
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8002698:	429a      	cmp	r2, r3
 800269a:	d101      	bne.n	80026a0 <deQueue+0x1c>
		return 0;
 800269c:	2300      	movs	r3, #0
 800269e:	e012      	b.n	80026c6 <deQueue+0x42>
	}
//	*y=qu->data[qu->front];
	qu->front=(qu->front+1)%maxsize;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <deQueue+0x50>)
 80026aa:	fb83 1302 	smull	r1, r3, r3, r2
 80026ae:	1199      	asrs	r1, r3, #6
 80026b0:	17d3      	asrs	r3, r2, #31
 80026b2:	1acb      	subs	r3, r1, r3
 80026b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	f8c2 3fa0 	str.w	r3, [r2, #4000]	; 0xfa0
	return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <Screen_Print>:

=======
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	if((qu->rear+1)%maxsize ==qu->front){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <enQueue+0x74>)
 800276c:	fb83 1302 	smull	r1, r3, r3, r2
 8002770:	1199      	asrs	r1, r3, #6
 8002772:	17d3      	asrs	r3, r2, #31
 8002774:	1acb      	subs	r3, r1, r3
 8002776:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	f8d2 2fa0 	ldr.w	r2, [r2, #4000]	; 0xfa0
 8002786:	4293      	cmp	r3, r2
 8002788:	d102      	bne.n	8002790 <enQueue+0x38>
		deQueue(qu);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f820 	bl	80027d0 <deQueue>
	}
	qu->data[qu->rear]=x;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	qu->rear=(qu->rear+1)%maxsize;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <enQueue+0x74>)
 80027a8:	fb83 1302 	smull	r1, r3, r3, r2
 80027ac:	1199      	asrs	r1, r3, #6
 80027ae:	17d3      	asrs	r3, r2, #31
 80027b0:	1acb      	subs	r3, r1, r3
 80027b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
	return 1;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <deQueue>:
//元素出循环队列
int deQueue(SqQueue *qu){
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if(qu->rear ==qu->front){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d101      	bne.n	80027ec <deQueue+0x1c>
		return 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e012      	b.n	8002812 <deQueue+0x42>
	}
//	*y=qu->data[qu->front];
	qu->front=(qu->front+1)%maxsize;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <deQueue+0x50>)
 80027f6:	fb83 1302 	smull	r1, r3, r3, r2
 80027fa:	1199      	asrs	r1, r3, #6
 80027fc:	17d3      	asrs	r3, r2, #31
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	f8c2 3fa0 	str.w	r3, [r2, #4000]	; 0xfa0
	return 1;
 8002810:	2301      	movs	r3, #1
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <Screen_Print>:
>>>>>>> parent of 9e7a168 (最终版本)
int flag_screen=1;
int flag_fresh_screen=1;
float ref_Isq_last,Usrms_last,Isrms_last,PF_last;
<<<<<<< HEAD

void Screen_Print(){
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	Screen_Fresh_Detect();
 80026dc:	f000 f898 	bl	8002810 <Screen_Fresh_Detect>
	if(flag_screen==1&&flag_fresh_screen==1){
 80026e0:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <Screen_Print+0xfc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d172      	bne.n	80027ce <Screen_Print+0xf6>
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <Screen_Print+0x100>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d16e      	bne.n	80027ce <Screen_Print+0xf6>
		while(time_Tim1>5*20);
 80026f0:	bf00      	nop
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <Screen_Print+0x104>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	dcfb      	bgt.n	80026f2 <Screen_Print+0x1a>
		printf("BL(200);\r\n");
 80026fa:	4839      	ldr	r0, [pc, #228]	; (80027e0 <Screen_Print+0x108>)
 80026fc:	f006 fa42 	bl	8008b84 <puts>
		while(time_Tim1<45*20);//40ms
 8002700:	bf00      	nop
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <Screen_Print+0x104>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800270a:	dbfa      	blt.n	8002702 <Screen_Print+0x2a>
		printf("CLR(0);\r\n");
 800270c:	4835      	ldr	r0, [pc, #212]	; (80027e4 <Screen_Print+0x10c>)
 800270e:	f006 fa39 	bl	8008b84 <puts>
		while(time_Tim1<85*20);//40ms
 8002712:	bf00      	nop
 8002714:	4b31      	ldr	r3, [pc, #196]	; (80027dc <Screen_Print+0x104>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800271c:	4293      	cmp	r3, r2
 800271e:	ddf9      	ble.n	8002714 <Screen_Print+0x3c>
		printf("DC16(15,20,'Isq: %.2f',16);\r\n",ref_Isq_last);
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <Screen_Print+0x110>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff0f 	bl	8000548 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	482f      	ldr	r0, [pc, #188]	; (80027ec <Screen_Print+0x114>)
 8002730:	f006 f9a2 	bl	8008a78 <iprintf>
		while(time_Tim1<125*20);//40ms
 8002734:	bf00      	nop
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <Screen_Print+0x104>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800273e:	4293      	cmp	r3, r2
 8002740:	ddf9      	ble.n	8002736 <Screen_Print+0x5e>
		printf("DC16(15,50,'Us: %.1f',16);\r\n",Usrms_last);
 8002742:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <Screen_Print+0x118>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fefe 	bl	8000548 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4828      	ldr	r0, [pc, #160]	; (80027f4 <Screen_Print+0x11c>)
 8002752:	f006 f991 	bl	8008a78 <iprintf>
		while(time_Tim1<165*20);//40ms
 8002756:	bf00      	nop
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <Screen_Print+0x104>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f640 42e3 	movw	r2, #3299	; 0xce3
 8002760:	4293      	cmp	r3, r2
 8002762:	ddf9      	ble.n	8002758 <Screen_Print+0x80>
		printf("DC16(15,80,'Is: %.2f',16);\r\n",Isrms_last);
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <Screen_Print+0x120>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd feed 	bl	8000548 <__aeabi_f2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4822      	ldr	r0, [pc, #136]	; (80027fc <Screen_Print+0x124>)
 8002774:	f006 f980 	bl	8008a78 <iprintf>
		while(time_Tim1<205*20);//40ms
 8002778:	bf00      	nop
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <Screen_Print+0x104>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002782:	4293      	cmp	r3, r2
 8002784:	ddf9      	ble.n	800277a <Screen_Print+0xa2>
		printf("DC16(15,110,'PF: %.2f',16);\r\n",PF_last);
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <Screen_Print+0x128>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fedc 	bl	8000548 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	481b      	ldr	r0, [pc, #108]	; (8002804 <Screen_Print+0x12c>)
 8002796:	f006 f96f 	bl	8008a78 <iprintf>
		while(time_Tim1<245*20);//40ms
 800279a:	bf00      	nop
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <Screen_Print+0x104>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f241 3223 	movw	r2, #4899	; 0x1323
 80027a4:	4293      	cmp	r3, r2
 80027a6:	ddf9      	ble.n	800279c <Screen_Print+0xc4>
		printf("DC16(15,130,'Protect: %d',16);\r\n",flag_Protect);
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <Screen_Print+0x130>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4817      	ldr	r0, [pc, #92]	; (800280c <Screen_Print+0x134>)
 80027b0:	f006 f962 	bl	8008a78 <iprintf>
		while(time_Tim1<285*20);//40ms
 80027b4:	bf00      	nop
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <Screen_Print+0x104>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f241 6243 	movw	r2, #5699	; 0x1643
 80027be:	4293      	cmp	r3, r2
 80027c0:	ddf9      	ble.n	80027b6 <Screen_Print+0xde>
		flag_screen=0;
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <Screen_Print+0xfc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
		flag_fresh_screen=0;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <Screen_Print+0x100>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

	}
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000010 	.word	0x20000010
 80027d8:	20000014 	.word	0x20000014
 80027dc:	200003dc 	.word	0x200003dc
 80027e0:	0800c5e8 	.word	0x0800c5e8
 80027e4:	0800c5f4 	.word	0x0800c5f4
 80027e8:	20003380 	.word	0x20003380
 80027ec:	0800c600 	.word	0x0800c600
 80027f0:	20003384 	.word	0x20003384
 80027f4:	0800c620 	.word	0x0800c620
 80027f8:	20003388 	.word	0x20003388
 80027fc:	0800c640 	.word	0x0800c640
 8002800:	2000338c 	.word	0x2000338c
 8002804:	0800c660 	.word	0x0800c660
 8002808:	2000337c 	.word	0x2000337c
 800280c:	0800c680 	.word	0x0800c680

08002810 <Screen_Fresh_Detect>:
void Screen_Fresh_Detect(){
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	if(ref_Isqrms-ref_Isq_last>0.005f||ref_Isqrms-ref_Isq_last<-0.005f){
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <Screen_Fresh_Detect+0x138>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <Screen_Fresh_Detect+0x13c>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002824:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002950 <Screen_Fresh_Detect+0x140>
 8002828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	dc0e      	bgt.n	8002850 <Screen_Fresh_Detect+0x40>
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <Screen_Fresh_Detect+0x138>)
 8002834:	ed93 7a00 	vldr	s14, [r3]
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <Screen_Fresh_Detect+0x13c>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002954 <Screen_Fresh_Detect+0x144>
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	d506      	bpl.n	800285e <Screen_Fresh_Detect+0x4e>
		flag_fresh_screen=1;
 8002850:	4b41      	ldr	r3, [pc, #260]	; (8002958 <Screen_Fresh_Detect+0x148>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
		ref_Isq_last=ref_Isqrms;
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <Screen_Fresh_Detect+0x138>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3c      	ldr	r2, [pc, #240]	; (800294c <Screen_Fresh_Detect+0x13c>)
 800285c:	6013      	str	r3, [r2, #0]
	}
	if(Usrms-Usrms_last>0.1f||Usrms-Usrms_last<-0.1f){
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <Screen_Fresh_Detect+0x14c>)
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <Screen_Fresh_Detect+0x150>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002964 <Screen_Fresh_Detect+0x154>
 8002872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	dc0e      	bgt.n	800289a <Screen_Fresh_Detect+0x8a>
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <Screen_Fresh_Detect+0x14c>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <Screen_Fresh_Detect+0x150>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002968 <Screen_Fresh_Detect+0x158>
 8002890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	d506      	bpl.n	80028a8 <Screen_Fresh_Detect+0x98>
		flag_fresh_screen=1;
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <Screen_Fresh_Detect+0x148>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
		Usrms_last=Usrms;
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <Screen_Fresh_Detect+0x14c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <Screen_Fresh_Detect+0x150>)
 80028a6:	6013      	str	r3, [r2, #0]
	}
	if(Isrms-Isrms_last>0.01f||Isrms-Isrms_last<-0.01f){
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <Screen_Fresh_Detect+0x15c>)
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <Screen_Fresh_Detect+0x160>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002974 <Screen_Fresh_Detect+0x164>
 80028bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	dc0e      	bgt.n	80028e4 <Screen_Fresh_Detect+0xd4>
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <Screen_Fresh_Detect+0x15c>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <Screen_Fresh_Detect+0x160>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002978 <Screen_Fresh_Detect+0x168>
 80028da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d506      	bpl.n	80028f2 <Screen_Fresh_Detect+0xe2>
		flag_fresh_screen=1;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <Screen_Fresh_Detect+0x148>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
		Isrms_last=Isrms;
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <Screen_Fresh_Detect+0x15c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <Screen_Fresh_Detect+0x160>)
 80028f0:	6013      	str	r3, [r2, #0]
	}
	if(PF-PF_last>0.01f||PF-PF_last<-0.01f){
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <Screen_Fresh_Detect+0x16c>)
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <Screen_Fresh_Detect+0x170>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002902:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002974 <Screen_Fresh_Detect+0x164>
 8002906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	dc0f      	bgt.n	8002930 <Screen_Fresh_Detect+0x120>
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <Screen_Fresh_Detect+0x16c>)
 8002912:	ed93 7a00 	vldr	s14, [r3]
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <Screen_Fresh_Detect+0x170>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002920:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002978 <Screen_Fresh_Detect+0x168>
 8002924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d400      	bmi.n	8002930 <Screen_Fresh_Detect+0x120>
=======
void Screen_Print(){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	Screen_Fresh_Detect();
 8002828:	f000 f87a 	bl	8002920 <Screen_Fresh_Detect>
	if(flag_screen==1&&flag_fresh_screen==1){
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <Screen_Print+0xcc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d15b      	bne.n	80028ec <Screen_Print+0xc8>
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <Screen_Print+0xd0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d157      	bne.n	80028ec <Screen_Print+0xc8>
		while(time_Tim1>5*20);
 800283c:	bf00      	nop
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <Screen_Print+0xd4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	dcfb      	bgt.n	800283e <Screen_Print+0x1a>
		printf("CLR(0);\r\n");
 8002846:	482d      	ldr	r0, [pc, #180]	; (80028fc <Screen_Print+0xd8>)
 8002848:	f005 ffac 	bl	80087a4 <puts>
		while(time_Tim1<45*20);//40ms
 800284c:	bf00      	nop
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <Screen_Print+0xd4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002856:	dbfa      	blt.n	800284e <Screen_Print+0x2a>
		printf("DC16(15,20,'Isq: %.2f',16);\r\n",ref_Isq_last);
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <Screen_Print+0xdc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4827      	ldr	r0, [pc, #156]	; (8002904 <Screen_Print+0xe0>)
 8002868:	f005 ff16 	bl	8008698 <iprintf>
		while(time_Tim1<85*20);//40ms
 800286c:	bf00      	nop
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <Screen_Print+0xd4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002876:	4293      	cmp	r3, r2
 8002878:	ddf9      	ble.n	800286e <Screen_Print+0x4a>
		printf("DC16(15,50,'Us: %.1f',16);\r\n",Usrms_last);
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <Screen_Print+0xe4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe62 	bl	8000548 <__aeabi_f2d>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4820      	ldr	r0, [pc, #128]	; (800290c <Screen_Print+0xe8>)
 800288a:	f005 ff05 	bl	8008698 <iprintf>
		while(time_Tim1<125*20);//40ms
 800288e:	bf00      	nop
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <Screen_Print+0xd4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002898:	4293      	cmp	r3, r2
 800289a:	ddf9      	ble.n	8002890 <Screen_Print+0x6c>
		printf("DC16(15,80,'Is: %.2f',16);\r\n",Isrms_last);
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <Screen_Print+0xec>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	481a      	ldr	r0, [pc, #104]	; (8002914 <Screen_Print+0xf0>)
 80028ac:	f005 fef4 	bl	8008698 <iprintf>
		while(time_Tim1<165*20);//40ms
 80028b0:	bf00      	nop
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <Screen_Print+0xd4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f640 42e3 	movw	r2, #3299	; 0xce3
 80028ba:	4293      	cmp	r3, r2
 80028bc:	ddf9      	ble.n	80028b2 <Screen_Print+0x8e>
		printf("DC16(15,110,'PF: %.2f',16);\r\n",PF_last);
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <Screen_Print+0xf4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe40 	bl	8000548 <__aeabi_f2d>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4813      	ldr	r0, [pc, #76]	; (800291c <Screen_Print+0xf8>)
 80028ce:	f005 fee3 	bl	8008698 <iprintf>
		while(time_Tim1<205*20);//40ms
 80028d2:	bf00      	nop
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <Screen_Print+0xd4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80028dc:	4293      	cmp	r3, r2
 80028de:	ddf9      	ble.n	80028d4 <Screen_Print+0xb0>
		flag_screen=0;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <Screen_Print+0xcc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
		flag_fresh_screen=0;
 80028e6:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <Screen_Print+0xd0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
	}
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000010 	.word	0x20000010
 80028f4:	20000014 	.word	0x20000014
 80028f8:	20000218 	.word	0x20000218
 80028fc:	0800c1fc 	.word	0x0800c1fc
 8002900:	200033a0 	.word	0x200033a0
 8002904:	0800c208 	.word	0x0800c208
 8002908:	200033a4 	.word	0x200033a4
 800290c:	0800c228 	.word	0x0800c228
 8002910:	2000339c 	.word	0x2000339c
 8002914:	0800c248 	.word	0x0800c248
 8002918:	200033a8 	.word	0x200033a8
 800291c:	0800c268 	.word	0x0800c268

08002920 <Screen_Fresh_Detect>:
void Screen_Fresh_Detect(){
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	if(ref_Isqrms-ref_Isq_last>0.005f||ref_Isqrms-ref_Isq_last<-0.005f){
 8002924:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <Screen_Fresh_Detect+0x138>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <Screen_Fresh_Detect+0x13c>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002934:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a60 <Screen_Fresh_Detect+0x140>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	dc0e      	bgt.n	8002960 <Screen_Fresh_Detect+0x40>
 8002942:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <Screen_Fresh_Detect+0x138>)
 8002944:	ed93 7a00 	vldr	s14, [r3]
 8002948:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <Screen_Fresh_Detect+0x13c>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002952:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002a64 <Screen_Fresh_Detect+0x144>
 8002956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	d506      	bpl.n	800296e <Screen_Fresh_Detect+0x4e>
		flag_fresh_screen=1;
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <Screen_Fresh_Detect+0x148>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
		ref_Isq_last=ref_Isqrms;
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <Screen_Fresh_Detect+0x138>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <Screen_Fresh_Detect+0x13c>)
 800296c:	6013      	str	r3, [r2, #0]
	}
	if(Usrms-Usrms_last>0.5f||Usrms-Usrms_last<-0.5f){
 800296e:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <Screen_Fresh_Detect+0x14c>)
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <Screen_Fresh_Detect+0x150>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	dc0e      	bgt.n	80029aa <Screen_Fresh_Detect+0x8a>
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <Screen_Fresh_Detect+0x14c>)
 800298e:	ed93 7a00 	vldr	s14, [r3]
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <Screen_Fresh_Detect+0x150>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80029a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d506      	bpl.n	80029b8 <Screen_Fresh_Detect+0x98>
		flag_fresh_screen=1;
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <Screen_Fresh_Detect+0x148>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
		Usrms_last=Usrms;
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <Screen_Fresh_Detect+0x14c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <Screen_Fresh_Detect+0x150>)
 80029b6:	6013      	str	r3, [r2, #0]
	}
	if(Isrms-Isrms_last>0.02f||Isrms-Isrms_last<-0.02f){
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <Screen_Fresh_Detect+0x154>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <Screen_Fresh_Detect+0x158>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002a7c <Screen_Fresh_Detect+0x15c>
 80029cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d4:	dc0e      	bgt.n	80029f4 <Screen_Fresh_Detect+0xd4>
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <Screen_Fresh_Detect+0x154>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <Screen_Fresh_Detect+0x158>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a80 <Screen_Fresh_Detect+0x160>
 80029ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d506      	bpl.n	8002a02 <Screen_Fresh_Detect+0xe2>
		flag_fresh_screen=1;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <Screen_Fresh_Detect+0x148>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
		Isrms_last=Isrms;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <Screen_Fresh_Detect+0x154>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <Screen_Fresh_Detect+0x158>)
 8002a00:	6013      	str	r3, [r2, #0]
	}
	if(PF-PF_last>0.01f||PF-PF_last<-0.01f){
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <Screen_Fresh_Detect+0x164>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <Screen_Fresh_Detect+0x168>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a12:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002a8c <Screen_Fresh_Detect+0x16c>
 8002a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	dc0f      	bgt.n	8002a40 <Screen_Fresh_Detect+0x120>
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <Screen_Fresh_Detect+0x164>)
 8002a22:	ed93 7a00 	vldr	s14, [r3]
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <Screen_Fresh_Detect+0x168>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a30:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002a90 <Screen_Fresh_Detect+0x170>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d400      	bmi.n	8002a40 <Screen_Fresh_Detect+0x120>
>>>>>>> parent of 9e7a168 (最终版本)
		flag_fresh_screen=1;
		PF_last=PF;
	}
}
<<<<<<< HEAD
 800292e:	e006      	b.n	800293e <Screen_Fresh_Detect+0x12e>
		flag_fresh_screen=1;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <Screen_Fresh_Detect+0x148>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
		PF_last=PF;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <Screen_Fresh_Detect+0x16c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <Screen_Fresh_Detect+0x170>)
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	20000378 	.word	0x20000378
 800294c:	20003380 	.word	0x20003380
 8002950:	3ba3d70a 	.word	0x3ba3d70a
 8002954:	bba3d70a 	.word	0xbba3d70a
 8002958:	20000014 	.word	0x20000014
 800295c:	200032e8 	.word	0x200032e8
 8002960:	20003384 	.word	0x20003384
 8002964:	3dcccccd 	.word	0x3dcccccd
 8002968:	bdcccccd 	.word	0xbdcccccd
 800296c:	200032ec 	.word	0x200032ec
 8002970:	20003388 	.word	0x20003388
 8002974:	3c23d70a 	.word	0x3c23d70a
 8002978:	bc23d70a 	.word	0xbc23d70a
 800297c:	200032f0 	.word	0x200032f0
 8002980:	2000338c 	.word	0x2000338c

08002984 <Screen_Clock>:
//extern int time_Tim1;
void Screen_Clock(){
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	if(time_Tim1==1){
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <Screen_Clock+0x1c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <Screen_Clock+0x12>
		flag_screen=1;
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <Screen_Clock+0x20>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
	}
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	200003dc 	.word	0x200003dc
 80029a4:	20000010 	.word	0x20000010

080029a8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10f      	bne.n	80029dc <HAL_TIM_PeriodElapsedCallback+0x34>
    {
//    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
    	//记录一个定时器time,用两次time值相减可以得到对应的任意事件的两项
    	Clock_Timer();
 80029bc:	f7ff fa74 	bl	8001ea8 <Clock_Timer>
    	Screen_Clock();
 80029c0:	f7ff ffe0 	bl	8002984 <Screen_Clock>
    	Key_Clock();
 80029c4:	f7ff fa9a 	bl	8001efc <Key_Clock>
//    	进行ADC(3us)和进行数据的存储(2.2us)
//    	进行正弦运算注意角度是弧度制 1.8us
//    	对输入电压、输入电流、Io电流进行Park运算，这个100后续要变 1us
    	ADC_DAC_get_and_show();
 80029c8:	f7fe fe78 	bl	80016bc <ADC_DAC_get_and_show>
    	PLL_Realize();
 80029cc:	f7ff fc20 	bl	8002210 <PLL_Realize>
    	PI_Control();
 80029d0:	f7fe fd04 	bl	80013dc <PI_Control>
    	PWM_Output();
 80029d4:	f7fe fdec 	bl	80015b0 <PWM_Output>
    	//进行系统保护
    	System_Protect();
 80029d8:	f7ff fd1e 	bl	8002418 <System_Protect>
    }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200033dc 	.word	0x200033dc

080029e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4811      	ldr	r0, [pc, #68]	; (8002ad4 <MX_GPIO_Init+0xec>)
 8002a90:	f002 f8c0 	bl	8004c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a94:	233c      	movs	r3, #60	; 0x3c
 8002a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002aa8:	f001 ff00 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002aac:	2302      	movs	r3, #2
 8002aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <MX_GPIO_Init+0xec>)
 8002ac4:	f001 fef2 	bl	80048ac <HAL_GPIO_Init>

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40021000 	.word	0x40021000

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae0:	f000 fc40 	bl	8003364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae4:	f000 f850 	bl	8002b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae8:	f7ff ff7e 	bl	80029e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aec:	f7fe fc56 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 8002af0:	f7fe fa82 	bl	8000ff8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002af4:	f000 fa0a 	bl	8002f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002af8:	f000 fab4 	bl	8003064 <MX_TIM2_Init>
  MX_DAC_Init();
 8002afc:	f7fe fbe0 	bl	80012c0 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8002b00:	f000 fb7a 	bl	80031f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8002b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b08:	f000 fc9e 	bl	8003448 <HAL_Delay>
	printf("BL(200);\r\n");
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <main+0x7c>)
 8002b0e:	f006 f839 	bl	8008b84 <puts>
	HAL_Delay(40);
 8002b12:	2028      	movs	r0, #40	; 0x28
 8002b14:	f000 fc98 	bl	8003448 <HAL_Delay>
//  Keyboard_Init();


  //TIM中断控制程序打开
  HAL_TIM_Base_Start_IT(&htim2);
 8002b18:	4810      	ldr	r0, [pc, #64]	; (8002b5c <main+0x80>)
 8002b1a:	f002 fd7d 	bl	8005618 <HAL_TIM_Base_Start_IT>
  //ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, ADC_num);
 8002b1e:	2208      	movs	r2, #8
 8002b20:	490f      	ldr	r1, [pc, #60]	; (8002b60 <main+0x84>)
 8002b22:	4810      	ldr	r0, [pc, #64]	; (8002b64 <main+0x88>)
 8002b24:	f000 fcf8 	bl	8003518 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	480f      	ldr	r0, [pc, #60]	; (8002b68 <main+0x8c>)
 8002b2c:	f001 f9f5 	bl	8003f1a <HAL_DAC_Start>

  //注意KPKI 在幅值为1时根据Simulink得到对应的是314 1725，可以根据此来定
  //20Vp Vs 20 100, Reset 才能正常使用10V时，就做了延�??????
  PID_init(&PLL,20,180,0,500,100,314,Control_Time);
 8002b30:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8002b6c <main+0x90>
 8002b34:	eddf 2a0e 	vldr	s5, [pc, #56]	; 8002b70 <main+0x94>
 8002b38:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8002b74 <main+0x98>
 8002b3c:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8002b78 <main+0x9c>
 8002b40:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8002b7c <main+0xa0>
 8002b44:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002b80 <main+0xa4>
 8002b48:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <main+0xa8>)
 8002b4e:	f7ff fa7b 	bl	8002048 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Screen_Print();
 8002b52:	f7ff fdc1 	bl	80026d8 <Screen_Print>
 8002b56:	e7fc      	b.n	8002b52 <main+0x76>
 8002b58:	0800c6a4 	.word	0x0800c6a4
 8002b5c:	200033dc 	.word	0x200033dc
 8002b60:	20000380 	.word	0x20000380
 8002b64:	20000214 	.word	0x20000214
 8002b68:	200002bc 	.word	0x200002bc
 8002b6c:	3851b717 	.word	0x3851b717
 8002b70:	439d0000 	.word	0x439d0000
 8002b74:	42c80000 	.word	0x42c80000
 8002b78:	43fa0000 	.word	0x43fa0000
 8002b7c:	00000000 	.word	0x00000000
 8002b80:	43340000 	.word	0x43340000
 8002b84:	2000333c 	.word	0x2000333c

08002b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b094      	sub	sp, #80	; 0x50
 8002b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	2230      	movs	r2, #48	; 0x30
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 f80c 	bl	8007bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <SystemClock_Config+0xcc>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <SystemClock_Config+0xcc>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <SystemClock_Config+0xcc>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <SystemClock_Config+0xd0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 8002bfc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c06:	2304      	movs	r3, #4
 8002c08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0a:	f107 0320 	add.w	r3, r7, #32
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 f81a 	bl	8004c48 <HAL_RCC_OscConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c1a:	f000 f81f 	bl	8002c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c1e:	230f      	movs	r3, #15
 8002c20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c22:	2302      	movs	r3, #2
 8002c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fa7b 	bl	8005138 <HAL_RCC_ClockConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c48:	f000 f808 	bl	8002c5c <Error_Handler>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3750      	adds	r7, #80	; 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000

08002c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <Error_Handler+0x8>
	...

08002c68 <HAL_MspInit>:
=======
 8002a3e:	e006      	b.n	8002a4e <Screen_Fresh_Detect+0x12e>
		flag_fresh_screen=1;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <Screen_Fresh_Detect+0x148>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
		PF_last=PF;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <Screen_Fresh_Detect+0x164>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <Screen_Fresh_Detect+0x168>)
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	20003130 	.word	0x20003130
 8002a5c:	200033a0 	.word	0x200033a0
 8002a60:	3ba3d70a 	.word	0x3ba3d70a
 8002a64:	bba3d70a 	.word	0xbba3d70a
 8002a68:	20000014 	.word	0x20000014
 8002a6c:	20003358 	.word	0x20003358
 8002a70:	200033a4 	.word	0x200033a4
 8002a74:	20003294 	.word	0x20003294
 8002a78:	2000339c 	.word	0x2000339c
 8002a7c:	3ca3d70a 	.word	0x3ca3d70a
 8002a80:	bca3d70a 	.word	0xbca3d70a
 8002a84:	2000336c 	.word	0x2000336c
 8002a88:	200033a8 	.word	0x200033a8
 8002a8c:	3c23d70a 	.word	0x3c23d70a
 8002a90:	bc23d70a 	.word	0xbc23d70a

08002a94 <HAL_MspInit>:
>>>>>>> parent of 9e7a168 (最终版本)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
=======
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_MspInit+0x4c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f001 f8d4 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>
=======
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_MspInit+0x4c>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002ad2:	2004      	movs	r0, #4
 8002ad4:	f001 f8d4 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> parent of 9e7a168 (最终版本)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <NMI_Handler>:
=======
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <NMI_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
=======
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002cbc:	e7fe      	b.n	8002cbc <NMI_Handler+0x4>

08002cbe <HardFault_Handler>:
=======
 8002ae8:	e7fe      	b.n	8002ae8 <NMI_Handler+0x4>

08002aea <HardFault_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
=======
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002cc2:	e7fe      	b.n	8002cc2 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:
=======
 8002aee:	e7fe      	b.n	8002aee <HardFault_Handler+0x4>

08002af0 <MemManage_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
=======
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002cc8:	e7fe      	b.n	8002cc8 <MemManage_Handler+0x4>

08002cca <BusFault_Handler>:
=======
 8002af4:	e7fe      	b.n	8002af4 <MemManage_Handler+0x4>

08002af6 <BusFault_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
=======
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002cce:	e7fe      	b.n	8002cce <BusFault_Handler+0x4>

08002cd0 <UsageFault_Handler>:
=======
 8002afa:	e7fe      	b.n	8002afa <BusFault_Handler+0x4>

08002afc <UsageFault_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
=======
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002cd4:	e7fe      	b.n	8002cd4 <UsageFault_Handler+0x4>

08002cd6 <SVC_Handler>:
=======
 8002b00:	e7fe      	b.n	8002b00 <UsageFault_Handler+0x4>

08002b02 <SVC_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
=======
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <DebugMon_Handler>:
=======
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <DebugMon_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
=======
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <PendSV_Handler>:
=======
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <PendSV_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
=======
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Handler>:
=======
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <SysTick_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
=======
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002d04:	f000 fb80 	bl	8003408 <HAL_IncTick>
=======
 8002b30:	f000 fb80 	bl	8003234 <HAL_IncTick>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <TIM1_UP_TIM10_IRQHandler>:
=======
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
=======
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d12:	f002 fe83 	bl	8005a1c <HAL_TIM_IRQHandler>
=======
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b3e:	f002 fe5f 	bl	8005800 <HAL_TIM_IRQHandler>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20003394 	.word	0x20003394

08002d20 <TIM2_IRQHandler>:
=======
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200033ac 	.word	0x200033ac

08002b4c <TIM2_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
=======
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <TIM2_IRQHandler+0x10>)
 8002d26:	f002 fe79 	bl	8005a1c <HAL_TIM_IRQHandler>
=======
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM2_IRQHandler+0x10>)
 8002b52:	f002 fe55 	bl	8005800 <HAL_TIM_IRQHandler>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200033dc 	.word	0x200033dc

08002d34 <USART1_IRQHandler>:
=======
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200033f4 	.word	0x200033f4

08002b60 <USART1_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
=======
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <USART1_IRQHandler+0x10>)
 8002d3a:	f003 ff37 	bl	8006bac <HAL_UART_IRQHandler>
=======
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART1_IRQHandler+0x10>)
 8002b66:	f003 ff13 	bl	8006990 <HAL_UART_IRQHandler>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20003424 	.word	0x20003424

08002d48 <DMA2_Stream0_IRQHandler>:
=======
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000343c 	.word	0x2000343c

08002b74 <DMA2_Stream0_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
=======
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <DMA2_Stream0_IRQHandler+0x10>)
 8002d4e:	f001 fb43 	bl	80043d8 <HAL_DMA_IRQHandler>
=======
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <DMA2_Stream0_IRQHandler+0x10>)
 8002b7a:	f001 fb43 	bl	8004204 <HAL_DMA_IRQHandler>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000025c 	.word	0x2000025c

08002d5c <_getpid>:
=======
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200031c4 	.word	0x200031c4

08002b88 <_getpid>:
>>>>>>> parent of 9e7a168 (最终版本)
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
	return 1;
 8002d60:	2301      	movs	r3, #1
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_kill>:

int _kill(int pid, int sig)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d76:	f004 fedd 	bl	8007b34 <__errno>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2216      	movs	r2, #22
 8002d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_exit>:

void _exit (int status)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ffe7 	bl	8002d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d9e:	e7fe      	b.n	8002d9e <_exit+0x12>

08002da0 <_read>:
=======
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_kill>:

int _kill(int pid, int sig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba2:	f004 fe0d 	bl	80077c0 <__errno>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2216      	movs	r2, #22
 8002baa:	601a      	str	r2, [r3, #0]
	return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_exit>:

void _exit (int status)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ffe7 	bl	8002b98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bca:	e7fe      	b.n	8002bca <_exit+0x12>

08002bcc <_read>:
>>>>>>> parent of 9e7a168 (最终版本)
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e00a      	b.n	8002dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002db2:	f3af 8000 	nop.w
 8002db6:	4601      	mov	r1, r0
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	60ba      	str	r2, [r7, #8]
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dbf0      	blt.n	8002db2 <_read+0x12>
	}

return len;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e009      	b.n	8002e00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	60ba      	str	r2, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa79 	bl	80032ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dbf1      	blt.n	8002dec <_write+0x12>
	}
	return len;
 8002e08:	687b      	ldr	r3, [r7, #4]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_close>:

int _close(int file)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
	return -1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_fstat>:
=======
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e00a      	b.n	8002bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bde:	f3af 8000 	nop.w
 8002be2:	4601      	mov	r1, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	b2ca      	uxtb	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	dbf0      	blt.n	8002bde <_read+0x12>
	}

return len;
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e009      	b.n	8002c2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fa79 	bl	8003118 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf1      	blt.n	8002c18 <_write+0x12>
	}
	return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_close>:

int _close(int file)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	return -1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_fstat>:
>>>>>>> parent of 9e7a168 (最终版本)


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <_isatty>:

int _isatty(int file)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
	return 1;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <_sbrk>:
=======
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c66:	605a      	str	r2, [r3, #4]
	return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_isatty>:

int _isatty(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <_sbrk>:
>>>>>>> parent of 9e7a168 (最终版本)
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
=======
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <_sbrk+0x5c>)
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <_sbrk+0x60>)
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
=======
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <_sbrk+0x64>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <_sbrk+0x68>)
 8002e9c:	601a      	str	r2, [r3, #0]
=======
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <_sbrk+0x64>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d207      	bcs.n	8002ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eac:	f004 fe42 	bl	8007b34 <__errno>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	e009      	b.n	8002ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <_sbrk+0x64>)
 8002ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20020000 	.word	0x20020000
 8002edc:	00000400 	.word	0x00000400
 8002ee0:	20003390 	.word	0x20003390
 8002ee4:	20003480 	.word	0x20003480

08002ee8 <SystemInit>:
=======
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd8:	f004 fd72 	bl	80077c0 <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20020000 	.word	0x20020000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	20003138 	.word	0x20003138
 8002d10:	20003498 	.word	0x20003498

08002d14 <SystemInit>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <SystemInit+0x20>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <SystemInit+0x20>)
 8002ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SystemInit+0x20>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <SystemInit+0x20>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> parent of 9e7a168 (最终版本)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <MX_TIM1_Init>:
=======
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <MX_TIM1_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b096      	sub	sp, #88	; 0x58
 8002f10:	af00      	add	r7, sp, #0
=======
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b096      	sub	sp, #88	; 0x58
 8002d3c:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8002f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	615a      	str	r2, [r3, #20]
 8002f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2220      	movs	r2, #32
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fe35 	bl	8007bb4 <memset>
=======
 8002d3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	615a      	str	r2, [r3, #20]
 8002d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fd65 	bl	8007840 <memset>
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8002f4a:	4b44      	ldr	r3, [pc, #272]	; (800305c <MX_TIM1_Init+0x150>)
 8002f4c:	4a44      	ldr	r2, [pc, #272]	; (8003060 <MX_TIM1_Init+0x154>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002f50:	4b42      	ldr	r3, [pc, #264]	; (800305c <MX_TIM1_Init+0x150>)
 8002f52:	2209      	movs	r2, #9
 8002f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <MX_TIM1_Init+0x150>)
 8002f58:	2220      	movs	r2, #32
 8002f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	; (800305c <MX_TIM1_Init+0x150>)
 8002f5e:	f240 128f 	movw	r2, #399	; 0x18f
 8002f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b3d      	ldr	r3, [pc, #244]	; (800305c <MX_TIM1_Init+0x150>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <MX_TIM1_Init+0x150>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b3a      	ldr	r3, [pc, #232]	; (800305c <MX_TIM1_Init+0x150>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f76:	4839      	ldr	r0, [pc, #228]	; (800305c <MX_TIM1_Init+0x150>)
 8002f78:	f002 fafe 	bl	8005578 <HAL_TIM_Base_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f82:	f7ff fe6b 	bl	8002c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f90:	4619      	mov	r1, r3
 8002f92:	4832      	ldr	r0, [pc, #200]	; (800305c <MX_TIM1_Init+0x150>)
 8002f94:	f002 ff0c 	bl	8005db0 <HAL_TIM_ConfigClockSource>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f9e:	f7ff fe5d 	bl	8002c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fa2:	482e      	ldr	r0, [pc, #184]	; (800305c <MX_TIM1_Init+0x150>)
 8002fa4:	f002 fba8 	bl	80056f8 <HAL_TIM_PWM_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002fae:	f7ff fe55 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4826      	ldr	r0, [pc, #152]	; (800305c <MX_TIM1_Init+0x150>)
 8002fc2:	f003 fc0d 	bl	80067e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002fcc:	f7ff fe46 	bl	8002c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd0:	2360      	movs	r3, #96	; 0x60
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4819      	ldr	r0, [pc, #100]	; (800305c <MX_TIM1_Init+0x150>)
 8002ff6:	f002 fe19 	bl	8005c2c <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003000:	f7ff fe2c 	bl	8002c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	2204      	movs	r2, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4813      	ldr	r0, [pc, #76]	; (800305c <MX_TIM1_Init+0x150>)
 800300e:	f002 fe0d 	bl	8005c2c <HAL_TIM_PWM_ConfigChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003018:	f7ff fe20 	bl	8002c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8003028:	230a      	movs	r3, #10
 800302a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <MX_TIM1_Init+0x150>)
 8003040:	f003 fc4a 	bl	80068d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800304a:	f7ff fe07 	bl	8002c5c <Error_Handler>
=======
 8002d76:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d78:	4a44      	ldr	r2, [pc, #272]	; (8002e8c <MX_TIM1_Init+0x154>)
 8002d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d7e:	2209      	movs	r2, #9
 8002d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d84:	2220      	movs	r2, #32
 8002d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d8a:	f240 128f 	movw	r2, #399	; 0x18f
 8002d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002da2:	4839      	ldr	r0, [pc, #228]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002da4:	f002 fada 	bl	800535c <HAL_TIM_Base_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002dae:	f7ff fba1 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002db8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4832      	ldr	r0, [pc, #200]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002dc0:	f002 fee8 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002dca:	f7ff fb93 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dce:	482e      	ldr	r0, [pc, #184]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002dd0:	f002 fb84 	bl	80054dc <HAL_TIM_PWM_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002dda:	f7ff fb8b 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dea:	4619      	mov	r1, r3
 8002dec:	4826      	ldr	r0, [pc, #152]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002dee:	f003 fbe9 	bl	80065c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002df8:	f7ff fb7c 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dfc:	2360      	movs	r3, #96	; 0x60
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4819      	ldr	r0, [pc, #100]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002e22:	f002 fdf5 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e2c:	f7ff fb62 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	2204      	movs	r2, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4813      	ldr	r0, [pc, #76]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002e3a:	f002 fde9 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e44:	f7ff fb56 	bl	80024f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8002e54:	230a      	movs	r3, #10
 8002e56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002e6c:	f003 fc26 	bl	80066bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002e76:	f7ff fb3d 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 800304e:	4803      	ldr	r0, [pc, #12]	; (800305c <MX_TIM1_Init+0x150>)
 8003050:	f000 f898 	bl	8003184 <HAL_TIM_MspPostInit>

}
 8003054:	bf00      	nop
 8003056:	3758      	adds	r7, #88	; 0x58
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20003394 	.word	0x20003394
 8003060:	40010000 	.word	0x40010000

08003064 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
=======
 8002e7a:	4803      	ldr	r0, [pc, #12]	; (8002e88 <MX_TIM1_Init+0x150>)
 8002e7c:	f000 f898 	bl	8002fb0 <HAL_TIM_MspPostInit>

}
 8002e80:	bf00      	nop
 8002e82:	3758      	adds	r7, #88	; 0x58
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200033ac 	.word	0x200033ac
 8002e8c:	40010000 	.word	0x40010000

08002e90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800306a:	f107 0308 	add.w	r3, r7, #8
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	463b      	mov	r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
=======
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 9e7a168 (最终版本)

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <MX_TIM2_Init+0x94>)
 8003082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003086:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <MX_TIM2_Init+0x94>)
 800308a:	2209      	movs	r2, #9
 800308c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <MX_TIM2_Init+0x94>)
 8003090:	2220      	movs	r2, #32
 8003092:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <MX_TIM2_Init+0x94>)
 8003096:	f240 128f 	movw	r2, #399	; 0x18f
 800309a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <MX_TIM2_Init+0x94>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <MX_TIM2_Init+0x94>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030a8:	4813      	ldr	r0, [pc, #76]	; (80030f8 <MX_TIM2_Init+0x94>)
 80030aa:	f002 fa65 	bl	8005578 <HAL_TIM_Base_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80030b4:	f7ff fdd2 	bl	8002c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	4619      	mov	r1, r3
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <MX_TIM2_Init+0x94>)
 80030c6:	f002 fe73 	bl	8005db0 <HAL_TIM_ConfigClockSource>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030d0:	f7ff fdc4 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_TIM2_Init+0x94>)
 80030e2:	f003 fb7d 	bl	80067e0 <HAL_TIMEx_MasterConfigSynchronization>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030ec:	f7ff fdb6 	bl	8002c5c <Error_Handler>
=======
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002eb6:	2209      	movs	r2, #9
 8002eb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002ec2:	f240 128f 	movw	r2, #399	; 0x18f
 8002ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ed4:	4813      	ldr	r0, [pc, #76]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002ed6:	f002 fa41 	bl	800535c <HAL_TIM_Base_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ee0:	f7ff fb08 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480c      	ldr	r0, [pc, #48]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002ef2:	f002 fe4f 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002efc:	f7ff fafa 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f08:	463b      	mov	r3, r7
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_TIM2_Init+0x94>)
 8002f0e:	f003 fb59 	bl	80065c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f18:	f7ff faec 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200033dc 	.word	0x200033dc

080030fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_TIM_Base_MspInit+0x80>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d116      	bne.n	800313c <HAL_TIM_Base_MspInit+0x40>
=======
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200033f4 	.word	0x200033f4

08002f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_TIM_Base_MspInit+0x80>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d116      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0x40>
>>>>>>> parent of 9e7a168 (最终版本)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2019      	movs	r0, #25
 8003130:	f000 fe9b 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003134:	2019      	movs	r0, #25
 8003136:	f000 feb4 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
=======
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2019      	movs	r0, #25
 8002f5c:	f000 fe9b 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f60:	2019      	movs	r0, #25
 8002f62:	f000 feb4 	bl	8003cce <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 9e7a168 (最终版本)
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
<<<<<<< HEAD
 800313a:	e01a      	b.n	8003172 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d115      	bne.n	8003172 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_TIM_Base_MspInit+0x84>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	201c      	movs	r0, #28
 8003168:	f000 fe7f 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800316c:	201c      	movs	r0, #28
 800316e:	f000 fe98 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_TIM_MspPostInit+0x68>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11e      	bne.n	80031e4 <HAL_TIM_MspPostInit+0x60>
=======
 8002f66:	e01a      	b.n	8002f9e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d115      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_TIM_Base_MspInit+0x84>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	201c      	movs	r0, #28
 8002f94:	f000 fe7f 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f98:	201c      	movs	r0, #28
 8002f9a:	f000 fe98 	bl	8003cce <HAL_NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_TIM_MspPostInit+0x68>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d11e      	bne.n	8003010 <HAL_TIM_MspPostInit+0x60>
>>>>>>> parent of 9e7a168 (最终版本)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< HEAD
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_TIM_MspPostInit+0x6c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_TIM_MspPostInit+0x6c>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_TIM_MspPostInit+0x6c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
=======
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fdc:	f043 0310 	orr.w	r3, r3, #16
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
>>>>>>> parent of 9e7a168 (最终版本)
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 80031c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80031c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	4619      	mov	r1, r3
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <HAL_TIM_MspPostInit+0x70>)
 80031e0:	f001 fb64 	bl	80048ac <HAL_GPIO_Init>
=======
 8002fee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003000:	2301      	movs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4619      	mov	r1, r3
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <HAL_TIM_MspPostInit+0x70>)
 800300c:	f001 fb64 	bl	80046d8 <HAL_GPIO_Init>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 80031e4:	bf00      	nop
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40021000 	.word	0x40021000

080031f8 <MX_USART1_UART_Init>:
=======
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40010000 	.word	0x40010000
 800301c:	40023800 	.word	0x40023800
 8003020:	40021000 	.word	0x40021000

08003024 <MX_USART1_UART_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
=======
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <MX_USART1_UART_Init+0x50>)
 8003200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 8003204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 800321e:	220c      	movs	r2, #12
 8003220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <MX_USART1_UART_Init+0x4c>)
 8003230:	f003 fbdd 	bl	80069ee <HAL_UART_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800323a:	f7ff fd0f 	bl	8002c5c <Error_Handler>
=======
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <MX_USART1_UART_Init+0x50>)
 800302c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 8003030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 800304a:	220c      	movs	r2, #12
 800304c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <MX_USART1_UART_Init+0x4c>)
 800305c:	f003 fbb9 	bl	80067d2 <HAL_UART_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003066:	f7ff fa45 	bl	80024f4 <Error_Handler>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20003424 	.word	0x20003424
 8003248:	40011000 	.word	0x40011000

0800324c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_UART_MspInit+0x94>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d134      	bne.n	80032d8 <HAL_UART_MspInit+0x8c>
=======
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000343c 	.word	0x2000343c
 8003074:	40011000 	.word	0x40011000

08003078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_UART_MspInit+0x94>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d134      	bne.n	8003104 <HAL_UART_MspInit+0x8c>
>>>>>>> parent of 9e7a168 (最终版本)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <HAL_UART_MspInit+0x98>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_UART_MspInit+0x98>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_UART_MspInit+0x98>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_UART_MspInit+0x98>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_UART_MspInit+0x98>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_UART_MspInit+0x98>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
=======
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_UART_MspInit+0x98>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 80032a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b8:	2307      	movs	r3, #7
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	4809      	ldr	r0, [pc, #36]	; (80032e8 <HAL_UART_MspInit+0x9c>)
 80032c4:	f001 faf2 	bl	80048ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 80032c8:	2201      	movs	r2, #1
 80032ca:	2101      	movs	r1, #1
 80032cc:	2025      	movs	r0, #37	; 0x25
 80032ce:	f000 fdcc 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032d2:	2025      	movs	r0, #37	; 0x25
 80032d4:	f000 fde5 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
=======
 80030d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e4:	2307      	movs	r3, #7
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4809      	ldr	r0, [pc, #36]	; (8003114 <HAL_UART_MspInit+0x9c>)
 80030f0:	f001 faf2 	bl	80046d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 80030f4:	2201      	movs	r2, #1
 80030f6:	2101      	movs	r1, #1
 80030f8:	2025      	movs	r0, #37	; 0x25
 80030fa:	f000 fdcc 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030fe:	2025      	movs	r0, #37	; 0x25
 8003100:	f000 fde5 	bl	8003cce <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 9e7a168 (最终版本)
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 80032d8:	bf00      	nop
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40011000 	.word	0x40011000
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020000 	.word	0x40020000

080032ec <__io_putchar>:
=======
 8003104:	bf00      	nop
 8003106:	3728      	adds	r7, #40	; 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40011000 	.word	0x40011000
 8003110:	40023800 	.word	0x40023800
 8003114:	40020000 	.word	0x40020000

08003118 <__io_putchar>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
<<<<<<< HEAD
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80032f4:	1d39      	adds	r1, r7, #4
 80032f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fa:	2201      	movs	r2, #1
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <__io_putchar+0x20>)
 80032fe:	f003 fbc3 	bl	8006a88 <HAL_UART_Transmit>

  return ch;
 8003302:	687b      	ldr	r3, [r7, #4]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20003424 	.word	0x20003424

08003310 <Reset_Handler>:
=======
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003120:	1d39      	adds	r1, r7, #4
 8003122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003126:	2201      	movs	r2, #1
 8003128:	4803      	ldr	r0, [pc, #12]	; (8003138 <__io_putchar+0x20>)
 800312a:	f003 fb9f 	bl	800686c <HAL_UART_Transmit>

  return ch;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	2000343c 	.word	0x2000343c

0800313c <Reset_Handler>:
>>>>>>> parent of 9e7a168 (最终版本)

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8003310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003316:	490e      	ldr	r1, [pc, #56]	; (8003350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800331c:	e002      	b.n	8003324 <LoopCopyDataInit>

0800331e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003322:	3304      	adds	r3, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003328:	d3f9      	bcc.n	800331e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800332c:	4c0b      	ldr	r4, [pc, #44]	; (800335c <LoopFillZerobss+0x26>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003330:	e001      	b.n	8003336 <LoopFillZerobss>

08003332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003334:	3204      	adds	r2, #4

08003336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003338:	d3fb      	bcc.n	8003332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800333a:	f7ff fdd5 	bl	8002ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333e:	f004 fbff 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003342:	f7ff fbcb 	bl	8002adc <main>
  bx  lr    
 8003346:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003354:	0800d394 	.word	0x0800d394
  ldr r2, =_sbss
 8003358:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800335c:	2000347c 	.word	0x2000347c

08003360 <ADC_IRQHandler>:
=======
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003140:	480d      	ldr	r0, [pc, #52]	; (8003178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003158:	4c0b      	ldr	r4, [pc, #44]	; (8003188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003166:	f7ff fdd5 	bl	8002d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316a:	f004 fb2f 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7ff f901 	bl	8002374 <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003180:	0800cf74 	.word	0x0800cf74
  ldr r2, =_sbss
 8003184:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003188:	20003494 	.word	0x20003494

0800318c <ADC_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8003360:	e7fe      	b.n	8003360 <ADC_IRQHandler>
	...

08003364 <HAL_Init>:
=======
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_Init+0x40>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_Init+0x40>)
 800336e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003372:	6013      	str	r3, [r2, #0]
=======
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_Init+0x40>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <HAL_Init+0x40>)
 800337a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800337e:	6013      	str	r3, [r2, #0]
=======
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_Init+0x40>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_Init+0x40>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]
=======
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800338c:	2003      	movs	r0, #3
 800338e:	f000 fd61 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003392:	2000      	movs	r0, #0
 8003394:	f000 f808 	bl	80033a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003398:	f7ff fc66 	bl	8002c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00

080033a8 <HAL_InitTick>:
=======
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 fd61 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fc66 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
>>>>>>> parent of 9e7a168 (最终版本)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_InitTick+0x54>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_InitTick+0x58>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033be:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fd79 	bl	8003ebe <HAL_SYSTICK_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00e      	b.n	80033f4 <HAL_InitTick+0x4c>
=======
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fd79 	bl	8003cea <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d80a      	bhi.n	80033f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033dc:	2200      	movs	r2, #0
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f000 fd41 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e8:	4a06      	ldr	r2, [pc, #24]	; (8003404 <HAL_InitTick+0x5c>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
=======
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f000 fd41 	bl	8003c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000018 	.word	0x20000018
 8003400:	20000020 	.word	0x20000020
 8003404:	2000001c 	.word	0x2000001c

08003408 <HAL_IncTick>:
=======
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000018 	.word	0x20000018
 800322c:	20000020 	.word	0x20000020
 8003230:	2000001c 	.word	0x2000001c

08003234 <HAL_IncTick>:
>>>>>>> parent of 9e7a168 (最终版本)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_IncTick+0x20>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x24>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_IncTick+0x24>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000020 	.word	0x20000020
 800342c:	20003468 	.word	0x20003468

08003430 <HAL_GetTick>:
=======
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000020 	.word	0x20000020
 8003258:	20003480 	.word	0x20003480

0800325c <HAL_GetTick>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_GetTick+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20003468 	.word	0x20003468

08003448 <HAL_Delay>:
=======
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20003480 	.word	0x20003480

08003274 <HAL_Delay>:
>>>>>>> parent of 9e7a168 (最终版本)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff ffee 	bl	8003430 <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d005      	beq.n	800346e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_Delay+0x44>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800346e:	bf00      	nop
 8003470:	f7ff ffde 	bl	8003430 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d8f7      	bhi.n	8003470 <HAL_Delay+0x28>
  {
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000020 	.word	0x20000020

08003490 <HAL_ADC_Init>:
=======
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff ffee 	bl	800325c <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d005      	beq.n	800329a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_Delay+0x44>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800329a:	bf00      	nop
 800329c:	f7ff ffde 	bl	800325c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8f7      	bhi.n	800329c <HAL_Delay+0x28>
  {
  }
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000020 	.word	0x20000020

080032bc <HAL_ADC_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e033      	b.n	800350e <HAL_ADC_Init+0x7e>
=======
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e033      	b.n	800333a <HAL_ADC_Init+0x7e>
>>>>>>> parent of 9e7a168 (最终版本)
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_ADC_Init+0x32>
=======
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_ADC_Init+0x32>
>>>>>>> parent of 9e7a168 (最终版本)

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fe56 	bl	8001160 <HAL_ADC_MspInit>
=======
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe faf4 	bl	80018c8 <HAL_ADC_MspInit>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034d6:	f023 0302 	bic.w	r3, r3, #2
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa68 	bl	80039b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
 80034fe:	e001      	b.n	8003504 <HAL_ADC_Init+0x74>
=======
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa68 	bl	80037e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
 800332a:	e001      	b.n	8003330 <HAL_ADC_Init+0x74>
>>>>>>> parent of 9e7a168 (最终版本)
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
=======
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_ADC_Start_DMA>:
=======
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_ADC_Start_DMA>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
<<<<<<< HEAD
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
=======
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Start_DMA+0x1e>
 8003532:	2302      	movs	r3, #2
 8003534:	e0e9      	b.n	800370a <HAL_ADC_Start_DMA+0x1f2>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Start_DMA+0x1e>
 800335e:	2302      	movs	r3, #2
 8003360:	e0e9      	b.n	8003536 <HAL_ADC_Start_DMA+0x1f2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d018      	beq.n	800357e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	609a      	str	r2, [r3, #8]
=======
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d018      	beq.n	80033aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_ADC_Start_DMA+0x1fc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6d      	ldr	r2, [pc, #436]	; (8003718 <HAL_ADC_Start_DMA+0x200>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0c9a      	lsrs	r2, r3, #18
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003570:	e002      	b.n	8003578 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3b01      	subs	r3, #1
 8003576:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_Start_DMA+0x5a>
=======
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_ADC_Start_DMA+0x1fc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6d      	ldr	r2, [pc, #436]	; (8003544 <HAL_ADC_Start_DMA+0x200>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	0c9a      	lsrs	r2, r3, #18
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800339c:	e002      	b.n	80033a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f9      	bne.n	800339e <HAL_ADC_Start_DMA+0x5a>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
<<<<<<< HEAD
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358c:	d107      	bne.n	800359e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359c:	609a      	str	r2, [r3, #8]
=======
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b8:	d107      	bne.n	80033ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c8:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f040 80a1 	bne.w	80036f0 <HAL_ADC_Start_DMA+0x1d8>
=======
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 80a1 	bne.w	800351c <HAL_ADC_Start_DMA+0x1d8>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d106      	bne.n	80035fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f023 0206 	bic.w	r2, r3, #6
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
 80035fa:	e002      	b.n	8003602 <HAL_ADC_Start_DMA+0xea>
=======
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d106      	bne.n	8003428 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f023 0206 	bic.w	r2, r3, #6
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
 8003426:	e002      	b.n	800342e <HAL_ADC_Start_DMA+0xea>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
<<<<<<< HEAD
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_ADC_Start_DMA+0x204>)
 800360c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_ADC_Start_DMA+0x208>)
 8003614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4a42      	ldr	r2, [pc, #264]	; (8003724 <HAL_ADC_Start_DMA+0x20c>)
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_ADC_Start_DMA+0x210>)
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_ADC_Start_DMA+0x204>)
 8003438:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	4a43      	ldr	r2, [pc, #268]	; (800354c <HAL_ADC_Start_DMA+0x208>)
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	4a42      	ldr	r2, [pc, #264]	; (8003550 <HAL_ADC_Start_DMA+0x20c>)
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4a41      	ldr	r2, [pc, #260]	; (8003554 <HAL_ADC_Start_DMA+0x210>)
 8003450:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> parent of 9e7a168 (最终版本)
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800362e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800363e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	334c      	adds	r3, #76	; 0x4c
 800365a:	4619      	mov	r1, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f000 fdd0 	bl	8004204 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2b00      	cmp	r3, #0
 800366e:	d12a      	bne.n	80036c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_ADC_Start_DMA+0x214>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d015      	beq.n	80036a6 <HAL_ADC_Start_DMA+0x18e>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <HAL_ADC_Start_DMA+0x218>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d105      	bne.n	8003690 <HAL_ADC_Start_DMA+0x178>
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_ADC_Start_DMA+0x204>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_ADC_Start_DMA+0x21c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d136      	bne.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_ADC_Start_DMA+0x204>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d130      	bne.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
=======
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800345a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800346a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	334c      	adds	r3, #76	; 0x4c
 8003486:	4619      	mov	r1, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f000 fdd0 	bl	8004030 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2b00      	cmp	r3, #0
 800349a:	d12a      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_ADC_Start_DMA+0x214>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d015      	beq.n	80034d2 <HAL_ADC_Start_DMA+0x18e>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_ADC_Start_DMA+0x218>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_Start_DMA+0x178>
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_ADC_Start_DMA+0x204>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_ADC_Start_DMA+0x21c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d136      	bne.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_ADC_Start_DMA+0x204>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d130      	bne.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of 9e7a168 (最终版本)
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d129      	bne.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e020      	b.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
=======
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d129      	bne.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	e020      	b.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_ADC_Start_DMA+0x214>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d11b      	bne.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d114      	bne.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	e00b      	b.n	8003708 <HAL_ADC_Start_DMA+0x1f0>
=======
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_ADC_Start_DMA+0x214>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d11b      	bne.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d114      	bne.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e00b      	b.n	8003534 <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0210 	orr.w	r2, r3, #16
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0210 	orr.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000018 	.word	0x20000018
 8003718:	431bde83 	.word	0x431bde83
 800371c:	40012300 	.word	0x40012300
 8003720:	08003bb1 	.word	0x08003bb1
 8003724:	08003c6b 	.word	0x08003c6b
 8003728:	08003c87 	.word	0x08003c87
 800372c:	40012000 	.word	0x40012000
 8003730:	40012100 	.word	0x40012100
 8003734:	40012200 	.word	0x40012200

08003738 <HAL_ADC_ConvCpltCallback>:
=======
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000018 	.word	0x20000018
 8003544:	431bde83 	.word	0x431bde83
 8003548:	40012300 	.word	0x40012300
 800354c:	080039dd 	.word	0x080039dd
 8003550:	08003a97 	.word	0x08003a97
 8003554:	08003ab3 	.word	0x08003ab3
 8003558:	40012000 	.word	0x40012000
 800355c:	40012100 	.word	0x40012100
 8003560:	40012200 	.word	0x40012200

08003564 <HAL_ADC_ConvCpltCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
=======
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_ConvHalfCpltCallback>:
=======
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
=======
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADC_ErrorCallback>:
=======
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADC_ErrorCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
=======
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADC_ConfigChannel>:
=======
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADC_ConfigChannel>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
=======
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x1c>
 800378c:	2302      	movs	r3, #2
 800378e:	e105      	b.n	800399c <HAL_ADC_ConfigChannel+0x228>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d925      	bls.n	80037ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68d9      	ldr	r1, [r3, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	3b1e      	subs	r3, #30
 80037b6:	2207      	movs	r2, #7
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43da      	mvns	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	400a      	ands	r2, r1
 80037c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4403      	add	r3, r0
 80037de:	3b1e      	subs	r3, #30
 80037e0:	409a      	lsls	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	e022      	b.n	8003832 <HAL_ADC_ConfigChannel+0xbe>
=======
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x1c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e105      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x228>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	d925      	bls.n	8003618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68d9      	ldr	r1, [r3, #12]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	3b1e      	subs	r3, #30
 80035e2:	2207      	movs	r2, #7
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43da      	mvns	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	400a      	ands	r2, r1
 80035f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68d9      	ldr	r1, [r3, #12]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	4603      	mov	r3, r0
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4403      	add	r3, r0
 800360a:	3b1e      	subs	r3, #30
 800360c:	409a      	lsls	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	e022      	b.n	800365e <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	2207      	movs	r2, #7
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	400a      	ands	r2, r1
 800380e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6919      	ldr	r1, [r3, #16]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	4618      	mov	r0, r3
 8003822:	4603      	mov	r3, r0
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4403      	add	r3, r0
 8003828:	409a      	lsls	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	611a      	str	r2, [r3, #16]
=======
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	2207      	movs	r2, #7
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	400a      	ands	r2, r1
 800363a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4618      	mov	r0, r3
 800364e:	4603      	mov	r3, r0
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4403      	add	r3, r0
 8003654:	409a      	lsls	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d824      	bhi.n	8003884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	3b05      	subs	r3, #5
 800384c:	221f      	movs	r2, #31
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	400a      	ands	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	4618      	mov	r0, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	3b05      	subs	r3, #5
 8003876:	fa00 f203 	lsl.w	r2, r0, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
 8003882:	e04c      	b.n	800391e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d824      	bhi.n	80038d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	3b23      	subs	r3, #35	; 0x23
 800389e:	221f      	movs	r2, #31
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43da      	mvns	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	400a      	ands	r2, r1
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b23      	subs	r3, #35	; 0x23
 80038c8:	fa00 f203 	lsl.w	r2, r0, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
 80038d4:	e023      	b.n	800391e <HAL_ADC_ConfigChannel+0x1aa>
=======
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b06      	cmp	r3, #6
 8003664:	d824      	bhi.n	80036b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	3b05      	subs	r3, #5
 8003678:	221f      	movs	r2, #31
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b05      	subs	r3, #5
 80036a2:	fa00 f203 	lsl.w	r2, r0, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
 80036ae:	e04c      	b.n	800374a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d824      	bhi.n	8003702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b23      	subs	r3, #35	; 0x23
 80036ca:	221f      	movs	r2, #31
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43da      	mvns	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	400a      	ands	r2, r1
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	3b23      	subs	r3, #35	; 0x23
 80036f4:	fa00 f203 	lsl.w	r2, r0, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003700:	e023      	b.n	800374a <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b41      	subs	r3, #65	; 0x41
 80038e8:	221f      	movs	r2, #31
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	400a      	ands	r2, r1
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	3b41      	subs	r3, #65	; 0x41
 8003912:	fa00 f203 	lsl.w	r2, r0, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	3b41      	subs	r3, #65	; 0x41
 8003714:	221f      	movs	r2, #31
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	400a      	ands	r2, r1
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	4618      	mov	r0, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	3b41      	subs	r3, #65	; 0x41
 800373e:	fa00 f203 	lsl.w	r2, r0, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> parent of 9e7a168 (最终版本)
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_ADC_ConfigChannel+0x234>)
 8003920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_ADC_ConfigChannel+0x238>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1cc>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b12      	cmp	r3, #18
 8003932:	d105      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1cc>
=======
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_ADC_ConfigChannel+0x234>)
 800374c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <HAL_ADC_ConfigChannel+0x238>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d109      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1cc>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b12      	cmp	r3, #18
 800375e:	d105      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> parent of 9e7a168 (最终版本)
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
=======
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_ADC_ConfigChannel+0x238>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d123      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x21e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b10      	cmp	r3, #16
 8003950:	d003      	beq.n	800395a <HAL_ADC_ConfigChannel+0x1e6>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b11      	cmp	r3, #17
 8003958:	d11b      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x21e>
=======
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_ADC_ConfigChannel+0x238>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d123      	bne.n	80037be <HAL_ADC_ConfigChannel+0x21e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b10      	cmp	r3, #16
 800377c:	d003      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x1e6>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b11      	cmp	r3, #17
 8003784:	d11b      	bne.n	80037be <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> parent of 9e7a168 (最终版本)
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d111      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x21e>
=======
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b10      	cmp	r3, #16
 8003798:	d111      	bne.n	80037be <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_ADC_ConfigChannel+0x240>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0c9a      	lsrs	r2, r3, #18
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003984:	e002      	b.n	800398c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x212>
=======
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_ADC_ConfigChannel+0x23c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <HAL_ADC_ConfigChannel+0x240>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	0c9a      	lsrs	r2, r3, #18
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037b0:	e002      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f9      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x212>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012300 	.word	0x40012300
 80039ac:	40012000 	.word	0x40012000
 80039b0:	20000018 	.word	0x20000018
 80039b4:	431bde83 	.word	0x431bde83

080039b8 <ADC_Init>:
=======
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	40012000 	.word	0x40012000
 80037dc:	20000018 	.word	0x20000018
 80037e0:	431bde83 	.word	0x431bde83

080037e4 <ADC_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
=======
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80039c0:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <ADC_Init+0x1f0>)
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6899      	ldr	r1, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
=======
 80037ec:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <ADC_Init+0x1f0>)
 80037ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	021a      	lsls	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800383c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	4a58      	ldr	r2, [pc, #352]	; (8003bac <ADC_Init+0x1f4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6899      	ldr	r1, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	e00f      	b.n	8003ab6 <ADC_Init+0xfe>
=======
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <ADC_Init+0x1f4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800388a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6899      	ldr	r1, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	e00f      	b.n	80038e2 <ADC_Init+0xfe>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ab4:	609a      	str	r2, [r3, #8]
=======
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038e0:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0202 	bic.w	r2, r2, #2
 8003ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6899      	ldr	r1, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7e1b      	ldrb	r3, [r3, #24]
 8003ad0:	005a      	lsls	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <ADC_Init+0x164>
=======
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0202 	bic.w	r2, r2, #2
 80038f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	005a      	lsls	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <ADC_Init+0x164>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	035a      	lsls	r2, r3, #13
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e007      	b.n	8003b2c <ADC_Init+0x174>
=======
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800392e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	3b01      	subs	r3, #1
 800393c:	035a      	lsls	r2, r3, #13
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	e007      	b.n	8003958 <ADC_Init+0x174>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2a:	605a      	str	r2, [r3, #4]
=======
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	051a      	lsls	r2, r3, #20
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b6e:	025a      	lsls	r2, r3, #9
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	029a      	lsls	r2, r3, #10
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40012300 	.word	0x40012300
 8003bac:	0f000001 	.word	0x0f000001

08003bb0 <ADC_DMAConvCplt>:
=======
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	3b01      	subs	r3, #1
 8003974:	051a      	lsls	r2, r3, #20
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800398c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800399a:	025a      	lsls	r2, r3, #9
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	029a      	lsls	r2, r3, #10
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012300 	.word	0x40012300
 80039d8:	0f000001 	.word	0x0f000001

080039dc <ADC_DMAConvCplt>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d13c      	bne.n	8003c44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d13c      	bne.n	8003a70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d12b      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d127      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d119      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
=======
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d12b      	bne.n	8003a68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d127      	bne.n	8003a68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d119      	bne.n	8003a68 <ADC_DMAConvCplt+0x8c>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0220 	bic.w	r2, r2, #32
 8003c16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0220 	bic.w	r2, r2, #32
 8003a42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff fd7b 	bl	8003738 <HAL_ADC_ConvCpltCallback>
=======
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff fd7b 	bl	8003564 <HAL_ADC_ConvCpltCallback>
>>>>>>> parent of 9e7a168 (最终版本)
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8003c42:	e00e      	b.n	8003c62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fd85 	bl	8003760 <HAL_ADC_ErrorCallback>
}
 8003c56:	e004      	b.n	8003c62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAHalfConvCplt>:
=======
 8003a6e:	e00e      	b.n	8003a8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff fd85 	bl	800358c <HAL_ADC_ErrorCallback>
}
 8003a82:	e004      	b.n	8003a8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <ADC_DMAHalfConvCplt>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	60fb      	str	r3, [r7, #12]
=======
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fd67 	bl	800374c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <ADC_DMAError>:
=======
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fd67 	bl	8003578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <ADC_DMAError>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0204 	orr.w	r2, r3, #4
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of 9e7a168 (最终版本)
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fd5a 	bl	8003760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <__NVIC_SetPriorityGrouping>:
=======
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff fd5a 	bl	800358c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of 9e7a168 (最终版本)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
=======
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of 9e7a168 (最终版本)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
=======
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
>>>>>>> parent of 9e7a168 (最终版本)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
=======
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <__NVIC_EnableIRQ+0x38>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_SetPriority>:
>>>>>>> parent of 9e7a168 (最终版本)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db0a      	blt.n	8003baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	490c      	ldr	r1, [pc, #48]	; (8003bcc <__NVIC_SetPriority+0x4c>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
=======
 8003ba8:	e00a      	b.n	8003bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <__NVIC_SetPriority+0x50>)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	761a      	strb	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000e100 	.word	0xe000e100
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <NVIC_EncodePriority>:
>>>>>>> parent of 9e7a168 (最终版本)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
=======
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
=======
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f1c3 0307 	rsb	r3, r3, #7
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf28      	it	cs
 8003bf2:	2304      	movcs	r3, #4
 8003bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d902      	bls.n	8003c04 <NVIC_EncodePriority+0x30>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b03      	subs	r3, #3
 8003c02:	e000      	b.n	8003c06 <NVIC_EncodePriority+0x32>
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	4313      	orrs	r3, r2
         );
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <SysTick_Config>:
>>>>>>> parent of 9e7a168 (最终版本)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f7ff ff8e 	bl	8003b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
=======
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
=======
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff29 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
=======
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
=======
 8003ca8:	f7ff ff3e 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff ff8e 	bl	8003bd4 <NVIC_EncodePriority>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff5d 	bl	8003b80 <__NVIC_SetPriority>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
=======
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
=======
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff31 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SYSTICK_Config>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DAC_Init>:
=======
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffa2 	bl	8003c3c <SysTick_Config>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_DAC_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
<<<<<<< HEAD
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e014      	b.n	8003f12 <HAL_DAC_Init+0x3c>
=======
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e014      	b.n	8003d3e <HAL_DAC_Init+0x3c>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< HEAD
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	791b      	ldrb	r3, [r3, #4]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_DAC_Init+0x28>
=======
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_DAC_Init+0x28>
>>>>>>> parent of 9e7a168 (最终版本)
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	715a      	strb	r2, [r3, #5]
=======
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	715a      	strb	r2, [r3, #5]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< HEAD
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fd fa0b 	bl	8001314 <HAL_DAC_MspInit>
=======
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fe fa47 	bl	80021b8 <HAL_DAC_MspInit>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< HEAD
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_DAC_Start>:
=======
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_DAC_Start>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
<<<<<<< HEAD
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
=======
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	795b      	ldrb	r3, [r3, #5]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_DAC_Start+0x16>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e040      	b.n	8003fb2 <HAL_DAC_Start+0x98>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003f64:	2b3c      	cmp	r3, #60	; 0x3c
 8003f66:	d11d      	bne.n	8003fa4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	e014      	b.n	8003fa4 <HAL_DAC_Start+0x8a>
=======
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	795b      	ldrb	r3, [r3, #5]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_DAC_Start+0x16>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e040      	b.n	8003dde <HAL_DAC_Start+0x98>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003d90:	2b3c      	cmp	r3, #60	; 0x3c
 8003d92:	d11d      	bne.n	8003dd0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	e014      	b.n	8003dd0 <HAL_DAC_Start+0x8a>
>>>>>>> parent of 9e7a168 (最终版本)
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
<<<<<<< HEAD
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	213c      	movs	r1, #60	; 0x3c
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d107      	bne.n	8003fa4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0202 	orr.w	r2, r2, #2
 8003fa2:	605a      	str	r2, [r3, #4]
=======
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	213c      	movs	r1, #60	; 0x3c
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0202 	orr.w	r2, r2, #2
 8003dce:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
<<<<<<< HEAD
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_DAC_SetValue>:
=======
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_DAC_SetValue>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
<<<<<<< HEAD
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
=======
 8003dea:	b480      	push	{r7}
 8003dec:	b087      	sub	sp, #28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
<<<<<<< HEAD
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <HAL_DAC_SetValue+0x34>
=======
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3308      	adds	r3, #8
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e004      	b.n	8003e1e <HAL_DAC_SetValue+0x34>
>>>>>>> parent of 9e7a168 (最终版本)
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
<<<<<<< HEAD
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3314      	adds	r3, #20
 8003ff0:	617b      	str	r3, [r7, #20]
=======
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
<<<<<<< HEAD
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DAC_ConfigChannel>:
=======
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	461a      	mov	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_DAC_ConfigChannel>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
=======
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	795b      	ldrb	r3, [r3, #5]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DAC_ConfigChannel+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e03c      	b.n	800409a <HAL_DAC_ConfigChannel+0x92>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4013      	ands	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
=======
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	795b      	ldrb	r3, [r3, #5]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_DAC_ConfigChannel+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e03c      	b.n	8003ec6 <HAL_DAC_ConfigChannel+0x92>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2202      	movs	r2, #2
 8003e56:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4013      	ands	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
<<<<<<< HEAD
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	22c0      	movs	r2, #192	; 0xc0
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_DMA_Init>:
=======
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	22c0      	movs	r2, #192	; 0xc0
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_DMA_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff f9bc 	bl	8003430 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
=======
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff f9bc 	bl	800325c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e099      	b.n	80041f8 <HAL_DMA_Init+0x150>
=======
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e099      	b.n	8004024 <HAL_DMA_Init+0x150>
>>>>>>> parent of 9e7a168 (最终版本)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e4:	e00f      	b.n	8004106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e6:	f7ff f9a3 	bl	8003430 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d908      	bls.n	8004106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e078      	b.n	80041f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e8      	bne.n	80040e6 <HAL_DMA_Init+0x3e>
=======
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f10:	e00f      	b.n	8003f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f12:	f7ff f9a3 	bl	800325c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d908      	bls.n	8003f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e078      	b.n	8004024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e8      	bne.n	8003f12 <HAL_DMA_Init+0x3e>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4b38      	ldr	r3, [pc, #224]	; (8004200 <HAL_DMA_Init+0x158>)
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
=======
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_DMA_Init+0x158>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4313      	orrs	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
=======
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d107      	bne.n	8003f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	4313      	orrs	r3, r2
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b04      	cmp	r3, #4
 8004198:	d117      	bne.n	80041ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
=======
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d117      	bne.n	8003ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb01 	bl	80047b4 <DMA_CheckFifoParam>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041c6:	2301      	movs	r3, #1
 80041c8:	e016      	b.n	80041f8 <HAL_DMA_Init+0x150>
=======
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fb01 	bl	80045e0 <DMA_CheckFifoParam>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2240      	movs	r2, #64	; 0x40
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e016      	b.n	8004024 <HAL_DMA_Init+0x150>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	615a      	str	r2, [r3, #20]
=======
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 9e7a168 (最终版本)

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fab8 	bl	8004748 <DMA_CalcBaseAndBitshift>
 80041d8:	4603      	mov	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	223f      	movs	r2, #63	; 0x3f
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	f010803f 	.word	0xf010803f

08004204 <HAL_DMA_Start_IT>:
=======
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fab8 	bl	8004574 <DMA_CalcBaseAndBitshift>
 8004004:	4603      	mov	r3, r0
 8004006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	223f      	movs	r2, #63	; 0x3f
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	f010803f 	.word	0xf010803f

08004030 <HAL_DMA_Start_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	613b      	str	r3, [r7, #16]
=======
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_DMA_Start_IT+0x26>
 8004226:	2302      	movs	r3, #2
 8004228:	e040      	b.n	80042ac <HAL_DMA_Start_IT+0xa8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d12f      	bne.n	800429e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fa4a 	bl	80046ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	223f      	movs	r2, #63	; 0x3f
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0216 	orr.w	r2, r2, #22
 8004272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	601a      	str	r2, [r3, #0]
=======
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Start_IT+0x26>
 8004052:	2302      	movs	r3, #2
 8004054:	e040      	b.n	80040d8 <HAL_DMA_Start_IT+0xa8>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d12f      	bne.n	80040ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fa4a 	bl	8004518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	223f      	movs	r2, #63	; 0x3f
 800408a:	409a      	lsls	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0216 	orr.w	r2, r2, #22
 800409e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e005      	b.n	80042aa <HAL_DMA_Start_IT+0xa6>
=======
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e005      	b.n	80040d6 <HAL_DMA_Start_IT+0xa6>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_DMA_Abort>:
=======
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
 80040d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_DMA_Abort>:
>>>>>>> parent of 9e7a168 (最终版本)
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042c2:	f7ff f8b5 	bl	8003430 <HAL_GetTick>
 80042c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d008      	beq.n	80042e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2280      	movs	r2, #128	; 0x80
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e052      	b.n	800438c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0216 	bic.w	r2, r2, #22
 80042f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_DMA_Abort+0x62>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004336:	e013      	b.n	8004360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004338:	f7ff f87a 	bl	8003430 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b05      	cmp	r3, #5
 8004344:	d90c      	bls.n	8004360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2203      	movs	r2, #3
 8004350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e015      	b.n	800438c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e4      	bne.n	8004338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	223f      	movs	r2, #63	; 0x3f
 8004374:	409a      	lsls	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_DMA_Abort_IT>:
=======
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040ee:	f7ff f8b5 	bl	800325c <HAL_GetTick>
 80040f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e052      	b.n	80041b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0216 	bic.w	r2, r2, #22
 8004120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_DMA_Abort+0x62>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0208 	bic.w	r2, r2, #8
 8004150:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004162:	e013      	b.n	800418c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004164:	f7ff f87a 	bl	800325c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b05      	cmp	r3, #5
 8004170:	d90c      	bls.n	800418c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2203      	movs	r2, #3
 800417c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e015      	b.n	80041b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e4      	bne.n	8004164 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	223f      	movs	r2, #63	; 0x3f
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_Abort_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d004      	beq.n	80043b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00c      	b.n	80043cc <HAL_DMA_Abort_IT+0x38>
=======
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00c      	b.n	80041f8 <HAL_DMA_Abort_IT+0x38>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2205      	movs	r2, #5
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_DMA_IRQHandler>:
=======
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2205      	movs	r2, #5
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_DMA_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043e4:	4b8e      	ldr	r3, [pc, #568]	; (8004620 <HAL_DMA_IRQHandler+0x248>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a8e      	ldr	r2, [pc, #568]	; (8004624 <HAL_DMA_IRQHandler+0x24c>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2208      	movs	r2, #8
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01a      	beq.n	8004444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	2208      	movs	r2, #8
 8004432:	409a      	lsls	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	f043 0201 	orr.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004210:	4b92      	ldr	r3, [pc, #584]	; (800445c <HAL_DMA_IRQHandler+0x258>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a92      	ldr	r2, [pc, #584]	; (8004460 <HAL_DMA_IRQHandler+0x25c>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2208      	movs	r2, #8
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2208      	movs	r2, #8
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	2201      	movs	r2, #1
 800444a:	409a      	lsls	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004466:	2201      	movs	r2, #1
 8004468:	409a      	lsls	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f043 0202 	orr.w	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	2201      	movs	r2, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	2204      	movs	r2, #4
 8004480:	409a      	lsls	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4013      	ands	r3, r2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	2204      	movs	r2, #4
 800449e:	409a      	lsls	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	f043 0204 	orr.w	r2, r3, #4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	2204      	movs	r2, #4
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2204      	movs	r2, #4
 80042ca:	409a      	lsls	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0204 	orr.w	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	2210      	movs	r2, #16
 80044b6:	409a      	lsls	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d043      	beq.n	8004548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03c      	beq.n	8004548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	2210      	movs	r2, #16
 80044d4:	409a      	lsls	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d018      	beq.n	800451a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d024      	beq.n	8004548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
 8004506:	e01f      	b.n	8004548 <HAL_DMA_IRQHandler+0x170>
=======
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2210      	movs	r2, #16
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d043      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2210      	movs	r2, #16
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d018      	beq.n	8004346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d024      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e01f      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of 9e7a168 (最终版本)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
 8004518:	e016      	b.n	8004548 <HAL_DMA_IRQHandler+0x170>
=======
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e016      	b.n	8004374 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d107      	bne.n	8004538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0208 	bic.w	r2, r2, #8
 8004536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
=======
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0208 	bic.w	r2, r2, #8
 8004362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	2220      	movs	r2, #32
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 808f 	beq.w	8004678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8087 	beq.w	8004678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	2220      	movs	r2, #32
 8004570:	409a      	lsls	r2, r3
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b05      	cmp	r3, #5
 8004580:	d136      	bne.n	80045f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0216 	bic.w	r2, r2, #22
 8004590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <HAL_DMA_IRQHandler+0x1da>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0208 	bic.w	r2, r2, #8
 80045c0:	601a      	str	r2, [r3, #0]
=======
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2220      	movs	r2, #32
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808e 	beq.w	80044a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8086 	beq.w	80044a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2220      	movs	r2, #32
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d136      	bne.n	800441c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0216 	bic.w	r2, r2, #22
 80043bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_DMA_IRQHandler+0x1da>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0208 	bic.w	r2, r2, #8
 80043ec:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	223f      	movs	r2, #63	; 0x3f
 80045c8:	409a      	lsls	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d07e      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
        }
        return;
 80045ee:	e079      	b.n	80046e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01d      	beq.n	800463a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10d      	bne.n	8004628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	2b00      	cmp	r3, #0
 8004612:	d031      	beq.n	8004678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
 800461c:	e02c      	b.n	8004678 <HAL_DMA_IRQHandler+0x2a0>
 800461e:	bf00      	nop
 8004620:	20000018 	.word	0x20000018
 8004624:	1b4e81b5 	.word	0x1b4e81b5
=======
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	223f      	movs	r2, #63	; 0x3f
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d07d      	beq.n	800450e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
        }
        return;
 800441a:	e078      	b.n	800450e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01c      	beq.n	8004464 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	2b00      	cmp	r3, #0
 800443e:	d030      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e02b      	b.n	80044a2 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> parent of 9e7a168 (最终版本)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d023      	beq.n	8004678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e01e      	b.n	8004678 <HAL_DMA_IRQHandler+0x2a0>
=======
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d027      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e022      	b.n	80044a2 <HAL_DMA_IRQHandler+0x29e>
 800445c:	20000018 	.word	0x20000018
 8004460:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0210 	bic.w	r2, r2, #16
 8004656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
=======
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0210 	bic.w	r2, r2, #16
 8004480:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	2b00      	cmp	r3, #0
 800467e:	d032      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2205      	movs	r2, #5
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
=======
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d032      	beq.n	8004510 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d022      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2205      	movs	r2, #5
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d307      	bcc.n	80046c0 <HAL_DMA_IRQHandler+0x2e8>
=======
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d307      	bcc.n	80044ea <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> parent of 9e7a168 (最终版本)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f2      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x2cc>
 80046be:	e000      	b.n	80046c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
 80046e2:	e000      	b.n	80046e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046e4:	bf00      	nop
    }
  }
}
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <DMA_SetConfig>:
=======
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f2      	bne.n	80044ce <HAL_DMA_IRQHandler+0x2ca>
 80044e8:	e000      	b.n	80044ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e000      	b.n	8004510 <HAL_DMA_IRQHandler+0x30c>
        return;
 800450e:	bf00      	nop
    }
  }
}
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <DMA_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d108      	bne.n	800472c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	60da      	str	r2, [r3, #12]
=======
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d108      	bne.n	8004558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 9e7a168 (最终版本)
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 800472a:	e007      	b.n	800473c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <DMA_CalcBaseAndBitshift>:
=======
 8004556:	e007      	b.n	8004568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <DMA_CalcBaseAndBitshift>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	3b10      	subs	r3, #16
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <DMA_CalcBaseAndBitshift+0x64>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
=======
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3b10      	subs	r3, #16
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d909      	bls.n	800478a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	659a      	str	r2, [r3, #88]	; 0x58
 8004788:	e007      	b.n	800479a <DMA_CalcBaseAndBitshift+0x52>
=======
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <DMA_CalcBaseAndBitshift+0x68>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d909      	bls.n	80045b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	; 0x58
 80045b4:	e007      	b.n	80045c6 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	aaaaaaab 	.word	0xaaaaaaab
 80047b0:	0800c6c8 	.word	0x0800c6c8

080047b4 <DMA_CheckFifoParam>:
=======
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	0800c2a0 	.word	0x0800c2a0

080045e0 <DMA_CheckFifoParam>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11f      	bne.n	800480e <DMA_CheckFifoParam+0x5a>
=======
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11f      	bne.n	800463a <DMA_CheckFifoParam+0x5a>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d856      	bhi.n	80046ae <DMA_CheckFifoParam+0xce>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x28>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	0800462b 	.word	0x0800462b
 8004610:	08004619 	.word	0x08004619
 8004614:	080046af 	.word	0x080046af
>>>>>>> parent of 9e7a168 (最终版本)
  {
    switch (tmp)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d856      	bhi.n	8004882 <DMA_CheckFifoParam+0xce>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <DMA_CheckFifoParam+0x28>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047ff 	.word	0x080047ff
 80047e4:	080047ed 	.word	0x080047ed
 80047e8:	08004883 	.word	0x08004883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d046      	beq.n	8004886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fc:	e043      	b.n	8004886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004806:	d140      	bne.n	800488a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480c:	e03d      	b.n	800488a <DMA_CheckFifoParam+0xd6>
=======
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d046      	beq.n	80046b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e043      	b.n	80046b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004632:	d140      	bne.n	80046b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004638:	e03d      	b.n	80046b6 <DMA_CheckFifoParam+0xd6>
>>>>>>> parent of 9e7a168 (最终版本)
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004816:	d121      	bne.n	800485c <DMA_CheckFifoParam+0xa8>
=======
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	d121      	bne.n	8004688 <DMA_CheckFifoParam+0xa8>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d837      	bhi.n	80046ba <DMA_CheckFifoParam+0xda>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <DMA_CheckFifoParam+0x70>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	08004667 	.word	0x08004667
 8004658:	08004661 	.word	0x08004661
 800465c:	08004679 	.word	0x08004679
>>>>>>> parent of 9e7a168 (最终版本)
  {
    switch (tmp)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d837      	bhi.n	800488e <DMA_CheckFifoParam+0xda>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <DMA_CheckFifoParam+0x70>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004835 	.word	0x08004835
 8004828:	0800483b 	.word	0x0800483b
 800482c:	08004835 	.word	0x08004835
 8004830:	0800484d 	.word	0x0800484d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e030      	b.n	800489c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d025      	beq.n	8004892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484a:	e022      	b.n	8004892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004854:	d11f      	bne.n	8004896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800485a:	e01c      	b.n	8004896 <DMA_CheckFifoParam+0xe2>
=======
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e030      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d025      	beq.n	80046be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004676:	e022      	b.n	80046be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004680:	d11f      	bne.n	80046c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004686:	e01c      	b.n	80046c2 <DMA_CheckFifoParam+0xe2>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d903      	bls.n	800486a <DMA_CheckFifoParam+0xb6>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d003      	beq.n	8004870 <DMA_CheckFifoParam+0xbc>
=======
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d903      	bls.n	8004696 <DMA_CheckFifoParam+0xb6>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d003      	beq.n	800469c <DMA_CheckFifoParam+0xbc>
>>>>>>> parent of 9e7a168 (最终版本)
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8004868:	e018      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      break;
 800486e:	e015      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e00b      	b.n	800489a <DMA_CheckFifoParam+0xe6>
      break;
 8004882:	bf00      	nop
 8004884:	e00a      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;
 8004886:	bf00      	nop
 8004888:	e008      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;
 800488a:	bf00      	nop
 800488c:	e006      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;
 800488e:	bf00      	nop
 8004890:	e004      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;   
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <DMA_CheckFifoParam+0xe8>
      break;
 800489a:	bf00      	nop
=======
 8004694:	e018      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      break;
 800469a:	e015      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e00b      	b.n	80046c6 <DMA_CheckFifoParam+0xe6>
      break;
 80046ae:	bf00      	nop
 80046b0:	e00a      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e008      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e006      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e004      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
>>>>>>> parent of 9e7a168 (最终版本)
    }
  } 
  
  return status; 
<<<<<<< HEAD
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop

080048ac <HAL_GPIO_Init>:
=======
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <HAL_GPIO_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	; 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
=======
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e16b      	b.n	8004ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048c8:	2201      	movs	r2, #1
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	f040 815a 	bne.w	8004b9a <HAL_GPIO_Init+0x2ee>
=======
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e16b      	b.n	80049cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 815a 	bne.w	80049c6 <HAL_GPIO_Init+0x2ee>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d005      	beq.n	80048fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d130      	bne.n	8004960 <HAL_GPIO_Init+0xb4>
=======
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb4>
>>>>>>> parent of 9e7a168 (最终版本)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004934:	2201      	movs	r2, #1
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0201 	and.w	r2, r3, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d017      	beq.n	800499c <HAL_GPIO_Init+0xf0>
=======
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf0>
>>>>>>> parent of 9e7a168 (最终版本)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2203      	movs	r2, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	60da      	str	r2, [r3, #12]
=======
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 9e7a168 (最终版本)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d123      	bne.n	80049f0 <HAL_GPIO_Init+0x144>
=======
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x144>
>>>>>>> parent of 9e7a168 (最终版本)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	08da      	lsrs	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3208      	adds	r2, #8
 80049ea:	69b9      	ldr	r1, [r7, #24]
 80049ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> parent of 9e7a168 (最终版本)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0203 	and.w	r2, r3, #3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	601a      	str	r2, [r3, #0]
=======
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80b4 	beq.w	8004b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <HAL_GPIO_Init+0x30c>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	4a5f      	ldr	r2, [pc, #380]	; (8004bb8 <HAL_GPIO_Init+0x30c>)
 8004a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a40:	6453      	str	r3, [r2, #68]	; 0x44
 8004a42:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <HAL_GPIO_Init+0x30c>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4e:	4a5b      	ldr	r2, [pc, #364]	; (8004bbc <HAL_GPIO_Init+0x310>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_GPIO_Init+0x314>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <HAL_GPIO_Init+0x226>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a51      	ldr	r2, [pc, #324]	; (8004bc4 <HAL_GPIO_Init+0x318>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d025      	beq.n	8004ace <HAL_GPIO_Init+0x222>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a50      	ldr	r2, [pc, #320]	; (8004bc8 <HAL_GPIO_Init+0x31c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <HAL_GPIO_Init+0x21e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a4f      	ldr	r2, [pc, #316]	; (8004bcc <HAL_GPIO_Init+0x320>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d019      	beq.n	8004ac6 <HAL_GPIO_Init+0x21a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4e      	ldr	r2, [pc, #312]	; (8004bd0 <HAL_GPIO_Init+0x324>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x216>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4d      	ldr	r2, [pc, #308]	; (8004bd4 <HAL_GPIO_Init+0x328>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x212>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4c      	ldr	r2, [pc, #304]	; (8004bd8 <HAL_GPIO_Init+0x32c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4b      	ldr	r2, [pc, #300]	; (8004bdc <HAL_GPIO_Init+0x330>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x20a>
 8004ab2:	2307      	movs	r3, #7
 8004ab4:	e00e      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	e00c      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004aba:	2306      	movs	r3, #6
 8004abc:	e00a      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004abe:	2305      	movs	r3, #5
 8004ac0:	e008      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e006      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e004      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e002      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_GPIO_Init+0x228>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	f002 0203 	and.w	r2, r2, #3
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	4093      	lsls	r3, r2
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae4:	4935      	ldr	r1, [pc, #212]	; (8004bbc <HAL_GPIO_Init+0x310>)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	3302      	adds	r3, #2
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af2:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b16:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b1c:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b70:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_GPIO_Init+0x334>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	f67f ae90 	bls.w	80048c8 <HAL_GPIO_Init+0x1c>
=======
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80b4 	beq.w	80049c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b60      	ldr	r3, [pc, #384]	; (80049e4 <HAL_GPIO_Init+0x30c>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	4a5f      	ldr	r2, [pc, #380]	; (80049e4 <HAL_GPIO_Init+0x30c>)
 8004868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486c:	6453      	str	r3, [r2, #68]	; 0x44
 800486e:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_GPIO_Init+0x30c>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800487a:	4a5b      	ldr	r2, [pc, #364]	; (80049e8 <HAL_GPIO_Init+0x310>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_GPIO_Init+0x314>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <HAL_GPIO_Init+0x226>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a51      	ldr	r2, [pc, #324]	; (80049f0 <HAL_GPIO_Init+0x318>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d025      	beq.n	80048fa <HAL_GPIO_Init+0x222>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a50      	ldr	r2, [pc, #320]	; (80049f4 <HAL_GPIO_Init+0x31c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01f      	beq.n	80048f6 <HAL_GPIO_Init+0x21e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4f      	ldr	r2, [pc, #316]	; (80049f8 <HAL_GPIO_Init+0x320>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d019      	beq.n	80048f2 <HAL_GPIO_Init+0x21a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4e      	ldr	r2, [pc, #312]	; (80049fc <HAL_GPIO_Init+0x324>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_GPIO_Init+0x216>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_GPIO_Init+0x328>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00d      	beq.n	80048ea <HAL_GPIO_Init+0x212>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_GPIO_Init+0x32c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_GPIO_Init+0x20e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <HAL_GPIO_Init+0x330>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_GPIO_Init+0x20a>
 80048de:	2307      	movs	r3, #7
 80048e0:	e00e      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048e2:	2308      	movs	r3, #8
 80048e4:	e00c      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048e6:	2306      	movs	r3, #6
 80048e8:	e00a      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e008      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048f2:	2303      	movs	r3, #3
 80048f4:	e004      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e002      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_GPIO_Init+0x228>
 80048fe:	2300      	movs	r3, #0
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	f002 0203 	and.w	r2, r2, #3
 8004906:	0092      	lsls	r2, r2, #2
 8004908:	4093      	lsls	r3, r2
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004910:	4935      	ldr	r1, [pc, #212]	; (80049e8 <HAL_GPIO_Init+0x310>)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	3302      	adds	r3, #2
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_GPIO_Init+0x334>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004942:	4a32      	ldr	r2, [pc, #200]	; (8004a0c <HAL_GPIO_Init+0x334>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004948:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_GPIO_Init+0x334>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496c:	4a27      	ldr	r2, [pc, #156]	; (8004a0c <HAL_GPIO_Init+0x334>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_GPIO_Init+0x334>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_GPIO_Init+0x334>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_GPIO_Init+0x334>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_GPIO_Init+0x334>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	f67f ae90 	bls.w	80046f4 <HAL_GPIO_Init+0x1c>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
}
<<<<<<< HEAD
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020c00 	.word	0x40020c00
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40021400 	.word	0x40021400
 8004bd8:	40021800 	.word	0x40021800
 8004bdc:	40021c00 	.word	0x40021c00
 8004be0:	40013c00 	.word	0x40013c00

08004be4 <HAL_GPIO_ReadPin>:
=======
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40020000 	.word	0x40020000
 80049f0:	40020400 	.word	0x40020400
 80049f4:	40020800 	.word	0x40020800
 80049f8:	40020c00 	.word	0x40020c00
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40021400 	.word	0x40021400
 8004a04:	40021800 	.word	0x40021800
 8004a08:	40021c00 	.word	0x40021c00
 8004a0c:	40013c00 	.word	0x40013c00

08004a10 <HAL_GPIO_ReadPin>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
=======
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
>>>>>>> parent of 9e7a168 (最终版本)
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	e001      	b.n	8004c06 <HAL_GPIO_ReadPin+0x22>
=======
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e001      	b.n	8004a32 <HAL_GPIO_ReadPin+0x22>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_GPIO_WritePin>:
=======
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_GPIO_WritePin>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	807b      	strh	r3, [r7, #2]
 8004c20:	4613      	mov	r3, r2
 8004c22:	707b      	strb	r3, [r7, #1]
=======
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8004c24:	787b      	ldrb	r3, [r7, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c2a:	887a      	ldrh	r2, [r7, #2]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	619a      	str	r2, [r3, #24]
=======
 8004a50:	787b      	ldrb	r3, [r7, #1]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a56:	887a      	ldrh	r2, [r7, #2]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8004c30:	e003      	b.n	8004c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	041a      	lsls	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	619a      	str	r2, [r3, #24]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_RCC_OscConfig>:
=======
 8004a5c:	e003      	b.n	8004a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	041a      	lsls	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	619a      	str	r2, [r3, #24]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_RCC_OscConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
=======
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e267      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
=======
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e264      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d075      	beq.n	8004d52 <HAL_RCC_OscConfig+0x10a>
=======
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d075      	beq.n	8004b7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8004c66:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d00c      	beq.n	8004c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b85      	ldr	r3, [pc, #532]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d112      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7e:	4b82      	ldr	r3, [pc, #520]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	4b7e      	ldr	r3, [pc, #504]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05b      	beq.n	8004d50 <HAL_RCC_OscConfig+0x108>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d157      	bne.n	8004d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e242      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
=======
 8004a92:	4ba3      	ldr	r3, [pc, #652]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4ba0      	ldr	r3, [pc, #640]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d112      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aaa:	4b9d      	ldr	r3, [pc, #628]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	4b99      	ldr	r3, [pc, #612]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d05b      	beq.n	8004b7c <HAL_RCC_OscConfig+0x108>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d157      	bne.n	8004b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e23f      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d106      	bne.n	8004cbc <HAL_RCC_OscConfig+0x74>
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e01d      	b.n	8004cf8 <HAL_RCC_OscConfig+0xb0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x98>
 8004cc6:	4b70      	ldr	r3, [pc, #448]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6f      	ldr	r2, [pc, #444]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b6d      	ldr	r3, [pc, #436]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6c      	ldr	r2, [pc, #432]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e00b      	b.n	8004cf8 <HAL_RCC_OscConfig+0xb0>
 8004ce0:	4b69      	ldr	r3, [pc, #420]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a68      	ldr	r2, [pc, #416]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a65      	ldr	r2, [pc, #404]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d013      	beq.n	8004d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fe fb96 	bl	8003430 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d08:	f7fe fb92 	bl	8003430 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b64      	cmp	r3, #100	; 0x64
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e207      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0xc0>
 8004d26:	e014      	b.n	8004d52 <HAL_RCC_OscConfig+0x10a>
=======
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x74>
 8004ada:	4b91      	ldr	r3, [pc, #580]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a90      	ldr	r2, [pc, #576]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x98>
 8004af2:	4b8b      	ldr	r3, [pc, #556]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a8a      	ldr	r2, [pc, #552]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004b0c:	4b84      	ldr	r3, [pc, #528]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a83      	ldr	r2, [pc, #524]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a80      	ldr	r2, [pc, #512]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fb96 	bl	800325c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fe fb92 	bl	800325c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e204      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xc0>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004d28:	f7fe fb82 	bl	8003430 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d30:	f7fe fb7e 	bl	8003430 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	; 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e1f3      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d42:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0xe8>
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d50:	bf00      	nop
=======
 8004b54:	f7fe fb82 	bl	800325c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe fb7e 	bl	800325c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1f0      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0xe8>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d063      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1de>
=======
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d063      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 9e7a168 (最终版本)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d11c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d116      	bne.n	8004db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d82:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x152>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e1c7      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
=======
 8004b8a:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba2:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b5c      	ldr	r3, [pc, #368]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1c4      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004d9a:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4937      	ldr	r1, [pc, #220]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dae:	e03a      	b.n	8004e26 <HAL_RCC_OscConfig+0x1de>
=======
 8004bc6:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4952      	ldr	r1, [pc, #328]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e03a      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db8:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fb37 	bl	8003430 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fe fb33 	bl	8003430 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e1a8      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x17e>
=======
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b4f      	ldr	r3, [pc, #316]	; (8004d24 <HAL_RCC_OscConfig+0x2b0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fe fb37 	bl	800325c <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fb33 	bl	800325c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1a5      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x17e>
>>>>>>> parent of 9e7a168 (最终版本)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004de4:	4b28      	ldr	r3, [pc, #160]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4925      	ldr	r1, [pc, #148]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]
 8004df8:	e015      	b.n	8004e26 <HAL_RCC_OscConfig+0x1de>
=======
 8004c10:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4940      	ldr	r1, [pc, #256]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fe fb16 	bl	8003430 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e08:	f7fe fb12 	bl	8003430 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e187      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x1c0>
=======
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCC_OscConfig+0x2b0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fb16 	bl	800325c <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fe fb12 	bl	800325c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e184      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d036      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x258>
=======
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d030      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_RCC_OscConfig+0x248>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fe faf6 	bl	8003430 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fe faf2 	bl	8003430 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e167      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x200>
 8004e66:	e01b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x258>
=======
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c66:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <HAL_RCC_OscConfig+0x2b4>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fe faf6 	bl	800325c <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fe faf2 	bl	800325c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e164      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x200>
 8004c92:	e015      	b.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x248>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fadf 	bl	8003430 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e74:	e00e      	b.n	8004e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e76:	f7fe fadb 	bl	8003430 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d907      	bls.n	8004e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e150      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	42470000 	.word	0x42470000
 8004e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ea      	bne.n	8004e76 <HAL_RCC_OscConfig+0x22e>
=======
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCC_OscConfig+0x2b4>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fe fadf 	bl	800325c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fe fadb 	bl	800325c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e14d      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8097 	beq.w	8004fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]
=======
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a0 	beq.w	8004e0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 9e7a168 (最终版本)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8004eb2:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	4b7d      	ldr	r3, [pc, #500]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a7c      	ldr	r2, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b7a      	ldr	r3, [pc, #488]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	4b77      	ldr	r3, [pc, #476]	; (80050bc <HAL_RCC_OscConfig+0x474>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d118      	bne.n	8004f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eea:	4b74      	ldr	r3, [pc, #464]	; (80050bc <HAL_RCC_OscConfig+0x474>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a73      	ldr	r2, [pc, #460]	; (80050bc <HAL_RCC_OscConfig+0x474>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fe fa9b 	bl	8003430 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fe fa97 	bl	8003430 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e10c      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_OscConfig+0x474>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x2b6>
=======
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_OscConfig+0x2b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d121      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_RCC_OscConfig+0x2b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_RCC_OscConfig+0x2b8>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d16:	f7fe faa1 	bl	800325c <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	e011      	b.n	8004d42 <HAL_RCC_OscConfig+0x2ce>
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470000 	.word	0x42470000
 8004d28:	42470e80 	.word	0x42470e80
 8004d2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fe fa94 	bl	800325c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e106      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d42:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCC_OscConfig+0x4e4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <HAL_RCC_OscConfig+0x2ea>
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a63      	ldr	r2, [pc, #396]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f30:	e01c      	b.n	8004f6c <HAL_RCC_OscConfig+0x324>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x30c>
 8004f3a:	4b5f      	ldr	r3, [pc, #380]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	4a5e      	ldr	r2, [pc, #376]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	6713      	str	r3, [r2, #112]	; 0x70
 8004f46:	4b5c      	ldr	r3, [pc, #368]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	4a5b      	ldr	r2, [pc, #364]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0x324>
 8004f54:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a54      	ldr	r2, [pc, #336]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f66:	f023 0304 	bic.w	r3, r3, #4
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fe fa5c 	bl	8003430 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fe fa58 	bl	8003430 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0cb      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f92:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ee      	beq.n	8004f7c <HAL_RCC_OscConfig+0x334>
 8004f9e:	e014      	b.n	8004fca <HAL_RCC_OscConfig+0x382>
=======
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <HAL_RCC_OscConfig+0x2f0>
 8004d56:	4b81      	ldr	r3, [pc, #516]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a80      	ldr	r2, [pc, #512]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
 8004d62:	e01c      	b.n	8004d9e <HAL_RCC_OscConfig+0x32a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x312>
 8004d6c:	4b7b      	ldr	r3, [pc, #492]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a7a      	ldr	r2, [pc, #488]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d72:	f043 0304 	orr.w	r3, r3, #4
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a77      	ldr	r2, [pc, #476]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
 8004d84:	e00b      	b.n	8004d9e <HAL_RCC_OscConfig+0x32a>
 8004d86:	4b75      	ldr	r3, [pc, #468]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4a74      	ldr	r2, [pc, #464]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70
 8004d92:	4b72      	ldr	r3, [pc, #456]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a71      	ldr	r2, [pc, #452]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d015      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fe fa59 	bl	800325c <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fe fa55 	bl	800325c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0c5      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ee      	beq.n	8004dae <HAL_RCC_OscConfig+0x33a>
 8004dd0:	e014      	b.n	8004dfc <HAL_RCC_OscConfig+0x388>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004fa0:	f7fe fa46 	bl	8003430 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa8:	f7fe fa42 	bl	8003430 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e0b5      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ee      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x360>
=======
 8004dd2:	f7fe fa43 	bl	800325c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fe fa3f 	bl	800325c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0af      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	4b5a      	ldr	r3, [pc, #360]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ee      	bne.n	8004dda <HAL_RCC_OscConfig+0x366>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	4a38      	ldr	r2, [pc, #224]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d105      	bne.n	8004e0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a55      	ldr	r2, [pc, #340]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80a1 	beq.w	8005128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d05c      	beq.n	80050ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d141      	bne.n	800507e <HAL_RCC_OscConfig+0x436>
=======
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 809b 	beq.w	8004f4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d05c      	beq.n	8004ede <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d141      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x43c>
>>>>>>> parent of 9e7a168 (最终版本)
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <HAL_RCC_OscConfig+0x478>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fe fa16 	bl	8003430 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005008:	f7fe fa12 	bl	8003430 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e087      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x3c0>
=======
 8004e2c:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <HAL_RCC_OscConfig+0x4ec>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fe fa13 	bl	800325c <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fe fa0f 	bl	800325c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e081      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4c:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> parent of 9e7a168 (最终版本)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	3b01      	subs	r3, #1
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	491b      	ldr	r1, [pc, #108]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
=======
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	019b      	lsls	r3, r3, #6
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	3b01      	subs	r3, #1
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	4937      	ldr	r1, [pc, #220]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
>>>>>>> parent of 9e7a168 (最终版本)
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x478>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fe f9eb 	bl	8003430 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505e:	f7fe f9e7 	bl	8003430 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e05c      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x416>
 800507c:	e054      	b.n	8005128 <HAL_RCC_OscConfig+0x4e0>
=======
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCC_OscConfig+0x4ec>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe f9e8 	bl	800325c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe f9e4 	bl	800325c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e056      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x41c>
 8004eae:	e04e      	b.n	8004f4e <HAL_RCC_OscConfig+0x4da>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_RCC_OscConfig+0x478>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fe f9d4 	bl	8003430 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508c:	f7fe f9d0 	bl	8003430 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e045      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x470>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x444>
 80050aa:	e03d      	b.n	8005128 <HAL_RCC_OscConfig+0x4e0>
=======
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <HAL_RCC_OscConfig+0x4ec>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fe f9d1 	bl	800325c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fe f9cd 	bl	800325c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e03f      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x44a>
 8004edc:	e037      	b.n	8004f4e <HAL_RCC_OscConfig+0x4da>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e038      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40007000 	.word	0x40007000
 80050c0:	42470060 	.word	0x42470060
=======
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e032      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80050c4:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <HAL_RCC_OscConfig+0x4ec>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
=======
 8004eea:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d028      	beq.n	8005124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d121      	bne.n	8005124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d11a      	bne.n	8005124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d111      	bne.n	8005124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	3b01      	subs	r3, #1
 800510e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d107      	bne.n	8005124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x4e2>
=======
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d028      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d121      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d11a      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	3b01      	subs	r3, #1
 8004f34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 9e7a168 (最终版本)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800

08005138 <HAL_RCC_ClockConfig>:
=======
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	42470060 	.word	0x42470060

08004f64 <HAL_RCC_ClockConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
=======
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0cc      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0cc      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800514c:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d90c      	bls.n	8005174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b65      	ldr	r3, [pc, #404]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
=======
 8004f78:	4b68      	ldr	r3, [pc, #416]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90c      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b65      	ldr	r3, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0b8      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x8a>
=======
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x8a>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ae:	6093      	str	r3, [r2, #8]
=======
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fda:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 9e7a168 (最终版本)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	494d      	ldr	r1, [pc, #308]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
=======
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d044      	beq.n	8005258 <HAL_RCC_ClockConfig+0x120>
=======
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d044      	beq.n	8005084 <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d119      	bne.n	8005216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d119      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f6:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e06f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d003      	beq.n	8005022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501e:	2b03      	cmp	r3, #3
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005022:	4b3f      	ldr	r3, [pc, #252]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005206:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e067      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e067      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8005216:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f023 0203 	bic.w	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4934      	ldr	r1, [pc, #208]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	4313      	orrs	r3, r2
 8005226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005228:	f7fe f902 	bl	8003430 <HAL_GetTick>
 800522c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	e00a      	b.n	8005246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005230:	f7fe f8fe 	bl	8003430 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	; 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e04f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005246:	4b2b      	ldr	r3, [pc, #172]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 020c 	and.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	429a      	cmp	r2, r3
 8005256:	d1eb      	bne.n	8005230 <HAL_RCC_ClockConfig+0xf8>
=======
 8005042:	4b37      	ldr	r3, [pc, #220]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4934      	ldr	r1, [pc, #208]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005054:	f7fe f902 	bl	800325c <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fe f8fe 	bl	800325c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	; 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005258:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d20c      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
=======
 8005084:	4b25      	ldr	r3, [pc, #148]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d20c      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e032      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4916      	ldr	r1, [pc, #88]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
=======
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
=======
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80052be:	f000 f821 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	490a      	ldr	r1, [pc, #40]	; (80052f8 <HAL_RCC_ClockConfig+0x1c0>)
 80052d0:	5ccb      	ldrb	r3, [r1, r3]
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x1c8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe f862 	bl	80033a8 <HAL_InitTick>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023c00 	.word	0x40023c00
 80052f4:	40023800 	.word	0x40023800
 80052f8:	0800c6b0 	.word	0x0800c6b0
 80052fc:	20000018 	.word	0x20000018
 8005300:	2000001c 	.word	0x2000001c

08005304 <HAL_RCC_GetSysClockFreq>:
=======
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe f862 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023c00 	.word	0x40023c00
 8005120:	40023800 	.word	0x40023800
 8005124:	0800c288 	.word	0x0800c288
 8005128:	20000018 	.word	0x20000018
 800512c:	2000001c 	.word	0x2000001c

08005130 <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of 9e7a168 (最终版本)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b094      	sub	sp, #80	; 0x50
 800530a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	647b      	str	r3, [r7, #68]	; 0x44
 8005310:	2300      	movs	r3, #0
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	2300      	movs	r3, #0
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800531c:	4b79      	ldr	r3, [pc, #484]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b08      	cmp	r3, #8
 8005326:	d00d      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x40>
 8005328:	2b08      	cmp	r3, #8
 800532a:	f200 80e1 	bhi.w	80054f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x34>
 8005332:	2b04      	cmp	r3, #4
 8005334:	d003      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x3a>
 8005336:	e0db      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8005130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	2300      	movs	r3, #0
 8005142:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005148:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d00d      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 8005154:	2b08      	cmp	r3, #8
 8005156:	f200 80bd 	bhi.w	80052d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x34>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x3a>
 8005162:	e0b7      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x1a4>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8005338:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCC_GetSysClockFreq+0x204>)
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800533c:	e0db      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005166:	60bb      	str	r3, [r7, #8]
       break;
 8005168:	e0b7      	b.n	80052da <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800533e:	4b73      	ldr	r3, [pc, #460]	; (800550c <HAL_RCC_GetSysClockFreq+0x208>)
 8005340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005342:	e0d8      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800516a:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800516c:	60bb      	str	r3, [r7, #8]
      break;
 800516e:	e0b4      	b.n	80052da <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8005344:	4b6f      	ldr	r3, [pc, #444]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800534c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d063      	beq.n	8005422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	2200      	movs	r2, #0
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
 8005364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	f04f 0000 	mov.w	r0, #0
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005388:	0150      	lsls	r0, r2, #5
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4621      	mov	r1, r4
 8005390:	1a51      	subs	r1, r2, r1
 8005392:	6139      	str	r1, [r7, #16]
 8005394:	4629      	mov	r1, r5
 8005396:	eb63 0301 	sbc.w	r3, r3, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a8:	4659      	mov	r1, fp
 80053aa:	018b      	lsls	r3, r1, #6
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053b2:	4651      	mov	r1, sl
 80053b4:	018a      	lsls	r2, r1, #6
 80053b6:	4651      	mov	r1, sl
 80053b8:	ebb2 0801 	subs.w	r8, r2, r1
 80053bc:	4659      	mov	r1, fp
 80053be:	eb63 0901 	sbc.w	r9, r3, r1
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d6:	4690      	mov	r8, r2
 80053d8:	4699      	mov	r9, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	eb18 0303 	adds.w	r3, r8, r3
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	462b      	mov	r3, r5
 80053e4:	eb49 0303 	adc.w	r3, r9, r3
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053f6:	4629      	mov	r1, r5
 80053f8:	024b      	lsls	r3, r1, #9
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005400:	4621      	mov	r1, r4
 8005402:	024a      	lsls	r2, r1, #9
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540a:	2200      	movs	r2, #0
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
 800540e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005414:	f7fb fc38 	bl	8000c88 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005420:	e058      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8005170:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800517a:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04d      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b58      	ldr	r3, [pc, #352]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	ea02 0800 	and.w	r8, r2, r0
 800519e:	ea03 0901 	and.w	r9, r3, r1
 80051a2:	4640      	mov	r0, r8
 80051a4:	4649      	mov	r1, r9
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	014b      	lsls	r3, r1, #5
 80051b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051b4:	0142      	lsls	r2, r0, #5
 80051b6:	4610      	mov	r0, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	ebb0 0008 	subs.w	r0, r0, r8
 80051be:	eb61 0109 	sbc.w	r1, r1, r9
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	018b      	lsls	r3, r1, #6
 80051cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051d0:	0182      	lsls	r2, r0, #6
 80051d2:	1a12      	subs	r2, r2, r0
 80051d4:	eb63 0301 	sbc.w	r3, r3, r1
 80051d8:	f04f 0000 	mov.w	r0, #0
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	00d9      	lsls	r1, r3, #3
 80051e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e6:	00d0      	lsls	r0, r2, #3
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	eb12 0208 	adds.w	r2, r2, r8
 80051f0:	eb43 0309 	adc.w	r3, r3, r9
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	0259      	lsls	r1, r3, #9
 80051fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005202:	0250      	lsls	r0, r2, #9
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	461a      	mov	r2, r3
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	f7fb fd38 	bl	8000c88 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e04a      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x188>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	2200      	movs	r2, #0
 800542a:	4618      	mov	r0, r3
 800542c:	4611      	mov	r1, r2
 800542e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005432:	623b      	str	r3, [r7, #32]
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	f04f 0000 	mov.w	r0, #0
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	0159      	lsls	r1, r3, #5
 800544a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800544e:	0150      	lsls	r0, r2, #5
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4641      	mov	r1, r8
 8005456:	ebb2 0a01 	subs.w	sl, r2, r1
 800545a:	4649      	mov	r1, r9
 800545c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800546c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005474:	ebb2 040a 	subs.w	r4, r2, sl
 8005478:	eb63 050b 	sbc.w	r5, r3, fp
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	464b      	mov	r3, r9
 8005498:	eb45 0303 	adc.w	r3, r5, r3
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054aa:	4629      	mov	r1, r5
 80054ac:	028b      	lsls	r3, r1, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054b4:	4621      	mov	r1, r4
 80054b6:	028a      	lsls	r2, r1, #10
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054be:	2200      	movs	r2, #0
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	61fa      	str	r2, [r7, #28]
 80054c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c8:	f7fb fbde 	bl	8000c88 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	3301      	adds	r3, #1
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8005222:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	461a      	mov	r2, r3
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	ea02 0400 	and.w	r4, r2, r0
 800523a:	ea03 0501 	and.w	r5, r3, r1
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	014b      	lsls	r3, r1, #5
 800524c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005250:	0142      	lsls	r2, r0, #5
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	1b00      	subs	r0, r0, r4
 8005258:	eb61 0105 	sbc.w	r1, r1, r5
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	018b      	lsls	r3, r1, #6
 8005266:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800526a:	0182      	lsls	r2, r0, #6
 800526c:	1a12      	subs	r2, r2, r0
 800526e:	eb63 0301 	sbc.w	r3, r3, r1
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	00d9      	lsls	r1, r3, #3
 800527c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005280:	00d0      	lsls	r0, r2, #3
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	1912      	adds	r2, r2, r4
 8005288:	eb45 0303 	adc.w	r3, r5, r3
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	0299      	lsls	r1, r3, #10
 8005296:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800529a:	0290      	lsls	r0, r2, #10
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f7fb fcec 	bl	8000c88 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4613      	mov	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	3301      	adds	r3, #1
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	60bb      	str	r3, [r7, #8]
      break;
 80052d2:	e002      	b.n	80052da <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetSysClockFreq+0x204>)
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3750      	adds	r7, #80	; 0x50
 80054fc:	46bd      	mov	sp, r7
 80054fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	00f42400 	.word	0x00f42400
 800550c:	007a1200 	.word	0x007a1200

08005510 <HAL_RCC_GetHCLKFreq>:
=======
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052d6:	60bb      	str	r3, [r7, #8]
      break;
 80052d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052da:	68bb      	ldr	r3, [r7, #8]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800
 80052ec:	00f42400 	.word	0x00f42400
 80052f0:	007a1200 	.word	0x007a1200

080052f4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005514:	4b03      	ldr	r3, [pc, #12]	; (8005524 <HAL_RCC_GetHCLKFreq+0x14>)
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000018 	.word	0x20000018

08005528 <HAL_RCC_GetPCLK1Freq>:
=======
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <HAL_RCC_GetHCLKFreq+0x14>)
 80052fa:	681b      	ldr	r3, [r3, #0]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000018 	.word	0x20000018

0800530c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800552c:	f7ff fff0 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005530:	4602      	mov	r2, r0
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	0a9b      	lsrs	r3, r3, #10
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	4903      	ldr	r1, [pc, #12]	; (800554c <HAL_RCC_GetPCLK1Freq+0x24>)
 800553e:	5ccb      	ldrb	r3, [r1, r3]
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40023800 	.word	0x40023800
 800554c:	0800c6c0 	.word	0x0800c6c0

08005550 <HAL_RCC_GetPCLK2Freq>:
=======
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005310:	f7ff fff0 	bl	80052f4 <HAL_RCC_GetHCLKFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	0a9b      	lsrs	r3, r3, #10
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4903      	ldr	r1, [pc, #12]	; (8005330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40023800 	.word	0x40023800
 8005330:	0800c298 	.word	0x0800c298

08005334 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005554:	f7ff ffdc 	bl	8005510 <HAL_RCC_GetHCLKFreq>
 8005558:	4602      	mov	r2, r0
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	0b5b      	lsrs	r3, r3, #13
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	4903      	ldr	r1, [pc, #12]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005566:	5ccb      	ldrb	r3, [r1, r3]
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40023800 	.word	0x40023800
 8005574:	0800c6c0 	.word	0x0800c6c0

08005578 <HAL_TIM_Base_Init>:
=======
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005338:	f7ff ffdc 	bl	80052f4 <HAL_RCC_GetHCLKFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0b5b      	lsrs	r3, r3, #13
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	0800c298 	.word	0x0800c298

0800535c <HAL_TIM_Base_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e041      	b.n	800560e <HAL_TIM_Base_Init+0x96>
=======
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e041      	b.n	80053f2 <HAL_TIM_Base_Init+0x96>
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fd fdac 	bl	80030fc <HAL_TIM_Base_MspInit>
=======
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fd fdd0 	bl	8002f28 <HAL_TIM_Base_MspInit>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f000 fcea 	bl	8005f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_Base_Start_IT>:
=======
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f000 fcea 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_TIM_Base_Start_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
=======
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04e      	b.n	80056ce <HAL_TIM_Base_Start_IT+0xb6>
=======
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d001      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e04e      	b.n	80054b2 <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a23      	ldr	r2, [pc, #140]	; (80056dc <HAL_TIM_Base_Start_IT+0xc4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565a:	d01d      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x80>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d111      	bne.n	80056bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d010      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ba:	e007      	b.n	80056cc <HAL_TIM_Base_Start_IT+0xb4>
=======
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d01d      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_TIM_Base_Start_IT+0xd0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d111      	bne.n	80054a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d010      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	e007      	b.n	80054b0 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
=======
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40010400 	.word	0x40010400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40001800 	.word	0x40001800

080056f8 <HAL_TIM_PWM_Init>:
=======
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40010400 	.word	0x40010400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40001800 	.word	0x40001800

080054dc <HAL_TIM_PWM_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e041      	b.n	800578e <HAL_TIM_PWM_Init+0x96>
=======
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_Init+0x96>
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f839 	bl	8005796 <HAL_TIM_PWM_MspInit>
=======
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f839 	bl	800557a <HAL_TIM_PWM_MspInit>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fc2a 	bl	8005f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_PWM_MspInit>:
=======
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 fc2a 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_PWM_MspInit>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
=======
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_TIM_PWM_Start>:
=======
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIM_PWM_Start>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
=======
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_TIM_PWM_Start+0x24>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e022      	b.n	8005816 <HAL_TIM_PWM_Start+0x6a>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d109      	bne.n	80057ea <HAL_TIM_PWM_Start+0x3e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e015      	b.n	8005816 <HAL_TIM_PWM_Start+0x6a>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d109      	bne.n	8005804 <HAL_TIM_PWM_Start+0x58>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e008      	b.n	8005816 <HAL_TIM_PWM_Start+0x6a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07c      	b.n	8005918 <HAL_TIM_PWM_Start+0x16c>
=======
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_TIM_PWM_Start+0x24>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e022      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d109      	bne.n	80055ce <HAL_TIM_PWM_Start+0x3e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e015      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d109      	bne.n	80055e8 <HAL_TIM_PWM_Start+0x58>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	e008      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07c      	b.n	80056fc <HAL_TIM_PWM_Start+0x16c>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <HAL_TIM_PWM_Start+0x82>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582c:	e013      	b.n	8005856 <HAL_TIM_PWM_Start+0xaa>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b04      	cmp	r3, #4
 8005832:	d104      	bne.n	800583e <HAL_TIM_PWM_Start+0x92>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800583c:	e00b      	b.n	8005856 <HAL_TIM_PWM_Start+0xaa>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d104      	bne.n	800584e <HAL_TIM_PWM_Start+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800584c:	e003      	b.n	8005856 <HAL_TIM_PWM_Start+0xaa>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fe80 	bl	8006564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HAL_TIM_PWM_Start+0x174>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_PWM_Start+0xcc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2c      	ldr	r2, [pc, #176]	; (8005924 <HAL_TIM_PWM_Start+0x178>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_TIM_PWM_Start+0xd0>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_TIM_PWM_Start+0xd2>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0x82>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005610:	e013      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d104      	bne.n	8005622 <HAL_TIM_PWM_Start+0x92>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	e00b      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	e003      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2201      	movs	r2, #1
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fe80 	bl	8006348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <HAL_TIM_PWM_Start+0x174>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIM_PWM_Start+0xcc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <HAL_TIM_PWM_Start+0x178>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_TIM_PWM_Start+0xd0>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_TIM_PWM_Start+0xd2>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_TIM_PWM_Start+0x174>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d01d      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_TIM_PWM_Start+0x17c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_TIM_PWM_Start+0x180>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_TIM_PWM_Start+0x184>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a16      	ldr	r2, [pc, #88]	; (8005924 <HAL_TIM_PWM_Start+0x178>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_TIM_PWM_Start+0x188>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x136>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_TIM_PWM_Start+0x18c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d111      	bne.n	8005906 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d010      	beq.n	8005916 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	e007      	b.n	8005916 <HAL_TIM_PWM_Start+0x16a>
=======
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a22      	ldr	r2, [pc, #136]	; (8005704 <HAL_TIM_PWM_Start+0x174>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d01d      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_TIM_PWM_Start+0x17c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <HAL_TIM_PWM_Start+0x180>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_PWM_Start+0x184>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_TIM_PWM_Start+0x178>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIM_PWM_Start+0x188>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x136>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_TIM_PWM_Start+0x18c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d111      	bne.n	80056ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b06      	cmp	r3, #6
 80056d6:	d010      	beq.n	80056fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	e007      	b.n	80056fa <HAL_TIM_PWM_Start+0x16a>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
=======
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40014000 	.word	0x40014000
 8005938:	40001800 	.word	0x40001800

0800593c <HAL_TIM_PWM_Stop>:
=======
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40010000 	.word	0x40010000
 8005708:	40010400 	.word	0x40010400
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40014000 	.word	0x40014000
 800571c:	40001800 	.word	0x40001800

08005720 <HAL_TIM_PWM_Stop>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
=======
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fe08 	bl	8006564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2e      	ldr	r2, [pc, #184]	; (8005a14 <HAL_TIM_PWM_Stop+0xd8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_PWM_Stop+0x2c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <HAL_TIM_PWM_Stop+0xdc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <HAL_TIM_PWM_Stop+0x30>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_TIM_PWM_Stop+0x32>
 800596c:	2300      	movs	r3, #0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	f241 1311 	movw	r3, #4369	; 0x1111
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10f      	bne.n	80059a2 <HAL_TIM_PWM_Stop+0x66>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	f240 4344 	movw	r3, #1092	; 0x444
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_TIM_PWM_Stop+0x66>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fe08 	bl	8006348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <HAL_TIM_PWM_Stop+0xd8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIM_PWM_Stop+0x2c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2d      	ldr	r2, [pc, #180]	; (80057fc <HAL_TIM_PWM_Stop+0xdc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <HAL_TIM_PWM_Stop+0x30>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_TIM_PWM_Stop+0x32>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <HAL_TIM_PWM_Stop+0x66>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	f240 4344 	movw	r3, #1092	; 0x444
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <HAL_TIM_PWM_Stop+0x66>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <HAL_TIM_PWM_Stop+0x96>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	f240 4344 	movw	r3, #1092	; 0x444
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <HAL_TIM_PWM_Stop+0x96>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Stop+0xa6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e0:	e013      	b.n	8005a0a <HAL_TIM_PWM_Stop+0xce>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Stop+0xb6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f0:	e00b      	b.n	8005a0a <HAL_TIM_PWM_Stop+0xce>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Stop+0xc6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a00:	e003      	b.n	8005a0a <HAL_TIM_PWM_Stop+0xce>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40010400 	.word	0x40010400

08005a1c <HAL_TIM_IRQHandler>:
=======
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <HAL_TIM_PWM_Stop+0x96>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	f240 4344 	movw	r3, #1092	; 0x444
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_PWM_Stop+0x96>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Stop+0xa6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c4:	e013      	b.n	80057ee <HAL_TIM_PWM_Stop+0xce>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Stop+0xb6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	e00b      	b.n	80057ee <HAL_TIM_PWM_Stop+0xce>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Stop+0xc6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	e003      	b.n	80057ee <HAL_TIM_PWM_Stop+0xce>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <HAL_TIM_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0202 	mvn.w	r2, #2
 8005a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x4a>
=======
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0202 	mvn.w	r2, #2
 800582c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> parent of 9e7a168 (最终版本)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa77 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x56>
=======
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa77 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0x56>
>>>>>>> parent of 9e7a168 (最终版本)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa69 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa7a 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
=======
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa69 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa7a 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0204 	mvn.w	r2, #4
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x9e>
=======
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b04      	cmp	r3, #4
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0204 	mvn.w	r2, #4
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa4d 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa3f 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa50 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0208 	mvn.w	r2, #8
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2204      	movs	r2, #4
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa23 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa15 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa26 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b10      	cmp	r3, #16
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b10      	cmp	r3, #16
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0210 	mvn.w	r2, #16
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2208      	movs	r2, #8
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x146>
>>>>>>> parent of 9e7a168 (最终版本)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa4d 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xaa>
=======
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f9f9 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x152>
>>>>>>> parent of 9e7a168 (最终版本)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa3f 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fa50 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9eb 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f9fc 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
<<<<<<< HEAD
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa23 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa15 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa26 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0210 	mvn.w	r2, #16
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9f9 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9eb 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9fc 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0201 	mvn.w	r2, #1
 8005b98:	611a      	str	r2, [r3, #16]
=======
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d10e      	bne.n	8005984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d107      	bne.n	8005984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0201 	mvn.w	r2, #1
 800597c:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc ff04 	bl	80029a8 <HAL_TIM_PeriodElapsedCallback>
=======
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fb36 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d10e      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d107      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc4:	611a      	str	r2, [r3, #16]
=======
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b80      	cmp	r3, #128	; 0x80
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059a8:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fee2 	bl	8006990 <HAL_TIMEx_BreakCallback>
=======
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fee2 	bl	8006774 <HAL_TIMEx_BreakCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bf0:	611a      	str	r2, [r3, #16]
=======
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d10e      	bne.n	80059dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059d4:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9c1 	bl	8005f7a <HAL_TIM_TriggerCallback>
=======
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9c1 	bl	8005d5e <HAL_TIM_TriggerCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0220 	mvn.w	r2, #32
 8005c1c:	611a      	str	r2, [r3, #16]
=======
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d10e      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d107      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0220 	mvn.w	r2, #32
 8005a00:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 feac 	bl	800697c <HAL_TIMEx_CommutCallback>
=======
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 feac 	bl	8006760 <HAL_TIMEx_CommutCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_PWM_ConfigChannel>:
=======
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	75fb      	strb	r3, [r7, #23]
=======
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e0ae      	b.n	8005da8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	f200 809f 	bhi.w	8005d98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005d99 	.word	0x08005d99
 8005c68:	08005d99 	.word	0x08005d99
 8005c6c:	08005d99 	.word	0x08005d99
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005d99 	.word	0x08005d99
 8005c78:	08005d99 	.word	0x08005d99
 8005c7c:	08005d99 	.word	0x08005d99
 8005c80:	08005d17 	.word	0x08005d17
 8005c84:	08005d99 	.word	0x08005d99
 8005c88:	08005d99 	.word	0x08005d99
 8005c8c:	08005d99 	.word	0x08005d99
 8005c90:	08005d57 	.word	0x08005d57
=======
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0ae      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	f200 809f 	bhi.w	8005b7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005b7d 	.word	0x08005b7d
 8005a4c:	08005b7d 	.word	0x08005b7d
 8005a50:	08005b7d 	.word	0x08005b7d
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005b7d 	.word	0x08005b7d
 8005a5c:	08005b7d 	.word	0x08005b7d
 8005a60:	08005b7d 	.word	0x08005b7d
 8005a64:	08005afb 	.word	0x08005afb
 8005a68:	08005b7d 	.word	0x08005b7d
 8005a6c:	08005b7d 	.word	0x08005b7d
 8005a70:	08005b7d 	.word	0x08005b7d
 8005a74:	08005b3b 	.word	0x08005b3b
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fa18 	bl	80060d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	619a      	str	r2, [r3, #24]
      break;
 8005cd2:	e064      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fa18 	bl	8005eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0208 	orr.w	r2, r2, #8
 8005a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0204 	bic.w	r2, r2, #4
 8005aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	619a      	str	r2, [r3, #24]
      break;
 8005ab6:	e064      	b.n	8005b82 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fa68 	bl	80061b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6999      	ldr	r1, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	619a      	str	r2, [r3, #24]
      break;
 8005d14:	e043      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fa68 	bl	8005f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6999      	ldr	r1, [r3, #24]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	021a      	lsls	r2, r3, #8
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	619a      	str	r2, [r3, #24]
      break;
 8005af8:	e043      	b.n	8005b82 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fabd 	bl	800629c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0208 	orr.w	r2, r2, #8
 8005d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0204 	bic.w	r2, r2, #4
 8005d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69d9      	ldr	r1, [r3, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]
      break;
 8005d54:	e023      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fabd 	bl	8006080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0208 	orr.w	r2, r2, #8
 8005b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0204 	bic.w	r2, r2, #4
 8005b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	61da      	str	r2, [r3, #28]
      break;
 8005b38:	e023      	b.n	8005b82 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fb11 	bl	8006384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69d9      	ldr	r1, [r3, #28]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	61da      	str	r2, [r3, #28]
      break;
 8005d96:	e002      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fb11 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69d9      	ldr	r1, [r3, #28]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	021a      	lsls	r2, r3, #8
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	61da      	str	r2, [r3, #28]
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 9e7a168 (最终版本)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_ConfigClockSource>:
=======
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_ConfigClockSource>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
=======
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0b4      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x186>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0b4      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x186>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of 9e7a168 (最终版本)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d03e      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	f200 8087 	bhi.w	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	f000 8086 	beq.w	8005f22 <HAL_TIM_ConfigClockSource+0x172>
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d87f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b70      	cmp	r3, #112	; 0x70
 8005e1e:	d01a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0xa6>
 8005e20:	2b70      	cmp	r3, #112	; 0x70
 8005e22:	d87b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d050      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x11a>
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d877      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b50      	cmp	r3, #80	; 0x50
 8005e2e:	d03c      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0xfa>
 8005e30:	2b50      	cmp	r3, #80	; 0x50
 8005e32:	d873      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d058      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x13a>
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d86f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d064      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	d86b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d060      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d867      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d05a      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	e062      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
=======
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be8:	d03e      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0xd4>
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	f200 8087 	bhi.w	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x172>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d87f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d01a      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xa6>
 8005c04:	2b70      	cmp	r3, #112	; 0x70
 8005c06:	d87b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d050      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x11a>
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d877      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d03c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xfa>
 8005c14:	2b50      	cmp	r3, #80	; 0x50
 8005c16:	d873      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d058      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x13a>
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d86f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d064      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d86b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d060      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d867      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05c      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d05a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	e062      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> parent of 9e7a168 (最终版本)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6899      	ldr	r1, [r3, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f000 fb5d 	bl	8006524 <TIM_ETR_SetConfig>
=======
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f000 fb5d 	bl	8006308 <TIM_ETR_SetConfig>
>>>>>>> parent of 9e7a168 (最终版本)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
      break;
 8005e82:	e04f      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	609a      	str	r2, [r3, #8]
      break;
 8005c66:	e04f      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6899      	ldr	r1, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f000 fb46 	bl	8006524 <TIM_ETR_SetConfig>
=======
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6899      	ldr	r1, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f000 fb46 	bl	8006308 <TIM_ETR_SetConfig>
>>>>>>> parent of 9e7a168 (最终版本)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea6:	609a      	str	r2, [r3, #8]
      break;
 8005ea8:	e03c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8a:	609a      	str	r2, [r3, #8]
      break;
 8005c8c:	e03c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 faba 	bl	8006430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2150      	movs	r1, #80	; 0x50
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fb13 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e02c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 faba 	bl	8006214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2150      	movs	r1, #80	; 0x50
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fb13 	bl	80062d2 <TIM_ITRx_SetConfig>
      break;
 8005cac:	e02c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fad9 	bl	800648e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2160      	movs	r1, #96	; 0x60
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb03 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e01c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 fad9 	bl	8006272 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2160      	movs	r1, #96	; 0x60
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fb03 	bl	80062d2 <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e01c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fa9a 	bl	8006430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 faf3 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005f08:	e00c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fa9a 	bl	8006214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2140      	movs	r1, #64	; 0x40
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 faf3 	bl	80062d2 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e00c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 faea 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e003      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f000 faea 	bl	80062d2 <TIM_ITRx_SetConfig>
      break;
 8005cfe:	e003      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 9e7a168 (最终版本)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e000      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	e000      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
=======
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_IC_CaptureCallback>:
=======
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
=======
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
=======
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_TriggerCallback>:
=======
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_TriggerCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
=======
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <TIM_Base_SetConfig>:
=======
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <TIM_Base_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a40      	ldr	r2, [pc, #256]	; (80060a4 <TIM_Base_SetConfig+0x114>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d00f      	beq.n	8005fd0 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a3d      	ldr	r2, [pc, #244]	; (80060a8 <TIM_Base_SetConfig+0x118>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a3c      	ldr	r2, [pc, #240]	; (80060ac <TIM_Base_SetConfig+0x11c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d007      	beq.n	8005fd0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3b      	ldr	r2, [pc, #236]	; (80060b0 <TIM_Base_SetConfig+0x120>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3a      	ldr	r2, [pc, #232]	; (80060b4 <TIM_Base_SetConfig+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d108      	bne.n	8005fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2f      	ldr	r2, [pc, #188]	; (80060a4 <TIM_Base_SetConfig+0x114>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d02b      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff0:	d027      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <TIM_Base_SetConfig+0x118>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d023      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <TIM_Base_SetConfig+0x11c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01f      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <TIM_Base_SetConfig+0x120>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01b      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <TIM_Base_SetConfig+0x124>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d017      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <TIM_Base_SetConfig+0x128>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a27      	ldr	r2, [pc, #156]	; (80060bc <TIM_Base_SetConfig+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00f      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <TIM_Base_SetConfig+0x130>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00b      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <TIM_Base_SetConfig+0x134>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d007      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a24      	ldr	r2, [pc, #144]	; (80060c8 <TIM_Base_SetConfig+0x138>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a23      	ldr	r2, [pc, #140]	; (80060cc <TIM_Base_SetConfig+0x13c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
=======
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d00f      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3a      	ldr	r2, [pc, #232]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d108      	bne.n	8005dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d027      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d023      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <TIM_Base_SetConfig+0x128>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a27      	ldr	r2, [pc, #156]	; (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <TIM_Base_SetConfig+0x130>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <TIM_Base_SetConfig+0x134>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a24      	ldr	r2, [pc, #144]	; (8005eac <TIM_Base_SetConfig+0x138>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <TIM_Base_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0xf8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <TIM_Base_SetConfig+0x124>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d103      	bne.n	8006090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0xf8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d103      	bne.n	8005e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	615a      	str	r2, [r3, #20]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40010400 	.word	0x40010400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800
 80060c4:	40001800 	.word	0x40001800
 80060c8:	40001c00 	.word	0x40001c00
 80060cc:	40002000 	.word	0x40002000

080060d0 <TIM_OC1_SetConfig>:
=======
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	615a      	str	r2, [r3, #20]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800
 8005ea8:	40001800 	.word	0x40001800
 8005eac:	40001c00 	.word	0x40001c00
 8005eb0:	40002000 	.word	0x40002000

08005eb4 <TIM_OC1_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
=======
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0302 	bic.w	r3, r3, #2
 8006118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <TIM_OC1_SetConfig+0xd8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC1_SetConfig+0x64>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <TIM_OC1_SetConfig+0xdc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d10c      	bne.n	800614e <TIM_OC1_SetConfig+0x7e>
=======
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0302 	bic.w	r3, r3, #2
 8005efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a20      	ldr	r2, [pc, #128]	; (8005f8c <TIM_OC1_SetConfig+0xd8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC1_SetConfig+0x64>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <TIM_OC1_SetConfig+0xdc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d10c      	bne.n	8005f32 <TIM_OC1_SetConfig+0x7e>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f023 0308 	bic.w	r3, r3, #8
 800613a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <TIM_OC1_SetConfig+0xd8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC1_SetConfig+0x8e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a14      	ldr	r2, [pc, #80]	; (80061ac <TIM_OC1_SetConfig+0xdc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d111      	bne.n	8006182 <TIM_OC1_SetConfig+0xb2>
=======
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0308 	bic.w	r3, r3, #8
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f023 0304 	bic.w	r3, r3, #4
 8005f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <TIM_OC1_SetConfig+0xd8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC1_SetConfig+0x8e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <TIM_OC1_SetConfig+0xdc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d111      	bne.n	8005f66 <TIM_OC1_SetConfig+0xb2>
>>>>>>> parent of 9e7a168 (最终版本)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800616c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
=======
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400

080061b0 <TIM_OC2_SetConfig>:
=======
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400

08005f94 <TIM_OC2_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
=======
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0210 	bic.w	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0320 	bic.w	r3, r3, #32
 80061fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a22      	ldr	r2, [pc, #136]	; (8006294 <TIM_OC2_SetConfig+0xe4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC2_SetConfig+0x68>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <TIM_OC2_SetConfig+0xe8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10d      	bne.n	8006234 <TIM_OC2_SetConfig+0x84>
=======
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0210 	bic.w	r2, r3, #16
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0320 	bic.w	r3, r3, #32
 8005fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a22      	ldr	r2, [pc, #136]	; (8006078 <TIM_OC2_SetConfig+0xe4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_OC2_SetConfig+0x68>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a21      	ldr	r2, [pc, #132]	; (800607c <TIM_OC2_SetConfig+0xe8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d10d      	bne.n	8006018 <TIM_OC2_SetConfig+0x84>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006232:	617b      	str	r3, [r7, #20]
=======
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006016:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <TIM_OC2_SetConfig+0xe4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC2_SetConfig+0x94>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <TIM_OC2_SetConfig+0xe8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d113      	bne.n	800626c <TIM_OC2_SetConfig+0xbc>
=======
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <TIM_OC2_SetConfig+0xe4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC2_SetConfig+0x94>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <TIM_OC2_SetConfig+0xe8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d113      	bne.n	8006050 <TIM_OC2_SetConfig+0xbc>
>>>>>>> parent of 9e7a168 (最终版本)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800624a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
=======
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800602e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40010400 	.word	0x40010400

0800629c <TIM_OC3_SetConfig>:
=======
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400

08006080 <TIM_OC3_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
=======
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a21      	ldr	r2, [pc, #132]	; (800637c <TIM_OC3_SetConfig+0xe0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC3_SetConfig+0x66>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a20      	ldr	r2, [pc, #128]	; (8006380 <TIM_OC3_SetConfig+0xe4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10d      	bne.n	800631e <TIM_OC3_SetConfig+0x82>
=======
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a21      	ldr	r2, [pc, #132]	; (8006160 <TIM_OC3_SetConfig+0xe0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_OC3_SetConfig+0x66>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a20      	ldr	r2, [pc, #128]	; (8006164 <TIM_OC3_SetConfig+0xe4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d10d      	bne.n	8006102 <TIM_OC3_SetConfig+0x82>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a16      	ldr	r2, [pc, #88]	; (800637c <TIM_OC3_SetConfig+0xe0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC3_SetConfig+0x92>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a15      	ldr	r2, [pc, #84]	; (8006380 <TIM_OC3_SetConfig+0xe4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d113      	bne.n	8006356 <TIM_OC3_SetConfig+0xba>
=======
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <TIM_OC3_SetConfig+0xe0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_OC3_SetConfig+0x92>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a15      	ldr	r2, [pc, #84]	; (8006164 <TIM_OC3_SetConfig+0xe4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d113      	bne.n	800613a <TIM_OC3_SetConfig+0xba>
>>>>>>> parent of 9e7a168 (最终版本)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
=======
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_OC4_SetConfig>:
=======
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400

08006168 <TIM_OC4_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
=======
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <TIM_OC4_SetConfig+0xa4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC4_SetConfig+0x68>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a11      	ldr	r2, [pc, #68]	; (800642c <TIM_OC4_SetConfig+0xa8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d109      	bne.n	8006400 <TIM_OC4_SetConfig+0x7c>
=======
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <TIM_OC4_SetConfig+0xa4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_OC4_SetConfig+0x68>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a11      	ldr	r2, [pc, #68]	; (8006210 <TIM_OC4_SetConfig+0xa8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <TIM_OC4_SetConfig+0x7c>
>>>>>>> parent of 9e7a168 (最终版本)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	019b      	lsls	r3, r3, #6
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
=======
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400

08006430 <TIM_TI1_ConfigInputStage>:
=======
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_TI1_ConfigInputStage>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
=======
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0201 	bic.w	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 030a 	bic.w	r3, r3, #10
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_TI2_ConfigInputStage>:
=======
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f023 0201 	bic.w	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800623e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 030a 	bic.w	r3, r3, #10
 8006250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <TIM_TI2_ConfigInputStage>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
=======
 8006272:	b480      	push	{r7}
 8006274:	b087      	sub	sp, #28
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f023 0210 	bic.w	r2, r3, #16
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <TIM_ITRx_SetConfig>:
=======
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0210 	bic.w	r2, r3, #16
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800629c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	031b      	lsls	r3, r3, #12
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <TIM_ITRx_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
=======
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	f043 0307 	orr.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <TIM_ETR_SetConfig>:
=======
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f043 0307 	orr.w	r3, r3, #7
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	609a      	str	r2, [r3, #8]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <TIM_ETR_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800653e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	431a      	orrs	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4313      	orrs	r3, r2
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_CCxChannelCmd>:
=======
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	021a      	lsls	r2, r3, #8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	431a      	orrs	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4313      	orrs	r3, r2
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	609a      	str	r2, [r3, #8]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <TIM_CCxChannelCmd>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
=======
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2201      	movs	r2, #1
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_TIMEx_PWMN_Start>:
=======
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2201      	movs	r2, #1
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1a      	ldr	r2, [r3, #32]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	43db      	mvns	r3, r3
 800636a:	401a      	ands	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	431a      	orrs	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <HAL_TIMEx_PWMN_Start>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
=======
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_TIMEx_PWMN_Start+0x24>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e022      	b.n	800661a <HAL_TIMEx_PWMN_Start+0x6a>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d109      	bne.n	80065ee <HAL_TIMEx_PWMN_Start+0x3e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e015      	b.n	800661a <HAL_TIMEx_PWMN_Start+0x6a>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d109      	bne.n	8006608 <HAL_TIMEx_PWMN_Start+0x58>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e008      	b.n	800661a <HAL_TIMEx_PWMN_Start+0x6a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e06d      	b.n	80066fe <HAL_TIMEx_PWMN_Start+0x14e>
=======
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_TIMEx_PWMN_Start+0x24>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e022      	b.n	80063fe <HAL_TIMEx_PWMN_Start+0x6a>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d109      	bne.n	80063d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	e015      	b.n	80063fe <HAL_TIMEx_PWMN_Start+0x6a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d109      	bne.n	80063ec <HAL_TIMEx_PWMN_Start+0x58>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e008      	b.n	80063fe <HAL_TIMEx_PWMN_Start+0x6a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e06d      	b.n	80064e2 <HAL_TIMEx_PWMN_Start+0x14e>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_TIMEx_PWMN_Start+0x82>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006630:	e013      	b.n	800665a <HAL_TIMEx_PWMN_Start+0xaa>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b04      	cmp	r3, #4
 8006636:	d104      	bne.n	8006642 <HAL_TIMEx_PWMN_Start+0x92>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006640:	e00b      	b.n	800665a <HAL_TIMEx_PWMN_Start+0xaa>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d104      	bne.n	8006652 <HAL_TIMEx_PWMN_Start+0xa2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	e003      	b.n	800665a <HAL_TIMEx_PWMN_Start+0xaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2204      	movs	r2, #4
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f99e 	bl	80069a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006676:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <HAL_TIMEx_PWMN_Start+0x158>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d01d      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <HAL_TIMEx_PWMN_Start+0x15c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <HAL_TIMEx_PWMN_Start+0x160>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_TIMEx_PWMN_Start+0x164>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <HAL_TIMEx_PWMN_Start+0x168>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_TIMEx_PWMN_Start+0x16c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_TIMEx_PWMN_Start+0x118>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a17      	ldr	r2, [pc, #92]	; (8006720 <HAL_TIMEx_PWMN_Start+0x170>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d111      	bne.n	80066ec <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d010      	beq.n	80066fc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ea:	e007      	b.n	80066fc <HAL_TIMEx_PWMN_Start+0x14c>
=======
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <HAL_TIMEx_PWMN_Start+0x82>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	e013      	b.n	800643e <HAL_TIMEx_PWMN_Start+0xaa>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d104      	bne.n	8006426 <HAL_TIMEx_PWMN_Start+0x92>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006424:	e00b      	b.n	800643e <HAL_TIMEx_PWMN_Start+0xaa>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d104      	bne.n	8006436 <HAL_TIMEx_PWMN_Start+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006434:	e003      	b.n	800643e <HAL_TIMEx_PWMN_Start+0xaa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2204      	movs	r2, #4
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f99e 	bl	8006788 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800645a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <HAL_TIMEx_PWMN_Start+0x158>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d01d      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <HAL_TIMEx_PWMN_Start+0x160>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIMEx_PWMN_Start+0x164>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_TIMEx_PWMN_Start+0x168>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_TIMEx_PWMN_Start+0x16c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIMEx_PWMN_Start+0x118>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_TIMEx_PWMN_Start+0x170>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d111      	bne.n	80064d0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d010      	beq.n	80064e0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	e007      	b.n	80064e0 <HAL_TIMEx_PWMN_Start+0x14c>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
=======
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40010400 	.word	0x40010400
 800671c:	40014000 	.word	0x40014000
 8006720:	40001800 	.word	0x40001800

08006724 <HAL_TIMEx_PWMN_Stop>:
=======
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40010400 	.word	0x40010400
 8006500:	40014000 	.word	0x40014000
 8006504:	40001800 	.word	0x40001800

08006508 <HAL_TIMEx_PWMN_Stop>:
>>>>>>> parent of 9e7a168 (最终版本)
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
=======
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
<<<<<<< HEAD
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f934 	bl	80069a4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f241 1311 	movw	r3, #4369	; 0x1111
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10f      	bne.n	800676c <HAL_TIMEx_PWMN_Stop+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	f240 4344 	movw	r3, #1092	; 0x444
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_TIMEx_PWMN_Stop+0x48>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800676a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	f241 1311 	movw	r3, #4369	; 0x1111
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <HAL_TIMEx_PWMN_Stop+0x78>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	f240 4344 	movw	r3, #1092	; 0x444
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_TIMEx_PWMN_Stop+0x78>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_TIMEx_PWMN_Stop+0x88>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067aa:	e013      	b.n	80067d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d104      	bne.n	80067bc <HAL_TIMEx_PWMN_Stop+0x98>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067ba:	e00b      	b.n	80067d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d104      	bne.n	80067cc <HAL_TIMEx_PWMN_Stop+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ca:	e003      	b.n	80067d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f934 	bl	8006788 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f241 1311 	movw	r3, #4369	; 0x1111
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10f      	bne.n	8006550 <HAL_TIMEx_PWMN_Stop+0x48>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	f240 4344 	movw	r3, #1092	; 0x444
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <HAL_TIMEx_PWMN_Stop+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800654e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f241 1311 	movw	r3, #4369	; 0x1111
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10f      	bne.n	8006580 <HAL_TIMEx_PWMN_Stop+0x78>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f240 4344 	movw	r3, #1092	; 0x444
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <HAL_TIMEx_PWMN_Stop+0x78>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_TIMEx_PWMN_Stop+0x88>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800658e:	e013      	b.n	80065b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d104      	bne.n	80065a0 <HAL_TIMEx_PWMN_Stop+0x98>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800659e:	e00b      	b.n	80065b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d104      	bne.n	80065b0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ae:	e003      	b.n	80065b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
=======
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e05a      	b.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a21      	ldr	r2, [pc, #132]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d022      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006844:	d01d      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d018      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a17      	ldr	r2, [pc, #92]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10c      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4313      	orrs	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]
=======
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d8:	2302      	movs	r3, #2
 80065da:	e05a      	b.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a21      	ldr	r2, [pc, #132]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d022      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006628:	d01d      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d10c      	bne.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	4313      	orrs	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40001800 	.word	0x40001800

080068d8 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40010000 	.word	0x40010000
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40010400 	.word	0x40010400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40001800 	.word	0x40001800

080066bc <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> parent of 9e7a168 (最终版本)
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
=======
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e03d      	b.n	8006970 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e03d      	b.n	8006754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
=======
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_CommutCallback>:
=======
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_CommutCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
=======
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_BreakCallback>:
=======
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_BreakCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
=======
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_CCxNChannelCmd>:
=======
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_CCxNChannelCmd>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
<<<<<<< HEAD
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2204      	movs	r2, #4
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	401a      	ands	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_UART_Init>:
=======
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2204      	movs	r2, #4
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	401a      	ands	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_UART_Init>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e03f      	b.n	8006a80 <HAL_UART_Init+0x92>
=======
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e03f      	b.n	8006864 <HAL_UART_Init+0x92>
>>>>>>> parent of 9e7a168 (最终版本)
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 9e7a168 (最终版本)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7fc fc19 	bl	800324c <HAL_UART_MspInit>
=======
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fc fc3d 	bl	8003078 <HAL_UART_MspInit>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2224      	movs	r2, #36	; 0x24
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fd7a 	bl	800752c <UART_SetConfig>
=======
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006814:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fd7a 	bl	8007310 <UART_SetConfig>
>>>>>>> parent of 9e7a168 (最终版本)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_UART_Transmit>:
=======
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800682a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800683a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800684a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_UART_Transmit>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d17c      	bne.n	8006ba2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Transmit+0x2c>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e075      	b.n	8006ba4 <HAL_UART_Transmit+0x11c>
=======
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b20      	cmp	r3, #32
 800688a:	d17c      	bne.n	8006986 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_UART_Transmit+0x2c>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e075      	b.n	8006988 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Transmit+0x3e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e06e      	b.n	8006ba4 <HAL_UART_Transmit+0x11c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2221      	movs	r2, #33	; 0x21
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006adc:	f7fc fca8 	bl	8003430 <HAL_GetTick>
 8006ae0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	d108      	bne.n	8006b0a <HAL_UART_Transmit+0x82>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e003      	b.n	8006b12 <HAL_UART_Transmit+0x8a>
=======
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Transmit+0x3e>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e06e      	b.n	8006988 <HAL_UART_Transmit+0x11c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2221      	movs	r2, #33	; 0x21
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c0:	f7fc fccc 	bl	800325c <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d108      	bne.n	80068ee <HAL_UART_Transmit+0x82>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e003      	b.n	80068f6 <HAL_UART_Transmit+0x8a>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
=======
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b1a:	e02a      	b.n	8006b72 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 faf8 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e036      	b.n	8006ba4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b4a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e007      	b.n	8006b64 <HAL_UART_Transmit+0xdc>
=======
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068fe:	e02a      	b.n	8006956 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2200      	movs	r2, #0
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 faf8 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e036      	b.n	8006988 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10b      	bne.n	8006938 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	3302      	adds	r3, #2
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e007      	b.n	8006948 <HAL_UART_Transmit+0xdc>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3301      	adds	r3, #1
 8006b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1cf      	bne.n	8006b1c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	2140      	movs	r1, #64	; 0x40
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fac8 	bl	800711c <UART_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e006      	b.n	8006ba4 <HAL_UART_Transmit+0x11c>
=======
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1cf      	bne.n	8006900 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	2140      	movs	r1, #64	; 0x40
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fac8 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e006      	b.n	8006988 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <HAL_UART_Transmit+0x11c>
=======
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006ba2:	2302      	movs	r3, #2
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_IRQHandler>:
=======
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_UART_IRQHandler>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0ba      	sub	sp, #232	; 0xe8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <HAL_UART_IRQHandler+0x66>
 8006bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbd3 	bl	80073b6 <UART_Receive_IT>
      return;
 8006c10:	e256      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
=======
 8006990:	b580      	push	{r7, lr}
 8006992:	b0ba      	sub	sp, #232	; 0xe8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10f      	bne.n	80069f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <HAL_UART_IRQHandler+0x66>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fbd3 	bl	800719a <UART_Receive_IT>
      return;
 80069f4:	e256      	b.n	8006ea4 <HAL_UART_IRQHandler+0x514>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8006c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80de 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x22c>
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80d1 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <HAL_UART_IRQHandler+0xae>
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f043 0201 	orr.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80069f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80de 	beq.w	8006bbc <HAL_UART_IRQHandler+0x22c>
 8006a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80d1 	beq.w	8006bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <HAL_UART_IRQHandler+0xae>
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_UART_IRQHandler+0xd2>
 8006c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <HAL_UART_IRQHandler+0xd2>
 8006a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f043 0202 	orr.w	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xf6>
 8006c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f043 0204 	orr.w	r2, r3, #4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <HAL_UART_IRQHandler+0xf6>
 8006a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0204 	orr.w	r2, r3, #4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x126>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f043 0208 	orr.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x126>
 8006a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f043 0208 	orr.w	r2, r3, #8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 9e7a168 (最终版本)
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 81ed 	beq.w	80070b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_UART_IRQHandler+0x14e>
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fb5e 	bl	80073b6 <UART_Receive_IT>
=======
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 81ed 	beq.w	8006e9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_UART_IRQHandler+0x14e>
 8006acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fb5e 	bl	800719a <UART_Receive_IT>
>>>>>>> parent of 9e7a168 (最终版本)
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <HAL_UART_IRQHandler+0x17a>
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04f      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x21a>
=======
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <HAL_UART_IRQHandler+0x17a>
 8006b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d04f      	beq.n	8006baa <HAL_UART_IRQHandler+0x21a>
>>>>>>> parent of 9e7a168 (最终版本)
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa66 	bl	80071f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d141      	bne.n	8006dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3314      	adds	r3, #20
 8006d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa66 	bl	8006fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d141      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> parent of 9e7a168 (最终版本)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3314      	adds	r3, #20
 8006d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8006b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3314      	adds	r3, #20
 8006b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> parent of 9e7a168 (最终版本)
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8006d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1d9      	bne.n	8006d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_UART_IRQHandler+0x20a>
=======
 8006b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1d9      	bne.n	8006b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d013      	beq.n	8006b9a <HAL_UART_IRQHandler+0x20a>
>>>>>>> parent of 9e7a168 (最终版本)
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <HAL_UART_IRQHandler+0x3dc>)
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fafa 	bl	8004394 <HAL_DMA_Abort_IT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e00e      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
=======
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	4a7d      	ldr	r2, [pc, #500]	; (8006d6c <HAL_UART_IRQHandler+0x3dc>)
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fd fb1e 	bl	80041c0 <HAL_DMA_Abort_IT>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	e00e      	b.n	8006bb8 <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f99a 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	e00a      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
=======
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f99a 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	e00a      	b.n	8006bb8 <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f996 	bl	80070f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	e006      	b.n	8006dd4 <HAL_UART_IRQHandler+0x228>
=======
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f996 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	e006      	b.n	8006bb8 <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f992 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dd2:	e170      	b.n	80070b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	bf00      	nop
    return;
 8006dd6:	e16e      	b.n	80070b6 <HAL_UART_IRQHandler+0x50a>
=======
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f992 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bb6:	e170      	b.n	8006e9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	bf00      	nop
    return;
 8006bba:	e16e      	b.n	8006e9a <HAL_UART_IRQHandler+0x50a>
>>>>>>> parent of 9e7a168 (最终版本)
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 814a 	bne.w	8007076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8143 	beq.w	8007076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 813c 	beq.w	8007076 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	f040 80b4 	bne.w	8006f8c <HAL_UART_IRQHandler+0x3e0>
=======
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	f040 814a 	bne.w	8006e5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8143 	beq.w	8006e5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 813c 	beq.w	8006e5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	f040 80b4 	bne.w	8006d70 <HAL_UART_IRQHandler+0x3e0>
>>>>>>> parent of 9e7a168 (最终版本)
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8140 	beq.w	80070ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f080 8139 	bcs.w	80070ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	f000 8088 	beq.w	8006f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1d9      	bne.n	8006e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e1      	bne.n	8006eaa <HAL_UART_IRQHandler+0x2fe>
=======
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8140 	beq.w	8006e9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c26:	429a      	cmp	r2, r3
 8006c28:	f080 8139 	bcs.w	8006e9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3e:	f000 8088 	beq.w	8006d52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1d9      	bne.n	8006c42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3314      	adds	r3, #20
 8006cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e1      	bne.n	8006c8e <HAL_UART_IRQHandler+0x2fe>
>>>>>>> parent of 9e7a168 (最终版本)

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3314      	adds	r3, #20
 8006f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e3      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fd f9a3 	bl	80042b4 <HAL_DMA_Abort>
=======
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d22:	f023 0310 	bic.w	r3, r3, #16
 8006d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e3      	bne.n	8006d10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fd f9c7 	bl	80040e0 <HAL_DMA_Abort>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f8c0 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f84:	e099      	b.n	80070ba <HAL_UART_IRQHandler+0x50e>
 8006f86:	bf00      	nop
 8006f88:	080072bf 	.word	0x080072bf
=======
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8c0 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d68:	e099      	b.n	8006e9e <HAL_UART_IRQHandler+0x50e>
 8006d6a:	bf00      	nop
 8006d6c:	080070a3 	.word	0x080070a3
>>>>>>> parent of 9e7a168 (最终版本)
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 808b 	beq.w	80070be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8086 	beq.w	80070be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8006fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e3      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800700e:	633a      	str	r2, [r7, #48]	; 0x30
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e3      	bne.n	8006fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0310 	bic.w	r3, r3, #16
 8007046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007054:	61fa      	str	r2, [r7, #28]
 8007056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	617b      	str	r3, [r7, #20]
   return(result);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e3      	bne.n	8007030 <HAL_UART_IRQHandler+0x484>
=======
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 808b 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8086 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dba:	647a      	str	r2, [r7, #68]	; 0x44
 8006dbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e3      	bne.n	8006d96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3314      	adds	r3, #20
 8006dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006df2:	633a      	str	r2, [r7, #48]	; 0x30
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e3      	bne.n	8006dce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	617b      	str	r3, [r7, #20]
   return(result);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e3      	bne.n	8006e14 <HAL_UART_IRQHandler+0x484>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8007068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f848 	bl	8007104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007074:	e023      	b.n	80070be <HAL_UART_IRQHandler+0x512>
=======
 8006e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f848 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e58:	e023      	b.n	8006ea2 <HAL_UART_IRQHandler+0x512>
>>>>>>> parent of 9e7a168 (最终版本)
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_UART_IRQHandler+0x4ea>
 8007082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f929 	bl	80072e6 <UART_Transmit_IT>
    return;
 8007094:	e014      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
=======
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_UART_IRQHandler+0x4ea>
 8006e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f929 	bl	80070ca <UART_Transmit_IT>
    return;
 8006e78:	e014      	b.n	8006ea4 <HAL_UART_IRQHandler+0x514>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00e      	beq.n	80070c0 <HAL_UART_IRQHandler+0x514>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f969 	bl	8007386 <UART_EndTransmit_IT>
    return;
 80070b4:	e004      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
    return;
 80070b6:	bf00      	nop
 80070b8:	e002      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
      return;
 80070ba:	bf00      	nop
 80070bc:	e000      	b.n	80070c0 <HAL_UART_IRQHandler+0x514>
      return;
 80070be:	bf00      	nop
  }
}
 80070c0:	37e8      	adds	r7, #232	; 0xe8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <HAL_UART_TxCpltCallback>:
=======
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x514>
 8006e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f969 	bl	800716a <UART_EndTransmit_IT>
    return;
 8006e98:	e004      	b.n	8006ea4 <HAL_UART_IRQHandler+0x514>
    return;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ea2:	bf00      	nop
  }
}
 8006ea4:	37e8      	adds	r7, #232	; 0xe8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <HAL_UART_TxCpltCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
=======
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_RxCpltCallback>:
=======
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_RxCpltCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
=======
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UART_ErrorCallback>:
=======
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_ErrorCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
=======
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_UARTEx_RxEventCallback>:
=======
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UARTEx_RxEventCallback>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	807b      	strh	r3, [r7, #2]
=======
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
>>>>>>> parent of 9e7a168 (最终版本)
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <UART_WaitOnFlagUntilTimeout>:
=======
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800711c:	b580      	push	{r7, lr}
 800711e:	b090      	sub	sp, #64	; 0x40
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800712c:	e050      	b.n	80071d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d04c      	beq.n	80071d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <UART_WaitOnFlagUntilTimeout+0x30>
 800713c:	f7fc f978 	bl	8003430 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007148:	429a      	cmp	r2, r3
 800714a:	d241      	bcs.n	80071d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800716c:	637a      	str	r2, [r7, #52]	; 0x34
 800716e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	613b      	str	r3, [r7, #16]
   return(result);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3314      	adds	r3, #20
 800719e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a0:	623a      	str	r2, [r7, #32]
 80071a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	69f9      	ldr	r1, [r7, #28]
 80071a6:	6a3a      	ldr	r2, [r7, #32]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e5      	bne.n	8007180 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e00f      	b.n	80071f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4013      	ands	r3, r2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	429a      	cmp	r2, r3
 80071de:	bf0c      	ite	eq
 80071e0:	2301      	moveq	r3, #1
 80071e2:	2300      	movne	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d09f      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	e050      	b.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d04c      	beq.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f20:	f7fc f99c 	bl	800325c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d241      	bcs.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f50:	637a      	str	r2, [r7, #52]	; 0x34
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e5      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f84:	623a      	str	r2, [r7, #32]
 8006f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	69f9      	ldr	r1, [r7, #28]
 8006f8a:	6a3a      	ldr	r2, [r7, #32]
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e00f      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d09f      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> parent of 9e7a168 (最终版本)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3740      	adds	r7, #64	; 0x40
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UART_EndRxTransfer>:
=======
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3740      	adds	r7, #64	; 0x40
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_EndRxTransfer>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80071f8:	b480      	push	{r7}
 80071fa:	b095      	sub	sp, #84	; 0x54
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007220:	643a      	str	r2, [r7, #64]	; 0x40
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	61fb      	str	r3, [r7, #28]
   return(result);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	64bb      	str	r3, [r7, #72]	; 0x48
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800725a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	2b01      	cmp	r3, #1
 800726e:	d119      	bne.n	80072a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f023 0310 	bic.w	r3, r3, #16
 8007286:	647b      	str	r3, [r7, #68]	; 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007290:	61ba      	str	r2, [r7, #24]
 8007292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6979      	ldr	r1, [r7, #20]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	613b      	str	r3, [r7, #16]
   return(result);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e5      	bne.n	8007270 <UART_EndRxTransfer+0x78>
=======
 8006fdc:	b480      	push	{r7}
 8006fde:	b095      	sub	sp, #84	; 0x54
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007004:	643a      	str	r2, [r7, #64]	; 0x40
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800700a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	61fb      	str	r3, [r7, #28]
   return(result);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b01      	cmp	r3, #1
 8007052:	d119      	bne.n	8007088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60bb      	str	r3, [r7, #8]
   return(result);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	647b      	str	r3, [r7, #68]	; 0x44
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007074:	61ba      	str	r2, [r7, #24]
 8007076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6979      	ldr	r1, [r7, #20]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	613b      	str	r3, [r7, #16]
   return(result);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x78>
>>>>>>> parent of 9e7a168 (最终版本)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072b2:	bf00      	nop
 80072b4:	3754      	adds	r7, #84	; 0x54
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <UART_DMAAbortOnError>:
=======
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007096:	bf00      	nop
 8007098:	3754      	adds	r7, #84	; 0x54
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <UART_DMAAbortOnError>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff ff09 	bl	80070f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <UART_Transmit_IT>:
=======
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff ff09 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <UART_Transmit_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
=======
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b21      	cmp	r3, #33	; 0x21
 80072f8:	d13e      	bne.n	8007378 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007302:	d114      	bne.n	800732e <UART_Transmit_IT+0x48>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d110      	bne.n	800732e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007320:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	621a      	str	r2, [r3, #32]
 800732c:	e008      	b.n	8007340 <UART_Transmit_IT+0x5a>
=======
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b21      	cmp	r3, #33	; 0x21
 80070dc:	d13e      	bne.n	800715c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d114      	bne.n	8007112 <UART_Transmit_IT+0x48>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d110      	bne.n	8007112 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007104:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]
 8007110:	e008      	b.n	8007124 <UART_Transmit_IT+0x5a>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6211      	str	r1, [r2, #32]
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29b      	uxth	r3, r3
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4619      	mov	r1, r3
 800734e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10f      	bne.n	8007374 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007362:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007372:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <UART_Transmit_IT+0x94>
=======
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1c59      	adds	r1, r3, #1
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6211      	str	r1, [r2, #32]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4619      	mov	r1, r3
 8007132:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007146:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007156:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e000      	b.n	800715e <UART_Transmit_IT+0x94>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007378:	2302      	movs	r3, #2
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <UART_EndTransmit_IT>:
=======
 800715c:	2302      	movs	r3, #2
  }
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <UART_EndTransmit_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800739c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007180:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff fe8e 	bl	80070c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_Receive_IT>:
=======
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fe8e 	bl	8006eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_Receive_IT>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b08c      	sub	sp, #48	; 0x30
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
=======
 800719a:	b580      	push	{r7, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 9e7a168 (最终版本)
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b22      	cmp	r3, #34	; 0x22
 80073c8:	f040 80ab 	bne.w	8007522 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d4:	d117      	bne.n	8007406 <UART_Receive_IT+0x50>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d113      	bne.n	8007406 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	1c9a      	adds	r2, r3, #2
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	629a      	str	r2, [r3, #40]	; 0x28
 8007404:	e026      	b.n	8007454 <UART_Receive_IT+0x9e>
=======
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b22      	cmp	r3, #34	; 0x22
 80071ac:	f040 80ab 	bne.w	8007306 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	d117      	bne.n	80071ea <UART_Receive_IT+0x50>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d113      	bne.n	80071ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	629a      	str	r2, [r3, #40]	; 0x28
 80071e8:	e026      	b.n	8007238 <UART_Receive_IT+0x9e>
>>>>>>> parent of 9e7a168 (最终版本)
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007418:	d007      	beq.n	800742a <UART_Receive_IT+0x74>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <UART_Receive_IT+0x82>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e008      	b.n	800744a <UART_Receive_IT+0x94>
=======
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fc:	d007      	beq.n	800720e <UART_Receive_IT+0x74>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <UART_Receive_IT+0x82>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e008      	b.n	800722e <UART_Receive_IT+0x94>
>>>>>>> parent of 9e7a168 (最终版本)
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007444:	b2da      	uxtb	r2, r3
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29b      	uxth	r3, r3
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4619      	mov	r1, r3
 8007462:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007464:	2b00      	cmp	r3, #0
 8007466:	d15a      	bne.n	800751e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0220 	bic.w	r2, r2, #32
 8007476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695a      	ldr	r2, [r3, #20]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2da      	uxtb	r2, r3
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4619      	mov	r1, r3
 8007246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007248:	2b00      	cmp	r3, #0
 800724a:	d15a      	bne.n	8007302 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0220 	bic.w	r2, r2, #32
 800725a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800726a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> parent of 9e7a168 (最终版本)

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d135      	bne.n	8007514 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	613b      	str	r3, [r7, #16]
   return(result);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f023 0310 	bic.w	r3, r3, #16
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	623a      	str	r2, [r7, #32]
 80074d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	69f9      	ldr	r1, [r7, #28]
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	61bb      	str	r3, [r7, #24]
   return(result);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d10a      	bne.n	8007506 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
=======
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	d135      	bne.n	80072f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	623a      	str	r2, [r7, #32]
 80072b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	69f9      	ldr	r1, [r7, #28]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d10a      	bne.n	80072ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fdf9 	bl	8007104 <HAL_UARTEx_RxEventCallback>
 8007512:	e002      	b.n	800751a <UART_Receive_IT+0x164>
=======
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fdf9 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
 80072f6:	e002      	b.n	80072fe <UART_Receive_IT+0x164>
>>>>>>> parent of 9e7a168 (最终版本)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fde1 	bl	80070dc <HAL_UART_RxCpltCallback>
=======
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fde1 	bl	8006ec0 <HAL_UART_RxCpltCallback>
>>>>>>> parent of 9e7a168 (最终版本)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 800751a:	2300      	movs	r3, #0
 800751c:	e002      	b.n	8007524 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	e000      	b.n	8007524 <UART_Receive_IT+0x16e>
=======
 80072fe:	2300      	movs	r3, #0
 8007300:	e002      	b.n	8007308 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <UART_Receive_IT+0x16e>
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007522:	2302      	movs	r3, #2
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3730      	adds	r7, #48	; 0x30
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <UART_SetConfig>:
=======
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_SetConfig>:
>>>>>>> parent of 9e7a168 (最终版本)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800752c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007530:	b0c0      	sub	sp, #256	; 0x100
 8007532:	af00      	add	r7, sp, #0
 8007534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
=======
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	b09f      	sub	sp, #124	; 0x7c
 8007316:	af00      	add	r7, sp, #0
 8007318:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> parent of 9e7a168 (最终版本)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	68d9      	ldr	r1, [r3, #12]
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	ea40 0301 	orr.w	r3, r0, r1
 8007554:	6113      	str	r3, [r2, #16]
=======
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007326:	68d9      	ldr	r1, [r3, #12]
 8007328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	ea40 0301 	orr.w	r3, r0, r1
 8007330:	6113      	str	r3, [r2, #16]
>>>>>>> parent of 9e7a168 (最终版本)
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	431a      	orrs	r2, r3
 8007564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	431a      	orrs	r2, r3
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007584:	f021 010c 	bic.w	r1, r1, #12
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007592:	430b      	orrs	r3, r1
 8007594:	60d3      	str	r3, [r2, #12]
=======
 8007332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	431a      	orrs	r2, r3
 800733c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	431a      	orrs	r2, r3
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800734a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007354:	f021 010c 	bic.w	r1, r1, #12
 8007358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735e:	430b      	orrs	r3, r1
 8007360:	60d3      	str	r3, [r2, #12]
>>>>>>> parent of 9e7a168 (最终版本)
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	6999      	ldr	r1, [r3, #24]
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	ea40 0301 	orr.w	r3, r0, r1
 80075b2:	6153      	str	r3, [r2, #20]
=======
 8007362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	6999      	ldr	r1, [r3, #24]
 8007370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	ea40 0301 	orr.w	r3, r0, r1
 8007378:	6153      	str	r3, [r2, #20]
>>>>>>> parent of 9e7a168 (最终版本)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4b8f      	ldr	r3, [pc, #572]	; (80077f8 <UART_SetConfig+0x2cc>)
 80075bc:	429a      	cmp	r2, r3
 80075be:	d005      	beq.n	80075cc <UART_SetConfig+0xa0>
 80075c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b8d      	ldr	r3, [pc, #564]	; (80077fc <UART_SetConfig+0x2d0>)
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d104      	bne.n	80075d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075cc:	f7fd ffc0 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 80075d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075d4:	e003      	b.n	80075de <UART_SetConfig+0xb2>
=======
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4bc5      	ldr	r3, [pc, #788]	; (8007694 <UART_SetConfig+0x384>)
 8007380:	429a      	cmp	r2, r3
 8007382:	d004      	beq.n	800738e <UART_SetConfig+0x7e>
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4bc3      	ldr	r3, [pc, #780]	; (8007698 <UART_SetConfig+0x388>)
 800738a:	429a      	cmp	r2, r3
 800738c:	d103      	bne.n	8007396 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800738e:	f7fd ffd1 	bl	8005334 <HAL_RCC_GetPCLK2Freq>
 8007392:	6778      	str	r0, [r7, #116]	; 0x74
 8007394:	e002      	b.n	800739c <UART_SetConfig+0x8c>
>>>>>>> parent of 9e7a168 (最终版本)
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80075d6:	f7fd ffa7 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 80075da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e8:	f040 810c 	bne.w	8007804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075fe:	4622      	mov	r2, r4
 8007600:	462b      	mov	r3, r5
 8007602:	1891      	adds	r1, r2, r2
 8007604:	65b9      	str	r1, [r7, #88]	; 0x58
 8007606:	415b      	adcs	r3, r3
 8007608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800760a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800760e:	4621      	mov	r1, r4
 8007610:	eb12 0801 	adds.w	r8, r2, r1
 8007614:	4629      	mov	r1, r5
 8007616:	eb43 0901 	adc.w	r9, r3, r1
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800762a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800762e:	4690      	mov	r8, r2
 8007630:	4699      	mov	r9, r3
 8007632:	4623      	mov	r3, r4
 8007634:	eb18 0303 	adds.w	r3, r8, r3
 8007638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800763c:	462b      	mov	r3, r5
 800763e:	eb49 0303 	adc.w	r3, r9, r3
 8007642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800765a:	460b      	mov	r3, r1
 800765c:	18db      	adds	r3, r3, r3
 800765e:	653b      	str	r3, [r7, #80]	; 0x50
 8007660:	4613      	mov	r3, r2
 8007662:	eb42 0303 	adc.w	r3, r2, r3
 8007666:	657b      	str	r3, [r7, #84]	; 0x54
 8007668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800766c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007670:	f7f9 fb0a 	bl	8000c88 <__aeabi_uldivmod>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4b61      	ldr	r3, [pc, #388]	; (8007800 <UART_SetConfig+0x2d4>)
 800767a:	fba3 2302 	umull	r2, r3, r3, r2
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	011c      	lsls	r4, r3, #4
 8007682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007686:	2200      	movs	r2, #0
 8007688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800768c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	1891      	adds	r1, r2, r2
 800769a:	64b9      	str	r1, [r7, #72]	; 0x48
 800769c:	415b      	adcs	r3, r3
 800769e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076a4:	4641      	mov	r1, r8
 80076a6:	eb12 0a01 	adds.w	sl, r2, r1
 80076aa:	4649      	mov	r1, r9
 80076ac:	eb43 0b01 	adc.w	fp, r3, r1
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c4:	4692      	mov	sl, r2
 80076c6:	469b      	mov	fp, r3
 80076c8:	4643      	mov	r3, r8
 80076ca:	eb1a 0303 	adds.w	r3, sl, r3
 80076ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076d2:	464b      	mov	r3, r9
 80076d4:	eb4b 0303 	adc.w	r3, fp, r3
 80076d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076f0:	460b      	mov	r3, r1
 80076f2:	18db      	adds	r3, r3, r3
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
 80076f6:	4613      	mov	r3, r2
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
 80076fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007706:	f7f9 fabf 	bl	8000c88 <__aeabi_uldivmod>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4611      	mov	r1, r2
 8007710:	4b3b      	ldr	r3, [pc, #236]	; (8007800 <UART_SetConfig+0x2d4>)
 8007712:	fba3 2301 	umull	r2, r3, r3, r1
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	2264      	movs	r2, #100	; 0x64
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	1acb      	subs	r3, r1, r3
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007726:	4b36      	ldr	r3, [pc, #216]	; (8007800 <UART_SetConfig+0x2d4>)
 8007728:	fba3 2302 	umull	r2, r3, r3, r2
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007734:	441c      	add	r4, r3
 8007736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	1891      	adds	r1, r2, r2
 800774e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007750:	415b      	adcs	r3, r3
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007758:	4641      	mov	r1, r8
 800775a:	1851      	adds	r1, r2, r1
 800775c:	6339      	str	r1, [r7, #48]	; 0x30
 800775e:	4649      	mov	r1, r9
 8007760:	414b      	adcs	r3, r1
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007770:	4659      	mov	r1, fp
 8007772:	00cb      	lsls	r3, r1, #3
 8007774:	4651      	mov	r1, sl
 8007776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777a:	4651      	mov	r1, sl
 800777c:	00ca      	lsls	r2, r1, #3
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	4603      	mov	r3, r0
 8007784:	4642      	mov	r2, r8
 8007786:	189b      	adds	r3, r3, r2
 8007788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800778c:	464b      	mov	r3, r9
 800778e:	460a      	mov	r2, r1
 8007790:	eb42 0303 	adc.w	r3, r2, r3
 8007794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077ac:	460b      	mov	r3, r1
 80077ae:	18db      	adds	r3, r3, r3
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b2:	4613      	mov	r3, r2
 80077b4:	eb42 0303 	adc.w	r3, r2, r3
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077c2:	f7f9 fa61 	bl	8000c88 <__aeabi_uldivmod>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <UART_SetConfig+0x2d4>)
 80077cc:	fba3 1302 	umull	r1, r3, r3, r2
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	2164      	movs	r1, #100	; 0x64
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	3332      	adds	r3, #50	; 0x32
 80077de:	4a08      	ldr	r2, [pc, #32]	; (8007800 <UART_SetConfig+0x2d4>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	f003 0207 	and.w	r2, r3, #7
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4422      	add	r2, r4
 80077f2:	609a      	str	r2, [r3, #8]
=======
 8007396:	f7fd ffb9 	bl	800530c <HAL_RCC_GetPCLK1Freq>
 800739a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a4:	f040 80b6 	bne.w	8007514 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073aa:	461c      	mov	r4, r3
 80073ac:	f04f 0500 	mov.w	r5, #0
 80073b0:	4622      	mov	r2, r4
 80073b2:	462b      	mov	r3, r5
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	6439      	str	r1, [r7, #64]	; 0x40
 80073b8:	415b      	adcs	r3, r3
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
 80073bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073c0:	1912      	adds	r2, r2, r4
 80073c2:	eb45 0303 	adc.w	r3, r5, r3
 80073c6:	f04f 0000 	mov.w	r0, #0
 80073ca:	f04f 0100 	mov.w	r1, #0
 80073ce:	00d9      	lsls	r1, r3, #3
 80073d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073d4:	00d0      	lsls	r0, r2, #3
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	1911      	adds	r1, r2, r4
 80073dc:	6639      	str	r1, [r7, #96]	; 0x60
 80073de:	416b      	adcs	r3, r5
 80073e0:	667b      	str	r3, [r7, #100]	; 0x64
 80073e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	1891      	adds	r1, r2, r2
 80073ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80073f0:	415b      	adcs	r3, r3
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073fc:	f7f9 fc44 	bl	8000c88 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4ba5      	ldr	r3, [pc, #660]	; (800769c <UART_SetConfig+0x38c>)
 8007406:	fba3 2302 	umull	r2, r3, r3, r2
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	011e      	lsls	r6, r3, #4
 800740e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007410:	461c      	mov	r4, r3
 8007412:	f04f 0500 	mov.w	r5, #0
 8007416:	4622      	mov	r2, r4
 8007418:	462b      	mov	r3, r5
 800741a:	1891      	adds	r1, r2, r2
 800741c:	6339      	str	r1, [r7, #48]	; 0x30
 800741e:	415b      	adcs	r3, r3
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
 8007422:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007426:	1912      	adds	r2, r2, r4
 8007428:	eb45 0303 	adc.w	r3, r5, r3
 800742c:	f04f 0000 	mov.w	r0, #0
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	00d9      	lsls	r1, r3, #3
 8007436:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800743a:	00d0      	lsls	r0, r2, #3
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	1911      	adds	r1, r2, r4
 8007442:	65b9      	str	r1, [r7, #88]	; 0x58
 8007444:	416b      	adcs	r3, r5
 8007446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	461a      	mov	r2, r3
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	1891      	adds	r1, r2, r2
 8007454:	62b9      	str	r1, [r7, #40]	; 0x28
 8007456:	415b      	adcs	r3, r3
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800745a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800745e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007462:	f7f9 fc11 	bl	8000c88 <__aeabi_uldivmod>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4b8c      	ldr	r3, [pc, #560]	; (800769c <UART_SetConfig+0x38c>)
 800746c:	fba3 1302 	umull	r1, r3, r3, r2
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	2164      	movs	r1, #100	; 0x64
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	3332      	adds	r3, #50	; 0x32
 800747e:	4a87      	ldr	r2, [pc, #540]	; (800769c <UART_SetConfig+0x38c>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800748c:	441e      	add	r6, r3
 800748e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007490:	4618      	mov	r0, r3
 8007492:	f04f 0100 	mov.w	r1, #0
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	1894      	adds	r4, r2, r2
 800749c:	623c      	str	r4, [r7, #32]
 800749e:	415b      	adcs	r3, r3
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
 80074a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074a6:	1812      	adds	r2, r2, r0
 80074a8:	eb41 0303 	adc.w	r3, r1, r3
 80074ac:	f04f 0400 	mov.w	r4, #0
 80074b0:	f04f 0500 	mov.w	r5, #0
 80074b4:	00dd      	lsls	r5, r3, #3
 80074b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ba:	00d4      	lsls	r4, r2, #3
 80074bc:	4622      	mov	r2, r4
 80074be:	462b      	mov	r3, r5
 80074c0:	1814      	adds	r4, r2, r0
 80074c2:	653c      	str	r4, [r7, #80]	; 0x50
 80074c4:	414b      	adcs	r3, r1
 80074c6:	657b      	str	r3, [r7, #84]	; 0x54
 80074c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	1891      	adds	r1, r2, r2
 80074d4:	61b9      	str	r1, [r7, #24]
 80074d6:	415b      	adcs	r3, r3
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074e2:	f7f9 fbd1 	bl	8000c88 <__aeabi_uldivmod>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4b6c      	ldr	r3, [pc, #432]	; (800769c <UART_SetConfig+0x38c>)
 80074ec:	fba3 1302 	umull	r1, r3, r3, r2
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	2164      	movs	r1, #100	; 0x64
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	3332      	adds	r3, #50	; 0x32
 80074fe:	4a67      	ldr	r2, [pc, #412]	; (800769c <UART_SetConfig+0x38c>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	f003 0207 	and.w	r2, r3, #7
 800750a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4432      	add	r2, r6
 8007510:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 9e7a168 (最终版本)
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 80077f4:	e105      	b.n	8007a02 <UART_SetConfig+0x4d6>
 80077f6:	bf00      	nop
 80077f8:	40011000 	.word	0x40011000
 80077fc:	40011400 	.word	0x40011400
 8007800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007808:	2200      	movs	r2, #0
 800780a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800780e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007816:	4642      	mov	r2, r8
 8007818:	464b      	mov	r3, r9
 800781a:	1891      	adds	r1, r2, r2
 800781c:	6239      	str	r1, [r7, #32]
 800781e:	415b      	adcs	r3, r3
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
 8007822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007826:	4641      	mov	r1, r8
 8007828:	1854      	adds	r4, r2, r1
 800782a:	4649      	mov	r1, r9
 800782c:	eb43 0501 	adc.w	r5, r3, r1
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	00eb      	lsls	r3, r5, #3
 800783a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800783e:	00e2      	lsls	r2, r4, #3
 8007840:	4614      	mov	r4, r2
 8007842:	461d      	mov	r5, r3
 8007844:	4643      	mov	r3, r8
 8007846:	18e3      	adds	r3, r4, r3
 8007848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800784c:	464b      	mov	r3, r9
 800784e:	eb45 0303 	adc.w	r3, r5, r3
 8007852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007872:	4629      	mov	r1, r5
 8007874:	008b      	lsls	r3, r1, #2
 8007876:	4621      	mov	r1, r4
 8007878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800787c:	4621      	mov	r1, r4
 800787e:	008a      	lsls	r2, r1, #2
 8007880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007884:	f7f9 fa00 	bl	8000c88 <__aeabi_uldivmod>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4b60      	ldr	r3, [pc, #384]	; (8007a10 <UART_SetConfig+0x4e4>)
 800788e:	fba3 2302 	umull	r2, r3, r3, r2
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	011c      	lsls	r4, r3, #4
 8007896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800789a:	2200      	movs	r2, #0
 800789c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	1891      	adds	r1, r2, r2
 80078ae:	61b9      	str	r1, [r7, #24]
 80078b0:	415b      	adcs	r3, r3
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078b8:	4641      	mov	r1, r8
 80078ba:	1851      	adds	r1, r2, r1
 80078bc:	6139      	str	r1, [r7, #16]
 80078be:	4649      	mov	r1, r9
 80078c0:	414b      	adcs	r3, r1
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078d0:	4659      	mov	r1, fp
 80078d2:	00cb      	lsls	r3, r1, #3
 80078d4:	4651      	mov	r1, sl
 80078d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078da:	4651      	mov	r1, sl
 80078dc:	00ca      	lsls	r2, r1, #3
 80078de:	4610      	mov	r0, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	4603      	mov	r3, r0
 80078e4:	4642      	mov	r2, r8
 80078e6:	189b      	adds	r3, r3, r2
 80078e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ec:	464b      	mov	r3, r9
 80078ee:	460a      	mov	r2, r1
 80078f0:	eb42 0303 	adc.w	r3, r2, r3
 80078f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	67bb      	str	r3, [r7, #120]	; 0x78
 8007902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007910:	4649      	mov	r1, r9
 8007912:	008b      	lsls	r3, r1, #2
 8007914:	4641      	mov	r1, r8
 8007916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800791a:	4641      	mov	r1, r8
 800791c:	008a      	lsls	r2, r1, #2
 800791e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007922:	f7f9 f9b1 	bl	8000c88 <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4b39      	ldr	r3, [pc, #228]	; (8007a10 <UART_SetConfig+0x4e4>)
 800792c:	fba3 1302 	umull	r1, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2164      	movs	r1, #100	; 0x64
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a34      	ldr	r2, [pc, #208]	; (8007a10 <UART_SetConfig+0x4e4>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800794a:	441c      	add	r4, r3
 800794c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007950:	2200      	movs	r2, #0
 8007952:	673b      	str	r3, [r7, #112]	; 0x70
 8007954:	677a      	str	r2, [r7, #116]	; 0x74
 8007956:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800795a:	4642      	mov	r2, r8
 800795c:	464b      	mov	r3, r9
 800795e:	1891      	adds	r1, r2, r2
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	415b      	adcs	r3, r3
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800796a:	4641      	mov	r1, r8
 800796c:	1851      	adds	r1, r2, r1
 800796e:	6039      	str	r1, [r7, #0]
 8007970:	4649      	mov	r1, r9
 8007972:	414b      	adcs	r3, r1
 8007974:	607b      	str	r3, [r7, #4]
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007982:	4659      	mov	r1, fp
 8007984:	00cb      	lsls	r3, r1, #3
 8007986:	4651      	mov	r1, sl
 8007988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800798c:	4651      	mov	r1, sl
 800798e:	00ca      	lsls	r2, r1, #3
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	4603      	mov	r3, r0
 8007996:	4642      	mov	r2, r8
 8007998:	189b      	adds	r3, r3, r2
 800799a:	66bb      	str	r3, [r7, #104]	; 0x68
 800799c:	464b      	mov	r3, r9
 800799e:	460a      	mov	r2, r1
 80079a0:	eb42 0303 	adc.w	r3, r2, r3
 80079a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	663b      	str	r3, [r7, #96]	; 0x60
 80079b0:	667a      	str	r2, [r7, #100]	; 0x64
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079be:	4649      	mov	r1, r9
 80079c0:	008b      	lsls	r3, r1, #2
 80079c2:	4641      	mov	r1, r8
 80079c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079c8:	4641      	mov	r1, r8
 80079ca:	008a      	lsls	r2, r1, #2
 80079cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079d0:	f7f9 f95a 	bl	8000c88 <__aeabi_uldivmod>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <UART_SetConfig+0x4e4>)
 80079da:	fba3 1302 	umull	r1, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2164      	movs	r1, #100	; 0x64
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	3332      	adds	r3, #50	; 0x32
 80079ec:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <UART_SetConfig+0x4e4>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4422      	add	r2, r4
 8007a00:	609a      	str	r2, [r3, #8]
}
 8007a02:	bf00      	nop
 8007a04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a0e:	bf00      	nop
 8007a10:	51eb851f 	.word	0x51eb851f

08007a14 <arm_sin_f32>:
 8007a14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a94 <arm_sin_f32+0x80>
 8007a18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007a1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a28:	d504      	bpl.n	8007a34 <arm_sin_f32+0x20>
 8007a2a:	ee17 3a90 	vmov	r3, s15
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a38:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007a98 <arm_sin_f32+0x84>
 8007a3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a40:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007a44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007a48:	ee17 3a90 	vmov	r3, s15
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a52:	d21a      	bcs.n	8007a8a <arm_sin_f32+0x76>
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	1c59      	adds	r1, r3, #1
 8007a5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a62:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <arm_sin_f32+0x88>)
 8007a64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007a70:	ed93 7a00 	vldr	s14, [r3]
 8007a74:	edd2 6a00 	vldr	s13, [r2]
 8007a78:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a7c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a84:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007a88:	4770      	bx	lr
 8007a8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007a8e:	2101      	movs	r1, #1
 8007a90:	2300      	movs	r3, #0
 8007a92:	e7e6      	b.n	8007a62 <arm_sin_f32+0x4e>
 8007a94:	3e22f983 	.word	0x3e22f983
 8007a98:	44000000 	.word	0x44000000
 8007a9c:	0800c6d0 	.word	0x0800c6d0

08007aa0 <arm_cos_f32>:
 8007aa0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007b28 <arm_cos_f32+0x88>
 8007aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007aa8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007aac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ab0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007abc:	d504      	bpl.n	8007ac8 <arm_cos_f32+0x28>
 8007abe:	ee17 3a90 	vmov	r3, s15
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007acc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007b2c <arm_cos_f32+0x8c>
 8007ad0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ad4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007ad8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007adc:	ee17 3a90 	vmov	r3, s15
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae6:	d21a      	bcs.n	8007b1e <arm_cos_f32+0x7e>
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af0:	1c59      	adds	r1, r3, #1
 8007af2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007af6:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <arm_cos_f32+0x90>)
 8007af8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007b04:	ed93 7a00 	vldr	s14, [r3]
 8007b08:	edd2 6a00 	vldr	s13, [r2]
 8007b0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007b10:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b18:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007b1c:	4770      	bx	lr
 8007b1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007b22:	2101      	movs	r1, #1
 8007b24:	2300      	movs	r3, #0
 8007b26:	e7e6      	b.n	8007af6 <arm_cos_f32+0x56>
 8007b28:	3e22f983 	.word	0x3e22f983
 8007b2c:	44000000 	.word	0x44000000
 8007b30:	0800c6d0 	.word	0x0800c6d0

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000024 	.word	0x20000024

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f004 fd3c 	bl	800c5d0 <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	0800d38c 	.word	0x0800d38c
 8007b7c:	0800d38c 	.word	0x0800d38c
 8007b80:	0800d38c 	.word	0x0800d38c
 8007b84:	0800d390 	.word	0x0800d390

08007b88 <malloc>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <malloc+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f000 b885 	b.w	8007c9c <_malloc_r>
 8007b92:	bf00      	nop
 8007b94:	20000024 	.word	0x20000024

08007b98 <memcpy>:
 8007b98:	440a      	add	r2, r1
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba0:	d100      	bne.n	8007ba4 <memcpy+0xc>
 8007ba2:	4770      	bx	lr
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bae:	4291      	cmp	r1, r2
 8007bb0:	d1f9      	bne.n	8007ba6 <memcpy+0xe>
 8007bb2:	bd10      	pop	{r4, pc}

08007bb4 <memset>:
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d100      	bne.n	8007bbe <memset+0xa>
 8007bbc:	4770      	bx	lr
 8007bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc2:	e7f9      	b.n	8007bb8 <memset+0x4>

08007bc4 <_free_r>:
 8007bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d044      	beq.n	8007c54 <_free_r+0x90>
 8007bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bce:	9001      	str	r0, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bd6:	bfb8      	it	lt
 8007bd8:	18e4      	addlt	r4, r4, r3
 8007bda:	f003 fb9b 	bl	800b314 <__malloc_lock>
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <_free_r+0x94>)
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	b933      	cbnz	r3, 8007bf4 <_free_r+0x30>
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf0:	f003 bb96 	b.w	800b320 <__malloc_unlock>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x46>
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	1961      	adds	r1, r4, r5
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf01      	itttt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	e7ed      	b.n	8007be6 <_free_r+0x22>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x50>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x46>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1855      	adds	r5, r2, r1
 8007c18:	42a5      	cmp	r5, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x70>
 8007c1c:	6824      	ldr	r4, [r4, #0]
 8007c1e:	4421      	add	r1, r4
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1e0      	bne.n	8007bea <_free_r+0x26>
 8007c28:	681c      	ldr	r4, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	4421      	add	r1, r4
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	e7da      	b.n	8007bea <_free_r+0x26>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x78>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	e7d6      	b.n	8007bea <_free_r+0x26>
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf04      	itt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	bf04      	itt	eq
 8007c4c:	1949      	addeq	r1, r1, r5
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	6054      	str	r4, [r2, #4]
 8007c52:	e7ca      	b.n	8007bea <_free_r+0x26>
 8007c54:	b003      	add	sp, #12
 8007c56:	bd30      	pop	{r4, r5, pc}
 8007c58:	2000346c 	.word	0x2000346c

08007c5c <sbrk_aligned>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4e0e      	ldr	r6, [pc, #56]	; (8007c98 <sbrk_aligned+0x3c>)
 8007c60:	460c      	mov	r4, r1
 8007c62:	6831      	ldr	r1, [r6, #0]
 8007c64:	4605      	mov	r5, r0
 8007c66:	b911      	cbnz	r1, 8007c6e <sbrk_aligned+0x12>
 8007c68:	f000 ff94 	bl	8008b94 <_sbrk_r>
 8007c6c:	6030      	str	r0, [r6, #0]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 ff8f 	bl	8008b94 <_sbrk_r>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d00a      	beq.n	8007c90 <sbrk_aligned+0x34>
 8007c7a:	1cc4      	adds	r4, r0, #3
 8007c7c:	f024 0403 	bic.w	r4, r4, #3
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d007      	beq.n	8007c94 <sbrk_aligned+0x38>
 8007c84:	1a21      	subs	r1, r4, r0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 ff84 	bl	8008b94 <_sbrk_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d101      	bne.n	8007c94 <sbrk_aligned+0x38>
 8007c90:	f04f 34ff 	mov.w	r4, #4294967295
 8007c94:	4620      	mov	r0, r4
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	20003470 	.word	0x20003470

08007c9c <_malloc_r>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	1ccd      	adds	r5, r1, #3
 8007ca2:	f025 0503 	bic.w	r5, r5, #3
 8007ca6:	3508      	adds	r5, #8
 8007ca8:	2d0c      	cmp	r5, #12
 8007caa:	bf38      	it	cc
 8007cac:	250c      	movcc	r5, #12
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	db01      	blt.n	8007cb8 <_malloc_r+0x1c>
 8007cb4:	42a9      	cmp	r1, r5
 8007cb6:	d905      	bls.n	8007cc4 <_malloc_r+0x28>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	4e2e      	ldr	r6, [pc, #184]	; (8007d80 <_malloc_r+0xe4>)
 8007cc6:	f003 fb25 	bl	800b314 <__malloc_lock>
 8007cca:	6833      	ldr	r3, [r6, #0]
 8007ccc:	461c      	mov	r4, r3
 8007cce:	bb34      	cbnz	r4, 8007d1e <_malloc_r+0x82>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ffc2 	bl	8007c5c <sbrk_aligned>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	4604      	mov	r4, r0
 8007cdc:	d14d      	bne.n	8007d7a <_malloc_r+0xde>
 8007cde:	6834      	ldr	r4, [r6, #0]
 8007ce0:	4626      	mov	r6, r4
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	d140      	bne.n	8007d68 <_malloc_r+0xcc>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4638      	mov	r0, r7
 8007cec:	eb04 0803 	add.w	r8, r4, r3
 8007cf0:	f000 ff50 	bl	8008b94 <_sbrk_r>
 8007cf4:	4580      	cmp	r8, r0
 8007cf6:	d13a      	bne.n	8007d6e <_malloc_r+0xd2>
 8007cf8:	6821      	ldr	r1, [r4, #0]
 8007cfa:	3503      	adds	r5, #3
 8007cfc:	1a6d      	subs	r5, r5, r1
 8007cfe:	f025 0503 	bic.w	r5, r5, #3
 8007d02:	3508      	adds	r5, #8
 8007d04:	2d0c      	cmp	r5, #12
 8007d06:	bf38      	it	cc
 8007d08:	250c      	movcc	r5, #12
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ffa5 	bl	8007c5c <sbrk_aligned>
 8007d12:	3001      	adds	r0, #1
 8007d14:	d02b      	beq.n	8007d6e <_malloc_r+0xd2>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	442b      	add	r3, r5
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	e00e      	b.n	8007d3c <_malloc_r+0xa0>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	1b52      	subs	r2, r2, r5
 8007d22:	d41e      	bmi.n	8007d62 <_malloc_r+0xc6>
 8007d24:	2a0b      	cmp	r2, #11
 8007d26:	d916      	bls.n	8007d56 <_malloc_r+0xba>
 8007d28:	1961      	adds	r1, r4, r5
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	6025      	str	r5, [r4, #0]
 8007d2e:	bf18      	it	ne
 8007d30:	6059      	strne	r1, [r3, #4]
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	bf08      	it	eq
 8007d36:	6031      	streq	r1, [r6, #0]
 8007d38:	5162      	str	r2, [r4, r5]
 8007d3a:	604b      	str	r3, [r1, #4]
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f104 060b 	add.w	r6, r4, #11
 8007d42:	f003 faed 	bl	800b320 <__malloc_unlock>
 8007d46:	f026 0607 	bic.w	r6, r6, #7
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	1af2      	subs	r2, r6, r3
 8007d4e:	d0b6      	beq.n	8007cbe <_malloc_r+0x22>
 8007d50:	1b9b      	subs	r3, r3, r6
 8007d52:	50a3      	str	r3, [r4, r2]
 8007d54:	e7b3      	b.n	8007cbe <_malloc_r+0x22>
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	bf0c      	ite	eq
 8007d5c:	6032      	streq	r2, [r6, #0]
 8007d5e:	605a      	strne	r2, [r3, #4]
 8007d60:	e7ec      	b.n	8007d3c <_malloc_r+0xa0>
 8007d62:	4623      	mov	r3, r4
 8007d64:	6864      	ldr	r4, [r4, #4]
 8007d66:	e7b2      	b.n	8007cce <_malloc_r+0x32>
 8007d68:	4634      	mov	r4, r6
 8007d6a:	6876      	ldr	r6, [r6, #4]
 8007d6c:	e7b9      	b.n	8007ce2 <_malloc_r+0x46>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	4638      	mov	r0, r7
 8007d74:	f003 fad4 	bl	800b320 <__malloc_unlock>
 8007d78:	e7a1      	b.n	8007cbe <_malloc_r+0x22>
 8007d7a:	6025      	str	r5, [r4, #0]
 8007d7c:	e7de      	b.n	8007d3c <_malloc_r+0xa0>
 8007d7e:	bf00      	nop
 8007d80:	2000346c 	.word	0x2000346c

08007d84 <__cvt>:
 8007d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	ec55 4b10 	vmov	r4, r5, d0
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	460e      	mov	r6, r1
 8007d90:	4619      	mov	r1, r3
 8007d92:	462b      	mov	r3, r5
 8007d94:	bfbb      	ittet	lt
 8007d96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d9a:	461d      	movlt	r5, r3
 8007d9c:	2300      	movge	r3, #0
 8007d9e:	232d      	movlt	r3, #45	; 0x2d
 8007da0:	700b      	strb	r3, [r1, #0]
 8007da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007da8:	4691      	mov	r9, r2
 8007daa:	f023 0820 	bic.w	r8, r3, #32
 8007dae:	bfbc      	itt	lt
 8007db0:	4622      	movlt	r2, r4
 8007db2:	4614      	movlt	r4, r2
 8007db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007db8:	d005      	beq.n	8007dc6 <__cvt+0x42>
 8007dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dbe:	d100      	bne.n	8007dc2 <__cvt+0x3e>
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	2102      	movs	r1, #2
 8007dc4:	e000      	b.n	8007dc8 <__cvt+0x44>
 8007dc6:	2103      	movs	r1, #3
 8007dc8:	ab03      	add	r3, sp, #12
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	ab02      	add	r3, sp, #8
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	ec45 4b10 	vmov	d0, r4, r5
 8007dd4:	4653      	mov	r3, sl
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	f001 ff0a 	bl	8009bf0 <_dtoa_r>
 8007ddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007de0:	4607      	mov	r7, r0
 8007de2:	d102      	bne.n	8007dea <__cvt+0x66>
 8007de4:	f019 0f01 	tst.w	r9, #1
 8007de8:	d022      	beq.n	8007e30 <__cvt+0xac>
 8007dea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dee:	eb07 0906 	add.w	r9, r7, r6
 8007df2:	d110      	bne.n	8007e16 <__cvt+0x92>
 8007df4:	783b      	ldrb	r3, [r7, #0]
 8007df6:	2b30      	cmp	r3, #48	; 0x30
 8007df8:	d10a      	bne.n	8007e10 <__cvt+0x8c>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e06:	b918      	cbnz	r0, 8007e10 <__cvt+0x8c>
 8007e08:	f1c6 0601 	rsb	r6, r6, #1
 8007e0c:	f8ca 6000 	str.w	r6, [sl]
 8007e10:	f8da 3000 	ldr.w	r3, [sl]
 8007e14:	4499      	add	r9, r3
 8007e16:	2200      	movs	r2, #0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e22:	b108      	cbz	r0, 8007e28 <__cvt+0xa4>
 8007e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e28:	2230      	movs	r2, #48	; 0x30
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	454b      	cmp	r3, r9
 8007e2e:	d307      	bcc.n	8007e40 <__cvt+0xbc>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e34:	1bdb      	subs	r3, r3, r7
 8007e36:	4638      	mov	r0, r7
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	b004      	add	sp, #16
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	1c59      	adds	r1, r3, #1
 8007e42:	9103      	str	r1, [sp, #12]
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e7f0      	b.n	8007e2a <__cvt+0xa6>

08007e48 <__exponent>:
 8007e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	bfb8      	it	lt
 8007e50:	4249      	neglt	r1, r1
 8007e52:	f803 2b02 	strb.w	r2, [r3], #2
 8007e56:	bfb4      	ite	lt
 8007e58:	222d      	movlt	r2, #45	; 0x2d
 8007e5a:	222b      	movge	r2, #43	; 0x2b
 8007e5c:	2909      	cmp	r1, #9
 8007e5e:	7042      	strb	r2, [r0, #1]
 8007e60:	dd2a      	ble.n	8007eb8 <__exponent+0x70>
 8007e62:	f10d 0407 	add.w	r4, sp, #7
 8007e66:	46a4      	mov	ip, r4
 8007e68:	270a      	movs	r7, #10
 8007e6a:	46a6      	mov	lr, r4
 8007e6c:	460a      	mov	r2, r1
 8007e6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e72:	fb07 1516 	mls	r5, r7, r6, r1
 8007e76:	3530      	adds	r5, #48	; 0x30
 8007e78:	2a63      	cmp	r2, #99	; 0x63
 8007e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e82:	4631      	mov	r1, r6
 8007e84:	dcf1      	bgt.n	8007e6a <__exponent+0x22>
 8007e86:	3130      	adds	r1, #48	; 0x30
 8007e88:	f1ae 0502 	sub.w	r5, lr, #2
 8007e8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e90:	1c44      	adds	r4, r0, #1
 8007e92:	4629      	mov	r1, r5
 8007e94:	4561      	cmp	r1, ip
 8007e96:	d30a      	bcc.n	8007eae <__exponent+0x66>
 8007e98:	f10d 0209 	add.w	r2, sp, #9
 8007e9c:	eba2 020e 	sub.w	r2, r2, lr
 8007ea0:	4565      	cmp	r5, ip
 8007ea2:	bf88      	it	hi
 8007ea4:	2200      	movhi	r2, #0
 8007ea6:	4413      	add	r3, r2
 8007ea8:	1a18      	subs	r0, r3, r0
 8007eaa:	b003      	add	sp, #12
 8007eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007eb6:	e7ed      	b.n	8007e94 <__exponent+0x4c>
 8007eb8:	2330      	movs	r3, #48	; 0x30
 8007eba:	3130      	adds	r1, #48	; 0x30
 8007ebc:	7083      	strb	r3, [r0, #2]
 8007ebe:	70c1      	strb	r1, [r0, #3]
 8007ec0:	1d03      	adds	r3, r0, #4
 8007ec2:	e7f1      	b.n	8007ea8 <__exponent+0x60>

08007ec4 <_printf_float>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	ed2d 8b02 	vpush	{d8}
 8007ecc:	b08d      	sub	sp, #52	; 0x34
 8007ece:	460c      	mov	r4, r1
 8007ed0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	461f      	mov	r7, r3
 8007ed8:	4605      	mov	r5, r0
 8007eda:	f003 f99d 	bl	800b218 <_localeconv_r>
 8007ede:	f8d0 a000 	ldr.w	sl, [r0]
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f7f8 f974 	bl	80001d0 <strlen>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	930a      	str	r3, [sp, #40]	; 0x28
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ef8:	3307      	adds	r3, #7
 8007efa:	f023 0307 	bic.w	r3, r3, #7
 8007efe:	f103 0208 	add.w	r2, r3, #8
 8007f02:	f8c8 2000 	str.w	r2, [r8]
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f16:	9307      	str	r3, [sp, #28]
 8007f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f1c:	ee08 0a10 	vmov	s16, r0
 8007f20:	4b9f      	ldr	r3, [pc, #636]	; (80081a0 <_printf_float+0x2dc>)
 8007f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f26:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2a:	f7f8 fdff 	bl	8000b2c <__aeabi_dcmpun>
 8007f2e:	bb88      	cbnz	r0, 8007f94 <_printf_float+0xd0>
 8007f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f34:	4b9a      	ldr	r3, [pc, #616]	; (80081a0 <_printf_float+0x2dc>)
 8007f36:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3a:	f7f8 fdd9 	bl	8000af0 <__aeabi_dcmple>
 8007f3e:	bb48      	cbnz	r0, 8007f94 <_printf_float+0xd0>
 8007f40:	2200      	movs	r2, #0
 8007f42:	2300      	movs	r3, #0
 8007f44:	4640      	mov	r0, r8
 8007f46:	4649      	mov	r1, r9
 8007f48:	f7f8 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8007f4c:	b110      	cbz	r0, 8007f54 <_printf_float+0x90>
 8007f4e:	232d      	movs	r3, #45	; 0x2d
 8007f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f54:	4b93      	ldr	r3, [pc, #588]	; (80081a4 <_printf_float+0x2e0>)
 8007f56:	4894      	ldr	r0, [pc, #592]	; (80081a8 <_printf_float+0x2e4>)
 8007f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f5c:	bf94      	ite	ls
 8007f5e:	4698      	movls	r8, r3
 8007f60:	4680      	movhi	r8, r0
 8007f62:	2303      	movs	r3, #3
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	f023 0204 	bic.w	r2, r3, #4
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	f04f 0900 	mov.w	r9, #0
 8007f72:	9700      	str	r7, [sp, #0]
 8007f74:	4633      	mov	r3, r6
 8007f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 f9d8 	bl	8008330 <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	f040 8090 	bne.w	80080a6 <_printf_float+0x1e2>
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	b00d      	add	sp, #52	; 0x34
 8007f8c:	ecbd 8b02 	vpop	{d8}
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	4642      	mov	r2, r8
 8007f96:	464b      	mov	r3, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	f7f8 fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8007fa0:	b140      	cbz	r0, 8007fb4 <_printf_float+0xf0>
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbc      	itt	lt
 8007fa8:	232d      	movlt	r3, #45	; 0x2d
 8007faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fae:	487f      	ldr	r0, [pc, #508]	; (80081ac <_printf_float+0x2e8>)
 8007fb0:	4b7f      	ldr	r3, [pc, #508]	; (80081b0 <_printf_float+0x2ec>)
 8007fb2:	e7d1      	b.n	8007f58 <_printf_float+0x94>
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fba:	9206      	str	r2, [sp, #24]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	d13f      	bne.n	8008040 <_printf_float+0x17c>
 8007fc0:	2306      	movs	r3, #6
 8007fc2:	6063      	str	r3, [r4, #4]
 8007fc4:	9b05      	ldr	r3, [sp, #20]
 8007fc6:	6861      	ldr	r1, [r4, #4]
 8007fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9303      	str	r3, [sp, #12]
 8007fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8007fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fd6:	ab09      	add	r3, sp, #36	; 0x24
 8007fd8:	ec49 8b10 	vmov	d0, r8, r9
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f7ff fecd 	bl	8007d84 <__cvt>
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fee:	2b47      	cmp	r3, #71	; 0x47
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	d108      	bne.n	8008006 <_printf_float+0x142>
 8007ff4:	1cc8      	adds	r0, r1, #3
 8007ff6:	db02      	blt.n	8007ffe <_printf_float+0x13a>
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	4299      	cmp	r1, r3
 8007ffc:	dd41      	ble.n	8008082 <_printf_float+0x1be>
 8007ffe:	f1ab 0b02 	sub.w	fp, fp, #2
 8008002:	fa5f fb8b 	uxtb.w	fp, fp
 8008006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800800a:	d820      	bhi.n	800804e <_printf_float+0x18a>
 800800c:	3901      	subs	r1, #1
 800800e:	465a      	mov	r2, fp
 8008010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008014:	9109      	str	r1, [sp, #36]	; 0x24
 8008016:	f7ff ff17 	bl	8007e48 <__exponent>
 800801a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800801c:	1813      	adds	r3, r2, r0
 800801e:	2a01      	cmp	r2, #1
 8008020:	4681      	mov	r9, r0
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	dc02      	bgt.n	800802c <_printf_float+0x168>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	07d2      	lsls	r2, r2, #31
 800802a:	d501      	bpl.n	8008030 <_printf_float+0x16c>
 800802c:	3301      	adds	r3, #1
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008034:	2b00      	cmp	r3, #0
 8008036:	d09c      	beq.n	8007f72 <_printf_float+0xae>
 8008038:	232d      	movs	r3, #45	; 0x2d
 800803a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800803e:	e798      	b.n	8007f72 <_printf_float+0xae>
 8008040:	9a06      	ldr	r2, [sp, #24]
 8008042:	2a47      	cmp	r2, #71	; 0x47
 8008044:	d1be      	bne.n	8007fc4 <_printf_float+0x100>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1bc      	bne.n	8007fc4 <_printf_float+0x100>
 800804a:	2301      	movs	r3, #1
 800804c:	e7b9      	b.n	8007fc2 <_printf_float+0xfe>
 800804e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008052:	d118      	bne.n	8008086 <_printf_float+0x1c2>
 8008054:	2900      	cmp	r1, #0
 8008056:	6863      	ldr	r3, [r4, #4]
 8008058:	dd0b      	ble.n	8008072 <_printf_float+0x1ae>
 800805a:	6121      	str	r1, [r4, #16]
 800805c:	b913      	cbnz	r3, 8008064 <_printf_float+0x1a0>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d0      	lsls	r0, r2, #31
 8008062:	d502      	bpl.n	800806a <_printf_float+0x1a6>
 8008064:	3301      	adds	r3, #1
 8008066:	440b      	add	r3, r1
 8008068:	6123      	str	r3, [r4, #16]
 800806a:	65a1      	str	r1, [r4, #88]	; 0x58
 800806c:	f04f 0900 	mov.w	r9, #0
 8008070:	e7de      	b.n	8008030 <_printf_float+0x16c>
 8008072:	b913      	cbnz	r3, 800807a <_printf_float+0x1b6>
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	07d2      	lsls	r2, r2, #31
 8008078:	d501      	bpl.n	800807e <_printf_float+0x1ba>
 800807a:	3302      	adds	r3, #2
 800807c:	e7f4      	b.n	8008068 <_printf_float+0x1a4>
 800807e:	2301      	movs	r3, #1
 8008080:	e7f2      	b.n	8008068 <_printf_float+0x1a4>
 8008082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008088:	4299      	cmp	r1, r3
 800808a:	db05      	blt.n	8008098 <_printf_float+0x1d4>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	6121      	str	r1, [r4, #16]
 8008090:	07d8      	lsls	r0, r3, #31
 8008092:	d5ea      	bpl.n	800806a <_printf_float+0x1a6>
 8008094:	1c4b      	adds	r3, r1, #1
 8008096:	e7e7      	b.n	8008068 <_printf_float+0x1a4>
 8008098:	2900      	cmp	r1, #0
 800809a:	bfd4      	ite	le
 800809c:	f1c1 0202 	rsble	r2, r1, #2
 80080a0:	2201      	movgt	r2, #1
 80080a2:	4413      	add	r3, r2
 80080a4:	e7e0      	b.n	8008068 <_printf_float+0x1a4>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	055a      	lsls	r2, r3, #21
 80080aa:	d407      	bmi.n	80080bc <_printf_float+0x1f8>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	4642      	mov	r2, r8
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	d12c      	bne.n	8008114 <_printf_float+0x250>
 80080ba:	e764      	b.n	8007f86 <_printf_float+0xc2>
 80080bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080c0:	f240 80e0 	bls.w	8008284 <_printf_float+0x3c0>
 80080c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	f7f8 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d034      	beq.n	800813e <_printf_float+0x27a>
 80080d4:	4a37      	ldr	r2, [pc, #220]	; (80081b4 <_printf_float+0x2f0>)
 80080d6:	2301      	movs	r3, #1
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f af51 	beq.w	8007f86 <_printf_float+0xc2>
 80080e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080e8:	429a      	cmp	r2, r3
 80080ea:	db02      	blt.n	80080f2 <_printf_float+0x22e>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	07d8      	lsls	r0, r3, #31
 80080f0:	d510      	bpl.n	8008114 <_printf_float+0x250>
 80080f2:	ee18 3a10 	vmov	r3, s16
 80080f6:	4652      	mov	r2, sl
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	f43f af41 	beq.w	8007f86 <_printf_float+0xc2>
 8008104:	f04f 0800 	mov.w	r8, #0
 8008108:	f104 091a 	add.w	r9, r4, #26
 800810c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800810e:	3b01      	subs	r3, #1
 8008110:	4543      	cmp	r3, r8
 8008112:	dc09      	bgt.n	8008128 <_printf_float+0x264>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	079b      	lsls	r3, r3, #30
 8008118:	f100 8105 	bmi.w	8008326 <_printf_float+0x462>
 800811c:	68e0      	ldr	r0, [r4, #12]
 800811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008120:	4298      	cmp	r0, r3
 8008122:	bfb8      	it	lt
 8008124:	4618      	movlt	r0, r3
 8008126:	e730      	b.n	8007f8a <_printf_float+0xc6>
 8008128:	2301      	movs	r3, #1
 800812a:	464a      	mov	r2, r9
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f af27 	beq.w	8007f86 <_printf_float+0xc2>
 8008138:	f108 0801 	add.w	r8, r8, #1
 800813c:	e7e6      	b.n	800810c <_printf_float+0x248>
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc39      	bgt.n	80081b8 <_printf_float+0x2f4>
 8008144:	4a1b      	ldr	r2, [pc, #108]	; (80081b4 <_printf_float+0x2f0>)
 8008146:	2301      	movs	r3, #1
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af19 	beq.w	8007f86 <_printf_float+0xc2>
 8008154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008158:	4313      	orrs	r3, r2
 800815a:	d102      	bne.n	8008162 <_printf_float+0x29e>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d5d8      	bpl.n	8008114 <_printf_float+0x250>
 8008162:	ee18 3a10 	vmov	r3, s16
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af09 	beq.w	8007f86 <_printf_float+0xc2>
 8008174:	f04f 0900 	mov.w	r9, #0
 8008178:	f104 0a1a 	add.w	sl, r4, #26
 800817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817e:	425b      	negs	r3, r3
 8008180:	454b      	cmp	r3, r9
 8008182:	dc01      	bgt.n	8008188 <_printf_float+0x2c4>
 8008184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008186:	e792      	b.n	80080ae <_printf_float+0x1ea>
 8008188:	2301      	movs	r3, #1
 800818a:	4652      	mov	r2, sl
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f aef7 	beq.w	8007f86 <_printf_float+0xc2>
 8008198:	f109 0901 	add.w	r9, r9, #1
 800819c:	e7ee      	b.n	800817c <_printf_float+0x2b8>
 800819e:	bf00      	nop
 80081a0:	7fefffff 	.word	0x7fefffff
 80081a4:	0800ced8 	.word	0x0800ced8
 80081a8:	0800cedc 	.word	0x0800cedc
 80081ac:	0800cee4 	.word	0x0800cee4
 80081b0:	0800cee0 	.word	0x0800cee0
 80081b4:	0800cee8 	.word	0x0800cee8
 80081b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081bc:	429a      	cmp	r2, r3
 80081be:	bfa8      	it	ge
 80081c0:	461a      	movge	r2, r3
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	4691      	mov	r9, r2
 80081c6:	dc37      	bgt.n	8008238 <_printf_float+0x374>
 80081c8:	f04f 0b00 	mov.w	fp, #0
 80081cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081d0:	f104 021a 	add.w	r2, r4, #26
 80081d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	eba3 0309 	sub.w	r3, r3, r9
 80081dc:	455b      	cmp	r3, fp
 80081de:	dc33      	bgt.n	8008248 <_printf_float+0x384>
 80081e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e4:	429a      	cmp	r2, r3
 80081e6:	db3b      	blt.n	8008260 <_printf_float+0x39c>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	07da      	lsls	r2, r3, #31
 80081ec:	d438      	bmi.n	8008260 <_printf_float+0x39c>
 80081ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f0:	9a05      	ldr	r2, [sp, #20]
 80081f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f4:	1a9a      	subs	r2, r3, r2
 80081f6:	eba3 0901 	sub.w	r9, r3, r1
 80081fa:	4591      	cmp	r9, r2
 80081fc:	bfa8      	it	ge
 80081fe:	4691      	movge	r9, r2
 8008200:	f1b9 0f00 	cmp.w	r9, #0
 8008204:	dc35      	bgt.n	8008272 <_printf_float+0x3ae>
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820e:	f104 0a1a 	add.w	sl, r4, #26
 8008212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	eba3 0309 	sub.w	r3, r3, r9
 800821c:	4543      	cmp	r3, r8
 800821e:	f77f af79 	ble.w	8008114 <_printf_float+0x250>
 8008222:	2301      	movs	r3, #1
 8008224:	4652      	mov	r2, sl
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	f43f aeaa 	beq.w	8007f86 <_printf_float+0xc2>
 8008232:	f108 0801 	add.w	r8, r8, #1
 8008236:	e7ec      	b.n	8008212 <_printf_float+0x34e>
 8008238:	4613      	mov	r3, r2
 800823a:	4631      	mov	r1, r6
 800823c:	4642      	mov	r2, r8
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	d1c0      	bne.n	80081c8 <_printf_float+0x304>
 8008246:	e69e      	b.n	8007f86 <_printf_float+0xc2>
 8008248:	2301      	movs	r3, #1
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	9205      	str	r2, [sp, #20]
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f ae97 	beq.w	8007f86 <_printf_float+0xc2>
 8008258:	9a05      	ldr	r2, [sp, #20]
 800825a:	f10b 0b01 	add.w	fp, fp, #1
 800825e:	e7b9      	b.n	80081d4 <_printf_float+0x310>
 8008260:	ee18 3a10 	vmov	r3, s16
 8008264:	4652      	mov	r2, sl
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	d1be      	bne.n	80081ee <_printf_float+0x32a>
 8008270:	e689      	b.n	8007f86 <_printf_float+0xc2>
 8008272:	9a05      	ldr	r2, [sp, #20]
 8008274:	464b      	mov	r3, r9
 8008276:	4442      	add	r2, r8
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	d1c1      	bne.n	8008206 <_printf_float+0x342>
 8008282:	e680      	b.n	8007f86 <_printf_float+0xc2>
 8008284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008286:	2a01      	cmp	r2, #1
 8008288:	dc01      	bgt.n	800828e <_printf_float+0x3ca>
 800828a:	07db      	lsls	r3, r3, #31
 800828c:	d538      	bpl.n	8008300 <_printf_float+0x43c>
 800828e:	2301      	movs	r3, #1
 8008290:	4642      	mov	r2, r8
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f ae74 	beq.w	8007f86 <_printf_float+0xc2>
 800829e:	ee18 3a10 	vmov	r3, s16
 80082a2:	4652      	mov	r2, sl
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f ae6b 	beq.w	8007f86 <_printf_float+0xc2>
 80082b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082b4:	2200      	movs	r2, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	f7f8 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80082bc:	b9d8      	cbnz	r0, 80082f6 <_printf_float+0x432>
 80082be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c0:	f108 0201 	add.w	r2, r8, #1
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	d10e      	bne.n	80082ee <_printf_float+0x42a>
 80082d0:	e659      	b.n	8007f86 <_printf_float+0xc2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4652      	mov	r2, sl
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae52 	beq.w	8007f86 <_printf_float+0xc2>
 80082e2:	f108 0801 	add.w	r8, r8, #1
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	3b01      	subs	r3, #1
 80082ea:	4543      	cmp	r3, r8
 80082ec:	dcf1      	bgt.n	80082d2 <_printf_float+0x40e>
 80082ee:	464b      	mov	r3, r9
 80082f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082f4:	e6dc      	b.n	80080b0 <_printf_float+0x1ec>
 80082f6:	f04f 0800 	mov.w	r8, #0
 80082fa:	f104 0a1a 	add.w	sl, r4, #26
 80082fe:	e7f2      	b.n	80082e6 <_printf_float+0x422>
 8008300:	2301      	movs	r3, #1
 8008302:	4642      	mov	r2, r8
 8008304:	e7df      	b.n	80082c6 <_printf_float+0x402>
 8008306:	2301      	movs	r3, #1
 8008308:	464a      	mov	r2, r9
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	f43f ae38 	beq.w	8007f86 <_printf_float+0xc2>
 8008316:	f108 0801 	add.w	r8, r8, #1
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800831e:	1a5b      	subs	r3, r3, r1
 8008320:	4543      	cmp	r3, r8
 8008322:	dcf0      	bgt.n	8008306 <_printf_float+0x442>
 8008324:	e6fa      	b.n	800811c <_printf_float+0x258>
 8008326:	f04f 0800 	mov.w	r8, #0
 800832a:	f104 0919 	add.w	r9, r4, #25
 800832e:	e7f4      	b.n	800831a <_printf_float+0x456>

08008330 <_printf_common>:
 8008330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	4616      	mov	r6, r2
 8008336:	4699      	mov	r9, r3
 8008338:	688a      	ldr	r2, [r1, #8]
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008340:	4293      	cmp	r3, r2
 8008342:	bfb8      	it	lt
 8008344:	4613      	movlt	r3, r2
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800834c:	4607      	mov	r7, r0
 800834e:	460c      	mov	r4, r1
 8008350:	b10a      	cbz	r2, 8008356 <_printf_common+0x26>
 8008352:	3301      	adds	r3, #1
 8008354:	6033      	str	r3, [r6, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	0699      	lsls	r1, r3, #26
 800835a:	bf42      	ittt	mi
 800835c:	6833      	ldrmi	r3, [r6, #0]
 800835e:	3302      	addmi	r3, #2
 8008360:	6033      	strmi	r3, [r6, #0]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d106      	bne.n	8008378 <_printf_common+0x48>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	6832      	ldr	r2, [r6, #0]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	42ab      	cmp	r3, r5
 8008376:	dc26      	bgt.n	80083c6 <_printf_common+0x96>
 8008378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800837c:	1e13      	subs	r3, r2, #0
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	bf18      	it	ne
 8008382:	2301      	movne	r3, #1
 8008384:	0692      	lsls	r2, r2, #26
 8008386:	d42b      	bmi.n	80083e0 <_printf_common+0xb0>
 8008388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838c:	4649      	mov	r1, r9
 800838e:	4638      	mov	r0, r7
 8008390:	47c0      	blx	r8
 8008392:	3001      	adds	r0, #1
 8008394:	d01e      	beq.n	80083d4 <_printf_common+0xa4>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	68e5      	ldr	r5, [r4, #12]
 800839a:	6832      	ldr	r2, [r6, #0]
 800839c:	f003 0306 	and.w	r3, r3, #6
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	bf08      	it	eq
 80083a4:	1aad      	subeq	r5, r5, r2
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	bf0c      	ite	eq
 80083ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b0:	2500      	movne	r5, #0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfc4      	itt	gt
 80083b6:	1a9b      	subgt	r3, r3, r2
 80083b8:	18ed      	addgt	r5, r5, r3
 80083ba:	2600      	movs	r6, #0
 80083bc:	341a      	adds	r4, #26
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d11a      	bne.n	80083f8 <_printf_common+0xc8>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e008      	b.n	80083d8 <_printf_common+0xa8>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4649      	mov	r1, r9
 80083cc:	4638      	mov	r0, r7
 80083ce:	47c0      	blx	r8
 80083d0:	3001      	adds	r0, #1
 80083d2:	d103      	bne.n	80083dc <_printf_common+0xac>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	3501      	adds	r5, #1
 80083de:	e7c6      	b.n	800836e <_printf_common+0x3e>
 80083e0:	18e1      	adds	r1, r4, r3
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	2030      	movs	r0, #48	; 0x30
 80083e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ea:	4422      	add	r2, r4
 80083ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7c7      	b.n	8008388 <_printf_common+0x58>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4622      	mov	r2, r4
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d0e6      	beq.n	80083d4 <_printf_common+0xa4>
 8008406:	3601      	adds	r6, #1
 8008408:	e7d9      	b.n	80083be <_printf_common+0x8e>
	...

0800840c <_printf_i>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	7e0f      	ldrb	r7, [r1, #24]
 8008412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008414:	2f78      	cmp	r7, #120	; 0x78
 8008416:	4691      	mov	r9, r2
 8008418:	4680      	mov	r8, r0
 800841a:	460c      	mov	r4, r1
 800841c:	469a      	mov	sl, r3
 800841e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008422:	d807      	bhi.n	8008434 <_printf_i+0x28>
 8008424:	2f62      	cmp	r7, #98	; 0x62
 8008426:	d80a      	bhi.n	800843e <_printf_i+0x32>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80d8 	beq.w	80085de <_printf_i+0x1d2>
 800842e:	2f58      	cmp	r7, #88	; 0x58
 8008430:	f000 80a3 	beq.w	800857a <_printf_i+0x16e>
 8008434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800843c:	e03a      	b.n	80084b4 <_printf_i+0xa8>
 800843e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008442:	2b15      	cmp	r3, #21
 8008444:	d8f6      	bhi.n	8008434 <_printf_i+0x28>
 8008446:	a101      	add	r1, pc, #4	; (adr r1, 800844c <_printf_i+0x40>)
 8008448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084b9 	.word	0x080084b9
 8008454:	08008435 	.word	0x08008435
 8008458:	08008435 	.word	0x08008435
 800845c:	08008435 	.word	0x08008435
 8008460:	08008435 	.word	0x08008435
 8008464:	080084b9 	.word	0x080084b9
 8008468:	08008435 	.word	0x08008435
 800846c:	08008435 	.word	0x08008435
 8008470:	08008435 	.word	0x08008435
 8008474:	08008435 	.word	0x08008435
 8008478:	080085c5 	.word	0x080085c5
 800847c:	080084e9 	.word	0x080084e9
 8008480:	080085a7 	.word	0x080085a7
 8008484:	08008435 	.word	0x08008435
 8008488:	08008435 	.word	0x08008435
 800848c:	080085e7 	.word	0x080085e7
 8008490:	08008435 	.word	0x08008435
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008435 	.word	0x08008435
 800849c:	08008435 	.word	0x08008435
 80084a0:	080085af 	.word	0x080085af
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	602a      	str	r2, [r5, #0]
 80084ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0a3      	b.n	8008600 <_printf_i+0x1f4>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	6829      	ldr	r1, [r5, #0]
 80084bc:	0606      	lsls	r6, r0, #24
 80084be:	f101 0304 	add.w	r3, r1, #4
 80084c2:	d50a      	bpl.n	80084da <_printf_i+0xce>
 80084c4:	680e      	ldr	r6, [r1, #0]
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	2e00      	cmp	r6, #0
 80084ca:	da03      	bge.n	80084d4 <_printf_i+0xc8>
 80084cc:	232d      	movs	r3, #45	; 0x2d
 80084ce:	4276      	negs	r6, r6
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	485e      	ldr	r0, [pc, #376]	; (8008650 <_printf_i+0x244>)
 80084d6:	230a      	movs	r3, #10
 80084d8:	e019      	b.n	800850e <_printf_i+0x102>
 80084da:	680e      	ldr	r6, [r1, #0]
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084e2:	bf18      	it	ne
 80084e4:	b236      	sxthne	r6, r6
 80084e6:	e7ef      	b.n	80084c8 <_printf_i+0xbc>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	6029      	str	r1, [r5, #0]
 80084f0:	0601      	lsls	r1, r0, #24
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0xec>
 80084f4:	681e      	ldr	r6, [r3, #0]
 80084f6:	e002      	b.n	80084fe <_printf_i+0xf2>
 80084f8:	0646      	lsls	r6, r0, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0xe8>
 80084fc:	881e      	ldrh	r6, [r3, #0]
 80084fe:	4854      	ldr	r0, [pc, #336]	; (8008650 <_printf_i+0x244>)
 8008500:	2f6f      	cmp	r7, #111	; 0x6f
 8008502:	bf0c      	ite	eq
 8008504:	2308      	moveq	r3, #8
 8008506:	230a      	movne	r3, #10
 8008508:	2100      	movs	r1, #0
 800850a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850e:	6865      	ldr	r5, [r4, #4]
 8008510:	60a5      	str	r5, [r4, #8]
 8008512:	2d00      	cmp	r5, #0
 8008514:	bfa2      	ittt	ge
 8008516:	6821      	ldrge	r1, [r4, #0]
 8008518:	f021 0104 	bicge.w	r1, r1, #4
 800851c:	6021      	strge	r1, [r4, #0]
 800851e:	b90e      	cbnz	r6, 8008524 <_printf_i+0x118>
 8008520:	2d00      	cmp	r5, #0
 8008522:	d04d      	beq.n	80085c0 <_printf_i+0x1b4>
 8008524:	4615      	mov	r5, r2
 8008526:	fbb6 f1f3 	udiv	r1, r6, r3
 800852a:	fb03 6711 	mls	r7, r3, r1, r6
 800852e:	5dc7      	ldrb	r7, [r0, r7]
 8008530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008534:	4637      	mov	r7, r6
 8008536:	42bb      	cmp	r3, r7
 8008538:	460e      	mov	r6, r1
 800853a:	d9f4      	bls.n	8008526 <_printf_i+0x11a>
 800853c:	2b08      	cmp	r3, #8
 800853e:	d10b      	bne.n	8008558 <_printf_i+0x14c>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07de      	lsls	r6, r3, #31
 8008544:	d508      	bpl.n	8008558 <_printf_i+0x14c>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4299      	cmp	r1, r3
 800854c:	bfde      	ittt	le
 800854e:	2330      	movle	r3, #48	; 0x30
 8008550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008558:	1b52      	subs	r2, r2, r5
 800855a:	6122      	str	r2, [r4, #16]
 800855c:	f8cd a000 	str.w	sl, [sp]
 8008560:	464b      	mov	r3, r9
 8008562:	aa03      	add	r2, sp, #12
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff fee2 	bl	8008330 <_printf_common>
 800856c:	3001      	adds	r0, #1
 800856e:	d14c      	bne.n	800860a <_printf_i+0x1fe>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b004      	add	sp, #16
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	4835      	ldr	r0, [pc, #212]	; (8008650 <_printf_i+0x244>)
 800857c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008580:	6829      	ldr	r1, [r5, #0]
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f851 6b04 	ldr.w	r6, [r1], #4
 8008588:	6029      	str	r1, [r5, #0]
 800858a:	061d      	lsls	r5, r3, #24
 800858c:	d514      	bpl.n	80085b8 <_printf_i+0x1ac>
 800858e:	07df      	lsls	r7, r3, #31
 8008590:	bf44      	itt	mi
 8008592:	f043 0320 	orrmi.w	r3, r3, #32
 8008596:	6023      	strmi	r3, [r4, #0]
 8008598:	b91e      	cbnz	r6, 80085a2 <_printf_i+0x196>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f023 0320 	bic.w	r3, r3, #32
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	2310      	movs	r3, #16
 80085a4:	e7b0      	b.n	8008508 <_printf_i+0xfc>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	f043 0320 	orr.w	r3, r3, #32
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	2378      	movs	r3, #120	; 0x78
 80085b0:	4828      	ldr	r0, [pc, #160]	; (8008654 <_printf_i+0x248>)
 80085b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085b6:	e7e3      	b.n	8008580 <_printf_i+0x174>
 80085b8:	0659      	lsls	r1, r3, #25
 80085ba:	bf48      	it	mi
 80085bc:	b2b6      	uxthmi	r6, r6
 80085be:	e7e6      	b.n	800858e <_printf_i+0x182>
 80085c0:	4615      	mov	r5, r2
 80085c2:	e7bb      	b.n	800853c <_printf_i+0x130>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	6826      	ldr	r6, [r4, #0]
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	1d18      	adds	r0, r3, #4
 80085cc:	6028      	str	r0, [r5, #0]
 80085ce:	0635      	lsls	r5, r6, #24
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0x1cc>
 80085d4:	6019      	str	r1, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0x1d2>
 80085d8:	0670      	lsls	r0, r6, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0x1c8>
 80085dc:	8019      	strh	r1, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	4615      	mov	r5, r2
 80085e4:	e7ba      	b.n	800855c <_printf_i+0x150>
 80085e6:	682b      	ldr	r3, [r5, #0]
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	602a      	str	r2, [r5, #0]
 80085ec:	681d      	ldr	r5, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b108      	cbz	r0, 80085fe <_printf_i+0x1f2>
 80085fa:	1b40      	subs	r0, r0, r5
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008608:	e7a8      	b.n	800855c <_printf_i+0x150>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	462a      	mov	r2, r5
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d0ab      	beq.n	8008570 <_printf_i+0x164>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	079b      	lsls	r3, r3, #30
 800861c:	d413      	bmi.n	8008646 <_printf_i+0x23a>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e7a4      	b.n	8008574 <_printf_i+0x168>
 800862a:	2301      	movs	r3, #1
 800862c:	4632      	mov	r2, r6
 800862e:	4649      	mov	r1, r9
 8008630:	4640      	mov	r0, r8
 8008632:	47d0      	blx	sl
 8008634:	3001      	adds	r0, #1
 8008636:	d09b      	beq.n	8008570 <_printf_i+0x164>
 8008638:	3501      	adds	r5, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	42ab      	cmp	r3, r5
 8008642:	dcf2      	bgt.n	800862a <_printf_i+0x21e>
 8008644:	e7eb      	b.n	800861e <_printf_i+0x212>
 8008646:	2500      	movs	r5, #0
 8008648:	f104 0619 	add.w	r6, r4, #25
 800864c:	e7f5      	b.n	800863a <_printf_i+0x22e>
 800864e:	bf00      	nop
 8008650:	0800ceea 	.word	0x0800ceea
 8008654:	0800cefb 	.word	0x0800cefb

08008658 <_scanf_float>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	b087      	sub	sp, #28
 800865e:	4617      	mov	r7, r2
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	688b      	ldr	r3, [r1, #8]
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800866a:	bf83      	ittte	hi
 800866c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008670:	195b      	addhi	r3, r3, r5
 8008672:	9302      	strhi	r3, [sp, #8]
 8008674:	2300      	movls	r3, #0
 8008676:	bf86      	itte	hi
 8008678:	f240 135d 	movwhi	r3, #349	; 0x15d
 800867c:	608b      	strhi	r3, [r1, #8]
 800867e:	9302      	strls	r3, [sp, #8]
 8008680:	680b      	ldr	r3, [r1, #0]
 8008682:	468b      	mov	fp, r1
 8008684:	2500      	movs	r5, #0
 8008686:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800868a:	f84b 3b1c 	str.w	r3, [fp], #28
 800868e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008692:	4680      	mov	r8, r0
 8008694:	460c      	mov	r4, r1
 8008696:	465e      	mov	r6, fp
 8008698:	46aa      	mov	sl, r5
 800869a:	46a9      	mov	r9, r5
 800869c:	9501      	str	r5, [sp, #4]
 800869e:	68a2      	ldr	r2, [r4, #8]
 80086a0:	b152      	cbz	r2, 80086b8 <_scanf_float+0x60>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2b4e      	cmp	r3, #78	; 0x4e
 80086a8:	d864      	bhi.n	8008774 <_scanf_float+0x11c>
 80086aa:	2b40      	cmp	r3, #64	; 0x40
 80086ac:	d83c      	bhi.n	8008728 <_scanf_float+0xd0>
 80086ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80086b2:	b2c8      	uxtb	r0, r1
 80086b4:	280e      	cmp	r0, #14
 80086b6:	d93a      	bls.n	800872e <_scanf_float+0xd6>
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	d003      	beq.n	80086c6 <_scanf_float+0x6e>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ca:	f1ba 0f01 	cmp.w	sl, #1
 80086ce:	f200 8113 	bhi.w	80088f8 <_scanf_float+0x2a0>
 80086d2:	455e      	cmp	r6, fp
 80086d4:	f200 8105 	bhi.w	80088e2 <_scanf_float+0x28a>
 80086d8:	2501      	movs	r5, #1
 80086da:	4628      	mov	r0, r5
 80086dc:	b007      	add	sp, #28
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80086e6:	2a0d      	cmp	r2, #13
 80086e8:	d8e6      	bhi.n	80086b8 <_scanf_float+0x60>
 80086ea:	a101      	add	r1, pc, #4	; (adr r1, 80086f0 <_scanf_float+0x98>)
 80086ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086f0:	0800882f 	.word	0x0800882f
 80086f4:	080086b9 	.word	0x080086b9
 80086f8:	080086b9 	.word	0x080086b9
 80086fc:	080086b9 	.word	0x080086b9
 8008700:	0800888f 	.word	0x0800888f
 8008704:	08008867 	.word	0x08008867
 8008708:	080086b9 	.word	0x080086b9
 800870c:	080086b9 	.word	0x080086b9
 8008710:	0800883d 	.word	0x0800883d
 8008714:	080086b9 	.word	0x080086b9
 8008718:	080086b9 	.word	0x080086b9
 800871c:	080086b9 	.word	0x080086b9
 8008720:	080086b9 	.word	0x080086b9
 8008724:	080087f5 	.word	0x080087f5
 8008728:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800872c:	e7db      	b.n	80086e6 <_scanf_float+0x8e>
 800872e:	290e      	cmp	r1, #14
 8008730:	d8c2      	bhi.n	80086b8 <_scanf_float+0x60>
 8008732:	a001      	add	r0, pc, #4	; (adr r0, 8008738 <_scanf_float+0xe0>)
 8008734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008738:	080087e7 	.word	0x080087e7
 800873c:	080086b9 	.word	0x080086b9
 8008740:	080087e7 	.word	0x080087e7
 8008744:	0800887b 	.word	0x0800887b
 8008748:	080086b9 	.word	0x080086b9
 800874c:	08008795 	.word	0x08008795
 8008750:	080087d1 	.word	0x080087d1
 8008754:	080087d1 	.word	0x080087d1
 8008758:	080087d1 	.word	0x080087d1
 800875c:	080087d1 	.word	0x080087d1
 8008760:	080087d1 	.word	0x080087d1
 8008764:	080087d1 	.word	0x080087d1
 8008768:	080087d1 	.word	0x080087d1
 800876c:	080087d1 	.word	0x080087d1
 8008770:	080087d1 	.word	0x080087d1
 8008774:	2b6e      	cmp	r3, #110	; 0x6e
 8008776:	d809      	bhi.n	800878c <_scanf_float+0x134>
 8008778:	2b60      	cmp	r3, #96	; 0x60
 800877a:	d8b2      	bhi.n	80086e2 <_scanf_float+0x8a>
 800877c:	2b54      	cmp	r3, #84	; 0x54
 800877e:	d077      	beq.n	8008870 <_scanf_float+0x218>
 8008780:	2b59      	cmp	r3, #89	; 0x59
 8008782:	d199      	bne.n	80086b8 <_scanf_float+0x60>
 8008784:	2d07      	cmp	r5, #7
 8008786:	d197      	bne.n	80086b8 <_scanf_float+0x60>
 8008788:	2508      	movs	r5, #8
 800878a:	e029      	b.n	80087e0 <_scanf_float+0x188>
 800878c:	2b74      	cmp	r3, #116	; 0x74
 800878e:	d06f      	beq.n	8008870 <_scanf_float+0x218>
 8008790:	2b79      	cmp	r3, #121	; 0x79
 8008792:	e7f6      	b.n	8008782 <_scanf_float+0x12a>
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	05c8      	lsls	r0, r1, #23
 8008798:	d51a      	bpl.n	80087d0 <_scanf_float+0x178>
 800879a:	9b02      	ldr	r3, [sp, #8]
 800879c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80087a0:	6021      	str	r1, [r4, #0]
 80087a2:	f109 0901 	add.w	r9, r9, #1
 80087a6:	b11b      	cbz	r3, 80087b0 <_scanf_float+0x158>
 80087a8:	3b01      	subs	r3, #1
 80087aa:	3201      	adds	r2, #1
 80087ac:	9302      	str	r3, [sp, #8]
 80087ae:	60a2      	str	r2, [r4, #8]
 80087b0:	68a3      	ldr	r3, [r4, #8]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3b01      	subs	r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	f340 8084 	ble.w	80088d0 <_scanf_float+0x278>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	e766      	b.n	800869e <_scanf_float+0x46>
 80087d0:	eb1a 0f05 	cmn.w	sl, r5
 80087d4:	f47f af70 	bne.w	80086b8 <_scanf_float+0x60>
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80087de:	6022      	str	r2, [r4, #0]
 80087e0:	f806 3b01 	strb.w	r3, [r6], #1
 80087e4:	e7e4      	b.n	80087b0 <_scanf_float+0x158>
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	0610      	lsls	r0, r2, #24
 80087ea:	f57f af65 	bpl.w	80086b8 <_scanf_float+0x60>
 80087ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087f2:	e7f4      	b.n	80087de <_scanf_float+0x186>
 80087f4:	f1ba 0f00 	cmp.w	sl, #0
 80087f8:	d10e      	bne.n	8008818 <_scanf_float+0x1c0>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	d10e      	bne.n	800881e <_scanf_float+0x1c6>
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008806:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800880a:	d108      	bne.n	800881e <_scanf_float+0x1c6>
 800880c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	f04f 0a01 	mov.w	sl, #1
 8008816:	e7e3      	b.n	80087e0 <_scanf_float+0x188>
 8008818:	f1ba 0f02 	cmp.w	sl, #2
 800881c:	d055      	beq.n	80088ca <_scanf_float+0x272>
 800881e:	2d01      	cmp	r5, #1
 8008820:	d002      	beq.n	8008828 <_scanf_float+0x1d0>
 8008822:	2d04      	cmp	r5, #4
 8008824:	f47f af48 	bne.w	80086b8 <_scanf_float+0x60>
 8008828:	3501      	adds	r5, #1
 800882a:	b2ed      	uxtb	r5, r5
 800882c:	e7d8      	b.n	80087e0 <_scanf_float+0x188>
 800882e:	f1ba 0f01 	cmp.w	sl, #1
 8008832:	f47f af41 	bne.w	80086b8 <_scanf_float+0x60>
 8008836:	f04f 0a02 	mov.w	sl, #2
 800883a:	e7d1      	b.n	80087e0 <_scanf_float+0x188>
 800883c:	b97d      	cbnz	r5, 800885e <_scanf_float+0x206>
 800883e:	f1b9 0f00 	cmp.w	r9, #0
 8008842:	f47f af3c 	bne.w	80086be <_scanf_float+0x66>
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800884c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008850:	f47f af39 	bne.w	80086c6 <_scanf_float+0x6e>
 8008854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008858:	6022      	str	r2, [r4, #0]
 800885a:	2501      	movs	r5, #1
 800885c:	e7c0      	b.n	80087e0 <_scanf_float+0x188>
 800885e:	2d03      	cmp	r5, #3
 8008860:	d0e2      	beq.n	8008828 <_scanf_float+0x1d0>
 8008862:	2d05      	cmp	r5, #5
 8008864:	e7de      	b.n	8008824 <_scanf_float+0x1cc>
 8008866:	2d02      	cmp	r5, #2
 8008868:	f47f af26 	bne.w	80086b8 <_scanf_float+0x60>
 800886c:	2503      	movs	r5, #3
 800886e:	e7b7      	b.n	80087e0 <_scanf_float+0x188>
 8008870:	2d06      	cmp	r5, #6
 8008872:	f47f af21 	bne.w	80086b8 <_scanf_float+0x60>
 8008876:	2507      	movs	r5, #7
 8008878:	e7b2      	b.n	80087e0 <_scanf_float+0x188>
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	0591      	lsls	r1, r2, #22
 800887e:	f57f af1b 	bpl.w	80086b8 <_scanf_float+0x60>
 8008882:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	f8cd 9004 	str.w	r9, [sp, #4]
 800888c:	e7a8      	b.n	80087e0 <_scanf_float+0x188>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008894:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008898:	d006      	beq.n	80088a8 <_scanf_float+0x250>
 800889a:	0550      	lsls	r0, r2, #21
 800889c:	f57f af0c 	bpl.w	80086b8 <_scanf_float+0x60>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	f43f af0f 	beq.w	80086c6 <_scanf_float+0x6e>
 80088a8:	0591      	lsls	r1, r2, #22
 80088aa:	bf58      	it	pl
 80088ac:	9901      	ldrpl	r1, [sp, #4]
 80088ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088b2:	bf58      	it	pl
 80088b4:	eba9 0101 	subpl.w	r1, r9, r1
 80088b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80088bc:	bf58      	it	pl
 80088be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	f04f 0900 	mov.w	r9, #0
 80088c8:	e78a      	b.n	80087e0 <_scanf_float+0x188>
 80088ca:	f04f 0a03 	mov.w	sl, #3
 80088ce:	e787      	b.n	80087e0 <_scanf_float+0x188>
 80088d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088d4:	4639      	mov	r1, r7
 80088d6:	4640      	mov	r0, r8
 80088d8:	4798      	blx	r3
 80088da:	2800      	cmp	r0, #0
 80088dc:	f43f aedf 	beq.w	800869e <_scanf_float+0x46>
 80088e0:	e6ea      	b.n	80086b8 <_scanf_float+0x60>
 80088e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ea:	463a      	mov	r2, r7
 80088ec:	4640      	mov	r0, r8
 80088ee:	4798      	blx	r3
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	e6ec      	b.n	80086d2 <_scanf_float+0x7a>
 80088f8:	1e6b      	subs	r3, r5, #1
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d825      	bhi.n	800894a <_scanf_float+0x2f2>
 80088fe:	2d02      	cmp	r5, #2
 8008900:	d836      	bhi.n	8008970 <_scanf_float+0x318>
 8008902:	455e      	cmp	r6, fp
 8008904:	f67f aee8 	bls.w	80086d8 <_scanf_float+0x80>
 8008908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800890c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008910:	463a      	mov	r2, r7
 8008912:	4640      	mov	r0, r8
 8008914:	4798      	blx	r3
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	3b01      	subs	r3, #1
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	e7f1      	b.n	8008902 <_scanf_float+0x2aa>
 800891e:	9802      	ldr	r0, [sp, #8]
 8008920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008924:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008928:	9002      	str	r0, [sp, #8]
 800892a:	463a      	mov	r2, r7
 800892c:	4640      	mov	r0, r8
 800892e:	4798      	blx	r3
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	3b01      	subs	r3, #1
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800893a:	fa5f fa8a 	uxtb.w	sl, sl
 800893e:	f1ba 0f02 	cmp.w	sl, #2
 8008942:	d1ec      	bne.n	800891e <_scanf_float+0x2c6>
 8008944:	3d03      	subs	r5, #3
 8008946:	b2ed      	uxtb	r5, r5
 8008948:	1b76      	subs	r6, r6, r5
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	05da      	lsls	r2, r3, #23
 800894e:	d52f      	bpl.n	80089b0 <_scanf_float+0x358>
 8008950:	055b      	lsls	r3, r3, #21
 8008952:	d510      	bpl.n	8008976 <_scanf_float+0x31e>
 8008954:	455e      	cmp	r6, fp
 8008956:	f67f aebf 	bls.w	80086d8 <_scanf_float+0x80>
 800895a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800895e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008962:	463a      	mov	r2, r7
 8008964:	4640      	mov	r0, r8
 8008966:	4798      	blx	r3
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	3b01      	subs	r3, #1
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	e7f1      	b.n	8008954 <_scanf_float+0x2fc>
 8008970:	46aa      	mov	sl, r5
 8008972:	9602      	str	r6, [sp, #8]
 8008974:	e7df      	b.n	8008936 <_scanf_float+0x2de>
 8008976:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	2965      	cmp	r1, #101	; 0x65
 800897e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008982:	f106 35ff 	add.w	r5, r6, #4294967295
 8008986:	6123      	str	r3, [r4, #16]
 8008988:	d00c      	beq.n	80089a4 <_scanf_float+0x34c>
 800898a:	2945      	cmp	r1, #69	; 0x45
 800898c:	d00a      	beq.n	80089a4 <_scanf_float+0x34c>
 800898e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008992:	463a      	mov	r2, r7
 8008994:	4640      	mov	r0, r8
 8008996:	4798      	blx	r3
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800899e:	3b01      	subs	r3, #1
 80089a0:	1eb5      	subs	r5, r6, #2
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089a8:	463a      	mov	r2, r7
 80089aa:	4640      	mov	r0, r8
 80089ac:	4798      	blx	r3
 80089ae:	462e      	mov	r6, r5
 80089b0:	6825      	ldr	r5, [r4, #0]
 80089b2:	f015 0510 	ands.w	r5, r5, #16
 80089b6:	d159      	bne.n	8008a6c <_scanf_float+0x414>
 80089b8:	7035      	strb	r5, [r6, #0]
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c4:	d11b      	bne.n	80089fe <_scanf_float+0x3a6>
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	454b      	cmp	r3, r9
 80089ca:	eba3 0209 	sub.w	r2, r3, r9
 80089ce:	d123      	bne.n	8008a18 <_scanf_float+0x3c0>
 80089d0:	2200      	movs	r2, #0
 80089d2:	4659      	mov	r1, fp
 80089d4:	4640      	mov	r0, r8
 80089d6:	f000 ff35 	bl	8009844 <_strtod_r>
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	f012 0f02 	tst.w	r2, #2
 80089e2:	ec57 6b10 	vmov	r6, r7, d0
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	d021      	beq.n	8008a2e <_scanf_float+0x3d6>
 80089ea:	9903      	ldr	r1, [sp, #12]
 80089ec:	1d1a      	adds	r2, r3, #4
 80089ee:	600a      	str	r2, [r1, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	e9c3 6700 	strd	r6, r7, [r3]
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60e3      	str	r3, [r4, #12]
 80089fc:	e66d      	b.n	80086da <_scanf_float+0x82>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0e5      	beq.n	80089d0 <_scanf_float+0x378>
 8008a04:	9905      	ldr	r1, [sp, #20]
 8008a06:	230a      	movs	r3, #10
 8008a08:	462a      	mov	r2, r5
 8008a0a:	3101      	adds	r1, #1
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	f000 ffa1 	bl	8009954 <_strtol_r>
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	9e05      	ldr	r6, [sp, #20]
 8008a16:	1ac2      	subs	r2, r0, r3
 8008a18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a1c:	429e      	cmp	r6, r3
 8008a1e:	bf28      	it	cs
 8008a20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a24:	4912      	ldr	r1, [pc, #72]	; (8008a70 <_scanf_float+0x418>)
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 f8ca 	bl	8008bc0 <siprintf>
 8008a2c:	e7d0      	b.n	80089d0 <_scanf_float+0x378>
 8008a2e:	9903      	ldr	r1, [sp, #12]
 8008a30:	f012 0f04 	tst.w	r2, #4
 8008a34:	f103 0204 	add.w	r2, r3, #4
 8008a38:	600a      	str	r2, [r1, #0]
 8008a3a:	d1d9      	bne.n	80089f0 <_scanf_float+0x398>
 8008a3c:	f8d3 8000 	ldr.w	r8, [r3]
 8008a40:	ee10 2a10 	vmov	r2, s0
 8008a44:	ee10 0a10 	vmov	r0, s0
 8008a48:	463b      	mov	r3, r7
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f7f8 f86e 	bl	8000b2c <__aeabi_dcmpun>
 8008a50:	b128      	cbz	r0, 8008a5e <_scanf_float+0x406>
 8008a52:	4808      	ldr	r0, [pc, #32]	; (8008a74 <_scanf_float+0x41c>)
 8008a54:	f000 f8ae 	bl	8008bb4 <nanf>
 8008a58:	ed88 0a00 	vstr	s0, [r8]
 8008a5c:	e7cb      	b.n	80089f6 <_scanf_float+0x39e>
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f8 f8c1 	bl	8000be8 <__aeabi_d2f>
 8008a66:	f8c8 0000 	str.w	r0, [r8]
 8008a6a:	e7c4      	b.n	80089f6 <_scanf_float+0x39e>
 8008a6c:	2500      	movs	r5, #0
 8008a6e:	e634      	b.n	80086da <_scanf_float+0x82>
 8008a70:	0800cf0c 	.word	0x0800cf0c
 8008a74:	0800d380 	.word	0x0800d380

08008a78 <iprintf>:
 8008a78:	b40f      	push	{r0, r1, r2, r3}
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <iprintf+0x2c>)
 8008a7c:	b513      	push	{r0, r1, r4, lr}
 8008a7e:	681c      	ldr	r4, [r3, #0]
 8008a80:	b124      	cbz	r4, 8008a8c <iprintf+0x14>
 8008a82:	69a3      	ldr	r3, [r4, #24]
 8008a84:	b913      	cbnz	r3, 8008a8c <iprintf+0x14>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 ffba 	bl	800aa00 <__sinit>
 8008a8c:	ab05      	add	r3, sp, #20
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	68a1      	ldr	r1, [r4, #8]
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	4620      	mov	r0, r4
 8008a96:	f003 faa5 	bl	800bfe4 <_vfiprintf_r>
 8008a9a:	b002      	add	sp, #8
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	b004      	add	sp, #16
 8008aa2:	4770      	bx	lr
 8008aa4:	20000024 	.word	0x20000024

08008aa8 <_puts_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	460e      	mov	r6, r1
 8008aac:	4605      	mov	r5, r0
 8008aae:	b118      	cbz	r0, 8008ab8 <_puts_r+0x10>
 8008ab0:	6983      	ldr	r3, [r0, #24]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <_puts_r+0x10>
 8008ab4:	f001 ffa4 	bl	800aa00 <__sinit>
 8008ab8:	69ab      	ldr	r3, [r5, #24]
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	b913      	cbnz	r3, 8008ac4 <_puts_r+0x1c>
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f001 ff9e 	bl	800aa00 <__sinit>
 8008ac4:	4b2c      	ldr	r3, [pc, #176]	; (8008b78 <_puts_r+0xd0>)
 8008ac6:	429c      	cmp	r4, r3
 8008ac8:	d120      	bne.n	8008b0c <_puts_r+0x64>
 8008aca:	686c      	ldr	r4, [r5, #4]
 8008acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ace:	07db      	lsls	r3, r3, #31
 8008ad0:	d405      	bmi.n	8008ade <_puts_r+0x36>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	0598      	lsls	r0, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_puts_r+0x36>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ada:	f002 fba2 	bl	800b222 <__retarget_lock_acquire_recursive>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	0719      	lsls	r1, r3, #28
 8008ae2:	d51d      	bpl.n	8008b20 <_puts_r+0x78>
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	b1db      	cbz	r3, 8008b20 <_puts_r+0x78>
 8008ae8:	3e01      	subs	r6, #1
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008af0:	3b01      	subs	r3, #1
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	bb39      	cbnz	r1, 8008b46 <_puts_r+0x9e>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da38      	bge.n	8008b6c <_puts_r+0xc4>
 8008afa:	4622      	mov	r2, r4
 8008afc:	210a      	movs	r1, #10
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 ff2a 	bl	8009958 <__swbuf_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d011      	beq.n	8008b2c <_puts_r+0x84>
 8008b08:	250a      	movs	r5, #10
 8008b0a:	e011      	b.n	8008b30 <_puts_r+0x88>
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	; (8008b7c <_puts_r+0xd4>)
 8008b0e:	429c      	cmp	r4, r3
 8008b10:	d101      	bne.n	8008b16 <_puts_r+0x6e>
 8008b12:	68ac      	ldr	r4, [r5, #8]
 8008b14:	e7da      	b.n	8008acc <_puts_r+0x24>
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <_puts_r+0xd8>)
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	bf08      	it	eq
 8008b1c:	68ec      	ldreq	r4, [r5, #12]
 8008b1e:	e7d5      	b.n	8008acc <_puts_r+0x24>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 ff6a 	bl	80099fc <__swsetup_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d0dd      	beq.n	8008ae8 <_puts_r+0x40>
 8008b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8008b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d405      	bmi.n	8008b42 <_puts_r+0x9a>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	059b      	lsls	r3, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_puts_r+0x9a>
 8008b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3e:	f002 fb71 	bl	800b224 <__retarget_lock_release_recursive>
 8008b42:	4628      	mov	r0, r5
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da04      	bge.n	8008b54 <_puts_r+0xac>
 8008b4a:	69a2      	ldr	r2, [r4, #24]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	dc06      	bgt.n	8008b5e <_puts_r+0xb6>
 8008b50:	290a      	cmp	r1, #10
 8008b52:	d004      	beq.n	8008b5e <_puts_r+0xb6>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	7019      	strb	r1, [r3, #0]
 8008b5c:	e7c5      	b.n	8008aea <_puts_r+0x42>
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 fef9 	bl	8009958 <__swbuf_r>
 8008b66:	3001      	adds	r0, #1
 8008b68:	d1bf      	bne.n	8008aea <_puts_r+0x42>
 8008b6a:	e7df      	b.n	8008b2c <_puts_r+0x84>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	250a      	movs	r5, #10
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	6022      	str	r2, [r4, #0]
 8008b74:	701d      	strb	r5, [r3, #0]
 8008b76:	e7db      	b.n	8008b30 <_puts_r+0x88>
 8008b78:	0800d11c 	.word	0x0800d11c
 8008b7c:	0800d13c 	.word	0x0800d13c
 8008b80:	0800d0fc 	.word	0x0800d0fc

08008b84 <puts>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <puts+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f7ff bf8d 	b.w	8008aa8 <_puts_r>
 8008b8e:	bf00      	nop
 8008b90:	20000024 	.word	0x20000024

08008b94 <_sbrk_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d06      	ldr	r5, [pc, #24]	; (8008bb0 <_sbrk_r+0x1c>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	f7fa f96c 	bl	8002e7c <_sbrk>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_sbrk_r+0x1a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_sbrk_r+0x1a>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20003478 	.word	0x20003478

08008bb4 <nanf>:
 8008bb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008bbc <nanf+0x8>
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	7fc00000 	.word	0x7fc00000

08008bc0 <siprintf>:
 8008bc0:	b40e      	push	{r1, r2, r3}
 8008bc2:	b500      	push	{lr}
 8008bc4:	b09c      	sub	sp, #112	; 0x70
 8008bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8008bc8:	9002      	str	r0, [sp, #8]
 8008bca:	9006      	str	r0, [sp, #24]
 8008bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <siprintf+0x38>)
 8008bd2:	9107      	str	r1, [sp, #28]
 8008bd4:	9104      	str	r1, [sp, #16]
 8008bd6:	4909      	ldr	r1, [pc, #36]	; (8008bfc <siprintf+0x3c>)
 8008bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bdc:	9105      	str	r1, [sp, #20]
 8008bde:	6800      	ldr	r0, [r0, #0]
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	a902      	add	r1, sp, #8
 8008be4:	f003 f8d4 	bl	800bd90 <_svfiprintf_r>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	2200      	movs	r2, #0
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	b01c      	add	sp, #112	; 0x70
 8008bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf4:	b003      	add	sp, #12
 8008bf6:	4770      	bx	lr
 8008bf8:	20000024 	.word	0x20000024
 8008bfc:	ffff0208 	.word	0xffff0208

08008c00 <sulp>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	ec45 4b10 	vmov	d0, r4, r5
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	f002 ff00 	bl	800ba10 <__ulp>
 8008c10:	ec51 0b10 	vmov	r0, r1, d0
 8008c14:	b17e      	cbz	r6, 8008c36 <sulp+0x36>
 8008c16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd09      	ble.n	8008c36 <sulp+0x36>
 8008c22:	051b      	lsls	r3, r3, #20
 8008c24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c28:	2400      	movs	r4, #0
 8008c2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c2e:	4622      	mov	r2, r4
 8008c30:	462b      	mov	r3, r5
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}

08008c38 <_strtod_l>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ed2d 8b02 	vpush	{d8}
 8008c40:	b09d      	sub	sp, #116	; 0x74
 8008c42:	461f      	mov	r7, r3
 8008c44:	2300      	movs	r3, #0
 8008c46:	9318      	str	r3, [sp, #96]	; 0x60
 8008c48:	4ba2      	ldr	r3, [pc, #648]	; (8008ed4 <_strtod_l+0x29c>)
 8008c4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	9305      	str	r3, [sp, #20]
 8008c50:	4604      	mov	r4, r0
 8008c52:	4618      	mov	r0, r3
 8008c54:	4688      	mov	r8, r1
 8008c56:	f7f7 fabb 	bl	80001d0 <strlen>
 8008c5a:	f04f 0a00 	mov.w	sl, #0
 8008c5e:	4605      	mov	r5, r0
 8008c60:	f04f 0b00 	mov.w	fp, #0
 8008c64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c6a:	781a      	ldrb	r2, [r3, #0]
 8008c6c:	2a2b      	cmp	r2, #43	; 0x2b
 8008c6e:	d04e      	beq.n	8008d0e <_strtod_l+0xd6>
 8008c70:	d83b      	bhi.n	8008cea <_strtod_l+0xb2>
 8008c72:	2a0d      	cmp	r2, #13
 8008c74:	d834      	bhi.n	8008ce0 <_strtod_l+0xa8>
 8008c76:	2a08      	cmp	r2, #8
 8008c78:	d834      	bhi.n	8008ce4 <_strtod_l+0xac>
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	d03e      	beq.n	8008cfc <_strtod_l+0xc4>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	930a      	str	r3, [sp, #40]	; 0x28
 8008c82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c84:	7833      	ldrb	r3, [r6, #0]
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	f040 80b0 	bne.w	8008dec <_strtod_l+0x1b4>
 8008c8c:	7873      	ldrb	r3, [r6, #1]
 8008c8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c92:	2b58      	cmp	r3, #88	; 0x58
 8008c94:	d168      	bne.n	8008d68 <_strtod_l+0x130>
 8008c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	ab18      	add	r3, sp, #96	; 0x60
 8008c9c:	9702      	str	r7, [sp, #8]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4a8d      	ldr	r2, [pc, #564]	; (8008ed8 <_strtod_l+0x2a0>)
 8008ca2:	ab19      	add	r3, sp, #100	; 0x64
 8008ca4:	a917      	add	r1, sp, #92	; 0x5c
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 ffae 	bl	800ac08 <__gethex>
 8008cac:	f010 0707 	ands.w	r7, r0, #7
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	d005      	beq.n	8008cc0 <_strtod_l+0x88>
 8008cb4:	2f06      	cmp	r7, #6
 8008cb6:	d12c      	bne.n	8008d12 <_strtod_l+0xda>
 8008cb8:	3601      	adds	r6, #1
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8008cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 8590 	bne.w	80097e8 <_strtod_l+0xbb0>
 8008cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cca:	b1eb      	cbz	r3, 8008d08 <_strtod_l+0xd0>
 8008ccc:	4652      	mov	r2, sl
 8008cce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cd2:	ec43 2b10 	vmov	d0, r2, r3
 8008cd6:	b01d      	add	sp, #116	; 0x74
 8008cd8:	ecbd 8b02 	vpop	{d8}
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	2a20      	cmp	r2, #32
 8008ce2:	d1cc      	bne.n	8008c7e <_strtod_l+0x46>
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ce8:	e7be      	b.n	8008c68 <_strtod_l+0x30>
 8008cea:	2a2d      	cmp	r2, #45	; 0x2d
 8008cec:	d1c7      	bne.n	8008c7e <_strtod_l+0x46>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1c2      	bne.n	8008c82 <_strtod_l+0x4a>
 8008cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 856e 	bne.w	80097e4 <_strtod_l+0xbac>
 8008d08:	4652      	mov	r2, sl
 8008d0a:	465b      	mov	r3, fp
 8008d0c:	e7e1      	b.n	8008cd2 <_strtod_l+0x9a>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	e7ee      	b.n	8008cf0 <_strtod_l+0xb8>
 8008d12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d14:	b13a      	cbz	r2, 8008d26 <_strtod_l+0xee>
 8008d16:	2135      	movs	r1, #53	; 0x35
 8008d18:	a81a      	add	r0, sp, #104	; 0x68
 8008d1a:	f002 ff84 	bl	800bc26 <__copybits>
 8008d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d20:	4620      	mov	r0, r4
 8008d22:	f002 fb43 	bl	800b3ac <_Bfree>
 8008d26:	3f01      	subs	r7, #1
 8008d28:	2f04      	cmp	r7, #4
 8008d2a:	d806      	bhi.n	8008d3a <_strtod_l+0x102>
 8008d2c:	e8df f007 	tbb	[pc, r7]
 8008d30:	1714030a 	.word	0x1714030a
 8008d34:	0a          	.byte	0x0a
 8008d35:	00          	.byte	0x00
 8008d36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008d3a:	0728      	lsls	r0, r5, #28
 8008d3c:	d5c0      	bpl.n	8008cc0 <_strtod_l+0x88>
 8008d3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d42:	e7bd      	b.n	8008cc0 <_strtod_l+0x88>
 8008d44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008d48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d56:	e7f0      	b.n	8008d3a <_strtod_l+0x102>
 8008d58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008edc <_strtod_l+0x2a4>
 8008d5c:	e7ed      	b.n	8008d3a <_strtod_l+0x102>
 8008d5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d62:	f04f 3aff 	mov.w	sl, #4294967295
 8008d66:	e7e8      	b.n	8008d3a <_strtod_l+0x102>
 8008d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b30      	cmp	r3, #48	; 0x30
 8008d72:	d0f9      	beq.n	8008d68 <_strtod_l+0x130>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0a3      	beq.n	8008cc0 <_strtod_l+0x88>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f04f 0900 	mov.w	r9, #0
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d88:	464f      	mov	r7, r9
 8008d8a:	220a      	movs	r2, #10
 8008d8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d8e:	7806      	ldrb	r6, [r0, #0]
 8008d90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d94:	b2d9      	uxtb	r1, r3
 8008d96:	2909      	cmp	r1, #9
 8008d98:	d92a      	bls.n	8008df0 <_strtod_l+0x1b8>
 8008d9a:	9905      	ldr	r1, [sp, #20]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	f003 fa9e 	bl	800c2de <strncmp>
 8008da2:	b398      	cbz	r0, 8008e0c <_strtod_l+0x1d4>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4632      	mov	r2, r6
 8008da8:	463d      	mov	r5, r7
 8008daa:	9005      	str	r0, [sp, #20]
 8008dac:	4603      	mov	r3, r0
 8008dae:	2a65      	cmp	r2, #101	; 0x65
 8008db0:	d001      	beq.n	8008db6 <_strtod_l+0x17e>
 8008db2:	2a45      	cmp	r2, #69	; 0x45
 8008db4:	d118      	bne.n	8008de8 <_strtod_l+0x1b0>
 8008db6:	b91d      	cbnz	r5, 8008dc0 <_strtod_l+0x188>
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	4302      	orrs	r2, r0
 8008dbc:	d09e      	beq.n	8008cfc <_strtod_l+0xc4>
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008dc4:	f108 0201 	add.w	r2, r8, #1
 8008dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008dce:	2a2b      	cmp	r2, #43	; 0x2b
 8008dd0:	d075      	beq.n	8008ebe <_strtod_l+0x286>
 8008dd2:	2a2d      	cmp	r2, #45	; 0x2d
 8008dd4:	d07b      	beq.n	8008ece <_strtod_l+0x296>
 8008dd6:	f04f 0c00 	mov.w	ip, #0
 8008dda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dde:	2909      	cmp	r1, #9
 8008de0:	f240 8082 	bls.w	8008ee8 <_strtod_l+0x2b0>
 8008de4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008de8:	2600      	movs	r6, #0
 8008dea:	e09d      	b.n	8008f28 <_strtod_l+0x2f0>
 8008dec:	2300      	movs	r3, #0
 8008dee:	e7c4      	b.n	8008d7a <_strtod_l+0x142>
 8008df0:	2f08      	cmp	r7, #8
 8008df2:	bfd8      	it	le
 8008df4:	9907      	ldrle	r1, [sp, #28]
 8008df6:	f100 0001 	add.w	r0, r0, #1
 8008dfa:	bfda      	itte	le
 8008dfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e00:	9307      	strle	r3, [sp, #28]
 8008e02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008e06:	3701      	adds	r7, #1
 8008e08:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e0a:	e7bf      	b.n	8008d8c <_strtod_l+0x154>
 8008e0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e0e:	195a      	adds	r2, r3, r5
 8008e10:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e12:	5d5a      	ldrb	r2, [r3, r5]
 8008e14:	2f00      	cmp	r7, #0
 8008e16:	d037      	beq.n	8008e88 <_strtod_l+0x250>
 8008e18:	9005      	str	r0, [sp, #20]
 8008e1a:	463d      	mov	r5, r7
 8008e1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d912      	bls.n	8008e4a <_strtod_l+0x212>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e7c2      	b.n	8008dae <_strtod_l+0x176>
 8008e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e2e:	785a      	ldrb	r2, [r3, #1]
 8008e30:	3001      	adds	r0, #1
 8008e32:	2a30      	cmp	r2, #48	; 0x30
 8008e34:	d0f8      	beq.n	8008e28 <_strtod_l+0x1f0>
 8008e36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	f200 84d9 	bhi.w	80097f2 <_strtod_l+0xbba>
 8008e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e42:	9005      	str	r0, [sp, #20]
 8008e44:	2000      	movs	r0, #0
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	4605      	mov	r5, r0
 8008e4a:	3a30      	subs	r2, #48	; 0x30
 8008e4c:	f100 0301 	add.w	r3, r0, #1
 8008e50:	d014      	beq.n	8008e7c <_strtod_l+0x244>
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	4419      	add	r1, r3
 8008e56:	9105      	str	r1, [sp, #20]
 8008e58:	462b      	mov	r3, r5
 8008e5a:	eb00 0e05 	add.w	lr, r0, r5
 8008e5e:	210a      	movs	r1, #10
 8008e60:	4573      	cmp	r3, lr
 8008e62:	d113      	bne.n	8008e8c <_strtod_l+0x254>
 8008e64:	182b      	adds	r3, r5, r0
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	f105 0501 	add.w	r5, r5, #1
 8008e6c:	4405      	add	r5, r0
 8008e6e:	dc1c      	bgt.n	8008eaa <_strtod_l+0x272>
 8008e70:	9907      	ldr	r1, [sp, #28]
 8008e72:	230a      	movs	r3, #10
 8008e74:	fb03 2301 	mla	r3, r3, r1, r2
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e7e:	1c51      	adds	r1, r2, #1
 8008e80:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	4618      	mov	r0, r3
 8008e86:	e7c9      	b.n	8008e1c <_strtod_l+0x1e4>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	e7d2      	b.n	8008e32 <_strtod_l+0x1fa>
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	dc04      	bgt.n	8008e9a <_strtod_l+0x262>
 8008e90:	9e07      	ldr	r6, [sp, #28]
 8008e92:	434e      	muls	r6, r1
 8008e94:	9607      	str	r6, [sp, #28]
 8008e96:	3301      	adds	r3, #1
 8008e98:	e7e2      	b.n	8008e60 <_strtod_l+0x228>
 8008e9a:	f103 0c01 	add.w	ip, r3, #1
 8008e9e:	f1bc 0f10 	cmp.w	ip, #16
 8008ea2:	bfd8      	it	le
 8008ea4:	fb01 f909 	mulle.w	r9, r1, r9
 8008ea8:	e7f5      	b.n	8008e96 <_strtod_l+0x25e>
 8008eaa:	2d10      	cmp	r5, #16
 8008eac:	bfdc      	itt	le
 8008eae:	230a      	movle	r3, #10
 8008eb0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008eb4:	e7e1      	b.n	8008e7a <_strtod_l+0x242>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9305      	str	r3, [sp, #20]
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e77c      	b.n	8008db8 <_strtod_l+0x180>
 8008ebe:	f04f 0c00 	mov.w	ip, #0
 8008ec2:	f108 0202 	add.w	r2, r8, #2
 8008ec6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ec8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008ecc:	e785      	b.n	8008dda <_strtod_l+0x1a2>
 8008ece:	f04f 0c01 	mov.w	ip, #1
 8008ed2:	e7f6      	b.n	8008ec2 <_strtod_l+0x28a>
 8008ed4:	0800d1c4 	.word	0x0800d1c4
 8008ed8:	0800cf14 	.word	0x0800cf14
 8008edc:	7ff00000 	.word	0x7ff00000
 8008ee0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ee2:	1c51      	adds	r1, r2, #1
 8008ee4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ee6:	7852      	ldrb	r2, [r2, #1]
 8008ee8:	2a30      	cmp	r2, #48	; 0x30
 8008eea:	d0f9      	beq.n	8008ee0 <_strtod_l+0x2a8>
 8008eec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ef0:	2908      	cmp	r1, #8
 8008ef2:	f63f af79 	bhi.w	8008de8 <_strtod_l+0x1b0>
 8008ef6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008efa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008efc:	9206      	str	r2, [sp, #24]
 8008efe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f00:	1c51      	adds	r1, r2, #1
 8008f02:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f04:	7852      	ldrb	r2, [r2, #1]
 8008f06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008f0a:	2e09      	cmp	r6, #9
 8008f0c:	d937      	bls.n	8008f7e <_strtod_l+0x346>
 8008f0e:	9e06      	ldr	r6, [sp, #24]
 8008f10:	1b89      	subs	r1, r1, r6
 8008f12:	2908      	cmp	r1, #8
 8008f14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008f18:	dc02      	bgt.n	8008f20 <_strtod_l+0x2e8>
 8008f1a:	4576      	cmp	r6, lr
 8008f1c:	bfa8      	it	ge
 8008f1e:	4676      	movge	r6, lr
 8008f20:	f1bc 0f00 	cmp.w	ip, #0
 8008f24:	d000      	beq.n	8008f28 <_strtod_l+0x2f0>
 8008f26:	4276      	negs	r6, r6
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	d14d      	bne.n	8008fc8 <_strtod_l+0x390>
 8008f2c:	9904      	ldr	r1, [sp, #16]
 8008f2e:	4301      	orrs	r1, r0
 8008f30:	f47f aec6 	bne.w	8008cc0 <_strtod_l+0x88>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f aee1 	bne.w	8008cfc <_strtod_l+0xc4>
 8008f3a:	2a69      	cmp	r2, #105	; 0x69
 8008f3c:	d027      	beq.n	8008f8e <_strtod_l+0x356>
 8008f3e:	dc24      	bgt.n	8008f8a <_strtod_l+0x352>
 8008f40:	2a49      	cmp	r2, #73	; 0x49
 8008f42:	d024      	beq.n	8008f8e <_strtod_l+0x356>
 8008f44:	2a4e      	cmp	r2, #78	; 0x4e
 8008f46:	f47f aed9 	bne.w	8008cfc <_strtod_l+0xc4>
 8008f4a:	499f      	ldr	r1, [pc, #636]	; (80091c8 <_strtod_l+0x590>)
 8008f4c:	a817      	add	r0, sp, #92	; 0x5c
 8008f4e:	f002 f8b3 	bl	800b0b8 <__match>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f43f aed2 	beq.w	8008cfc <_strtod_l+0xc4>
 8008f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b28      	cmp	r3, #40	; 0x28
 8008f5e:	d12d      	bne.n	8008fbc <_strtod_l+0x384>
 8008f60:	499a      	ldr	r1, [pc, #616]	; (80091cc <_strtod_l+0x594>)
 8008f62:	aa1a      	add	r2, sp, #104	; 0x68
 8008f64:	a817      	add	r0, sp, #92	; 0x5c
 8008f66:	f002 f8bb 	bl	800b0e0 <__hexnan>
 8008f6a:	2805      	cmp	r0, #5
 8008f6c:	d126      	bne.n	8008fbc <_strtod_l+0x384>
 8008f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008f74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f7c:	e6a0      	b.n	8008cc0 <_strtod_l+0x88>
 8008f7e:	210a      	movs	r1, #10
 8008f80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008f84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f88:	e7b9      	b.n	8008efe <_strtod_l+0x2c6>
 8008f8a:	2a6e      	cmp	r2, #110	; 0x6e
 8008f8c:	e7db      	b.n	8008f46 <_strtod_l+0x30e>
 8008f8e:	4990      	ldr	r1, [pc, #576]	; (80091d0 <_strtod_l+0x598>)
 8008f90:	a817      	add	r0, sp, #92	; 0x5c
 8008f92:	f002 f891 	bl	800b0b8 <__match>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f43f aeb0 	beq.w	8008cfc <_strtod_l+0xc4>
 8008f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f9e:	498d      	ldr	r1, [pc, #564]	; (80091d4 <_strtod_l+0x59c>)
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	a817      	add	r0, sp, #92	; 0x5c
 8008fa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fa6:	f002 f887 	bl	800b0b8 <__match>
 8008faa:	b910      	cbnz	r0, 8008fb2 <_strtod_l+0x37a>
 8008fac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fae:	3301      	adds	r3, #1
 8008fb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80091e4 <_strtod_l+0x5ac>
 8008fb6:	f04f 0a00 	mov.w	sl, #0
 8008fba:	e681      	b.n	8008cc0 <_strtod_l+0x88>
 8008fbc:	4886      	ldr	r0, [pc, #536]	; (80091d8 <_strtod_l+0x5a0>)
 8008fbe:	f003 f943 	bl	800c248 <nan>
 8008fc2:	ec5b ab10 	vmov	sl, fp, d0
 8008fc6:	e67b      	b.n	8008cc0 <_strtod_l+0x88>
 8008fc8:	9b05      	ldr	r3, [sp, #20]
 8008fca:	9807      	ldr	r0, [sp, #28]
 8008fcc:	1af3      	subs	r3, r6, r3
 8008fce:	2f00      	cmp	r7, #0
 8008fd0:	bf08      	it	eq
 8008fd2:	462f      	moveq	r7, r5
 8008fd4:	2d10      	cmp	r5, #16
 8008fd6:	9306      	str	r3, [sp, #24]
 8008fd8:	46a8      	mov	r8, r5
 8008fda:	bfa8      	it	ge
 8008fdc:	f04f 0810 	movge.w	r8, #16
 8008fe0:	f7f7 fa90 	bl	8000504 <__aeabi_ui2d>
 8008fe4:	2d09      	cmp	r5, #9
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	468b      	mov	fp, r1
 8008fea:	dd13      	ble.n	8009014 <_strtod_l+0x3dc>
 8008fec:	4b7b      	ldr	r3, [pc, #492]	; (80091dc <_strtod_l+0x5a4>)
 8008fee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008ff2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	4648      	mov	r0, r9
 8008ffe:	468b      	mov	fp, r1
 8009000:	f7f7 fa80 	bl	8000504 <__aeabi_ui2d>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	f7f7 f93e 	bl	800028c <__adddf3>
 8009010:	4682      	mov	sl, r0
 8009012:	468b      	mov	fp, r1
 8009014:	2d0f      	cmp	r5, #15
 8009016:	dc38      	bgt.n	800908a <_strtod_l+0x452>
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f43f ae50 	beq.w	8008cc0 <_strtod_l+0x88>
 8009020:	dd24      	ble.n	800906c <_strtod_l+0x434>
 8009022:	2b16      	cmp	r3, #22
 8009024:	dc0b      	bgt.n	800903e <_strtod_l+0x406>
 8009026:	496d      	ldr	r1, [pc, #436]	; (80091dc <_strtod_l+0x5a4>)
 8009028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800902c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009030:	4652      	mov	r2, sl
 8009032:	465b      	mov	r3, fp
 8009034:	f7f7 fae0 	bl	80005f8 <__aeabi_dmul>
 8009038:	4682      	mov	sl, r0
 800903a:	468b      	mov	fp, r1
 800903c:	e640      	b.n	8008cc0 <_strtod_l+0x88>
 800903e:	9a06      	ldr	r2, [sp, #24]
 8009040:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009044:	4293      	cmp	r3, r2
 8009046:	db20      	blt.n	800908a <_strtod_l+0x452>
 8009048:	4c64      	ldr	r4, [pc, #400]	; (80091dc <_strtod_l+0x5a4>)
 800904a:	f1c5 050f 	rsb	r5, r5, #15
 800904e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009052:	4652      	mov	r2, sl
 8009054:	465b      	mov	r3, fp
 8009056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	9b06      	ldr	r3, [sp, #24]
 8009060:	1b5d      	subs	r5, r3, r5
 8009062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800906a:	e7e3      	b.n	8009034 <_strtod_l+0x3fc>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	3316      	adds	r3, #22
 8009070:	db0b      	blt.n	800908a <_strtod_l+0x452>
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	1b9e      	subs	r6, r3, r6
 8009076:	4b59      	ldr	r3, [pc, #356]	; (80091dc <_strtod_l+0x5a4>)
 8009078:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800907c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009080:	4650      	mov	r0, sl
 8009082:	4659      	mov	r1, fp
 8009084:	f7f7 fbe2 	bl	800084c <__aeabi_ddiv>
 8009088:	e7d6      	b.n	8009038 <_strtod_l+0x400>
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	eba5 0808 	sub.w	r8, r5, r8
 8009090:	4498      	add	r8, r3
 8009092:	f1b8 0f00 	cmp.w	r8, #0
 8009096:	dd74      	ble.n	8009182 <_strtod_l+0x54a>
 8009098:	f018 030f 	ands.w	r3, r8, #15
 800909c:	d00a      	beq.n	80090b4 <_strtod_l+0x47c>
 800909e:	494f      	ldr	r1, [pc, #316]	; (80091dc <_strtod_l+0x5a4>)
 80090a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090a4:	4652      	mov	r2, sl
 80090a6:	465b      	mov	r3, fp
 80090a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	4682      	mov	sl, r0
 80090b2:	468b      	mov	fp, r1
 80090b4:	f038 080f 	bics.w	r8, r8, #15
 80090b8:	d04f      	beq.n	800915a <_strtod_l+0x522>
 80090ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80090be:	dd22      	ble.n	8009106 <_strtod_l+0x4ce>
 80090c0:	2500      	movs	r5, #0
 80090c2:	462e      	mov	r6, r5
 80090c4:	9507      	str	r5, [sp, #28]
 80090c6:	9505      	str	r5, [sp, #20]
 80090c8:	2322      	movs	r3, #34	; 0x22
 80090ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80091e4 <_strtod_l+0x5ac>
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f43f adf2 	beq.w	8008cc0 <_strtod_l+0x88>
 80090dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090de:	4620      	mov	r0, r4
 80090e0:	f002 f964 	bl	800b3ac <_Bfree>
 80090e4:	9905      	ldr	r1, [sp, #20]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f002 f960 	bl	800b3ac <_Bfree>
 80090ec:	4631      	mov	r1, r6
 80090ee:	4620      	mov	r0, r4
 80090f0:	f002 f95c 	bl	800b3ac <_Bfree>
 80090f4:	9907      	ldr	r1, [sp, #28]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f002 f958 	bl	800b3ac <_Bfree>
 80090fc:	4629      	mov	r1, r5
 80090fe:	4620      	mov	r0, r4
 8009100:	f002 f954 	bl	800b3ac <_Bfree>
 8009104:	e5dc      	b.n	8008cc0 <_strtod_l+0x88>
 8009106:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <_strtod_l+0x5a8>)
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	2300      	movs	r3, #0
 800910c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009110:	4650      	mov	r0, sl
 8009112:	4659      	mov	r1, fp
 8009114:	4699      	mov	r9, r3
 8009116:	f1b8 0f01 	cmp.w	r8, #1
 800911a:	dc21      	bgt.n	8009160 <_strtod_l+0x528>
 800911c:	b10b      	cbz	r3, 8009122 <_strtod_l+0x4ea>
 800911e:	4682      	mov	sl, r0
 8009120:	468b      	mov	fp, r1
 8009122:	4b2f      	ldr	r3, [pc, #188]	; (80091e0 <_strtod_l+0x5a8>)
 8009124:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009128:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4b2a      	ldr	r3, [pc, #168]	; (80091e4 <_strtod_l+0x5ac>)
 800913a:	460a      	mov	r2, r1
 800913c:	400b      	ands	r3, r1
 800913e:	492a      	ldr	r1, [pc, #168]	; (80091e8 <_strtod_l+0x5b0>)
 8009140:	428b      	cmp	r3, r1
 8009142:	4682      	mov	sl, r0
 8009144:	d8bc      	bhi.n	80090c0 <_strtod_l+0x488>
 8009146:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800914a:	428b      	cmp	r3, r1
 800914c:	bf86      	itte	hi
 800914e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80091ec <_strtod_l+0x5b4>
 8009152:	f04f 3aff 	movhi.w	sl, #4294967295
 8009156:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800915a:	2300      	movs	r3, #0
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	e084      	b.n	800926a <_strtod_l+0x632>
 8009160:	f018 0f01 	tst.w	r8, #1
 8009164:	d005      	beq.n	8009172 <_strtod_l+0x53a>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	2301      	movs	r3, #1
 8009172:	9a04      	ldr	r2, [sp, #16]
 8009174:	3208      	adds	r2, #8
 8009176:	f109 0901 	add.w	r9, r9, #1
 800917a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800917e:	9204      	str	r2, [sp, #16]
 8009180:	e7c9      	b.n	8009116 <_strtod_l+0x4de>
 8009182:	d0ea      	beq.n	800915a <_strtod_l+0x522>
 8009184:	f1c8 0800 	rsb	r8, r8, #0
 8009188:	f018 020f 	ands.w	r2, r8, #15
 800918c:	d00a      	beq.n	80091a4 <_strtod_l+0x56c>
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <_strtod_l+0x5a4>)
 8009190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 fb56 	bl	800084c <__aeabi_ddiv>
 80091a0:	4682      	mov	sl, r0
 80091a2:	468b      	mov	fp, r1
 80091a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80091a8:	d0d7      	beq.n	800915a <_strtod_l+0x522>
 80091aa:	f1b8 0f1f 	cmp.w	r8, #31
 80091ae:	dd1f      	ble.n	80091f0 <_strtod_l+0x5b8>
 80091b0:	2500      	movs	r5, #0
 80091b2:	462e      	mov	r6, r5
 80091b4:	9507      	str	r5, [sp, #28]
 80091b6:	9505      	str	r5, [sp, #20]
 80091b8:	2322      	movs	r3, #34	; 0x22
 80091ba:	f04f 0a00 	mov.w	sl, #0
 80091be:	f04f 0b00 	mov.w	fp, #0
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	e786      	b.n	80090d4 <_strtod_l+0x49c>
 80091c6:	bf00      	nop
 80091c8:	0800cee5 	.word	0x0800cee5
 80091cc:	0800cf28 	.word	0x0800cf28
 80091d0:	0800cedd 	.word	0x0800cedd
 80091d4:	0800d06c 	.word	0x0800d06c
 80091d8:	0800d380 	.word	0x0800d380
 80091dc:	0800d260 	.word	0x0800d260
 80091e0:	0800d238 	.word	0x0800d238
 80091e4:	7ff00000 	.word	0x7ff00000
 80091e8:	7ca00000 	.word	0x7ca00000
 80091ec:	7fefffff 	.word	0x7fefffff
 80091f0:	f018 0310 	ands.w	r3, r8, #16
 80091f4:	bf18      	it	ne
 80091f6:	236a      	movne	r3, #106	; 0x6a
 80091f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80095a8 <_strtod_l+0x970>
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	2300      	movs	r3, #0
 8009204:	f018 0f01 	tst.w	r8, #1
 8009208:	d004      	beq.n	8009214 <_strtod_l+0x5dc>
 800920a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	2301      	movs	r3, #1
 8009214:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009218:	f109 0908 	add.w	r9, r9, #8
 800921c:	d1f2      	bne.n	8009204 <_strtod_l+0x5cc>
 800921e:	b10b      	cbz	r3, 8009224 <_strtod_l+0x5ec>
 8009220:	4682      	mov	sl, r0
 8009222:	468b      	mov	fp, r1
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	b1c3      	cbz	r3, 800925a <_strtod_l+0x622>
 8009228:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800922c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009230:	2b00      	cmp	r3, #0
 8009232:	4659      	mov	r1, fp
 8009234:	dd11      	ble.n	800925a <_strtod_l+0x622>
 8009236:	2b1f      	cmp	r3, #31
 8009238:	f340 8124 	ble.w	8009484 <_strtod_l+0x84c>
 800923c:	2b34      	cmp	r3, #52	; 0x34
 800923e:	bfde      	ittt	le
 8009240:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009244:	f04f 33ff 	movle.w	r3, #4294967295
 8009248:	fa03 f202 	lslle.w	r2, r3, r2
 800924c:	f04f 0a00 	mov.w	sl, #0
 8009250:	bfcc      	ite	gt
 8009252:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009256:	ea02 0b01 	andle.w	fp, r2, r1
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	4650      	mov	r0, sl
 8009260:	4659      	mov	r1, fp
 8009262:	f7f7 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009266:	2800      	cmp	r0, #0
 8009268:	d1a2      	bne.n	80091b0 <_strtod_l+0x578>
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	9908      	ldr	r1, [sp, #32]
 8009270:	462b      	mov	r3, r5
 8009272:	463a      	mov	r2, r7
 8009274:	4620      	mov	r0, r4
 8009276:	f002 f901 	bl	800b47c <__s2b>
 800927a:	9007      	str	r0, [sp, #28]
 800927c:	2800      	cmp	r0, #0
 800927e:	f43f af1f 	beq.w	80090c0 <_strtod_l+0x488>
 8009282:	9b05      	ldr	r3, [sp, #20]
 8009284:	1b9e      	subs	r6, r3, r6
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfb4      	ite	lt
 800928c:	4633      	movlt	r3, r6
 800928e:	2300      	movge	r3, #0
 8009290:	930c      	str	r3, [sp, #48]	; 0x30
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	2500      	movs	r5, #0
 8009296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800929a:	9312      	str	r3, [sp, #72]	; 0x48
 800929c:	462e      	mov	r6, r5
 800929e:	9b07      	ldr	r3, [sp, #28]
 80092a0:	4620      	mov	r0, r4
 80092a2:	6859      	ldr	r1, [r3, #4]
 80092a4:	f002 f842 	bl	800b32c <_Balloc>
 80092a8:	9005      	str	r0, [sp, #20]
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f43f af0c 	beq.w	80090c8 <_strtod_l+0x490>
 80092b0:	9b07      	ldr	r3, [sp, #28]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	3202      	adds	r2, #2
 80092b6:	f103 010c 	add.w	r1, r3, #12
 80092ba:	0092      	lsls	r2, r2, #2
 80092bc:	300c      	adds	r0, #12
 80092be:	f7fe fc6b 	bl	8007b98 <memcpy>
 80092c2:	ec4b ab10 	vmov	d0, sl, fp
 80092c6:	aa1a      	add	r2, sp, #104	; 0x68
 80092c8:	a919      	add	r1, sp, #100	; 0x64
 80092ca:	4620      	mov	r0, r4
 80092cc:	f002 fc1c 	bl	800bb08 <__d2b>
 80092d0:	ec4b ab18 	vmov	d8, sl, fp
 80092d4:	9018      	str	r0, [sp, #96]	; 0x60
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f aef6 	beq.w	80090c8 <_strtod_l+0x490>
 80092dc:	2101      	movs	r1, #1
 80092de:	4620      	mov	r0, r4
 80092e0:	f002 f966 	bl	800b5b0 <__i2b>
 80092e4:	4606      	mov	r6, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f43f aeee 	beq.w	80090c8 <_strtod_l+0x490>
 80092ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ee:	9904      	ldr	r1, [sp, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bfab      	itete	ge
 80092f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80092f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80092f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80092fe:	bfac      	ite	ge
 8009300:	eb03 0902 	addge.w	r9, r3, r2
 8009304:	1ad7      	sublt	r7, r2, r3
 8009306:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009308:	eba3 0801 	sub.w	r8, r3, r1
 800930c:	4490      	add	r8, r2
 800930e:	4ba1      	ldr	r3, [pc, #644]	; (8009594 <_strtod_l+0x95c>)
 8009310:	f108 38ff 	add.w	r8, r8, #4294967295
 8009314:	4598      	cmp	r8, r3
 8009316:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800931a:	f280 80c7 	bge.w	80094ac <_strtod_l+0x874>
 800931e:	eba3 0308 	sub.w	r3, r3, r8
 8009322:	2b1f      	cmp	r3, #31
 8009324:	eba2 0203 	sub.w	r2, r2, r3
 8009328:	f04f 0101 	mov.w	r1, #1
 800932c:	f300 80b1 	bgt.w	8009492 <_strtod_l+0x85a>
 8009330:	fa01 f303 	lsl.w	r3, r1, r3
 8009334:	930d      	str	r3, [sp, #52]	; 0x34
 8009336:	2300      	movs	r3, #0
 8009338:	9308      	str	r3, [sp, #32]
 800933a:	eb09 0802 	add.w	r8, r9, r2
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	45c1      	cmp	r9, r8
 8009342:	4417      	add	r7, r2
 8009344:	441f      	add	r7, r3
 8009346:	464b      	mov	r3, r9
 8009348:	bfa8      	it	ge
 800934a:	4643      	movge	r3, r8
 800934c:	42bb      	cmp	r3, r7
 800934e:	bfa8      	it	ge
 8009350:	463b      	movge	r3, r7
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfc2      	ittt	gt
 8009356:	eba8 0803 	subgt.w	r8, r8, r3
 800935a:	1aff      	subgt	r7, r7, r3
 800935c:	eba9 0903 	subgt.w	r9, r9, r3
 8009360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009362:	2b00      	cmp	r3, #0
 8009364:	dd17      	ble.n	8009396 <_strtod_l+0x75e>
 8009366:	4631      	mov	r1, r6
 8009368:	461a      	mov	r2, r3
 800936a:	4620      	mov	r0, r4
 800936c:	f002 f9e0 	bl	800b730 <__pow5mult>
 8009370:	4606      	mov	r6, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	f43f aea8 	beq.w	80090c8 <_strtod_l+0x490>
 8009378:	4601      	mov	r1, r0
 800937a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800937c:	4620      	mov	r0, r4
 800937e:	f002 f92d 	bl	800b5dc <__multiply>
 8009382:	900b      	str	r0, [sp, #44]	; 0x2c
 8009384:	2800      	cmp	r0, #0
 8009386:	f43f ae9f 	beq.w	80090c8 <_strtod_l+0x490>
 800938a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800938c:	4620      	mov	r0, r4
 800938e:	f002 f80d 	bl	800b3ac <_Bfree>
 8009392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009394:	9318      	str	r3, [sp, #96]	; 0x60
 8009396:	f1b8 0f00 	cmp.w	r8, #0
 800939a:	f300 808c 	bgt.w	80094b6 <_strtod_l+0x87e>
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dd08      	ble.n	80093b6 <_strtod_l+0x77e>
 80093a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093a6:	9905      	ldr	r1, [sp, #20]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f002 f9c1 	bl	800b730 <__pow5mult>
 80093ae:	9005      	str	r0, [sp, #20]
 80093b0:	2800      	cmp	r0, #0
 80093b2:	f43f ae89 	beq.w	80090c8 <_strtod_l+0x490>
 80093b6:	2f00      	cmp	r7, #0
 80093b8:	dd08      	ble.n	80093cc <_strtod_l+0x794>
 80093ba:	9905      	ldr	r1, [sp, #20]
 80093bc:	463a      	mov	r2, r7
 80093be:	4620      	mov	r0, r4
 80093c0:	f002 fa10 	bl	800b7e4 <__lshift>
 80093c4:	9005      	str	r0, [sp, #20]
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f43f ae7e 	beq.w	80090c8 <_strtod_l+0x490>
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	dd08      	ble.n	80093e4 <_strtod_l+0x7ac>
 80093d2:	4631      	mov	r1, r6
 80093d4:	464a      	mov	r2, r9
 80093d6:	4620      	mov	r0, r4
 80093d8:	f002 fa04 	bl	800b7e4 <__lshift>
 80093dc:	4606      	mov	r6, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	f43f ae72 	beq.w	80090c8 <_strtod_l+0x490>
 80093e4:	9a05      	ldr	r2, [sp, #20]
 80093e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093e8:	4620      	mov	r0, r4
 80093ea:	f002 fa87 	bl	800b8fc <__mdiff>
 80093ee:	4605      	mov	r5, r0
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f43f ae69 	beq.w	80090c8 <_strtod_l+0x490>
 80093f6:	68c3      	ldr	r3, [r0, #12]
 80093f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093fa:	2300      	movs	r3, #0
 80093fc:	60c3      	str	r3, [r0, #12]
 80093fe:	4631      	mov	r1, r6
 8009400:	f002 fa60 	bl	800b8c4 <__mcmp>
 8009404:	2800      	cmp	r0, #0
 8009406:	da60      	bge.n	80094ca <_strtod_l+0x892>
 8009408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940a:	ea53 030a 	orrs.w	r3, r3, sl
 800940e:	f040 8082 	bne.w	8009516 <_strtod_l+0x8de>
 8009412:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009416:	2b00      	cmp	r3, #0
 8009418:	d17d      	bne.n	8009516 <_strtod_l+0x8de>
 800941a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800941e:	0d1b      	lsrs	r3, r3, #20
 8009420:	051b      	lsls	r3, r3, #20
 8009422:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009426:	d976      	bls.n	8009516 <_strtod_l+0x8de>
 8009428:	696b      	ldr	r3, [r5, #20]
 800942a:	b913      	cbnz	r3, 8009432 <_strtod_l+0x7fa>
 800942c:	692b      	ldr	r3, [r5, #16]
 800942e:	2b01      	cmp	r3, #1
 8009430:	dd71      	ble.n	8009516 <_strtod_l+0x8de>
 8009432:	4629      	mov	r1, r5
 8009434:	2201      	movs	r2, #1
 8009436:	4620      	mov	r0, r4
 8009438:	f002 f9d4 	bl	800b7e4 <__lshift>
 800943c:	4631      	mov	r1, r6
 800943e:	4605      	mov	r5, r0
 8009440:	f002 fa40 	bl	800b8c4 <__mcmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	dd66      	ble.n	8009516 <_strtod_l+0x8de>
 8009448:	9904      	ldr	r1, [sp, #16]
 800944a:	4a53      	ldr	r2, [pc, #332]	; (8009598 <_strtod_l+0x960>)
 800944c:	465b      	mov	r3, fp
 800944e:	2900      	cmp	r1, #0
 8009450:	f000 8081 	beq.w	8009556 <_strtod_l+0x91e>
 8009454:	ea02 010b 	and.w	r1, r2, fp
 8009458:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800945c:	dc7b      	bgt.n	8009556 <_strtod_l+0x91e>
 800945e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009462:	f77f aea9 	ble.w	80091b8 <_strtod_l+0x580>
 8009466:	4b4d      	ldr	r3, [pc, #308]	; (800959c <_strtod_l+0x964>)
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	2200      	movs	r2, #0
 800946e:	f7f7 f8c3 	bl	80005f8 <__aeabi_dmul>
 8009472:	460b      	mov	r3, r1
 8009474:	4303      	orrs	r3, r0
 8009476:	bf08      	it	eq
 8009478:	2322      	moveq	r3, #34	; 0x22
 800947a:	4682      	mov	sl, r0
 800947c:	468b      	mov	fp, r1
 800947e:	bf08      	it	eq
 8009480:	6023      	streq	r3, [r4, #0]
 8009482:	e62b      	b.n	80090dc <_strtod_l+0x4a4>
 8009484:	f04f 32ff 	mov.w	r2, #4294967295
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	ea03 0a0a 	and.w	sl, r3, sl
 8009490:	e6e3      	b.n	800925a <_strtod_l+0x622>
 8009492:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009496:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800949a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800949e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80094a2:	fa01 f308 	lsl.w	r3, r1, r8
 80094a6:	9308      	str	r3, [sp, #32]
 80094a8:	910d      	str	r1, [sp, #52]	; 0x34
 80094aa:	e746      	b.n	800933a <_strtod_l+0x702>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9308      	str	r3, [sp, #32]
 80094b0:	2301      	movs	r3, #1
 80094b2:	930d      	str	r3, [sp, #52]	; 0x34
 80094b4:	e741      	b.n	800933a <_strtod_l+0x702>
 80094b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094b8:	4642      	mov	r2, r8
 80094ba:	4620      	mov	r0, r4
 80094bc:	f002 f992 	bl	800b7e4 <__lshift>
 80094c0:	9018      	str	r0, [sp, #96]	; 0x60
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f47f af6b 	bne.w	800939e <_strtod_l+0x766>
 80094c8:	e5fe      	b.n	80090c8 <_strtod_l+0x490>
 80094ca:	465f      	mov	r7, fp
 80094cc:	d16e      	bne.n	80095ac <_strtod_l+0x974>
 80094ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d4:	b342      	cbz	r2, 8009528 <_strtod_l+0x8f0>
 80094d6:	4a32      	ldr	r2, [pc, #200]	; (80095a0 <_strtod_l+0x968>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d128      	bne.n	800952e <_strtod_l+0x8f6>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	4651      	mov	r1, sl
 80094e0:	b1eb      	cbz	r3, 800951e <_strtod_l+0x8e6>
 80094e2:	4b2d      	ldr	r3, [pc, #180]	; (8009598 <_strtod_l+0x960>)
 80094e4:	403b      	ands	r3, r7
 80094e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295
 80094ee:	d819      	bhi.n	8009524 <_strtod_l+0x8ec>
 80094f0:	0d1b      	lsrs	r3, r3, #20
 80094f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	4299      	cmp	r1, r3
 80094fc:	d117      	bne.n	800952e <_strtod_l+0x8f6>
 80094fe:	4b29      	ldr	r3, [pc, #164]	; (80095a4 <_strtod_l+0x96c>)
 8009500:	429f      	cmp	r7, r3
 8009502:	d102      	bne.n	800950a <_strtod_l+0x8d2>
 8009504:	3101      	adds	r1, #1
 8009506:	f43f addf 	beq.w	80090c8 <_strtod_l+0x490>
 800950a:	4b23      	ldr	r3, [pc, #140]	; (8009598 <_strtod_l+0x960>)
 800950c:	403b      	ands	r3, r7
 800950e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009512:	f04f 0a00 	mov.w	sl, #0
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1a4      	bne.n	8009466 <_strtod_l+0x82e>
 800951c:	e5de      	b.n	80090dc <_strtod_l+0x4a4>
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	e7ea      	b.n	80094fa <_strtod_l+0x8c2>
 8009524:	4613      	mov	r3, r2
 8009526:	e7e8      	b.n	80094fa <_strtod_l+0x8c2>
 8009528:	ea53 030a 	orrs.w	r3, r3, sl
 800952c:	d08c      	beq.n	8009448 <_strtod_l+0x810>
 800952e:	9b08      	ldr	r3, [sp, #32]
 8009530:	b1db      	cbz	r3, 800956a <_strtod_l+0x932>
 8009532:	423b      	tst	r3, r7
 8009534:	d0ef      	beq.n	8009516 <_strtod_l+0x8de>
 8009536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009538:	9a04      	ldr	r2, [sp, #16]
 800953a:	4650      	mov	r0, sl
 800953c:	4659      	mov	r1, fp
 800953e:	b1c3      	cbz	r3, 8009572 <_strtod_l+0x93a>
 8009540:	f7ff fb5e 	bl	8008c00 <sulp>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	ec51 0b18 	vmov	r0, r1, d8
 800954c:	f7f6 fe9e 	bl	800028c <__adddf3>
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	e7df      	b.n	8009516 <_strtod_l+0x8de>
 8009556:	4013      	ands	r3, r2
 8009558:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800955c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009560:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009564:	f04f 3aff 	mov.w	sl, #4294967295
 8009568:	e7d5      	b.n	8009516 <_strtod_l+0x8de>
 800956a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800956c:	ea13 0f0a 	tst.w	r3, sl
 8009570:	e7e0      	b.n	8009534 <_strtod_l+0x8fc>
 8009572:	f7ff fb45 	bl	8008c00 <sulp>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	ec51 0b18 	vmov	r0, r1, d8
 800957e:	f7f6 fe83 	bl	8000288 <__aeabi_dsub>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	4682      	mov	sl, r0
 8009588:	468b      	mov	fp, r1
 800958a:	f7f7 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800958e:	2800      	cmp	r0, #0
 8009590:	d0c1      	beq.n	8009516 <_strtod_l+0x8de>
 8009592:	e611      	b.n	80091b8 <_strtod_l+0x580>
 8009594:	fffffc02 	.word	0xfffffc02
 8009598:	7ff00000 	.word	0x7ff00000
 800959c:	39500000 	.word	0x39500000
 80095a0:	000fffff 	.word	0x000fffff
 80095a4:	7fefffff 	.word	0x7fefffff
 80095a8:	0800cf40 	.word	0x0800cf40
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	f002 fb06 	bl	800bbc0 <__ratio>
 80095b4:	ec59 8b10 	vmov	r8, r9, d0
 80095b8:	ee10 0a10 	vmov	r0, s0
 80095bc:	2200      	movs	r2, #0
 80095be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095c2:	4649      	mov	r1, r9
 80095c4:	f7f7 fa94 	bl	8000af0 <__aeabi_dcmple>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d07a      	beq.n	80096c2 <_strtod_l+0xa8a>
 80095cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d04a      	beq.n	8009668 <_strtod_l+0xa30>
 80095d2:	4b95      	ldr	r3, [pc, #596]	; (8009828 <_strtod_l+0xbf0>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009828 <_strtod_l+0xbf0>
 80095de:	f04f 0800 	mov.w	r8, #0
 80095e2:	4b92      	ldr	r3, [pc, #584]	; (800982c <_strtod_l+0xbf4>)
 80095e4:	403b      	ands	r3, r7
 80095e6:	930d      	str	r3, [sp, #52]	; 0x34
 80095e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ea:	4b91      	ldr	r3, [pc, #580]	; (8009830 <_strtod_l+0xbf8>)
 80095ec:	429a      	cmp	r2, r3
 80095ee:	f040 80b0 	bne.w	8009752 <_strtod_l+0xb1a>
 80095f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095fa:	ec4b ab10 	vmov	d0, sl, fp
 80095fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009602:	f002 fa05 	bl	800ba10 <__ulp>
 8009606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800960a:	ec53 2b10 	vmov	r2, r3, d0
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	4652      	mov	r2, sl
 8009614:	465b      	mov	r3, fp
 8009616:	f7f6 fe39 	bl	800028c <__adddf3>
 800961a:	460b      	mov	r3, r1
 800961c:	4983      	ldr	r1, [pc, #524]	; (800982c <_strtod_l+0xbf4>)
 800961e:	4a85      	ldr	r2, [pc, #532]	; (8009834 <_strtod_l+0xbfc>)
 8009620:	4019      	ands	r1, r3
 8009622:	4291      	cmp	r1, r2
 8009624:	4682      	mov	sl, r0
 8009626:	d960      	bls.n	80096ea <_strtod_l+0xab2>
 8009628:	ee18 3a90 	vmov	r3, s17
 800962c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009630:	4293      	cmp	r3, r2
 8009632:	d104      	bne.n	800963e <_strtod_l+0xa06>
 8009634:	ee18 3a10 	vmov	r3, s16
 8009638:	3301      	adds	r3, #1
 800963a:	f43f ad45 	beq.w	80090c8 <_strtod_l+0x490>
 800963e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009840 <_strtod_l+0xc08>
 8009642:	f04f 3aff 	mov.w	sl, #4294967295
 8009646:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009648:	4620      	mov	r0, r4
 800964a:	f001 feaf 	bl	800b3ac <_Bfree>
 800964e:	9905      	ldr	r1, [sp, #20]
 8009650:	4620      	mov	r0, r4
 8009652:	f001 feab 	bl	800b3ac <_Bfree>
 8009656:	4631      	mov	r1, r6
 8009658:	4620      	mov	r0, r4
 800965a:	f001 fea7 	bl	800b3ac <_Bfree>
 800965e:	4629      	mov	r1, r5
 8009660:	4620      	mov	r0, r4
 8009662:	f001 fea3 	bl	800b3ac <_Bfree>
 8009666:	e61a      	b.n	800929e <_strtod_l+0x666>
 8009668:	f1ba 0f00 	cmp.w	sl, #0
 800966c:	d11b      	bne.n	80096a6 <_strtod_l+0xa6e>
 800966e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009672:	b9f3      	cbnz	r3, 80096b2 <_strtod_l+0xa7a>
 8009674:	4b6c      	ldr	r3, [pc, #432]	; (8009828 <_strtod_l+0xbf0>)
 8009676:	2200      	movs	r2, #0
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8009680:	b9d0      	cbnz	r0, 80096b8 <_strtod_l+0xa80>
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	4b6c      	ldr	r3, [pc, #432]	; (8009838 <_strtod_l+0xc00>)
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4680      	mov	r8, r0
 8009690:	4689      	mov	r9, r1
 8009692:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009696:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800969a:	9315      	str	r3, [sp, #84]	; 0x54
 800969c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80096a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80096a4:	e79d      	b.n	80095e2 <_strtod_l+0x9aa>
 80096a6:	f1ba 0f01 	cmp.w	sl, #1
 80096aa:	d102      	bne.n	80096b2 <_strtod_l+0xa7a>
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	f43f ad83 	beq.w	80091b8 <_strtod_l+0x580>
 80096b2:	4b62      	ldr	r3, [pc, #392]	; (800983c <_strtod_l+0xc04>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	e78e      	b.n	80095d6 <_strtod_l+0x99e>
 80096b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009838 <_strtod_l+0xc00>
 80096bc:	f04f 0800 	mov.w	r8, #0
 80096c0:	e7e7      	b.n	8009692 <_strtod_l+0xa5a>
 80096c2:	4b5d      	ldr	r3, [pc, #372]	; (8009838 <_strtod_l+0xc00>)
 80096c4:	4640      	mov	r0, r8
 80096c6:	4649      	mov	r1, r9
 80096c8:	2200      	movs	r2, #0
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d0:	4680      	mov	r8, r0
 80096d2:	4689      	mov	r9, r1
 80096d4:	b933      	cbnz	r3, 80096e4 <_strtod_l+0xaac>
 80096d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096da:	900e      	str	r0, [sp, #56]	; 0x38
 80096dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80096de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80096e2:	e7dd      	b.n	80096a0 <_strtod_l+0xa68>
 80096e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80096e8:	e7f9      	b.n	80096de <_strtod_l+0xaa6>
 80096ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1a8      	bne.n	8009646 <_strtod_l+0xa0e>
 80096f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096fa:	0d1b      	lsrs	r3, r3, #20
 80096fc:	051b      	lsls	r3, r3, #20
 80096fe:	429a      	cmp	r2, r3
 8009700:	d1a1      	bne.n	8009646 <_strtod_l+0xa0e>
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	f7f7 fad7 	bl	8000cb8 <__aeabi_d2lz>
 800970a:	f7f6 ff47 	bl	800059c <__aeabi_l2d>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f6 fdb7 	bl	8000288 <__aeabi_dsub>
 800971a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800971c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009720:	ea43 030a 	orr.w	r3, r3, sl
 8009724:	4313      	orrs	r3, r2
 8009726:	4680      	mov	r8, r0
 8009728:	4689      	mov	r9, r1
 800972a:	d055      	beq.n	80097d8 <_strtod_l+0xba0>
 800972c:	a336      	add	r3, pc, #216	; (adr r3, 8009808 <_strtod_l+0xbd0>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f7 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	f47f acd0 	bne.w	80090dc <_strtod_l+0x4a4>
 800973c:	a334      	add	r3, pc, #208	; (adr r3, 8009810 <_strtod_l+0xbd8>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	4640      	mov	r0, r8
 8009744:	4649      	mov	r1, r9
 8009746:	f7f7 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800974a:	2800      	cmp	r0, #0
 800974c:	f43f af7b 	beq.w	8009646 <_strtod_l+0xa0e>
 8009750:	e4c4      	b.n	80090dc <_strtod_l+0x4a4>
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	b333      	cbz	r3, 80097a4 <_strtod_l+0xb6c>
 8009756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009758:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800975c:	d822      	bhi.n	80097a4 <_strtod_l+0xb6c>
 800975e:	a32e      	add	r3, pc, #184	; (adr r3, 8009818 <_strtod_l+0xbe0>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	4640      	mov	r0, r8
 8009766:	4649      	mov	r1, r9
 8009768:	f7f7 f9c2 	bl	8000af0 <__aeabi_dcmple>
 800976c:	b1a0      	cbz	r0, 8009798 <_strtod_l+0xb60>
 800976e:	4649      	mov	r1, r9
 8009770:	4640      	mov	r0, r8
 8009772:	f7f7 fa19 	bl	8000ba8 <__aeabi_d2uiz>
 8009776:	2801      	cmp	r0, #1
 8009778:	bf38      	it	cc
 800977a:	2001      	movcc	r0, #1
 800977c:	f7f6 fec2 	bl	8000504 <__aeabi_ui2d>
 8009780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009782:	4680      	mov	r8, r0
 8009784:	4689      	mov	r9, r1
 8009786:	bb23      	cbnz	r3, 80097d2 <_strtod_l+0xb9a>
 8009788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800978c:	9010      	str	r0, [sp, #64]	; 0x40
 800978e:	9311      	str	r3, [sp, #68]	; 0x44
 8009790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009794:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800979c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	9309      	str	r3, [sp, #36]	; 0x24
 80097a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097a8:	eeb0 0a48 	vmov.f32	s0, s16
 80097ac:	eef0 0a68 	vmov.f32	s1, s17
 80097b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097b4:	f002 f92c 	bl	800ba10 <__ulp>
 80097b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097bc:	ec53 2b10 	vmov	r2, r3, d0
 80097c0:	f7f6 ff1a 	bl	80005f8 <__aeabi_dmul>
 80097c4:	ec53 2b18 	vmov	r2, r3, d8
 80097c8:	f7f6 fd60 	bl	800028c <__adddf3>
 80097cc:	4682      	mov	sl, r0
 80097ce:	468b      	mov	fp, r1
 80097d0:	e78d      	b.n	80096ee <_strtod_l+0xab6>
 80097d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80097d6:	e7db      	b.n	8009790 <_strtod_l+0xb58>
 80097d8:	a311      	add	r3, pc, #68	; (adr r3, 8009820 <_strtod_l+0xbe8>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f7 f97d 	bl	8000adc <__aeabi_dcmplt>
 80097e2:	e7b2      	b.n	800974a <_strtod_l+0xb12>
 80097e4:	2300      	movs	r3, #0
 80097e6:	930a      	str	r3, [sp, #40]	; 0x28
 80097e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	f7ff ba6b 	b.w	8008cc8 <_strtod_l+0x90>
 80097f2:	2a65      	cmp	r2, #101	; 0x65
 80097f4:	f43f ab5f 	beq.w	8008eb6 <_strtod_l+0x27e>
 80097f8:	2a45      	cmp	r2, #69	; 0x45
 80097fa:	f43f ab5c 	beq.w	8008eb6 <_strtod_l+0x27e>
 80097fe:	2301      	movs	r3, #1
 8009800:	f7ff bb94 	b.w	8008f2c <_strtod_l+0x2f4>
 8009804:	f3af 8000 	nop.w
 8009808:	94a03595 	.word	0x94a03595
 800980c:	3fdfffff 	.word	0x3fdfffff
 8009810:	35afe535 	.word	0x35afe535
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	ffc00000 	.word	0xffc00000
 800981c:	41dfffff 	.word	0x41dfffff
 8009820:	94a03595 	.word	0x94a03595
 8009824:	3fcfffff 	.word	0x3fcfffff
 8009828:	3ff00000 	.word	0x3ff00000
 800982c:	7ff00000 	.word	0x7ff00000
 8009830:	7fe00000 	.word	0x7fe00000
 8009834:	7c9fffff 	.word	0x7c9fffff
 8009838:	3fe00000 	.word	0x3fe00000
 800983c:	bff00000 	.word	0xbff00000
 8009840:	7fefffff 	.word	0x7fefffff

08009844 <_strtod_r>:
 8009844:	4b01      	ldr	r3, [pc, #4]	; (800984c <_strtod_r+0x8>)
 8009846:	f7ff b9f7 	b.w	8008c38 <_strtod_l>
 800984a:	bf00      	nop
 800984c:	2000008c 	.word	0x2000008c

08009850 <_strtol_l.constprop.0>:
 8009850:	2b01      	cmp	r3, #1
 8009852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009856:	d001      	beq.n	800985c <_strtol_l.constprop.0+0xc>
 8009858:	2b24      	cmp	r3, #36	; 0x24
 800985a:	d906      	bls.n	800986a <_strtol_l.constprop.0+0x1a>
 800985c:	f7fe f96a 	bl	8007b34 <__errno>
 8009860:	2316      	movs	r3, #22
 8009862:	6003      	str	r3, [r0, #0]
 8009864:	2000      	movs	r0, #0
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009950 <_strtol_l.constprop.0+0x100>
 800986e:	460d      	mov	r5, r1
 8009870:	462e      	mov	r6, r5
 8009872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009876:	f814 700c 	ldrb.w	r7, [r4, ip]
 800987a:	f017 0708 	ands.w	r7, r7, #8
 800987e:	d1f7      	bne.n	8009870 <_strtol_l.constprop.0+0x20>
 8009880:	2c2d      	cmp	r4, #45	; 0x2d
 8009882:	d132      	bne.n	80098ea <_strtol_l.constprop.0+0x9a>
 8009884:	782c      	ldrb	r4, [r5, #0]
 8009886:	2701      	movs	r7, #1
 8009888:	1cb5      	adds	r5, r6, #2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d05b      	beq.n	8009946 <_strtol_l.constprop.0+0xf6>
 800988e:	2b10      	cmp	r3, #16
 8009890:	d109      	bne.n	80098a6 <_strtol_l.constprop.0+0x56>
 8009892:	2c30      	cmp	r4, #48	; 0x30
 8009894:	d107      	bne.n	80098a6 <_strtol_l.constprop.0+0x56>
 8009896:	782c      	ldrb	r4, [r5, #0]
 8009898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800989c:	2c58      	cmp	r4, #88	; 0x58
 800989e:	d14d      	bne.n	800993c <_strtol_l.constprop.0+0xec>
 80098a0:	786c      	ldrb	r4, [r5, #1]
 80098a2:	2310      	movs	r3, #16
 80098a4:	3502      	adds	r5, #2
 80098a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80098aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80098ae:	f04f 0c00 	mov.w	ip, #0
 80098b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80098b6:	4666      	mov	r6, ip
 80098b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80098bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80098c0:	f1be 0f09 	cmp.w	lr, #9
 80098c4:	d816      	bhi.n	80098f4 <_strtol_l.constprop.0+0xa4>
 80098c6:	4674      	mov	r4, lr
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	dd24      	ble.n	8009916 <_strtol_l.constprop.0+0xc6>
 80098cc:	f1bc 0f00 	cmp.w	ip, #0
 80098d0:	db1e      	blt.n	8009910 <_strtol_l.constprop.0+0xc0>
 80098d2:	45b1      	cmp	r9, r6
 80098d4:	d31c      	bcc.n	8009910 <_strtol_l.constprop.0+0xc0>
 80098d6:	d101      	bne.n	80098dc <_strtol_l.constprop.0+0x8c>
 80098d8:	45a2      	cmp	sl, r4
 80098da:	db19      	blt.n	8009910 <_strtol_l.constprop.0+0xc0>
 80098dc:	fb06 4603 	mla	r6, r6, r3, r4
 80098e0:	f04f 0c01 	mov.w	ip, #1
 80098e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098e8:	e7e8      	b.n	80098bc <_strtol_l.constprop.0+0x6c>
 80098ea:	2c2b      	cmp	r4, #43	; 0x2b
 80098ec:	bf04      	itt	eq
 80098ee:	782c      	ldrbeq	r4, [r5, #0]
 80098f0:	1cb5      	addeq	r5, r6, #2
 80098f2:	e7ca      	b.n	800988a <_strtol_l.constprop.0+0x3a>
 80098f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80098f8:	f1be 0f19 	cmp.w	lr, #25
 80098fc:	d801      	bhi.n	8009902 <_strtol_l.constprop.0+0xb2>
 80098fe:	3c37      	subs	r4, #55	; 0x37
 8009900:	e7e2      	b.n	80098c8 <_strtol_l.constprop.0+0x78>
 8009902:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009906:	f1be 0f19 	cmp.w	lr, #25
 800990a:	d804      	bhi.n	8009916 <_strtol_l.constprop.0+0xc6>
 800990c:	3c57      	subs	r4, #87	; 0x57
 800990e:	e7db      	b.n	80098c8 <_strtol_l.constprop.0+0x78>
 8009910:	f04f 3cff 	mov.w	ip, #4294967295
 8009914:	e7e6      	b.n	80098e4 <_strtol_l.constprop.0+0x94>
 8009916:	f1bc 0f00 	cmp.w	ip, #0
 800991a:	da05      	bge.n	8009928 <_strtol_l.constprop.0+0xd8>
 800991c:	2322      	movs	r3, #34	; 0x22
 800991e:	6003      	str	r3, [r0, #0]
 8009920:	4646      	mov	r6, r8
 8009922:	b942      	cbnz	r2, 8009936 <_strtol_l.constprop.0+0xe6>
 8009924:	4630      	mov	r0, r6
 8009926:	e79e      	b.n	8009866 <_strtol_l.constprop.0+0x16>
 8009928:	b107      	cbz	r7, 800992c <_strtol_l.constprop.0+0xdc>
 800992a:	4276      	negs	r6, r6
 800992c:	2a00      	cmp	r2, #0
 800992e:	d0f9      	beq.n	8009924 <_strtol_l.constprop.0+0xd4>
 8009930:	f1bc 0f00 	cmp.w	ip, #0
 8009934:	d000      	beq.n	8009938 <_strtol_l.constprop.0+0xe8>
 8009936:	1e69      	subs	r1, r5, #1
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	e7f3      	b.n	8009924 <_strtol_l.constprop.0+0xd4>
 800993c:	2430      	movs	r4, #48	; 0x30
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1b1      	bne.n	80098a6 <_strtol_l.constprop.0+0x56>
 8009942:	2308      	movs	r3, #8
 8009944:	e7af      	b.n	80098a6 <_strtol_l.constprop.0+0x56>
 8009946:	2c30      	cmp	r4, #48	; 0x30
 8009948:	d0a5      	beq.n	8009896 <_strtol_l.constprop.0+0x46>
 800994a:	230a      	movs	r3, #10
 800994c:	e7ab      	b.n	80098a6 <_strtol_l.constprop.0+0x56>
 800994e:	bf00      	nop
 8009950:	0800cf69 	.word	0x0800cf69

08009954 <_strtol_r>:
 8009954:	f7ff bf7c 	b.w	8009850 <_strtol_l.constprop.0>

08009958 <__swbuf_r>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	460e      	mov	r6, r1
 800995c:	4614      	mov	r4, r2
 800995e:	4605      	mov	r5, r0
 8009960:	b118      	cbz	r0, 800996a <__swbuf_r+0x12>
 8009962:	6983      	ldr	r3, [r0, #24]
 8009964:	b90b      	cbnz	r3, 800996a <__swbuf_r+0x12>
 8009966:	f001 f84b 	bl	800aa00 <__sinit>
 800996a:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <__swbuf_r+0x98>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d12b      	bne.n	80099c8 <__swbuf_r+0x70>
 8009970:	686c      	ldr	r4, [r5, #4]
 8009972:	69a3      	ldr	r3, [r4, #24]
 8009974:	60a3      	str	r3, [r4, #8]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	071a      	lsls	r2, r3, #28
 800997a:	d52f      	bpl.n	80099dc <__swbuf_r+0x84>
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	b36b      	cbz	r3, 80099dc <__swbuf_r+0x84>
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	6820      	ldr	r0, [r4, #0]
 8009984:	1ac0      	subs	r0, r0, r3
 8009986:	6963      	ldr	r3, [r4, #20]
 8009988:	b2f6      	uxtb	r6, r6
 800998a:	4283      	cmp	r3, r0
 800998c:	4637      	mov	r7, r6
 800998e:	dc04      	bgt.n	800999a <__swbuf_r+0x42>
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	f000 ffa0 	bl	800a8d8 <_fflush_r>
 8009998:	bb30      	cbnz	r0, 80099e8 <__swbuf_r+0x90>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	3b01      	subs	r3, #1
 800999e:	60a3      	str	r3, [r4, #8]
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	6022      	str	r2, [r4, #0]
 80099a6:	701e      	strb	r6, [r3, #0]
 80099a8:	6963      	ldr	r3, [r4, #20]
 80099aa:	3001      	adds	r0, #1
 80099ac:	4283      	cmp	r3, r0
 80099ae:	d004      	beq.n	80099ba <__swbuf_r+0x62>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	07db      	lsls	r3, r3, #31
 80099b4:	d506      	bpl.n	80099c4 <__swbuf_r+0x6c>
 80099b6:	2e0a      	cmp	r6, #10
 80099b8:	d104      	bne.n	80099c4 <__swbuf_r+0x6c>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4628      	mov	r0, r5
 80099be:	f000 ff8b 	bl	800a8d8 <_fflush_r>
 80099c2:	b988      	cbnz	r0, 80099e8 <__swbuf_r+0x90>
 80099c4:	4638      	mov	r0, r7
 80099c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <__swbuf_r+0x9c>)
 80099ca:	429c      	cmp	r4, r3
 80099cc:	d101      	bne.n	80099d2 <__swbuf_r+0x7a>
 80099ce:	68ac      	ldr	r4, [r5, #8]
 80099d0:	e7cf      	b.n	8009972 <__swbuf_r+0x1a>
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <__swbuf_r+0xa0>)
 80099d4:	429c      	cmp	r4, r3
 80099d6:	bf08      	it	eq
 80099d8:	68ec      	ldreq	r4, [r5, #12]
 80099da:	e7ca      	b.n	8009972 <__swbuf_r+0x1a>
 80099dc:	4621      	mov	r1, r4
 80099de:	4628      	mov	r0, r5
 80099e0:	f000 f80c 	bl	80099fc <__swsetup_r>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d0cb      	beq.n	8009980 <__swbuf_r+0x28>
 80099e8:	f04f 37ff 	mov.w	r7, #4294967295
 80099ec:	e7ea      	b.n	80099c4 <__swbuf_r+0x6c>
 80099ee:	bf00      	nop
 80099f0:	0800d11c 	.word	0x0800d11c
 80099f4:	0800d13c 	.word	0x0800d13c
 80099f8:	0800d0fc 	.word	0x0800d0fc

080099fc <__swsetup_r>:
 80099fc:	4b32      	ldr	r3, [pc, #200]	; (8009ac8 <__swsetup_r+0xcc>)
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	681d      	ldr	r5, [r3, #0]
 8009a02:	4606      	mov	r6, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	b125      	cbz	r5, 8009a12 <__swsetup_r+0x16>
 8009a08:	69ab      	ldr	r3, [r5, #24]
 8009a0a:	b913      	cbnz	r3, 8009a12 <__swsetup_r+0x16>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f000 fff7 	bl	800aa00 <__sinit>
 8009a12:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <__swsetup_r+0xd0>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d10f      	bne.n	8009a38 <__swsetup_r+0x3c>
 8009a18:	686c      	ldr	r4, [r5, #4]
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a20:	0719      	lsls	r1, r3, #28
 8009a22:	d42c      	bmi.n	8009a7e <__swsetup_r+0x82>
 8009a24:	06dd      	lsls	r5, r3, #27
 8009a26:	d411      	bmi.n	8009a4c <__swsetup_r+0x50>
 8009a28:	2309      	movs	r3, #9
 8009a2a:	6033      	str	r3, [r6, #0]
 8009a2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	f04f 30ff 	mov.w	r0, #4294967295
 8009a36:	e03e      	b.n	8009ab6 <__swsetup_r+0xba>
 8009a38:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <__swsetup_r+0xd4>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d101      	bne.n	8009a42 <__swsetup_r+0x46>
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	e7eb      	b.n	8009a1a <__swsetup_r+0x1e>
 8009a42:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <__swsetup_r+0xd8>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	bf08      	it	eq
 8009a48:	68ec      	ldreq	r4, [r5, #12]
 8009a4a:	e7e6      	b.n	8009a1a <__swsetup_r+0x1e>
 8009a4c:	0758      	lsls	r0, r3, #29
 8009a4e:	d512      	bpl.n	8009a76 <__swsetup_r+0x7a>
 8009a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a52:	b141      	cbz	r1, 8009a66 <__swsetup_r+0x6a>
 8009a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	d002      	beq.n	8009a62 <__swsetup_r+0x66>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7fe f8b1 	bl	8007bc4 <_free_r>
 8009a62:	2300      	movs	r3, #0
 8009a64:	6363      	str	r3, [r4, #52]	; 0x34
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	f043 0308 	orr.w	r3, r3, #8
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	b94b      	cbnz	r3, 8009a96 <__swsetup_r+0x9a>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8c:	d003      	beq.n	8009a96 <__swsetup_r+0x9a>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4630      	mov	r0, r6
 8009a92:	f001 fbed 	bl	800b270 <__smakebuf_r>
 8009a96:	89a0      	ldrh	r0, [r4, #12]
 8009a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a9c:	f010 0301 	ands.w	r3, r0, #1
 8009aa0:	d00a      	beq.n	8009ab8 <__swsetup_r+0xbc>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	6963      	ldr	r3, [r4, #20]
 8009aa8:	425b      	negs	r3, r3
 8009aaa:	61a3      	str	r3, [r4, #24]
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	b943      	cbnz	r3, 8009ac2 <__swsetup_r+0xc6>
 8009ab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab4:	d1ba      	bne.n	8009a2c <__swsetup_r+0x30>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	0781      	lsls	r1, r0, #30
 8009aba:	bf58      	it	pl
 8009abc:	6963      	ldrpl	r3, [r4, #20]
 8009abe:	60a3      	str	r3, [r4, #8]
 8009ac0:	e7f4      	b.n	8009aac <__swsetup_r+0xb0>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e7f7      	b.n	8009ab6 <__swsetup_r+0xba>
 8009ac6:	bf00      	nop
 8009ac8:	20000024 	.word	0x20000024
 8009acc:	0800d11c 	.word	0x0800d11c
 8009ad0:	0800d13c 	.word	0x0800d13c
 8009ad4:	0800d0fc 	.word	0x0800d0fc

08009ad8 <quorem>:
 8009ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	6903      	ldr	r3, [r0, #16]
 8009ade:	690c      	ldr	r4, [r1, #16]
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	f2c0 8081 	blt.w	8009bea <quorem+0x112>
 8009ae8:	3c01      	subs	r4, #1
 8009aea:	f101 0814 	add.w	r8, r1, #20
 8009aee:	f100 0514 	add.w	r5, r0, #20
 8009af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009afc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b00:	3301      	adds	r3, #1
 8009b02:	429a      	cmp	r2, r3
 8009b04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b10:	d331      	bcc.n	8009b76 <quorem+0x9e>
 8009b12:	f04f 0e00 	mov.w	lr, #0
 8009b16:	4640      	mov	r0, r8
 8009b18:	46ac      	mov	ip, r5
 8009b1a:	46f2      	mov	sl, lr
 8009b1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b20:	b293      	uxth	r3, r2
 8009b22:	fb06 e303 	mla	r3, r6, r3, lr
 8009b26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b30:	f8dc a000 	ldr.w	sl, [ip]
 8009b34:	0c12      	lsrs	r2, r2, #16
 8009b36:	fa13 f38a 	uxtah	r3, r3, sl
 8009b3a:	fb06 e202 	mla	r2, r6, r2, lr
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	9b00      	ldr	r3, [sp, #0]
 8009b42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b46:	b292      	uxth	r2, r2
 8009b48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b50:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b54:	4581      	cmp	r9, r0
 8009b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b5a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b62:	d2db      	bcs.n	8009b1c <quorem+0x44>
 8009b64:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b68:	b92b      	cbnz	r3, 8009b76 <quorem+0x9e>
 8009b6a:	9b01      	ldr	r3, [sp, #4]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	d32e      	bcc.n	8009bd2 <quorem+0xfa>
 8009b74:	613c      	str	r4, [r7, #16]
 8009b76:	4638      	mov	r0, r7
 8009b78:	f001 fea4 	bl	800b8c4 <__mcmp>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	db24      	blt.n	8009bca <quorem+0xf2>
 8009b80:	3601      	adds	r6, #1
 8009b82:	4628      	mov	r0, r5
 8009b84:	f04f 0c00 	mov.w	ip, #0
 8009b88:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8009b90:	b293      	uxth	r3, r2
 8009b92:	ebac 0303 	sub.w	r3, ip, r3
 8009b96:	0c12      	lsrs	r2, r2, #16
 8009b98:	fa13 f38e 	uxtah	r3, r3, lr
 8009b9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009baa:	45c1      	cmp	r9, r8
 8009bac:	f840 3b04 	str.w	r3, [r0], #4
 8009bb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bb4:	d2e8      	bcs.n	8009b88 <quorem+0xb0>
 8009bb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bbe:	b922      	cbnz	r2, 8009bca <quorem+0xf2>
 8009bc0:	3b04      	subs	r3, #4
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	d30a      	bcc.n	8009bde <quorem+0x106>
 8009bc8:	613c      	str	r4, [r7, #16]
 8009bca:	4630      	mov	r0, r6
 8009bcc:	b003      	add	sp, #12
 8009bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd2:	6812      	ldr	r2, [r2, #0]
 8009bd4:	3b04      	subs	r3, #4
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d1cc      	bne.n	8009b74 <quorem+0x9c>
 8009bda:	3c01      	subs	r4, #1
 8009bdc:	e7c7      	b.n	8009b6e <quorem+0x96>
 8009bde:	6812      	ldr	r2, [r2, #0]
 8009be0:	3b04      	subs	r3, #4
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d1f0      	bne.n	8009bc8 <quorem+0xf0>
 8009be6:	3c01      	subs	r4, #1
 8009be8:	e7eb      	b.n	8009bc2 <quorem+0xea>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e7ee      	b.n	8009bcc <quorem+0xf4>
	...

08009bf0 <_dtoa_r>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	ed2d 8b04 	vpush	{d8-d9}
 8009bf8:	ec57 6b10 	vmov	r6, r7, d0
 8009bfc:	b093      	sub	sp, #76	; 0x4c
 8009bfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c04:	9106      	str	r1, [sp, #24]
 8009c06:	ee10 aa10 	vmov	sl, s0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c10:	46bb      	mov	fp, r7
 8009c12:	b975      	cbnz	r5, 8009c32 <_dtoa_r+0x42>
 8009c14:	2010      	movs	r0, #16
 8009c16:	f7fd ffb7 	bl	8007b88 <malloc>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c1e:	b920      	cbnz	r0, 8009c2a <_dtoa_r+0x3a>
 8009c20:	4ba7      	ldr	r3, [pc, #668]	; (8009ec0 <_dtoa_r+0x2d0>)
 8009c22:	21ea      	movs	r1, #234	; 0xea
 8009c24:	48a7      	ldr	r0, [pc, #668]	; (8009ec4 <_dtoa_r+0x2d4>)
 8009c26:	f002 fb8d 	bl	800c344 <__assert_func>
 8009c2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c2e:	6005      	str	r5, [r0, #0]
 8009c30:	60c5      	str	r5, [r0, #12]
 8009c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c34:	6819      	ldr	r1, [r3, #0]
 8009c36:	b151      	cbz	r1, 8009c4e <_dtoa_r+0x5e>
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	604a      	str	r2, [r1, #4]
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4093      	lsls	r3, r2
 8009c40:	608b      	str	r3, [r1, #8]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f001 fbb2 	bl	800b3ac <_Bfree>
 8009c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	1e3b      	subs	r3, r7, #0
 8009c50:	bfaa      	itet	ge
 8009c52:	2300      	movge	r3, #0
 8009c54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c58:	f8c8 3000 	strge.w	r3, [r8]
 8009c5c:	4b9a      	ldr	r3, [pc, #616]	; (8009ec8 <_dtoa_r+0x2d8>)
 8009c5e:	bfbc      	itt	lt
 8009c60:	2201      	movlt	r2, #1
 8009c62:	f8c8 2000 	strlt.w	r2, [r8]
 8009c66:	ea33 030b 	bics.w	r3, r3, fp
 8009c6a:	d11b      	bne.n	8009ca4 <_dtoa_r+0xb4>
 8009c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c78:	4333      	orrs	r3, r6
 8009c7a:	f000 8592 	beq.w	800a7a2 <_dtoa_r+0xbb2>
 8009c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c80:	b963      	cbnz	r3, 8009c9c <_dtoa_r+0xac>
 8009c82:	4b92      	ldr	r3, [pc, #584]	; (8009ecc <_dtoa_r+0x2dc>)
 8009c84:	e022      	b.n	8009ccc <_dtoa_r+0xdc>
 8009c86:	4b92      	ldr	r3, [pc, #584]	; (8009ed0 <_dtoa_r+0x2e0>)
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	9801      	ldr	r0, [sp, #4]
 8009c92:	b013      	add	sp, #76	; 0x4c
 8009c94:	ecbd 8b04 	vpop	{d8-d9}
 8009c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	4b8b      	ldr	r3, [pc, #556]	; (8009ecc <_dtoa_r+0x2dc>)
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	e7f3      	b.n	8009c8c <_dtoa_r+0x9c>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4659      	mov	r1, fp
 8009cac:	f7f6 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb0:	ec4b ab19 	vmov	d9, sl, fp
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	b158      	cbz	r0, 8009cd0 <_dtoa_r+0xe0>
 8009cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cba:	2301      	movs	r3, #1
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 856b 	beq.w	800a79c <_dtoa_r+0xbac>
 8009cc6:	4883      	ldr	r0, [pc, #524]	; (8009ed4 <_dtoa_r+0x2e4>)
 8009cc8:	6018      	str	r0, [r3, #0]
 8009cca:	1e43      	subs	r3, r0, #1
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	e7df      	b.n	8009c90 <_dtoa_r+0xa0>
 8009cd0:	ec4b ab10 	vmov	d0, sl, fp
 8009cd4:	aa10      	add	r2, sp, #64	; 0x40
 8009cd6:	a911      	add	r1, sp, #68	; 0x44
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f001 ff15 	bl	800bb08 <__d2b>
 8009cde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ce2:	ee08 0a10 	vmov	s16, r0
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f000 8084 	beq.w	8009df4 <_dtoa_r+0x204>
 8009cec:	ee19 3a90 	vmov	r3, s19
 8009cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009cf8:	4656      	mov	r6, sl
 8009cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d06:	4b74      	ldr	r3, [pc, #464]	; (8009ed8 <_dtoa_r+0x2e8>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	f7f6 fabb 	bl	8000288 <__aeabi_dsub>
 8009d12:	a365      	add	r3, pc, #404	; (adr r3, 8009ea8 <_dtoa_r+0x2b8>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	a364      	add	r3, pc, #400	; (adr r3, 8009eb0 <_dtoa_r+0x2c0>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fab3 	bl	800028c <__adddf3>
 8009d26:	4606      	mov	r6, r0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	f7f6 fbfa 	bl	8000524 <__aeabi_i2d>
 8009d30:	a361      	add	r3, pc, #388	; (adr r3, 8009eb8 <_dtoa_r+0x2c8>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4630      	mov	r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 faa3 	bl	800028c <__adddf3>
 8009d46:	4606      	mov	r6, r0
 8009d48:	460f      	mov	r7, r1
 8009d4a:	f7f6 ff05 	bl	8000b58 <__aeabi_d2iz>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	9000      	str	r0, [sp, #0]
 8009d52:	2300      	movs	r3, #0
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fec0 	bl	8000adc <__aeabi_dcmplt>
 8009d5c:	b150      	cbz	r0, 8009d74 <_dtoa_r+0x184>
 8009d5e:	9800      	ldr	r0, [sp, #0]
 8009d60:	f7f6 fbe0 	bl	8000524 <__aeabi_i2d>
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	f7f6 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d6c:	b910      	cbnz	r0, 8009d74 <_dtoa_r+0x184>
 8009d6e:	9b00      	ldr	r3, [sp, #0]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	2b16      	cmp	r3, #22
 8009d78:	d85a      	bhi.n	8009e30 <_dtoa_r+0x240>
 8009d7a:	9a00      	ldr	r2, [sp, #0]
 8009d7c:	4b57      	ldr	r3, [pc, #348]	; (8009edc <_dtoa_r+0x2ec>)
 8009d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	ec51 0b19 	vmov	r0, r1, d9
 8009d8a:	f7f6 fea7 	bl	8000adc <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d050      	beq.n	8009e34 <_dtoa_r+0x244>
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d9e:	1b5d      	subs	r5, r3, r5
 8009da0:	1e6b      	subs	r3, r5, #1
 8009da2:	9305      	str	r3, [sp, #20]
 8009da4:	bf45      	ittet	mi
 8009da6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009daa:	9304      	strmi	r3, [sp, #16]
 8009dac:	2300      	movpl	r3, #0
 8009dae:	2300      	movmi	r3, #0
 8009db0:	bf4c      	ite	mi
 8009db2:	9305      	strmi	r3, [sp, #20]
 8009db4:	9304      	strpl	r3, [sp, #16]
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	db3d      	blt.n	8009e38 <_dtoa_r+0x248>
 8009dbc:	9b05      	ldr	r3, [sp, #20]
 8009dbe:	9a00      	ldr	r2, [sp, #0]
 8009dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8009dc2:	4413      	add	r3, r2
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9307      	str	r3, [sp, #28]
 8009dca:	9b06      	ldr	r3, [sp, #24]
 8009dcc:	2b09      	cmp	r3, #9
 8009dce:	f200 8089 	bhi.w	8009ee4 <_dtoa_r+0x2f4>
 8009dd2:	2b05      	cmp	r3, #5
 8009dd4:	bfc4      	itt	gt
 8009dd6:	3b04      	subgt	r3, #4
 8009dd8:	9306      	strgt	r3, [sp, #24]
 8009dda:	9b06      	ldr	r3, [sp, #24]
 8009ddc:	f1a3 0302 	sub.w	r3, r3, #2
 8009de0:	bfcc      	ite	gt
 8009de2:	2500      	movgt	r5, #0
 8009de4:	2501      	movle	r5, #1
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	f200 8087 	bhi.w	8009efa <_dtoa_r+0x30a>
 8009dec:	e8df f003 	tbb	[pc, r3]
 8009df0:	59383a2d 	.word	0x59383a2d
 8009df4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009df8:	441d      	add	r5, r3
 8009dfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	bfc1      	itttt	gt
 8009e02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e12:	bfda      	itte	le
 8009e14:	f1c3 0320 	rsble	r3, r3, #32
 8009e18:	fa06 f003 	lslle.w	r0, r6, r3
 8009e1c:	4318      	orrgt	r0, r3
 8009e1e:	f7f6 fb71 	bl	8000504 <__aeabi_ui2d>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4606      	mov	r6, r0
 8009e26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e2a:	3d01      	subs	r5, #1
 8009e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e2e:	e76a      	b.n	8009d06 <_dtoa_r+0x116>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e7b2      	b.n	8009d9a <_dtoa_r+0x1aa>
 8009e34:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e36:	e7b1      	b.n	8009d9c <_dtoa_r+0x1ac>
 8009e38:	9b04      	ldr	r3, [sp, #16]
 8009e3a:	9a00      	ldr	r2, [sp, #0]
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	4253      	negs	r3, r2
 8009e42:	9307      	str	r3, [sp, #28]
 8009e44:	2300      	movs	r3, #0
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	e7bf      	b.n	8009dca <_dtoa_r+0x1da>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9308      	str	r3, [sp, #32]
 8009e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc55      	bgt.n	8009f00 <_dtoa_r+0x310>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e5e:	e00c      	b.n	8009e7a <_dtoa_r+0x28a>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7f3      	b.n	8009e4c <_dtoa_r+0x25c>
 8009e64:	2300      	movs	r3, #0
 8009e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e68:	9308      	str	r3, [sp, #32]
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	9302      	str	r3, [sp, #8]
 8009e70:	3301      	adds	r3, #1
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	bfb8      	it	lt
 8009e78:	2301      	movlt	r3, #1
 8009e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	6042      	str	r2, [r0, #4]
 8009e80:	2204      	movs	r2, #4
 8009e82:	f102 0614 	add.w	r6, r2, #20
 8009e86:	429e      	cmp	r6, r3
 8009e88:	6841      	ldr	r1, [r0, #4]
 8009e8a:	d93d      	bls.n	8009f08 <_dtoa_r+0x318>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f001 fa4d 	bl	800b32c <_Balloc>
 8009e92:	9001      	str	r0, [sp, #4]
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d13b      	bne.n	8009f10 <_dtoa_r+0x320>
 8009e98:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <_dtoa_r+0x2f0>)
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ea0:	e6c0      	b.n	8009c24 <_dtoa_r+0x34>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e7df      	b.n	8009e66 <_dtoa_r+0x276>
 8009ea6:	bf00      	nop
 8009ea8:	636f4361 	.word	0x636f4361
 8009eac:	3fd287a7 	.word	0x3fd287a7
 8009eb0:	8b60c8b3 	.word	0x8b60c8b3
 8009eb4:	3fc68a28 	.word	0x3fc68a28
 8009eb8:	509f79fb 	.word	0x509f79fb
 8009ebc:	3fd34413 	.word	0x3fd34413
 8009ec0:	0800d076 	.word	0x0800d076
 8009ec4:	0800d08d 	.word	0x0800d08d
 8009ec8:	7ff00000 	.word	0x7ff00000
 8009ecc:	0800d072 	.word	0x0800d072
 8009ed0:	0800d069 	.word	0x0800d069
 8009ed4:	0800cee9 	.word	0x0800cee9
 8009ed8:	3ff80000 	.word	0x3ff80000
 8009edc:	0800d260 	.word	0x0800d260
 8009ee0:	0800d0e8 	.word	0x0800d0e8
 8009ee4:	2501      	movs	r5, #1
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9306      	str	r3, [sp, #24]
 8009eea:	9508      	str	r5, [sp, #32]
 8009eec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2312      	movs	r3, #18
 8009ef8:	e7b0      	b.n	8009e5c <_dtoa_r+0x26c>
 8009efa:	2301      	movs	r3, #1
 8009efc:	9308      	str	r3, [sp, #32]
 8009efe:	e7f5      	b.n	8009eec <_dtoa_r+0x2fc>
 8009f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f06:	e7b8      	b.n	8009e7a <_dtoa_r+0x28a>
 8009f08:	3101      	adds	r1, #1
 8009f0a:	6041      	str	r1, [r0, #4]
 8009f0c:	0052      	lsls	r2, r2, #1
 8009f0e:	e7b8      	b.n	8009e82 <_dtoa_r+0x292>
 8009f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f12:	9a01      	ldr	r2, [sp, #4]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	2b0e      	cmp	r3, #14
 8009f1a:	f200 809d 	bhi.w	800a058 <_dtoa_r+0x468>
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	f000 809a 	beq.w	800a058 <_dtoa_r+0x468>
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd32      	ble.n	8009f90 <_dtoa_r+0x3a0>
 8009f2a:	4ab7      	ldr	r2, [pc, #732]	; (800a208 <_dtoa_r+0x618>)
 8009f2c:	f003 030f 	and.w	r3, r3, #15
 8009f30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	05d8      	lsls	r0, r3, #23
 8009f3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f40:	d516      	bpl.n	8009f70 <_dtoa_r+0x380>
 8009f42:	4bb2      	ldr	r3, [pc, #712]	; (800a20c <_dtoa_r+0x61c>)
 8009f44:	ec51 0b19 	vmov	r0, r1, d9
 8009f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f4c:	f7f6 fc7e 	bl	800084c <__aeabi_ddiv>
 8009f50:	f007 070f 	and.w	r7, r7, #15
 8009f54:	4682      	mov	sl, r0
 8009f56:	468b      	mov	fp, r1
 8009f58:	2503      	movs	r5, #3
 8009f5a:	4eac      	ldr	r6, [pc, #688]	; (800a20c <_dtoa_r+0x61c>)
 8009f5c:	b957      	cbnz	r7, 8009f74 <_dtoa_r+0x384>
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	4650      	mov	r0, sl
 8009f64:	4659      	mov	r1, fp
 8009f66:	f7f6 fc71 	bl	800084c <__aeabi_ddiv>
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	468b      	mov	fp, r1
 8009f6e:	e028      	b.n	8009fc2 <_dtoa_r+0x3d2>
 8009f70:	2502      	movs	r5, #2
 8009f72:	e7f2      	b.n	8009f5a <_dtoa_r+0x36a>
 8009f74:	07f9      	lsls	r1, r7, #31
 8009f76:	d508      	bpl.n	8009f8a <_dtoa_r+0x39a>
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	3501      	adds	r5, #1
 8009f86:	4680      	mov	r8, r0
 8009f88:	4689      	mov	r9, r1
 8009f8a:	107f      	asrs	r7, r7, #1
 8009f8c:	3608      	adds	r6, #8
 8009f8e:	e7e5      	b.n	8009f5c <_dtoa_r+0x36c>
 8009f90:	f000 809b 	beq.w	800a0ca <_dtoa_r+0x4da>
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	4f9d      	ldr	r7, [pc, #628]	; (800a20c <_dtoa_r+0x61c>)
 8009f98:	425e      	negs	r6, r3
 8009f9a:	4b9b      	ldr	r3, [pc, #620]	; (800a208 <_dtoa_r+0x618>)
 8009f9c:	f006 020f 	and.w	r2, r6, #15
 8009fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	ec51 0b19 	vmov	r0, r1, d9
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	1136      	asrs	r6, r6, #4
 8009fb2:	4682      	mov	sl, r0
 8009fb4:	468b      	mov	fp, r1
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2502      	movs	r5, #2
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d17a      	bne.n	800a0b4 <_dtoa_r+0x4c4>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1d3      	bne.n	8009f6a <_dtoa_r+0x37a>
 8009fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8082 	beq.w	800a0ce <_dtoa_r+0x4de>
 8009fca:	4b91      	ldr	r3, [pc, #580]	; (800a210 <_dtoa_r+0x620>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4650      	mov	r0, sl
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	f7f6 fd83 	bl	8000adc <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d079      	beq.n	800a0ce <_dtoa_r+0x4de>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d076      	beq.n	800a0ce <_dtoa_r+0x4de>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dd36      	ble.n	800a054 <_dtoa_r+0x464>
 8009fe6:	9b00      	ldr	r3, [sp, #0]
 8009fe8:	4650      	mov	r0, sl
 8009fea:	4659      	mov	r1, fp
 8009fec:	1e5f      	subs	r7, r3, #1
 8009fee:	2200      	movs	r2, #0
 8009ff0:	4b88      	ldr	r3, [pc, #544]	; (800a214 <_dtoa_r+0x624>)
 8009ff2:	f7f6 fb01 	bl	80005f8 <__aeabi_dmul>
 8009ff6:	9e02      	ldr	r6, [sp, #8]
 8009ff8:	4682      	mov	sl, r0
 8009ffa:	468b      	mov	fp, r1
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7f6 fa90 	bl	8000524 <__aeabi_i2d>
 800a004:	4652      	mov	r2, sl
 800a006:	465b      	mov	r3, fp
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	4b82      	ldr	r3, [pc, #520]	; (800a218 <_dtoa_r+0x628>)
 800a00e:	2200      	movs	r2, #0
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	46d0      	mov	r8, sl
 800a016:	46d9      	mov	r9, fp
 800a018:	4682      	mov	sl, r0
 800a01a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a01e:	2e00      	cmp	r6, #0
 800a020:	d158      	bne.n	800a0d4 <_dtoa_r+0x4e4>
 800a022:	4b7e      	ldr	r3, [pc, #504]	; (800a21c <_dtoa_r+0x62c>)
 800a024:	2200      	movs	r2, #0
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 f92d 	bl	8000288 <__aeabi_dsub>
 800a02e:	4652      	mov	r2, sl
 800a030:	465b      	mov	r3, fp
 800a032:	4680      	mov	r8, r0
 800a034:	4689      	mov	r9, r1
 800a036:	f7f6 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f040 8295 	bne.w	800a56a <_dtoa_r+0x97a>
 800a040:	4652      	mov	r2, sl
 800a042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a046:	4640      	mov	r0, r8
 800a048:	4649      	mov	r1, r9
 800a04a:	f7f6 fd47 	bl	8000adc <__aeabi_dcmplt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f040 8289 	bne.w	800a566 <_dtoa_r+0x976>
 800a054:	ec5b ab19 	vmov	sl, fp, d9
 800a058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f2c0 8148 	blt.w	800a2f0 <_dtoa_r+0x700>
 800a060:	9a00      	ldr	r2, [sp, #0]
 800a062:	2a0e      	cmp	r2, #14
 800a064:	f300 8144 	bgt.w	800a2f0 <_dtoa_r+0x700>
 800a068:	4b67      	ldr	r3, [pc, #412]	; (800a208 <_dtoa_r+0x618>)
 800a06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a06e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a074:	2b00      	cmp	r3, #0
 800a076:	f280 80d5 	bge.w	800a224 <_dtoa_r+0x634>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f300 80d1 	bgt.w	800a224 <_dtoa_r+0x634>
 800a082:	f040 826f 	bne.w	800a564 <_dtoa_r+0x974>
 800a086:	4b65      	ldr	r3, [pc, #404]	; (800a21c <_dtoa_r+0x62c>)
 800a088:	2200      	movs	r2, #0
 800a08a:	4640      	mov	r0, r8
 800a08c:	4649      	mov	r1, r9
 800a08e:	f7f6 fab3 	bl	80005f8 <__aeabi_dmul>
 800a092:	4652      	mov	r2, sl
 800a094:	465b      	mov	r3, fp
 800a096:	f7f6 fd35 	bl	8000b04 <__aeabi_dcmpge>
 800a09a:	9e03      	ldr	r6, [sp, #12]
 800a09c:	4637      	mov	r7, r6
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f040 8245 	bne.w	800a52e <_dtoa_r+0x93e>
 800a0a4:	9d01      	ldr	r5, [sp, #4]
 800a0a6:	2331      	movs	r3, #49	; 0x31
 800a0a8:	f805 3b01 	strb.w	r3, [r5], #1
 800a0ac:	9b00      	ldr	r3, [sp, #0]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	e240      	b.n	800a536 <_dtoa_r+0x946>
 800a0b4:	07f2      	lsls	r2, r6, #31
 800a0b6:	d505      	bpl.n	800a0c4 <_dtoa_r+0x4d4>
 800a0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0bc:	f7f6 fa9c 	bl	80005f8 <__aeabi_dmul>
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	1076      	asrs	r6, r6, #1
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	e777      	b.n	8009fba <_dtoa_r+0x3ca>
 800a0ca:	2502      	movs	r5, #2
 800a0cc:	e779      	b.n	8009fc2 <_dtoa_r+0x3d2>
 800a0ce:	9f00      	ldr	r7, [sp, #0]
 800a0d0:	9e03      	ldr	r6, [sp, #12]
 800a0d2:	e794      	b.n	8009ffe <_dtoa_r+0x40e>
 800a0d4:	9901      	ldr	r1, [sp, #4]
 800a0d6:	4b4c      	ldr	r3, [pc, #304]	; (800a208 <_dtoa_r+0x618>)
 800a0d8:	4431      	add	r1, r6
 800a0da:	910d      	str	r1, [sp, #52]	; 0x34
 800a0dc:	9908      	ldr	r1, [sp, #32]
 800a0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d043      	beq.n	800a172 <_dtoa_r+0x582>
 800a0ea:	494d      	ldr	r1, [pc, #308]	; (800a220 <_dtoa_r+0x630>)
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f7f6 fbad 	bl	800084c <__aeabi_ddiv>
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	9d01      	ldr	r5, [sp, #4]
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	468b      	mov	fp, r1
 800a100:	4649      	mov	r1, r9
 800a102:	4640      	mov	r0, r8
 800a104:	f7f6 fd28 	bl	8000b58 <__aeabi_d2iz>
 800a108:	4606      	mov	r6, r0
 800a10a:	f7f6 fa0b 	bl	8000524 <__aeabi_i2d>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	3630      	adds	r6, #48	; 0x30
 800a11c:	f805 6b01 	strb.w	r6, [r5], #1
 800a120:	4652      	mov	r2, sl
 800a122:	465b      	mov	r3, fp
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	f7f6 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d163      	bne.n	800a1f8 <_dtoa_r+0x608>
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	4936      	ldr	r1, [pc, #216]	; (800a210 <_dtoa_r+0x620>)
 800a136:	2000      	movs	r0, #0
 800a138:	f7f6 f8a6 	bl	8000288 <__aeabi_dsub>
 800a13c:	4652      	mov	r2, sl
 800a13e:	465b      	mov	r3, fp
 800a140:	f7f6 fccc 	bl	8000adc <__aeabi_dcmplt>
 800a144:	2800      	cmp	r0, #0
 800a146:	f040 80b5 	bne.w	800a2b4 <_dtoa_r+0x6c4>
 800a14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a14c:	429d      	cmp	r5, r3
 800a14e:	d081      	beq.n	800a054 <_dtoa_r+0x464>
 800a150:	4b30      	ldr	r3, [pc, #192]	; (800a214 <_dtoa_r+0x624>)
 800a152:	2200      	movs	r2, #0
 800a154:	4650      	mov	r0, sl
 800a156:	4659      	mov	r1, fp
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	4b2d      	ldr	r3, [pc, #180]	; (800a214 <_dtoa_r+0x624>)
 800a15e:	4682      	mov	sl, r0
 800a160:	468b      	mov	fp, r1
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	2200      	movs	r2, #0
 800a168:	f7f6 fa46 	bl	80005f8 <__aeabi_dmul>
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	e7c6      	b.n	800a100 <_dtoa_r+0x510>
 800a172:	4650      	mov	r0, sl
 800a174:	4659      	mov	r1, fp
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a17c:	9d01      	ldr	r5, [sp, #4]
 800a17e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a180:	4682      	mov	sl, r0
 800a182:	468b      	mov	fp, r1
 800a184:	4649      	mov	r1, r9
 800a186:	4640      	mov	r0, r8
 800a188:	f7f6 fce6 	bl	8000b58 <__aeabi_d2iz>
 800a18c:	4606      	mov	r6, r0
 800a18e:	f7f6 f9c9 	bl	8000524 <__aeabi_i2d>
 800a192:	3630      	adds	r6, #48	; 0x30
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	f7f6 f874 	bl	8000288 <__aeabi_dsub>
 800a1a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a6:	429d      	cmp	r5, r3
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4689      	mov	r9, r1
 800a1ac:	f04f 0200 	mov.w	r2, #0
 800a1b0:	d124      	bne.n	800a1fc <_dtoa_r+0x60c>
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <_dtoa_r+0x630>)
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	4659      	mov	r1, fp
 800a1b8:	f7f6 f868 	bl	800028c <__adddf3>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d173      	bne.n	800a2b4 <_dtoa_r+0x6c4>
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	465b      	mov	r3, fp
 800a1d0:	4913      	ldr	r1, [pc, #76]	; (800a220 <_dtoa_r+0x630>)
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f7f6 f858 	bl	8000288 <__aeabi_dsub>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4640      	mov	r0, r8
 800a1de:	4649      	mov	r1, r9
 800a1e0:	f7f6 fc7c 	bl	8000adc <__aeabi_dcmplt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f43f af35 	beq.w	800a054 <_dtoa_r+0x464>
 800a1ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1ec:	1e6b      	subs	r3, r5, #1
 800a1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1f4:	2b30      	cmp	r3, #48	; 0x30
 800a1f6:	d0f8      	beq.n	800a1ea <_dtoa_r+0x5fa>
 800a1f8:	9700      	str	r7, [sp, #0]
 800a1fa:	e049      	b.n	800a290 <_dtoa_r+0x6a0>
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <_dtoa_r+0x624>)
 800a1fe:	f7f6 f9fb 	bl	80005f8 <__aeabi_dmul>
 800a202:	4680      	mov	r8, r0
 800a204:	4689      	mov	r9, r1
 800a206:	e7bd      	b.n	800a184 <_dtoa_r+0x594>
 800a208:	0800d260 	.word	0x0800d260
 800a20c:	0800d238 	.word	0x0800d238
 800a210:	3ff00000 	.word	0x3ff00000
 800a214:	40240000 	.word	0x40240000
 800a218:	401c0000 	.word	0x401c0000
 800a21c:	40140000 	.word	0x40140000
 800a220:	3fe00000 	.word	0x3fe00000
 800a224:	9d01      	ldr	r5, [sp, #4]
 800a226:	4656      	mov	r6, sl
 800a228:	465f      	mov	r7, fp
 800a22a:	4642      	mov	r2, r8
 800a22c:	464b      	mov	r3, r9
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	f7f6 fb0b 	bl	800084c <__aeabi_ddiv>
 800a236:	f7f6 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800a23a:	4682      	mov	sl, r0
 800a23c:	f7f6 f972 	bl	8000524 <__aeabi_i2d>
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	f7f6 f9d8 	bl	80005f8 <__aeabi_dmul>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4630      	mov	r0, r6
 800a24e:	4639      	mov	r1, r7
 800a250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a254:	f7f6 f818 	bl	8000288 <__aeabi_dsub>
 800a258:	f805 6b01 	strb.w	r6, [r5], #1
 800a25c:	9e01      	ldr	r6, [sp, #4]
 800a25e:	9f03      	ldr	r7, [sp, #12]
 800a260:	1bae      	subs	r6, r5, r6
 800a262:	42b7      	cmp	r7, r6
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	d135      	bne.n	800a2d6 <_dtoa_r+0x6e6>
 800a26a:	f7f6 f80f 	bl	800028c <__adddf3>
 800a26e:	4642      	mov	r2, r8
 800a270:	464b      	mov	r3, r9
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	f7f6 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800a27a:	b9d0      	cbnz	r0, 800a2b2 <_dtoa_r+0x6c2>
 800a27c:	4642      	mov	r2, r8
 800a27e:	464b      	mov	r3, r9
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 800a288:	b110      	cbz	r0, 800a290 <_dtoa_r+0x6a0>
 800a28a:	f01a 0f01 	tst.w	sl, #1
 800a28e:	d110      	bne.n	800a2b2 <_dtoa_r+0x6c2>
 800a290:	4620      	mov	r0, r4
 800a292:	ee18 1a10 	vmov	r1, s16
 800a296:	f001 f889 	bl	800b3ac <_Bfree>
 800a29a:	2300      	movs	r3, #0
 800a29c:	9800      	ldr	r0, [sp, #0]
 800a29e:	702b      	strb	r3, [r5, #0]
 800a2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	6018      	str	r0, [r3, #0]
 800a2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f43f acf1 	beq.w	8009c90 <_dtoa_r+0xa0>
 800a2ae:	601d      	str	r5, [r3, #0]
 800a2b0:	e4ee      	b.n	8009c90 <_dtoa_r+0xa0>
 800a2b2:	9f00      	ldr	r7, [sp, #0]
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	461d      	mov	r5, r3
 800a2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2bc:	2a39      	cmp	r2, #57	; 0x39
 800a2be:	d106      	bne.n	800a2ce <_dtoa_r+0x6de>
 800a2c0:	9a01      	ldr	r2, [sp, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d1f7      	bne.n	800a2b6 <_dtoa_r+0x6c6>
 800a2c6:	9901      	ldr	r1, [sp, #4]
 800a2c8:	2230      	movs	r2, #48	; 0x30
 800a2ca:	3701      	adds	r7, #1
 800a2cc:	700a      	strb	r2, [r1, #0]
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	3201      	adds	r2, #1
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	e790      	b.n	800a1f8 <_dtoa_r+0x608>
 800a2d6:	4ba6      	ldr	r3, [pc, #664]	; (800a570 <_dtoa_r+0x980>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460f      	mov	r7, r1
 800a2e6:	f7f6 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d09d      	beq.n	800a22a <_dtoa_r+0x63a>
 800a2ee:	e7cf      	b.n	800a290 <_dtoa_r+0x6a0>
 800a2f0:	9a08      	ldr	r2, [sp, #32]
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	f000 80d7 	beq.w	800a4a6 <_dtoa_r+0x8b6>
 800a2f8:	9a06      	ldr	r2, [sp, #24]
 800a2fa:	2a01      	cmp	r2, #1
 800a2fc:	f300 80ba 	bgt.w	800a474 <_dtoa_r+0x884>
 800a300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a302:	2a00      	cmp	r2, #0
 800a304:	f000 80b2 	beq.w	800a46c <_dtoa_r+0x87c>
 800a308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a30c:	9e07      	ldr	r6, [sp, #28]
 800a30e:	9d04      	ldr	r5, [sp, #16]
 800a310:	9a04      	ldr	r2, [sp, #16]
 800a312:	441a      	add	r2, r3
 800a314:	9204      	str	r2, [sp, #16]
 800a316:	9a05      	ldr	r2, [sp, #20]
 800a318:	2101      	movs	r1, #1
 800a31a:	441a      	add	r2, r3
 800a31c:	4620      	mov	r0, r4
 800a31e:	9205      	str	r2, [sp, #20]
 800a320:	f001 f946 	bl	800b5b0 <__i2b>
 800a324:	4607      	mov	r7, r0
 800a326:	2d00      	cmp	r5, #0
 800a328:	dd0c      	ble.n	800a344 <_dtoa_r+0x754>
 800a32a:	9b05      	ldr	r3, [sp, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dd09      	ble.n	800a344 <_dtoa_r+0x754>
 800a330:	42ab      	cmp	r3, r5
 800a332:	9a04      	ldr	r2, [sp, #16]
 800a334:	bfa8      	it	ge
 800a336:	462b      	movge	r3, r5
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	9204      	str	r2, [sp, #16]
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	1aed      	subs	r5, r5, r3
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	9b07      	ldr	r3, [sp, #28]
 800a346:	b31b      	cbz	r3, 800a390 <_dtoa_r+0x7a0>
 800a348:	9b08      	ldr	r3, [sp, #32]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80af 	beq.w	800a4ae <_dtoa_r+0x8be>
 800a350:	2e00      	cmp	r6, #0
 800a352:	dd13      	ble.n	800a37c <_dtoa_r+0x78c>
 800a354:	4639      	mov	r1, r7
 800a356:	4632      	mov	r2, r6
 800a358:	4620      	mov	r0, r4
 800a35a:	f001 f9e9 	bl	800b730 <__pow5mult>
 800a35e:	ee18 2a10 	vmov	r2, s16
 800a362:	4601      	mov	r1, r0
 800a364:	4607      	mov	r7, r0
 800a366:	4620      	mov	r0, r4
 800a368:	f001 f938 	bl	800b5dc <__multiply>
 800a36c:	ee18 1a10 	vmov	r1, s16
 800a370:	4680      	mov	r8, r0
 800a372:	4620      	mov	r0, r4
 800a374:	f001 f81a 	bl	800b3ac <_Bfree>
 800a378:	ee08 8a10 	vmov	s16, r8
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	1b9a      	subs	r2, r3, r6
 800a380:	d006      	beq.n	800a390 <_dtoa_r+0x7a0>
 800a382:	ee18 1a10 	vmov	r1, s16
 800a386:	4620      	mov	r0, r4
 800a388:	f001 f9d2 	bl	800b730 <__pow5mult>
 800a38c:	ee08 0a10 	vmov	s16, r0
 800a390:	2101      	movs	r1, #1
 800a392:	4620      	mov	r0, r4
 800a394:	f001 f90c 	bl	800b5b0 <__i2b>
 800a398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	4606      	mov	r6, r0
 800a39e:	f340 8088 	ble.w	800a4b2 <_dtoa_r+0x8c2>
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4601      	mov	r1, r0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f001 f9c2 	bl	800b730 <__pow5mult>
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	f340 8081 	ble.w	800a4b8 <_dtoa_r+0x8c8>
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	6933      	ldr	r3, [r6, #16]
 800a3bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3c0:	6918      	ldr	r0, [r3, #16]
 800a3c2:	f001 f8a5 	bl	800b510 <__hi0bits>
 800a3c6:	f1c0 0020 	rsb	r0, r0, #32
 800a3ca:	9b05      	ldr	r3, [sp, #20]
 800a3cc:	4418      	add	r0, r3
 800a3ce:	f010 001f 	ands.w	r0, r0, #31
 800a3d2:	f000 8092 	beq.w	800a4fa <_dtoa_r+0x90a>
 800a3d6:	f1c0 0320 	rsb	r3, r0, #32
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	f340 808a 	ble.w	800a4f4 <_dtoa_r+0x904>
 800a3e0:	f1c0 001c 	rsb	r0, r0, #28
 800a3e4:	9b04      	ldr	r3, [sp, #16]
 800a3e6:	4403      	add	r3, r0
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	4403      	add	r3, r0
 800a3ee:	4405      	add	r5, r0
 800a3f0:	9305      	str	r3, [sp, #20]
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd07      	ble.n	800a408 <_dtoa_r+0x818>
 800a3f8:	ee18 1a10 	vmov	r1, s16
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4620      	mov	r0, r4
 800a400:	f001 f9f0 	bl	800b7e4 <__lshift>
 800a404:	ee08 0a10 	vmov	s16, r0
 800a408:	9b05      	ldr	r3, [sp, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dd05      	ble.n	800a41a <_dtoa_r+0x82a>
 800a40e:	4631      	mov	r1, r6
 800a410:	461a      	mov	r2, r3
 800a412:	4620      	mov	r0, r4
 800a414:	f001 f9e6 	bl	800b7e4 <__lshift>
 800a418:	4606      	mov	r6, r0
 800a41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d06e      	beq.n	800a4fe <_dtoa_r+0x90e>
 800a420:	ee18 0a10 	vmov	r0, s16
 800a424:	4631      	mov	r1, r6
 800a426:	f001 fa4d 	bl	800b8c4 <__mcmp>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	da67      	bge.n	800a4fe <_dtoa_r+0x90e>
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	3b01      	subs	r3, #1
 800a432:	ee18 1a10 	vmov	r1, s16
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	220a      	movs	r2, #10
 800a43a:	2300      	movs	r3, #0
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 ffd7 	bl	800b3f0 <__multadd>
 800a442:	9b08      	ldr	r3, [sp, #32]
 800a444:	ee08 0a10 	vmov	s16, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 81b1 	beq.w	800a7b0 <_dtoa_r+0xbc0>
 800a44e:	2300      	movs	r3, #0
 800a450:	4639      	mov	r1, r7
 800a452:	220a      	movs	r2, #10
 800a454:	4620      	mov	r0, r4
 800a456:	f000 ffcb 	bl	800b3f0 <__multadd>
 800a45a:	9b02      	ldr	r3, [sp, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	4607      	mov	r7, r0
 800a460:	f300 808e 	bgt.w	800a580 <_dtoa_r+0x990>
 800a464:	9b06      	ldr	r3, [sp, #24]
 800a466:	2b02      	cmp	r3, #2
 800a468:	dc51      	bgt.n	800a50e <_dtoa_r+0x91e>
 800a46a:	e089      	b.n	800a580 <_dtoa_r+0x990>
 800a46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a46e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a472:	e74b      	b.n	800a30c <_dtoa_r+0x71c>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	1e5e      	subs	r6, r3, #1
 800a478:	9b07      	ldr	r3, [sp, #28]
 800a47a:	42b3      	cmp	r3, r6
 800a47c:	bfbf      	itttt	lt
 800a47e:	9b07      	ldrlt	r3, [sp, #28]
 800a480:	9607      	strlt	r6, [sp, #28]
 800a482:	1af2      	sublt	r2, r6, r3
 800a484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a486:	bfb6      	itet	lt
 800a488:	189b      	addlt	r3, r3, r2
 800a48a:	1b9e      	subge	r6, r3, r6
 800a48c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	bfb8      	it	lt
 800a492:	2600      	movlt	r6, #0
 800a494:	2b00      	cmp	r3, #0
 800a496:	bfb7      	itett	lt
 800a498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a49c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4a0:	1a9d      	sublt	r5, r3, r2
 800a4a2:	2300      	movlt	r3, #0
 800a4a4:	e734      	b.n	800a310 <_dtoa_r+0x720>
 800a4a6:	9e07      	ldr	r6, [sp, #28]
 800a4a8:	9d04      	ldr	r5, [sp, #16]
 800a4aa:	9f08      	ldr	r7, [sp, #32]
 800a4ac:	e73b      	b.n	800a326 <_dtoa_r+0x736>
 800a4ae:	9a07      	ldr	r2, [sp, #28]
 800a4b0:	e767      	b.n	800a382 <_dtoa_r+0x792>
 800a4b2:	9b06      	ldr	r3, [sp, #24]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	dc18      	bgt.n	800a4ea <_dtoa_r+0x8fa>
 800a4b8:	f1ba 0f00 	cmp.w	sl, #0
 800a4bc:	d115      	bne.n	800a4ea <_dtoa_r+0x8fa>
 800a4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4c2:	b993      	cbnz	r3, 800a4ea <_dtoa_r+0x8fa>
 800a4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4c8:	0d1b      	lsrs	r3, r3, #20
 800a4ca:	051b      	lsls	r3, r3, #20
 800a4cc:	b183      	cbz	r3, 800a4f0 <_dtoa_r+0x900>
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	9b05      	ldr	r3, [sp, #20]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	9305      	str	r3, [sp, #20]
 800a4da:	f04f 0801 	mov.w	r8, #1
 800a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f47f af6a 	bne.w	800a3ba <_dtoa_r+0x7ca>
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	e76f      	b.n	800a3ca <_dtoa_r+0x7da>
 800a4ea:	f04f 0800 	mov.w	r8, #0
 800a4ee:	e7f6      	b.n	800a4de <_dtoa_r+0x8ee>
 800a4f0:	4698      	mov	r8, r3
 800a4f2:	e7f4      	b.n	800a4de <_dtoa_r+0x8ee>
 800a4f4:	f43f af7d 	beq.w	800a3f2 <_dtoa_r+0x802>
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	301c      	adds	r0, #28
 800a4fc:	e772      	b.n	800a3e4 <_dtoa_r+0x7f4>
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	dc37      	bgt.n	800a574 <_dtoa_r+0x984>
 800a504:	9b06      	ldr	r3, [sp, #24]
 800a506:	2b02      	cmp	r3, #2
 800a508:	dd34      	ble.n	800a574 <_dtoa_r+0x984>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	9302      	str	r3, [sp, #8]
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	b96b      	cbnz	r3, 800a52e <_dtoa_r+0x93e>
 800a512:	4631      	mov	r1, r6
 800a514:	2205      	movs	r2, #5
 800a516:	4620      	mov	r0, r4
 800a518:	f000 ff6a 	bl	800b3f0 <__multadd>
 800a51c:	4601      	mov	r1, r0
 800a51e:	4606      	mov	r6, r0
 800a520:	ee18 0a10 	vmov	r0, s16
 800a524:	f001 f9ce 	bl	800b8c4 <__mcmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	f73f adbb 	bgt.w	800a0a4 <_dtoa_r+0x4b4>
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	9d01      	ldr	r5, [sp, #4]
 800a532:	43db      	mvns	r3, r3
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	f04f 0800 	mov.w	r8, #0
 800a53a:	4631      	mov	r1, r6
 800a53c:	4620      	mov	r0, r4
 800a53e:	f000 ff35 	bl	800b3ac <_Bfree>
 800a542:	2f00      	cmp	r7, #0
 800a544:	f43f aea4 	beq.w	800a290 <_dtoa_r+0x6a0>
 800a548:	f1b8 0f00 	cmp.w	r8, #0
 800a54c:	d005      	beq.n	800a55a <_dtoa_r+0x96a>
 800a54e:	45b8      	cmp	r8, r7
 800a550:	d003      	beq.n	800a55a <_dtoa_r+0x96a>
 800a552:	4641      	mov	r1, r8
 800a554:	4620      	mov	r0, r4
 800a556:	f000 ff29 	bl	800b3ac <_Bfree>
 800a55a:	4639      	mov	r1, r7
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 ff25 	bl	800b3ac <_Bfree>
 800a562:	e695      	b.n	800a290 <_dtoa_r+0x6a0>
 800a564:	2600      	movs	r6, #0
 800a566:	4637      	mov	r7, r6
 800a568:	e7e1      	b.n	800a52e <_dtoa_r+0x93e>
 800a56a:	9700      	str	r7, [sp, #0]
 800a56c:	4637      	mov	r7, r6
 800a56e:	e599      	b.n	800a0a4 <_dtoa_r+0x4b4>
 800a570:	40240000 	.word	0x40240000
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80ca 	beq.w	800a710 <_dtoa_r+0xb20>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	9302      	str	r3, [sp, #8]
 800a580:	2d00      	cmp	r5, #0
 800a582:	dd05      	ble.n	800a590 <_dtoa_r+0x9a0>
 800a584:	4639      	mov	r1, r7
 800a586:	462a      	mov	r2, r5
 800a588:	4620      	mov	r0, r4
 800a58a:	f001 f92b 	bl	800b7e4 <__lshift>
 800a58e:	4607      	mov	r7, r0
 800a590:	f1b8 0f00 	cmp.w	r8, #0
 800a594:	d05b      	beq.n	800a64e <_dtoa_r+0xa5e>
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fec7 	bl	800b32c <_Balloc>
 800a59e:	4605      	mov	r5, r0
 800a5a0:	b928      	cbnz	r0, 800a5ae <_dtoa_r+0x9be>
 800a5a2:	4b87      	ldr	r3, [pc, #540]	; (800a7c0 <_dtoa_r+0xbd0>)
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5aa:	f7ff bb3b 	b.w	8009c24 <_dtoa_r+0x34>
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	3202      	adds	r2, #2
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	f107 010c 	add.w	r1, r7, #12
 800a5b8:	300c      	adds	r0, #12
 800a5ba:	f7fd faed 	bl	8007b98 <memcpy>
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f001 f90e 	bl	800b7e4 <__lshift>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	f103 0901 	add.w	r9, r3, #1
 800a5ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	f00a 0301 	and.w	r3, sl, #1
 800a5da:	46b8      	mov	r8, r7
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	4607      	mov	r7, r0
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	ee18 0a10 	vmov	r0, s16
 800a5e6:	f7ff fa77 	bl	8009ad8 <quorem>
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a5f2:	ee18 0a10 	vmov	r0, s16
 800a5f6:	f001 f965 	bl	800b8c4 <__mcmp>
 800a5fa:	463a      	mov	r2, r7
 800a5fc:	9003      	str	r0, [sp, #12]
 800a5fe:	4631      	mov	r1, r6
 800a600:	4620      	mov	r0, r4
 800a602:	f001 f97b 	bl	800b8fc <__mdiff>
 800a606:	68c2      	ldr	r2, [r0, #12]
 800a608:	f109 3bff 	add.w	fp, r9, #4294967295
 800a60c:	4605      	mov	r5, r0
 800a60e:	bb02      	cbnz	r2, 800a652 <_dtoa_r+0xa62>
 800a610:	4601      	mov	r1, r0
 800a612:	ee18 0a10 	vmov	r0, s16
 800a616:	f001 f955 	bl	800b8c4 <__mcmp>
 800a61a:	4602      	mov	r2, r0
 800a61c:	4629      	mov	r1, r5
 800a61e:	4620      	mov	r0, r4
 800a620:	9207      	str	r2, [sp, #28]
 800a622:	f000 fec3 	bl	800b3ac <_Bfree>
 800a626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a62a:	ea43 0102 	orr.w	r1, r3, r2
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	430b      	orrs	r3, r1
 800a632:	464d      	mov	r5, r9
 800a634:	d10f      	bne.n	800a656 <_dtoa_r+0xa66>
 800a636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a63a:	d02a      	beq.n	800a692 <_dtoa_r+0xaa2>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	dd02      	ble.n	800a648 <_dtoa_r+0xa58>
 800a642:	9b02      	ldr	r3, [sp, #8]
 800a644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a648:	f88b a000 	strb.w	sl, [fp]
 800a64c:	e775      	b.n	800a53a <_dtoa_r+0x94a>
 800a64e:	4638      	mov	r0, r7
 800a650:	e7ba      	b.n	800a5c8 <_dtoa_r+0x9d8>
 800a652:	2201      	movs	r2, #1
 800a654:	e7e2      	b.n	800a61c <_dtoa_r+0xa2c>
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	db04      	blt.n	800a666 <_dtoa_r+0xa76>
 800a65c:	9906      	ldr	r1, [sp, #24]
 800a65e:	430b      	orrs	r3, r1
 800a660:	9904      	ldr	r1, [sp, #16]
 800a662:	430b      	orrs	r3, r1
 800a664:	d122      	bne.n	800a6ac <_dtoa_r+0xabc>
 800a666:	2a00      	cmp	r2, #0
 800a668:	ddee      	ble.n	800a648 <_dtoa_r+0xa58>
 800a66a:	ee18 1a10 	vmov	r1, s16
 800a66e:	2201      	movs	r2, #1
 800a670:	4620      	mov	r0, r4
 800a672:	f001 f8b7 	bl	800b7e4 <__lshift>
 800a676:	4631      	mov	r1, r6
 800a678:	ee08 0a10 	vmov	s16, r0
 800a67c:	f001 f922 	bl	800b8c4 <__mcmp>
 800a680:	2800      	cmp	r0, #0
 800a682:	dc03      	bgt.n	800a68c <_dtoa_r+0xa9c>
 800a684:	d1e0      	bne.n	800a648 <_dtoa_r+0xa58>
 800a686:	f01a 0f01 	tst.w	sl, #1
 800a68a:	d0dd      	beq.n	800a648 <_dtoa_r+0xa58>
 800a68c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a690:	d1d7      	bne.n	800a642 <_dtoa_r+0xa52>
 800a692:	2339      	movs	r3, #57	; 0x39
 800a694:	f88b 3000 	strb.w	r3, [fp]
 800a698:	462b      	mov	r3, r5
 800a69a:	461d      	mov	r5, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6a2:	2a39      	cmp	r2, #57	; 0x39
 800a6a4:	d071      	beq.n	800a78a <_dtoa_r+0xb9a>
 800a6a6:	3201      	adds	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	e746      	b.n	800a53a <_dtoa_r+0x94a>
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	dd07      	ble.n	800a6c0 <_dtoa_r+0xad0>
 800a6b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6b4:	d0ed      	beq.n	800a692 <_dtoa_r+0xaa2>
 800a6b6:	f10a 0301 	add.w	r3, sl, #1
 800a6ba:	f88b 3000 	strb.w	r3, [fp]
 800a6be:	e73c      	b.n	800a53a <_dtoa_r+0x94a>
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a6c6:	4599      	cmp	r9, r3
 800a6c8:	d047      	beq.n	800a75a <_dtoa_r+0xb6a>
 800a6ca:	ee18 1a10 	vmov	r1, s16
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fe8c 	bl	800b3f0 <__multadd>
 800a6d8:	45b8      	cmp	r8, r7
 800a6da:	ee08 0a10 	vmov	s16, r0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	f04f 020a 	mov.w	r2, #10
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	d106      	bne.n	800a6fa <_dtoa_r+0xb0a>
 800a6ec:	f000 fe80 	bl	800b3f0 <__multadd>
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	f109 0901 	add.w	r9, r9, #1
 800a6f8:	e772      	b.n	800a5e0 <_dtoa_r+0x9f0>
 800a6fa:	f000 fe79 	bl	800b3f0 <__multadd>
 800a6fe:	4639      	mov	r1, r7
 800a700:	4680      	mov	r8, r0
 800a702:	2300      	movs	r3, #0
 800a704:	220a      	movs	r2, #10
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fe72 	bl	800b3f0 <__multadd>
 800a70c:	4607      	mov	r7, r0
 800a70e:	e7f1      	b.n	800a6f4 <_dtoa_r+0xb04>
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	9302      	str	r3, [sp, #8]
 800a714:	9d01      	ldr	r5, [sp, #4]
 800a716:	ee18 0a10 	vmov	r0, s16
 800a71a:	4631      	mov	r1, r6
 800a71c:	f7ff f9dc 	bl	8009ad8 <quorem>
 800a720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	f805 ab01 	strb.w	sl, [r5], #1
 800a72a:	1aea      	subs	r2, r5, r3
 800a72c:	9b02      	ldr	r3, [sp, #8]
 800a72e:	4293      	cmp	r3, r2
 800a730:	dd09      	ble.n	800a746 <_dtoa_r+0xb56>
 800a732:	ee18 1a10 	vmov	r1, s16
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fe58 	bl	800b3f0 <__multadd>
 800a740:	ee08 0a10 	vmov	s16, r0
 800a744:	e7e7      	b.n	800a716 <_dtoa_r+0xb26>
 800a746:	9b02      	ldr	r3, [sp, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bfc8      	it	gt
 800a74c:	461d      	movgt	r5, r3
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	bfd8      	it	le
 800a752:	2501      	movle	r5, #1
 800a754:	441d      	add	r5, r3
 800a756:	f04f 0800 	mov.w	r8, #0
 800a75a:	ee18 1a10 	vmov	r1, s16
 800a75e:	2201      	movs	r2, #1
 800a760:	4620      	mov	r0, r4
 800a762:	f001 f83f 	bl	800b7e4 <__lshift>
 800a766:	4631      	mov	r1, r6
 800a768:	ee08 0a10 	vmov	s16, r0
 800a76c:	f001 f8aa 	bl	800b8c4 <__mcmp>
 800a770:	2800      	cmp	r0, #0
 800a772:	dc91      	bgt.n	800a698 <_dtoa_r+0xaa8>
 800a774:	d102      	bne.n	800a77c <_dtoa_r+0xb8c>
 800a776:	f01a 0f01 	tst.w	sl, #1
 800a77a:	d18d      	bne.n	800a698 <_dtoa_r+0xaa8>
 800a77c:	462b      	mov	r3, r5
 800a77e:	461d      	mov	r5, r3
 800a780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a784:	2a30      	cmp	r2, #48	; 0x30
 800a786:	d0fa      	beq.n	800a77e <_dtoa_r+0xb8e>
 800a788:	e6d7      	b.n	800a53a <_dtoa_r+0x94a>
 800a78a:	9a01      	ldr	r2, [sp, #4]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d184      	bne.n	800a69a <_dtoa_r+0xaaa>
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	2331      	movs	r3, #49	; 0x31
 800a798:	7013      	strb	r3, [r2, #0]
 800a79a:	e6ce      	b.n	800a53a <_dtoa_r+0x94a>
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <_dtoa_r+0xbd4>)
 800a79e:	f7ff ba95 	b.w	8009ccc <_dtoa_r+0xdc>
 800a7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f47f aa6e 	bne.w	8009c86 <_dtoa_r+0x96>
 800a7aa:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <_dtoa_r+0xbd8>)
 800a7ac:	f7ff ba8e 	b.w	8009ccc <_dtoa_r+0xdc>
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dcae      	bgt.n	800a714 <_dtoa_r+0xb24>
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	f73f aea8 	bgt.w	800a50e <_dtoa_r+0x91e>
 800a7be:	e7a9      	b.n	800a714 <_dtoa_r+0xb24>
 800a7c0:	0800d0e8 	.word	0x0800d0e8
 800a7c4:	0800cee8 	.word	0x0800cee8
 800a7c8:	0800d069 	.word	0x0800d069

0800a7cc <__sflush_r>:
 800a7cc:	898a      	ldrh	r2, [r1, #12]
 800a7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	0710      	lsls	r0, r2, #28
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	d458      	bmi.n	800a88c <__sflush_r+0xc0>
 800a7da:	684b      	ldr	r3, [r1, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc05      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dc02      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	d0f9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f8:	682f      	ldr	r7, [r5, #0]
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	d032      	beq.n	800a864 <__sflush_r+0x98>
 800a7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	075a      	lsls	r2, r3, #29
 800a804:	d505      	bpl.n	800a812 <__sflush_r+0x46>
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	1ac0      	subs	r0, r0, r3
 800a80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a80c:	b10b      	cbz	r3, 800a812 <__sflush_r+0x46>
 800a80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a810:	1ac0      	subs	r0, r0, r3
 800a812:	2300      	movs	r3, #0
 800a814:	4602      	mov	r2, r0
 800a816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a818:	6a21      	ldr	r1, [r4, #32]
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b0      	blx	r6
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	d106      	bne.n	800a832 <__sflush_r+0x66>
 800a824:	6829      	ldr	r1, [r5, #0]
 800a826:	291d      	cmp	r1, #29
 800a828:	d82c      	bhi.n	800a884 <__sflush_r+0xb8>
 800a82a:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <__sflush_r+0x108>)
 800a82c:	40ca      	lsrs	r2, r1
 800a82e:	07d6      	lsls	r6, r2, #31
 800a830:	d528      	bpl.n	800a884 <__sflush_r+0xb8>
 800a832:	2200      	movs	r2, #0
 800a834:	6062      	str	r2, [r4, #4]
 800a836:	04d9      	lsls	r1, r3, #19
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	6022      	str	r2, [r4, #0]
 800a83c:	d504      	bpl.n	800a848 <__sflush_r+0x7c>
 800a83e:	1c42      	adds	r2, r0, #1
 800a840:	d101      	bne.n	800a846 <__sflush_r+0x7a>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b903      	cbnz	r3, 800a848 <__sflush_r+0x7c>
 800a846:	6560      	str	r0, [r4, #84]	; 0x54
 800a848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84a:	602f      	str	r7, [r5, #0]
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d0ca      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a854:	4299      	cmp	r1, r3
 800a856:	d002      	beq.n	800a85e <__sflush_r+0x92>
 800a858:	4628      	mov	r0, r5
 800a85a:	f7fd f9b3 	bl	8007bc4 <_free_r>
 800a85e:	2000      	movs	r0, #0
 800a860:	6360      	str	r0, [r4, #52]	; 0x34
 800a862:	e7c1      	b.n	800a7e8 <__sflush_r+0x1c>
 800a864:	6a21      	ldr	r1, [r4, #32]
 800a866:	2301      	movs	r3, #1
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	1c41      	adds	r1, r0, #1
 800a86e:	d1c7      	bne.n	800a800 <__sflush_r+0x34>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0c4      	beq.n	800a800 <__sflush_r+0x34>
 800a876:	2b1d      	cmp	r3, #29
 800a878:	d001      	beq.n	800a87e <__sflush_r+0xb2>
 800a87a:	2b16      	cmp	r3, #22
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0xb6>
 800a87e:	602f      	str	r7, [r5, #0]
 800a880:	e7b1      	b.n	800a7e6 <__sflush_r+0x1a>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	e7ad      	b.n	800a7e8 <__sflush_r+0x1c>
 800a88c:	690f      	ldr	r7, [r1, #16]
 800a88e:	2f00      	cmp	r7, #0
 800a890:	d0a9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a892:	0793      	lsls	r3, r2, #30
 800a894:	680e      	ldr	r6, [r1, #0]
 800a896:	bf08      	it	eq
 800a898:	694b      	ldreq	r3, [r1, #20]
 800a89a:	600f      	str	r7, [r1, #0]
 800a89c:	bf18      	it	ne
 800a89e:	2300      	movne	r3, #0
 800a8a0:	eba6 0807 	sub.w	r8, r6, r7
 800a8a4:	608b      	str	r3, [r1, #8]
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	dd9c      	ble.n	800a7e6 <__sflush_r+0x1a>
 800a8ac:	6a21      	ldr	r1, [r4, #32]
 800a8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8b0:	4643      	mov	r3, r8
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	dc06      	bgt.n	800a8ca <__sflush_r+0xfe>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	e78e      	b.n	800a7e8 <__sflush_r+0x1c>
 800a8ca:	4407      	add	r7, r0
 800a8cc:	eba8 0800 	sub.w	r8, r8, r0
 800a8d0:	e7e9      	b.n	800a8a6 <__sflush_r+0xda>
 800a8d2:	bf00      	nop
 800a8d4:	20400001 	.word	0x20400001

0800a8d8 <_fflush_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	690b      	ldr	r3, [r1, #16]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	b913      	cbnz	r3, 800a8e8 <_fflush_r+0x10>
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	b118      	cbz	r0, 800a8f2 <_fflush_r+0x1a>
 800a8ea:	6983      	ldr	r3, [r0, #24]
 800a8ec:	b90b      	cbnz	r3, 800a8f2 <_fflush_r+0x1a>
 800a8ee:	f000 f887 	bl	800aa00 <__sinit>
 800a8f2:	4b14      	ldr	r3, [pc, #80]	; (800a944 <_fflush_r+0x6c>)
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d11b      	bne.n	800a930 <_fflush_r+0x58>
 800a8f8:	686c      	ldr	r4, [r5, #4]
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0ef      	beq.n	800a8e2 <_fflush_r+0xa>
 800a902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d404      	bmi.n	800a912 <_fflush_r+0x3a>
 800a908:	0599      	lsls	r1, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_fflush_r+0x3a>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 fc88 	bl	800b222 <__retarget_lock_acquire_recursive>
 800a912:	4628      	mov	r0, r5
 800a914:	4621      	mov	r1, r4
 800a916:	f7ff ff59 	bl	800a7cc <__sflush_r>
 800a91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91c:	07da      	lsls	r2, r3, #31
 800a91e:	4605      	mov	r5, r0
 800a920:	d4e0      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	059b      	lsls	r3, r3, #22
 800a926:	d4dd      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92a:	f000 fc7b 	bl	800b224 <__retarget_lock_release_recursive>
 800a92e:	e7d9      	b.n	800a8e4 <_fflush_r+0xc>
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <_fflush_r+0x70>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <_fflush_r+0x62>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7df      	b.n	800a8fa <_fflush_r+0x22>
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <_fflush_r+0x74>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7da      	b.n	800a8fa <_fflush_r+0x22>
 800a944:	0800d11c 	.word	0x0800d11c
 800a948:	0800d13c 	.word	0x0800d13c
 800a94c:	0800d0fc 	.word	0x0800d0fc

0800a950 <std>:
 800a950:	2300      	movs	r3, #0
 800a952:	b510      	push	{r4, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	e9c0 3300 	strd	r3, r3, [r0]
 800a95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a95e:	6083      	str	r3, [r0, #8]
 800a960:	8181      	strh	r1, [r0, #12]
 800a962:	6643      	str	r3, [r0, #100]	; 0x64
 800a964:	81c2      	strh	r2, [r0, #14]
 800a966:	6183      	str	r3, [r0, #24]
 800a968:	4619      	mov	r1, r3
 800a96a:	2208      	movs	r2, #8
 800a96c:	305c      	adds	r0, #92	; 0x5c
 800a96e:	f7fd f921 	bl	8007bb4 <memset>
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <std+0x38>)
 800a974:	6263      	str	r3, [r4, #36]	; 0x24
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <std+0x3c>)
 800a978:	62a3      	str	r3, [r4, #40]	; 0x28
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <std+0x40>)
 800a97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <std+0x44>)
 800a980:	6224      	str	r4, [r4, #32]
 800a982:	6323      	str	r3, [r4, #48]	; 0x30
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	0800c259 	.word	0x0800c259
 800a98c:	0800c27b 	.word	0x0800c27b
 800a990:	0800c2b3 	.word	0x0800c2b3
 800a994:	0800c2d7 	.word	0x0800c2d7

0800a998 <_cleanup_r>:
 800a998:	4901      	ldr	r1, [pc, #4]	; (800a9a0 <_cleanup_r+0x8>)
 800a99a:	f000 b8af 	b.w	800aafc <_fwalk_reent>
 800a99e:	bf00      	nop
 800a9a0:	0800a8d9 	.word	0x0800a8d9

0800a9a4 <__sfmoreglue>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	2268      	movs	r2, #104	; 0x68
 800a9a8:	1e4d      	subs	r5, r1, #1
 800a9aa:	4355      	muls	r5, r2
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9b2:	f7fd f973 	bl	8007c9c <_malloc_r>
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	b140      	cbz	r0, 800a9cc <__sfmoreglue+0x28>
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a9c0:	300c      	adds	r0, #12
 800a9c2:	60a0      	str	r0, [r4, #8]
 800a9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9c8:	f7fd f8f4 	bl	8007bb4 <memset>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}

0800a9d0 <__sfp_lock_acquire>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__sfp_lock_acquire+0x8>)
 800a9d2:	f000 bc26 	b.w	800b222 <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20003475 	.word	0x20003475

0800a9dc <__sfp_lock_release>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__sfp_lock_release+0x8>)
 800a9de:	f000 bc21 	b.w	800b224 <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20003475 	.word	0x20003475

0800a9e8 <__sinit_lock_acquire>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sinit_lock_acquire+0x8>)
 800a9ea:	f000 bc1a 	b.w	800b222 <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20003476 	.word	0x20003476

0800a9f4 <__sinit_lock_release>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sinit_lock_release+0x8>)
 800a9f6:	f000 bc15 	b.w	800b224 <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20003476 	.word	0x20003476

0800aa00 <__sinit>:
 800aa00:	b510      	push	{r4, lr}
 800aa02:	4604      	mov	r4, r0
 800aa04:	f7ff fff0 	bl	800a9e8 <__sinit_lock_acquire>
 800aa08:	69a3      	ldr	r3, [r4, #24]
 800aa0a:	b11b      	cbz	r3, 800aa14 <__sinit+0x14>
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	f7ff bff0 	b.w	800a9f4 <__sinit_lock_release>
 800aa14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa18:	6523      	str	r3, [r4, #80]	; 0x50
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <__sinit+0x68>)
 800aa1c:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <__sinit+0x6c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	bf04      	itt	eq
 800aa26:	2301      	moveq	r3, #1
 800aa28:	61a3      	streq	r3, [r4, #24]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 f820 	bl	800aa70 <__sfp>
 800aa30:	6060      	str	r0, [r4, #4]
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f81c 	bl	800aa70 <__sfp>
 800aa38:	60a0      	str	r0, [r4, #8]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f818 	bl	800aa70 <__sfp>
 800aa40:	2200      	movs	r2, #0
 800aa42:	60e0      	str	r0, [r4, #12]
 800aa44:	2104      	movs	r1, #4
 800aa46:	6860      	ldr	r0, [r4, #4]
 800aa48:	f7ff ff82 	bl	800a950 <std>
 800aa4c:	68a0      	ldr	r0, [r4, #8]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	2109      	movs	r1, #9
 800aa52:	f7ff ff7d 	bl	800a950 <std>
 800aa56:	68e0      	ldr	r0, [r4, #12]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	2112      	movs	r1, #18
 800aa5c:	f7ff ff78 	bl	800a950 <std>
 800aa60:	2301      	movs	r3, #1
 800aa62:	61a3      	str	r3, [r4, #24]
 800aa64:	e7d2      	b.n	800aa0c <__sinit+0xc>
 800aa66:	bf00      	nop
 800aa68:	0800ced4 	.word	0x0800ced4
 800aa6c:	0800a999 	.word	0x0800a999

0800aa70 <__sfp>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	4607      	mov	r7, r0
 800aa74:	f7ff ffac 	bl	800a9d0 <__sfp_lock_acquire>
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <__sfp+0x84>)
 800aa7a:	681e      	ldr	r6, [r3, #0]
 800aa7c:	69b3      	ldr	r3, [r6, #24]
 800aa7e:	b913      	cbnz	r3, 800aa86 <__sfp+0x16>
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ffbd 	bl	800aa00 <__sinit>
 800aa86:	3648      	adds	r6, #72	; 0x48
 800aa88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	d503      	bpl.n	800aa98 <__sfp+0x28>
 800aa90:	6833      	ldr	r3, [r6, #0]
 800aa92:	b30b      	cbz	r3, 800aad8 <__sfp+0x68>
 800aa94:	6836      	ldr	r6, [r6, #0]
 800aa96:	e7f7      	b.n	800aa88 <__sfp+0x18>
 800aa98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa9c:	b9d5      	cbnz	r5, 800aad4 <__sfp+0x64>
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <__sfp+0x88>)
 800aaa0:	60e3      	str	r3, [r4, #12]
 800aaa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaa6:	6665      	str	r5, [r4, #100]	; 0x64
 800aaa8:	f000 fbba 	bl	800b220 <__retarget_lock_init_recursive>
 800aaac:	f7ff ff96 	bl	800a9dc <__sfp_lock_release>
 800aab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aab8:	6025      	str	r5, [r4, #0]
 800aaba:	61a5      	str	r5, [r4, #24]
 800aabc:	2208      	movs	r2, #8
 800aabe:	4629      	mov	r1, r5
 800aac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aac4:	f7fd f876 	bl	8007bb4 <memset>
 800aac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aad0:	4620      	mov	r0, r4
 800aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad4:	3468      	adds	r4, #104	; 0x68
 800aad6:	e7d9      	b.n	800aa8c <__sfp+0x1c>
 800aad8:	2104      	movs	r1, #4
 800aada:	4638      	mov	r0, r7
 800aadc:	f7ff ff62 	bl	800a9a4 <__sfmoreglue>
 800aae0:	4604      	mov	r4, r0
 800aae2:	6030      	str	r0, [r6, #0]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d1d5      	bne.n	800aa94 <__sfp+0x24>
 800aae8:	f7ff ff78 	bl	800a9dc <__sfp_lock_release>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	e7ee      	b.n	800aad0 <__sfp+0x60>
 800aaf2:	bf00      	nop
 800aaf4:	0800ced4 	.word	0x0800ced4
 800aaf8:	ffff0001 	.word	0xffff0001

0800aafc <_fwalk_reent>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4606      	mov	r6, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab08:	2700      	movs	r7, #0
 800ab0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0e:	f1b9 0901 	subs.w	r9, r9, #1
 800ab12:	d505      	bpl.n	800ab20 <_fwalk_reent+0x24>
 800ab14:	6824      	ldr	r4, [r4, #0]
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d1f7      	bne.n	800ab0a <_fwalk_reent+0xe>
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab20:	89ab      	ldrh	r3, [r5, #12]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d907      	bls.n	800ab36 <_fwalk_reent+0x3a>
 800ab26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	d003      	beq.n	800ab36 <_fwalk_reent+0x3a>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4630      	mov	r0, r6
 800ab32:	47c0      	blx	r8
 800ab34:	4307      	orrs	r7, r0
 800ab36:	3568      	adds	r5, #104	; 0x68
 800ab38:	e7e9      	b.n	800ab0e <_fwalk_reent+0x12>

0800ab3a <rshift>:
 800ab3a:	6903      	ldr	r3, [r0, #16]
 800ab3c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab44:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab48:	f100 0414 	add.w	r4, r0, #20
 800ab4c:	dd45      	ble.n	800abda <rshift+0xa0>
 800ab4e:	f011 011f 	ands.w	r1, r1, #31
 800ab52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab5a:	d10c      	bne.n	800ab76 <rshift+0x3c>
 800ab5c:	f100 0710 	add.w	r7, r0, #16
 800ab60:	4629      	mov	r1, r5
 800ab62:	42b1      	cmp	r1, r6
 800ab64:	d334      	bcc.n	800abd0 <rshift+0x96>
 800ab66:	1a9b      	subs	r3, r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	1eea      	subs	r2, r5, #3
 800ab6c:	4296      	cmp	r6, r2
 800ab6e:	bf38      	it	cc
 800ab70:	2300      	movcc	r3, #0
 800ab72:	4423      	add	r3, r4
 800ab74:	e015      	b.n	800aba2 <rshift+0x68>
 800ab76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab7a:	f1c1 0820 	rsb	r8, r1, #32
 800ab7e:	40cf      	lsrs	r7, r1
 800ab80:	f105 0e04 	add.w	lr, r5, #4
 800ab84:	46a1      	mov	r9, r4
 800ab86:	4576      	cmp	r6, lr
 800ab88:	46f4      	mov	ip, lr
 800ab8a:	d815      	bhi.n	800abb8 <rshift+0x7e>
 800ab8c:	1a9a      	subs	r2, r3, r2
 800ab8e:	0092      	lsls	r2, r2, #2
 800ab90:	3a04      	subs	r2, #4
 800ab92:	3501      	adds	r5, #1
 800ab94:	42ae      	cmp	r6, r5
 800ab96:	bf38      	it	cc
 800ab98:	2200      	movcc	r2, #0
 800ab9a:	18a3      	adds	r3, r4, r2
 800ab9c:	50a7      	str	r7, [r4, r2]
 800ab9e:	b107      	cbz	r7, 800aba2 <rshift+0x68>
 800aba0:	3304      	adds	r3, #4
 800aba2:	1b1a      	subs	r2, r3, r4
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abaa:	bf08      	it	eq
 800abac:	2300      	moveq	r3, #0
 800abae:	6102      	str	r2, [r0, #16]
 800abb0:	bf08      	it	eq
 800abb2:	6143      	streq	r3, [r0, #20]
 800abb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abb8:	f8dc c000 	ldr.w	ip, [ip]
 800abbc:	fa0c fc08 	lsl.w	ip, ip, r8
 800abc0:	ea4c 0707 	orr.w	r7, ip, r7
 800abc4:	f849 7b04 	str.w	r7, [r9], #4
 800abc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abcc:	40cf      	lsrs	r7, r1
 800abce:	e7da      	b.n	800ab86 <rshift+0x4c>
 800abd0:	f851 cb04 	ldr.w	ip, [r1], #4
 800abd4:	f847 cf04 	str.w	ip, [r7, #4]!
 800abd8:	e7c3      	b.n	800ab62 <rshift+0x28>
 800abda:	4623      	mov	r3, r4
 800abdc:	e7e1      	b.n	800aba2 <rshift+0x68>

0800abde <__hexdig_fun>:
 800abde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abe2:	2b09      	cmp	r3, #9
 800abe4:	d802      	bhi.n	800abec <__hexdig_fun+0xe>
 800abe6:	3820      	subs	r0, #32
 800abe8:	b2c0      	uxtb	r0, r0
 800abea:	4770      	bx	lr
 800abec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abf0:	2b05      	cmp	r3, #5
 800abf2:	d801      	bhi.n	800abf8 <__hexdig_fun+0x1a>
 800abf4:	3847      	subs	r0, #71	; 0x47
 800abf6:	e7f7      	b.n	800abe8 <__hexdig_fun+0xa>
 800abf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abfc:	2b05      	cmp	r3, #5
 800abfe:	d801      	bhi.n	800ac04 <__hexdig_fun+0x26>
 800ac00:	3827      	subs	r0, #39	; 0x27
 800ac02:	e7f1      	b.n	800abe8 <__hexdig_fun+0xa>
 800ac04:	2000      	movs	r0, #0
 800ac06:	4770      	bx	lr

0800ac08 <__gethex>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	ed2d 8b02 	vpush	{d8}
 800ac10:	b089      	sub	sp, #36	; 0x24
 800ac12:	ee08 0a10 	vmov	s16, r0
 800ac16:	9304      	str	r3, [sp, #16]
 800ac18:	4bb4      	ldr	r3, [pc, #720]	; (800aeec <__gethex+0x2e4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	468b      	mov	fp, r1
 800ac22:	4690      	mov	r8, r2
 800ac24:	f7f5 fad4 	bl	80001d0 <strlen>
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	f8db 2000 	ldr.w	r2, [fp]
 800ac2e:	4403      	add	r3, r0
 800ac30:	4682      	mov	sl, r0
 800ac32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac36:	9305      	str	r3, [sp, #20]
 800ac38:	1c93      	adds	r3, r2, #2
 800ac3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac42:	32fe      	adds	r2, #254	; 0xfe
 800ac44:	18d1      	adds	r1, r2, r3
 800ac46:	461f      	mov	r7, r3
 800ac48:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac4c:	9100      	str	r1, [sp, #0]
 800ac4e:	2830      	cmp	r0, #48	; 0x30
 800ac50:	d0f8      	beq.n	800ac44 <__gethex+0x3c>
 800ac52:	f7ff ffc4 	bl	800abde <__hexdig_fun>
 800ac56:	4604      	mov	r4, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d13a      	bne.n	800acd2 <__gethex+0xca>
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	4652      	mov	r2, sl
 800ac60:	4638      	mov	r0, r7
 800ac62:	f001 fb3c 	bl	800c2de <strncmp>
 800ac66:	4605      	mov	r5, r0
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d168      	bne.n	800ad3e <__gethex+0x136>
 800ac6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ac70:	eb07 060a 	add.w	r6, r7, sl
 800ac74:	f7ff ffb3 	bl	800abde <__hexdig_fun>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d062      	beq.n	800ad42 <__gethex+0x13a>
 800ac7c:	4633      	mov	r3, r6
 800ac7e:	7818      	ldrb	r0, [r3, #0]
 800ac80:	2830      	cmp	r0, #48	; 0x30
 800ac82:	461f      	mov	r7, r3
 800ac84:	f103 0301 	add.w	r3, r3, #1
 800ac88:	d0f9      	beq.n	800ac7e <__gethex+0x76>
 800ac8a:	f7ff ffa8 	bl	800abde <__hexdig_fun>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	fab0 f480 	clz	r4, r0
 800ac94:	0964      	lsrs	r4, r4, #5
 800ac96:	4635      	mov	r5, r6
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	463a      	mov	r2, r7
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	3201      	adds	r2, #1
 800aca0:	7830      	ldrb	r0, [r6, #0]
 800aca2:	f7ff ff9c 	bl	800abde <__hexdig_fun>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1f8      	bne.n	800ac9c <__gethex+0x94>
 800acaa:	9901      	ldr	r1, [sp, #4]
 800acac:	4652      	mov	r2, sl
 800acae:	4630      	mov	r0, r6
 800acb0:	f001 fb15 	bl	800c2de <strncmp>
 800acb4:	b980      	cbnz	r0, 800acd8 <__gethex+0xd0>
 800acb6:	b94d      	cbnz	r5, 800accc <__gethex+0xc4>
 800acb8:	eb06 050a 	add.w	r5, r6, sl
 800acbc:	462a      	mov	r2, r5
 800acbe:	4616      	mov	r6, r2
 800acc0:	3201      	adds	r2, #1
 800acc2:	7830      	ldrb	r0, [r6, #0]
 800acc4:	f7ff ff8b 	bl	800abde <__hexdig_fun>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1f8      	bne.n	800acbe <__gethex+0xb6>
 800accc:	1bad      	subs	r5, r5, r6
 800acce:	00ad      	lsls	r5, r5, #2
 800acd0:	e004      	b.n	800acdc <__gethex+0xd4>
 800acd2:	2400      	movs	r4, #0
 800acd4:	4625      	mov	r5, r4
 800acd6:	e7e0      	b.n	800ac9a <__gethex+0x92>
 800acd8:	2d00      	cmp	r5, #0
 800acda:	d1f7      	bne.n	800accc <__gethex+0xc4>
 800acdc:	7833      	ldrb	r3, [r6, #0]
 800acde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ace2:	2b50      	cmp	r3, #80	; 0x50
 800ace4:	d13b      	bne.n	800ad5e <__gethex+0x156>
 800ace6:	7873      	ldrb	r3, [r6, #1]
 800ace8:	2b2b      	cmp	r3, #43	; 0x2b
 800acea:	d02c      	beq.n	800ad46 <__gethex+0x13e>
 800acec:	2b2d      	cmp	r3, #45	; 0x2d
 800acee:	d02e      	beq.n	800ad4e <__gethex+0x146>
 800acf0:	1c71      	adds	r1, r6, #1
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	7808      	ldrb	r0, [r1, #0]
 800acf8:	f7ff ff71 	bl	800abde <__hexdig_fun>
 800acfc:	1e43      	subs	r3, r0, #1
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b18      	cmp	r3, #24
 800ad02:	d82c      	bhi.n	800ad5e <__gethex+0x156>
 800ad04:	f1a0 0210 	sub.w	r2, r0, #16
 800ad08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad0c:	f7ff ff67 	bl	800abde <__hexdig_fun>
 800ad10:	1e43      	subs	r3, r0, #1
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b18      	cmp	r3, #24
 800ad16:	d91d      	bls.n	800ad54 <__gethex+0x14c>
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	d000      	beq.n	800ad20 <__gethex+0x118>
 800ad1e:	4252      	negs	r2, r2
 800ad20:	4415      	add	r5, r2
 800ad22:	f8cb 1000 	str.w	r1, [fp]
 800ad26:	b1e4      	cbz	r4, 800ad62 <__gethex+0x15a>
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bf14      	ite	ne
 800ad2e:	2700      	movne	r7, #0
 800ad30:	2706      	moveq	r7, #6
 800ad32:	4638      	mov	r0, r7
 800ad34:	b009      	add	sp, #36	; 0x24
 800ad36:	ecbd 8b02 	vpop	{d8}
 800ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3e:	463e      	mov	r6, r7
 800ad40:	4625      	mov	r5, r4
 800ad42:	2401      	movs	r4, #1
 800ad44:	e7ca      	b.n	800acdc <__gethex+0xd4>
 800ad46:	f04f 0900 	mov.w	r9, #0
 800ad4a:	1cb1      	adds	r1, r6, #2
 800ad4c:	e7d3      	b.n	800acf6 <__gethex+0xee>
 800ad4e:	f04f 0901 	mov.w	r9, #1
 800ad52:	e7fa      	b.n	800ad4a <__gethex+0x142>
 800ad54:	230a      	movs	r3, #10
 800ad56:	fb03 0202 	mla	r2, r3, r2, r0
 800ad5a:	3a10      	subs	r2, #16
 800ad5c:	e7d4      	b.n	800ad08 <__gethex+0x100>
 800ad5e:	4631      	mov	r1, r6
 800ad60:	e7df      	b.n	800ad22 <__gethex+0x11a>
 800ad62:	1bf3      	subs	r3, r6, r7
 800ad64:	3b01      	subs	r3, #1
 800ad66:	4621      	mov	r1, r4
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	dc0b      	bgt.n	800ad84 <__gethex+0x17c>
 800ad6c:	ee18 0a10 	vmov	r0, s16
 800ad70:	f000 fadc 	bl	800b32c <_Balloc>
 800ad74:	4604      	mov	r4, r0
 800ad76:	b940      	cbnz	r0, 800ad8a <__gethex+0x182>
 800ad78:	4b5d      	ldr	r3, [pc, #372]	; (800aef0 <__gethex+0x2e8>)
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	21de      	movs	r1, #222	; 0xde
 800ad7e:	485d      	ldr	r0, [pc, #372]	; (800aef4 <__gethex+0x2ec>)
 800ad80:	f001 fae0 	bl	800c344 <__assert_func>
 800ad84:	3101      	adds	r1, #1
 800ad86:	105b      	asrs	r3, r3, #1
 800ad88:	e7ee      	b.n	800ad68 <__gethex+0x160>
 800ad8a:	f100 0914 	add.w	r9, r0, #20
 800ad8e:	f04f 0b00 	mov.w	fp, #0
 800ad92:	f1ca 0301 	rsb	r3, sl, #1
 800ad96:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad9a:	f8cd b000 	str.w	fp, [sp]
 800ad9e:	9306      	str	r3, [sp, #24]
 800ada0:	42b7      	cmp	r7, r6
 800ada2:	d340      	bcc.n	800ae26 <__gethex+0x21e>
 800ada4:	9802      	ldr	r0, [sp, #8]
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	f840 3b04 	str.w	r3, [r0], #4
 800adac:	eba0 0009 	sub.w	r0, r0, r9
 800adb0:	1080      	asrs	r0, r0, #2
 800adb2:	0146      	lsls	r6, r0, #5
 800adb4:	6120      	str	r0, [r4, #16]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fbaa 	bl	800b510 <__hi0bits>
 800adbc:	1a30      	subs	r0, r6, r0
 800adbe:	f8d8 6000 	ldr.w	r6, [r8]
 800adc2:	42b0      	cmp	r0, r6
 800adc4:	dd63      	ble.n	800ae8e <__gethex+0x286>
 800adc6:	1b87      	subs	r7, r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 ff4e 	bl	800bc6c <__any_on>
 800add0:	4682      	mov	sl, r0
 800add2:	b1a8      	cbz	r0, 800ae00 <__gethex+0x1f8>
 800add4:	1e7b      	subs	r3, r7, #1
 800add6:	1159      	asrs	r1, r3, #5
 800add8:	f003 021f 	and.w	r2, r3, #31
 800addc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ade0:	f04f 0a01 	mov.w	sl, #1
 800ade4:	fa0a f202 	lsl.w	r2, sl, r2
 800ade8:	420a      	tst	r2, r1
 800adea:	d009      	beq.n	800ae00 <__gethex+0x1f8>
 800adec:	4553      	cmp	r3, sl
 800adee:	dd05      	ble.n	800adfc <__gethex+0x1f4>
 800adf0:	1eb9      	subs	r1, r7, #2
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 ff3a 	bl	800bc6c <__any_on>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d145      	bne.n	800ae88 <__gethex+0x280>
 800adfc:	f04f 0a02 	mov.w	sl, #2
 800ae00:	4639      	mov	r1, r7
 800ae02:	4620      	mov	r0, r4
 800ae04:	f7ff fe99 	bl	800ab3a <rshift>
 800ae08:	443d      	add	r5, r7
 800ae0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0e:	42ab      	cmp	r3, r5
 800ae10:	da4c      	bge.n	800aeac <__gethex+0x2a4>
 800ae12:	ee18 0a10 	vmov	r0, s16
 800ae16:	4621      	mov	r1, r4
 800ae18:	f000 fac8 	bl	800b3ac <_Bfree>
 800ae1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	27a3      	movs	r7, #163	; 0xa3
 800ae24:	e785      	b.n	800ad32 <__gethex+0x12a>
 800ae26:	1e73      	subs	r3, r6, #1
 800ae28:	9a05      	ldr	r2, [sp, #20]
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d019      	beq.n	800ae68 <__gethex+0x260>
 800ae34:	f1bb 0f20 	cmp.w	fp, #32
 800ae38:	d107      	bne.n	800ae4a <__gethex+0x242>
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	9a00      	ldr	r2, [sp, #0]
 800ae3e:	f843 2b04 	str.w	r2, [r3], #4
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	2300      	movs	r3, #0
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	469b      	mov	fp, r3
 800ae4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae4e:	f7ff fec6 	bl	800abde <__hexdig_fun>
 800ae52:	9b00      	ldr	r3, [sp, #0]
 800ae54:	f000 000f 	and.w	r0, r0, #15
 800ae58:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae5c:	4303      	orrs	r3, r0
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	f10b 0b04 	add.w	fp, fp, #4
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	e00d      	b.n	800ae84 <__gethex+0x27c>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	9a06      	ldr	r2, [sp, #24]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	42bb      	cmp	r3, r7
 800ae70:	d3e0      	bcc.n	800ae34 <__gethex+0x22c>
 800ae72:	4618      	mov	r0, r3
 800ae74:	9901      	ldr	r1, [sp, #4]
 800ae76:	9307      	str	r3, [sp, #28]
 800ae78:	4652      	mov	r2, sl
 800ae7a:	f001 fa30 	bl	800c2de <strncmp>
 800ae7e:	9b07      	ldr	r3, [sp, #28]
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d1d7      	bne.n	800ae34 <__gethex+0x22c>
 800ae84:	461e      	mov	r6, r3
 800ae86:	e78b      	b.n	800ada0 <__gethex+0x198>
 800ae88:	f04f 0a03 	mov.w	sl, #3
 800ae8c:	e7b8      	b.n	800ae00 <__gethex+0x1f8>
 800ae8e:	da0a      	bge.n	800aea6 <__gethex+0x29e>
 800ae90:	1a37      	subs	r7, r6, r0
 800ae92:	4621      	mov	r1, r4
 800ae94:	ee18 0a10 	vmov	r0, s16
 800ae98:	463a      	mov	r2, r7
 800ae9a:	f000 fca3 	bl	800b7e4 <__lshift>
 800ae9e:	1bed      	subs	r5, r5, r7
 800aea0:	4604      	mov	r4, r0
 800aea2:	f100 0914 	add.w	r9, r0, #20
 800aea6:	f04f 0a00 	mov.w	sl, #0
 800aeaa:	e7ae      	b.n	800ae0a <__gethex+0x202>
 800aeac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aeb0:	42a8      	cmp	r0, r5
 800aeb2:	dd72      	ble.n	800af9a <__gethex+0x392>
 800aeb4:	1b45      	subs	r5, r0, r5
 800aeb6:	42ae      	cmp	r6, r5
 800aeb8:	dc36      	bgt.n	800af28 <__gethex+0x320>
 800aeba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d02a      	beq.n	800af18 <__gethex+0x310>
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d02c      	beq.n	800af20 <__gethex+0x318>
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d11c      	bne.n	800af04 <__gethex+0x2fc>
 800aeca:	42ae      	cmp	r6, r5
 800aecc:	d11a      	bne.n	800af04 <__gethex+0x2fc>
 800aece:	2e01      	cmp	r6, #1
 800aed0:	d112      	bne.n	800aef8 <__gethex+0x2f0>
 800aed2:	9a04      	ldr	r2, [sp, #16]
 800aed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	2301      	movs	r3, #1
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	f8c9 3000 	str.w	r3, [r9]
 800aee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aee4:	2762      	movs	r7, #98	; 0x62
 800aee6:	601c      	str	r4, [r3, #0]
 800aee8:	e723      	b.n	800ad32 <__gethex+0x12a>
 800aeea:	bf00      	nop
 800aeec:	0800d1c4 	.word	0x0800d1c4
 800aef0:	0800d0e8 	.word	0x0800d0e8
 800aef4:	0800d15c 	.word	0x0800d15c
 800aef8:	1e71      	subs	r1, r6, #1
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 feb6 	bl	800bc6c <__any_on>
 800af00:	2800      	cmp	r0, #0
 800af02:	d1e6      	bne.n	800aed2 <__gethex+0x2ca>
 800af04:	ee18 0a10 	vmov	r0, s16
 800af08:	4621      	mov	r1, r4
 800af0a:	f000 fa4f 	bl	800b3ac <_Bfree>
 800af0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af10:	2300      	movs	r3, #0
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	2750      	movs	r7, #80	; 0x50
 800af16:	e70c      	b.n	800ad32 <__gethex+0x12a>
 800af18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1f2      	bne.n	800af04 <__gethex+0x2fc>
 800af1e:	e7d8      	b.n	800aed2 <__gethex+0x2ca>
 800af20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1d5      	bne.n	800aed2 <__gethex+0x2ca>
 800af26:	e7ed      	b.n	800af04 <__gethex+0x2fc>
 800af28:	1e6f      	subs	r7, r5, #1
 800af2a:	f1ba 0f00 	cmp.w	sl, #0
 800af2e:	d131      	bne.n	800af94 <__gethex+0x38c>
 800af30:	b127      	cbz	r7, 800af3c <__gethex+0x334>
 800af32:	4639      	mov	r1, r7
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fe99 	bl	800bc6c <__any_on>
 800af3a:	4682      	mov	sl, r0
 800af3c:	117b      	asrs	r3, r7, #5
 800af3e:	2101      	movs	r1, #1
 800af40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af44:	f007 071f 	and.w	r7, r7, #31
 800af48:	fa01 f707 	lsl.w	r7, r1, r7
 800af4c:	421f      	tst	r7, r3
 800af4e:	4629      	mov	r1, r5
 800af50:	4620      	mov	r0, r4
 800af52:	bf18      	it	ne
 800af54:	f04a 0a02 	orrne.w	sl, sl, #2
 800af58:	1b76      	subs	r6, r6, r5
 800af5a:	f7ff fdee 	bl	800ab3a <rshift>
 800af5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af62:	2702      	movs	r7, #2
 800af64:	f1ba 0f00 	cmp.w	sl, #0
 800af68:	d048      	beq.n	800affc <__gethex+0x3f4>
 800af6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d015      	beq.n	800af9e <__gethex+0x396>
 800af72:	2b03      	cmp	r3, #3
 800af74:	d017      	beq.n	800afa6 <__gethex+0x39e>
 800af76:	2b01      	cmp	r3, #1
 800af78:	d109      	bne.n	800af8e <__gethex+0x386>
 800af7a:	f01a 0f02 	tst.w	sl, #2
 800af7e:	d006      	beq.n	800af8e <__gethex+0x386>
 800af80:	f8d9 0000 	ldr.w	r0, [r9]
 800af84:	ea4a 0a00 	orr.w	sl, sl, r0
 800af88:	f01a 0f01 	tst.w	sl, #1
 800af8c:	d10e      	bne.n	800afac <__gethex+0x3a4>
 800af8e:	f047 0710 	orr.w	r7, r7, #16
 800af92:	e033      	b.n	800affc <__gethex+0x3f4>
 800af94:	f04f 0a01 	mov.w	sl, #1
 800af98:	e7d0      	b.n	800af3c <__gethex+0x334>
 800af9a:	2701      	movs	r7, #1
 800af9c:	e7e2      	b.n	800af64 <__gethex+0x35c>
 800af9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa0:	f1c3 0301 	rsb	r3, r3, #1
 800afa4:	9315      	str	r3, [sp, #84]	; 0x54
 800afa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0f0      	beq.n	800af8e <__gethex+0x386>
 800afac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afbc:	f04f 0c00 	mov.w	ip, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afca:	d01c      	beq.n	800b006 <__gethex+0x3fe>
 800afcc:	3201      	adds	r2, #1
 800afce:	6002      	str	r2, [r0, #0]
 800afd0:	2f02      	cmp	r7, #2
 800afd2:	f104 0314 	add.w	r3, r4, #20
 800afd6:	d13f      	bne.n	800b058 <__gethex+0x450>
 800afd8:	f8d8 2000 	ldr.w	r2, [r8]
 800afdc:	3a01      	subs	r2, #1
 800afde:	42b2      	cmp	r2, r6
 800afe0:	d10a      	bne.n	800aff8 <__gethex+0x3f0>
 800afe2:	1171      	asrs	r1, r6, #5
 800afe4:	2201      	movs	r2, #1
 800afe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afea:	f006 061f 	and.w	r6, r6, #31
 800afee:	fa02 f606 	lsl.w	r6, r2, r6
 800aff2:	421e      	tst	r6, r3
 800aff4:	bf18      	it	ne
 800aff6:	4617      	movne	r7, r2
 800aff8:	f047 0720 	orr.w	r7, r7, #32
 800affc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800affe:	601c      	str	r4, [r3, #0]
 800b000:	9b04      	ldr	r3, [sp, #16]
 800b002:	601d      	str	r5, [r3, #0]
 800b004:	e695      	b.n	800ad32 <__gethex+0x12a>
 800b006:	4299      	cmp	r1, r3
 800b008:	f843 cc04 	str.w	ip, [r3, #-4]
 800b00c:	d8d8      	bhi.n	800afc0 <__gethex+0x3b8>
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	459b      	cmp	fp, r3
 800b012:	db19      	blt.n	800b048 <__gethex+0x440>
 800b014:	6861      	ldr	r1, [r4, #4]
 800b016:	ee18 0a10 	vmov	r0, s16
 800b01a:	3101      	adds	r1, #1
 800b01c:	f000 f986 	bl	800b32c <_Balloc>
 800b020:	4681      	mov	r9, r0
 800b022:	b918      	cbnz	r0, 800b02c <__gethex+0x424>
 800b024:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <__gethex+0x488>)
 800b026:	4602      	mov	r2, r0
 800b028:	2184      	movs	r1, #132	; 0x84
 800b02a:	e6a8      	b.n	800ad7e <__gethex+0x176>
 800b02c:	6922      	ldr	r2, [r4, #16]
 800b02e:	3202      	adds	r2, #2
 800b030:	f104 010c 	add.w	r1, r4, #12
 800b034:	0092      	lsls	r2, r2, #2
 800b036:	300c      	adds	r0, #12
 800b038:	f7fc fdae 	bl	8007b98 <memcpy>
 800b03c:	4621      	mov	r1, r4
 800b03e:	ee18 0a10 	vmov	r0, s16
 800b042:	f000 f9b3 	bl	800b3ac <_Bfree>
 800b046:	464c      	mov	r4, r9
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b050:	6122      	str	r2, [r4, #16]
 800b052:	2201      	movs	r2, #1
 800b054:	615a      	str	r2, [r3, #20]
 800b056:	e7bb      	b.n	800afd0 <__gethex+0x3c8>
 800b058:	6922      	ldr	r2, [r4, #16]
 800b05a:	455a      	cmp	r2, fp
 800b05c:	dd0b      	ble.n	800b076 <__gethex+0x46e>
 800b05e:	2101      	movs	r1, #1
 800b060:	4620      	mov	r0, r4
 800b062:	f7ff fd6a 	bl	800ab3a <rshift>
 800b066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b06a:	3501      	adds	r5, #1
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	f6ff aed0 	blt.w	800ae12 <__gethex+0x20a>
 800b072:	2701      	movs	r7, #1
 800b074:	e7c0      	b.n	800aff8 <__gethex+0x3f0>
 800b076:	f016 061f 	ands.w	r6, r6, #31
 800b07a:	d0fa      	beq.n	800b072 <__gethex+0x46a>
 800b07c:	4453      	add	r3, sl
 800b07e:	f1c6 0620 	rsb	r6, r6, #32
 800b082:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b086:	f000 fa43 	bl	800b510 <__hi0bits>
 800b08a:	42b0      	cmp	r0, r6
 800b08c:	dbe7      	blt.n	800b05e <__gethex+0x456>
 800b08e:	e7f0      	b.n	800b072 <__gethex+0x46a>
 800b090:	0800d0e8 	.word	0x0800d0e8

0800b094 <L_shift>:
 800b094:	f1c2 0208 	rsb	r2, r2, #8
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	b570      	push	{r4, r5, r6, lr}
 800b09c:	f1c2 0620 	rsb	r6, r2, #32
 800b0a0:	6843      	ldr	r3, [r0, #4]
 800b0a2:	6804      	ldr	r4, [r0, #0]
 800b0a4:	fa03 f506 	lsl.w	r5, r3, r6
 800b0a8:	432c      	orrs	r4, r5
 800b0aa:	40d3      	lsrs	r3, r2
 800b0ac:	6004      	str	r4, [r0, #0]
 800b0ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0b2:	4288      	cmp	r0, r1
 800b0b4:	d3f4      	bcc.n	800b0a0 <L_shift+0xc>
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}

0800b0b8 <__match>:
 800b0b8:	b530      	push	{r4, r5, lr}
 800b0ba:	6803      	ldr	r3, [r0, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c2:	b914      	cbnz	r4, 800b0ca <__match+0x12>
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	bd30      	pop	{r4, r5, pc}
 800b0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0d2:	2d19      	cmp	r5, #25
 800b0d4:	bf98      	it	ls
 800b0d6:	3220      	addls	r2, #32
 800b0d8:	42a2      	cmp	r2, r4
 800b0da:	d0f0      	beq.n	800b0be <__match+0x6>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e7f3      	b.n	800b0c8 <__match+0x10>

0800b0e0 <__hexnan>:
 800b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	680b      	ldr	r3, [r1, #0]
 800b0e6:	115e      	asrs	r6, r3, #5
 800b0e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0ec:	f013 031f 	ands.w	r3, r3, #31
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	bf18      	it	ne
 800b0f4:	3604      	addne	r6, #4
 800b0f6:	2500      	movs	r5, #0
 800b0f8:	1f37      	subs	r7, r6, #4
 800b0fa:	4690      	mov	r8, r2
 800b0fc:	6802      	ldr	r2, [r0, #0]
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	4682      	mov	sl, r0
 800b102:	f846 5c04 	str.w	r5, [r6, #-4]
 800b106:	46b9      	mov	r9, r7
 800b108:	463c      	mov	r4, r7
 800b10a:	9502      	str	r5, [sp, #8]
 800b10c:	46ab      	mov	fp, r5
 800b10e:	7851      	ldrb	r1, [r2, #1]
 800b110:	1c53      	adds	r3, r2, #1
 800b112:	9303      	str	r3, [sp, #12]
 800b114:	b341      	cbz	r1, 800b168 <__hexnan+0x88>
 800b116:	4608      	mov	r0, r1
 800b118:	9205      	str	r2, [sp, #20]
 800b11a:	9104      	str	r1, [sp, #16]
 800b11c:	f7ff fd5f 	bl	800abde <__hexdig_fun>
 800b120:	2800      	cmp	r0, #0
 800b122:	d14f      	bne.n	800b1c4 <__hexnan+0xe4>
 800b124:	9904      	ldr	r1, [sp, #16]
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	2920      	cmp	r1, #32
 800b12a:	d818      	bhi.n	800b15e <__hexnan+0x7e>
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	459b      	cmp	fp, r3
 800b130:	dd13      	ble.n	800b15a <__hexnan+0x7a>
 800b132:	454c      	cmp	r4, r9
 800b134:	d206      	bcs.n	800b144 <__hexnan+0x64>
 800b136:	2d07      	cmp	r5, #7
 800b138:	dc04      	bgt.n	800b144 <__hexnan+0x64>
 800b13a:	462a      	mov	r2, r5
 800b13c:	4649      	mov	r1, r9
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff ffa8 	bl	800b094 <L_shift>
 800b144:	4544      	cmp	r4, r8
 800b146:	d950      	bls.n	800b1ea <__hexnan+0x10a>
 800b148:	2300      	movs	r3, #0
 800b14a:	f1a4 0904 	sub.w	r9, r4, #4
 800b14e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b152:	f8cd b008 	str.w	fp, [sp, #8]
 800b156:	464c      	mov	r4, r9
 800b158:	461d      	mov	r5, r3
 800b15a:	9a03      	ldr	r2, [sp, #12]
 800b15c:	e7d7      	b.n	800b10e <__hexnan+0x2e>
 800b15e:	2929      	cmp	r1, #41	; 0x29
 800b160:	d156      	bne.n	800b210 <__hexnan+0x130>
 800b162:	3202      	adds	r2, #2
 800b164:	f8ca 2000 	str.w	r2, [sl]
 800b168:	f1bb 0f00 	cmp.w	fp, #0
 800b16c:	d050      	beq.n	800b210 <__hexnan+0x130>
 800b16e:	454c      	cmp	r4, r9
 800b170:	d206      	bcs.n	800b180 <__hexnan+0xa0>
 800b172:	2d07      	cmp	r5, #7
 800b174:	dc04      	bgt.n	800b180 <__hexnan+0xa0>
 800b176:	462a      	mov	r2, r5
 800b178:	4649      	mov	r1, r9
 800b17a:	4620      	mov	r0, r4
 800b17c:	f7ff ff8a 	bl	800b094 <L_shift>
 800b180:	4544      	cmp	r4, r8
 800b182:	d934      	bls.n	800b1ee <__hexnan+0x10e>
 800b184:	f1a8 0204 	sub.w	r2, r8, #4
 800b188:	4623      	mov	r3, r4
 800b18a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b18e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b192:	429f      	cmp	r7, r3
 800b194:	d2f9      	bcs.n	800b18a <__hexnan+0xaa>
 800b196:	1b3b      	subs	r3, r7, r4
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	3304      	adds	r3, #4
 800b19e:	3401      	adds	r4, #1
 800b1a0:	3e03      	subs	r6, #3
 800b1a2:	42b4      	cmp	r4, r6
 800b1a4:	bf88      	it	hi
 800b1a6:	2304      	movhi	r3, #4
 800b1a8:	4443      	add	r3, r8
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f843 2b04 	str.w	r2, [r3], #4
 800b1b0:	429f      	cmp	r7, r3
 800b1b2:	d2fb      	bcs.n	800b1ac <__hexnan+0xcc>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	b91b      	cbnz	r3, 800b1c0 <__hexnan+0xe0>
 800b1b8:	4547      	cmp	r7, r8
 800b1ba:	d127      	bne.n	800b20c <__hexnan+0x12c>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	2005      	movs	r0, #5
 800b1c2:	e026      	b.n	800b212 <__hexnan+0x132>
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	2d08      	cmp	r5, #8
 800b1c8:	f10b 0b01 	add.w	fp, fp, #1
 800b1cc:	dd06      	ble.n	800b1dc <__hexnan+0xfc>
 800b1ce:	4544      	cmp	r4, r8
 800b1d0:	d9c3      	bls.n	800b15a <__hexnan+0x7a>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1d8:	2501      	movs	r5, #1
 800b1da:	3c04      	subs	r4, #4
 800b1dc:	6822      	ldr	r2, [r4, #0]
 800b1de:	f000 000f 	and.w	r0, r0, #15
 800b1e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b1e6:	6022      	str	r2, [r4, #0]
 800b1e8:	e7b7      	b.n	800b15a <__hexnan+0x7a>
 800b1ea:	2508      	movs	r5, #8
 800b1ec:	e7b5      	b.n	800b15a <__hexnan+0x7a>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0df      	beq.n	800b1b4 <__hexnan+0xd4>
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	f1c3 0320 	rsb	r3, r3, #32
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b204:	401a      	ands	r2, r3
 800b206:	f846 2c04 	str.w	r2, [r6, #-4]
 800b20a:	e7d3      	b.n	800b1b4 <__hexnan+0xd4>
 800b20c:	3f04      	subs	r7, #4
 800b20e:	e7d1      	b.n	800b1b4 <__hexnan+0xd4>
 800b210:	2004      	movs	r0, #4
 800b212:	b007      	add	sp, #28
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b218 <_localeconv_r>:
 800b218:	4800      	ldr	r0, [pc, #0]	; (800b21c <_localeconv_r+0x4>)
 800b21a:	4770      	bx	lr
 800b21c:	2000017c 	.word	0x2000017c

0800b220 <__retarget_lock_init_recursive>:
 800b220:	4770      	bx	lr

0800b222 <__retarget_lock_acquire_recursive>:
 800b222:	4770      	bx	lr

0800b224 <__retarget_lock_release_recursive>:
 800b224:	4770      	bx	lr

0800b226 <__swhatbuf_r>:
 800b226:	b570      	push	{r4, r5, r6, lr}
 800b228:	460e      	mov	r6, r1
 800b22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22e:	2900      	cmp	r1, #0
 800b230:	b096      	sub	sp, #88	; 0x58
 800b232:	4614      	mov	r4, r2
 800b234:	461d      	mov	r5, r3
 800b236:	da08      	bge.n	800b24a <__swhatbuf_r+0x24>
 800b238:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	602a      	str	r2, [r5, #0]
 800b240:	061a      	lsls	r2, r3, #24
 800b242:	d410      	bmi.n	800b266 <__swhatbuf_r+0x40>
 800b244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b248:	e00e      	b.n	800b268 <__swhatbuf_r+0x42>
 800b24a:	466a      	mov	r2, sp
 800b24c:	f001 f8ba 	bl	800c3c4 <_fstat_r>
 800b250:	2800      	cmp	r0, #0
 800b252:	dbf1      	blt.n	800b238 <__swhatbuf_r+0x12>
 800b254:	9a01      	ldr	r2, [sp, #4]
 800b256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b25a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b25e:	425a      	negs	r2, r3
 800b260:	415a      	adcs	r2, r3
 800b262:	602a      	str	r2, [r5, #0]
 800b264:	e7ee      	b.n	800b244 <__swhatbuf_r+0x1e>
 800b266:	2340      	movs	r3, #64	; 0x40
 800b268:	2000      	movs	r0, #0
 800b26a:	6023      	str	r3, [r4, #0]
 800b26c:	b016      	add	sp, #88	; 0x58
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <__smakebuf_r>:
 800b270:	898b      	ldrh	r3, [r1, #12]
 800b272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b274:	079d      	lsls	r5, r3, #30
 800b276:	4606      	mov	r6, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	d507      	bpl.n	800b28c <__smakebuf_r+0x1c>
 800b27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	2301      	movs	r3, #1
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	b002      	add	sp, #8
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	ab01      	add	r3, sp, #4
 800b28e:	466a      	mov	r2, sp
 800b290:	f7ff ffc9 	bl	800b226 <__swhatbuf_r>
 800b294:	9900      	ldr	r1, [sp, #0]
 800b296:	4605      	mov	r5, r0
 800b298:	4630      	mov	r0, r6
 800b29a:	f7fc fcff 	bl	8007c9c <_malloc_r>
 800b29e:	b948      	cbnz	r0, 800b2b4 <__smakebuf_r+0x44>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d4ef      	bmi.n	800b288 <__smakebuf_r+0x18>
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e7e3      	b.n	800b27c <__smakebuf_r+0xc>
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <__smakebuf_r+0x7c>)
 800b2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	9b00      	ldr	r3, [sp, #0]
 800b2c4:	6163      	str	r3, [r4, #20]
 800b2c6:	9b01      	ldr	r3, [sp, #4]
 800b2c8:	6120      	str	r0, [r4, #16]
 800b2ca:	b15b      	cbz	r3, 800b2e4 <__smakebuf_r+0x74>
 800b2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f001 f889 	bl	800c3e8 <_isatty_r>
 800b2d6:	b128      	cbz	r0, 800b2e4 <__smakebuf_r+0x74>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	89a0      	ldrh	r0, [r4, #12]
 800b2e6:	4305      	orrs	r5, r0
 800b2e8:	81a5      	strh	r5, [r4, #12]
 800b2ea:	e7cd      	b.n	800b288 <__smakebuf_r+0x18>
 800b2ec:	0800a999 	.word	0x0800a999

0800b2f0 <__ascii_mbtowc>:
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	b901      	cbnz	r1, 800b2f6 <__ascii_mbtowc+0x6>
 800b2f4:	a901      	add	r1, sp, #4
 800b2f6:	b142      	cbz	r2, 800b30a <__ascii_mbtowc+0x1a>
 800b2f8:	b14b      	cbz	r3, 800b30e <__ascii_mbtowc+0x1e>
 800b2fa:	7813      	ldrb	r3, [r2, #0]
 800b2fc:	600b      	str	r3, [r1, #0]
 800b2fe:	7812      	ldrb	r2, [r2, #0]
 800b300:	1e10      	subs	r0, r2, #0
 800b302:	bf18      	it	ne
 800b304:	2001      	movne	r0, #1
 800b306:	b002      	add	sp, #8
 800b308:	4770      	bx	lr
 800b30a:	4610      	mov	r0, r2
 800b30c:	e7fb      	b.n	800b306 <__ascii_mbtowc+0x16>
 800b30e:	f06f 0001 	mvn.w	r0, #1
 800b312:	e7f8      	b.n	800b306 <__ascii_mbtowc+0x16>

0800b314 <__malloc_lock>:
 800b314:	4801      	ldr	r0, [pc, #4]	; (800b31c <__malloc_lock+0x8>)
 800b316:	f7ff bf84 	b.w	800b222 <__retarget_lock_acquire_recursive>
 800b31a:	bf00      	nop
 800b31c:	20003474 	.word	0x20003474

0800b320 <__malloc_unlock>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__malloc_unlock+0x8>)
 800b322:	f7ff bf7f 	b.w	800b224 <__retarget_lock_release_recursive>
 800b326:	bf00      	nop
 800b328:	20003474 	.word	0x20003474

0800b32c <_Balloc>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b330:	4604      	mov	r4, r0
 800b332:	460d      	mov	r5, r1
 800b334:	b976      	cbnz	r6, 800b354 <_Balloc+0x28>
 800b336:	2010      	movs	r0, #16
 800b338:	f7fc fc26 	bl	8007b88 <malloc>
 800b33c:	4602      	mov	r2, r0
 800b33e:	6260      	str	r0, [r4, #36]	; 0x24
 800b340:	b920      	cbnz	r0, 800b34c <_Balloc+0x20>
 800b342:	4b18      	ldr	r3, [pc, #96]	; (800b3a4 <_Balloc+0x78>)
 800b344:	4818      	ldr	r0, [pc, #96]	; (800b3a8 <_Balloc+0x7c>)
 800b346:	2166      	movs	r1, #102	; 0x66
 800b348:	f000 fffc 	bl	800c344 <__assert_func>
 800b34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b350:	6006      	str	r6, [r0, #0]
 800b352:	60c6      	str	r6, [r0, #12]
 800b354:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b356:	68f3      	ldr	r3, [r6, #12]
 800b358:	b183      	cbz	r3, 800b37c <_Balloc+0x50>
 800b35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b362:	b9b8      	cbnz	r0, 800b394 <_Balloc+0x68>
 800b364:	2101      	movs	r1, #1
 800b366:	fa01 f605 	lsl.w	r6, r1, r5
 800b36a:	1d72      	adds	r2, r6, #5
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fc9d 	bl	800bcae <_calloc_r>
 800b374:	b160      	cbz	r0, 800b390 <_Balloc+0x64>
 800b376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b37a:	e00e      	b.n	800b39a <_Balloc+0x6e>
 800b37c:	2221      	movs	r2, #33	; 0x21
 800b37e:	2104      	movs	r1, #4
 800b380:	4620      	mov	r0, r4
 800b382:	f000 fc94 	bl	800bcae <_calloc_r>
 800b386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b388:	60f0      	str	r0, [r6, #12]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e4      	bne.n	800b35a <_Balloc+0x2e>
 800b390:	2000      	movs	r0, #0
 800b392:	bd70      	pop	{r4, r5, r6, pc}
 800b394:	6802      	ldr	r2, [r0, #0]
 800b396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b39a:	2300      	movs	r3, #0
 800b39c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3a0:	e7f7      	b.n	800b392 <_Balloc+0x66>
 800b3a2:	bf00      	nop
 800b3a4:	0800d076 	.word	0x0800d076
 800b3a8:	0800d1d8 	.word	0x0800d1d8

0800b3ac <_Bfree>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	b976      	cbnz	r6, 800b3d4 <_Bfree+0x28>
 800b3b6:	2010      	movs	r0, #16
 800b3b8:	f7fc fbe6 	bl	8007b88 <malloc>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	6268      	str	r0, [r5, #36]	; 0x24
 800b3c0:	b920      	cbnz	r0, 800b3cc <_Bfree+0x20>
 800b3c2:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <_Bfree+0x3c>)
 800b3c4:	4809      	ldr	r0, [pc, #36]	; (800b3ec <_Bfree+0x40>)
 800b3c6:	218a      	movs	r1, #138	; 0x8a
 800b3c8:	f000 ffbc 	bl	800c344 <__assert_func>
 800b3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d0:	6006      	str	r6, [r0, #0]
 800b3d2:	60c6      	str	r6, [r0, #12]
 800b3d4:	b13c      	cbz	r4, 800b3e6 <_Bfree+0x3a>
 800b3d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3d8:	6862      	ldr	r2, [r4, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3e0:	6021      	str	r1, [r4, #0]
 800b3e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	0800d076 	.word	0x0800d076
 800b3ec:	0800d1d8 	.word	0x0800d1d8

0800b3f0 <__multadd>:
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	690d      	ldr	r5, [r1, #16]
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	461e      	mov	r6, r3
 800b3fc:	f101 0c14 	add.w	ip, r1, #20
 800b400:	2000      	movs	r0, #0
 800b402:	f8dc 3000 	ldr.w	r3, [ip]
 800b406:	b299      	uxth	r1, r3
 800b408:	fb02 6101 	mla	r1, r2, r1, r6
 800b40c:	0c1e      	lsrs	r6, r3, #16
 800b40e:	0c0b      	lsrs	r3, r1, #16
 800b410:	fb02 3306 	mla	r3, r2, r6, r3
 800b414:	b289      	uxth	r1, r1
 800b416:	3001      	adds	r0, #1
 800b418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b41c:	4285      	cmp	r5, r0
 800b41e:	f84c 1b04 	str.w	r1, [ip], #4
 800b422:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b426:	dcec      	bgt.n	800b402 <__multadd+0x12>
 800b428:	b30e      	cbz	r6, 800b46e <__multadd+0x7e>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	42ab      	cmp	r3, r5
 800b42e:	dc19      	bgt.n	800b464 <__multadd+0x74>
 800b430:	6861      	ldr	r1, [r4, #4]
 800b432:	4638      	mov	r0, r7
 800b434:	3101      	adds	r1, #1
 800b436:	f7ff ff79 	bl	800b32c <_Balloc>
 800b43a:	4680      	mov	r8, r0
 800b43c:	b928      	cbnz	r0, 800b44a <__multadd+0x5a>
 800b43e:	4602      	mov	r2, r0
 800b440:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <__multadd+0x84>)
 800b442:	480d      	ldr	r0, [pc, #52]	; (800b478 <__multadd+0x88>)
 800b444:	21b5      	movs	r1, #181	; 0xb5
 800b446:	f000 ff7d 	bl	800c344 <__assert_func>
 800b44a:	6922      	ldr	r2, [r4, #16]
 800b44c:	3202      	adds	r2, #2
 800b44e:	f104 010c 	add.w	r1, r4, #12
 800b452:	0092      	lsls	r2, r2, #2
 800b454:	300c      	adds	r0, #12
 800b456:	f7fc fb9f 	bl	8007b98 <memcpy>
 800b45a:	4621      	mov	r1, r4
 800b45c:	4638      	mov	r0, r7
 800b45e:	f7ff ffa5 	bl	800b3ac <_Bfree>
 800b462:	4644      	mov	r4, r8
 800b464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b468:	3501      	adds	r5, #1
 800b46a:	615e      	str	r6, [r3, #20]
 800b46c:	6125      	str	r5, [r4, #16]
 800b46e:	4620      	mov	r0, r4
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	0800d0e8 	.word	0x0800d0e8
 800b478:	0800d1d8 	.word	0x0800d1d8

0800b47c <__s2b>:
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	460c      	mov	r4, r1
 800b482:	4615      	mov	r5, r2
 800b484:	461f      	mov	r7, r3
 800b486:	2209      	movs	r2, #9
 800b488:	3308      	adds	r3, #8
 800b48a:	4606      	mov	r6, r0
 800b48c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b490:	2100      	movs	r1, #0
 800b492:	2201      	movs	r2, #1
 800b494:	429a      	cmp	r2, r3
 800b496:	db09      	blt.n	800b4ac <__s2b+0x30>
 800b498:	4630      	mov	r0, r6
 800b49a:	f7ff ff47 	bl	800b32c <_Balloc>
 800b49e:	b940      	cbnz	r0, 800b4b2 <__s2b+0x36>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	4b19      	ldr	r3, [pc, #100]	; (800b508 <__s2b+0x8c>)
 800b4a4:	4819      	ldr	r0, [pc, #100]	; (800b50c <__s2b+0x90>)
 800b4a6:	21ce      	movs	r1, #206	; 0xce
 800b4a8:	f000 ff4c 	bl	800c344 <__assert_func>
 800b4ac:	0052      	lsls	r2, r2, #1
 800b4ae:	3101      	adds	r1, #1
 800b4b0:	e7f0      	b.n	800b494 <__s2b+0x18>
 800b4b2:	9b08      	ldr	r3, [sp, #32]
 800b4b4:	6143      	str	r3, [r0, #20]
 800b4b6:	2d09      	cmp	r5, #9
 800b4b8:	f04f 0301 	mov.w	r3, #1
 800b4bc:	6103      	str	r3, [r0, #16]
 800b4be:	dd16      	ble.n	800b4ee <__s2b+0x72>
 800b4c0:	f104 0909 	add.w	r9, r4, #9
 800b4c4:	46c8      	mov	r8, r9
 800b4c6:	442c      	add	r4, r5
 800b4c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	3b30      	subs	r3, #48	; 0x30
 800b4d0:	220a      	movs	r2, #10
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7ff ff8c 	bl	800b3f0 <__multadd>
 800b4d8:	45a0      	cmp	r8, r4
 800b4da:	d1f5      	bne.n	800b4c8 <__s2b+0x4c>
 800b4dc:	f1a5 0408 	sub.w	r4, r5, #8
 800b4e0:	444c      	add	r4, r9
 800b4e2:	1b2d      	subs	r5, r5, r4
 800b4e4:	1963      	adds	r3, r4, r5
 800b4e6:	42bb      	cmp	r3, r7
 800b4e8:	db04      	blt.n	800b4f4 <__s2b+0x78>
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	340a      	adds	r4, #10
 800b4f0:	2509      	movs	r5, #9
 800b4f2:	e7f6      	b.n	800b4e2 <__s2b+0x66>
 800b4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	3b30      	subs	r3, #48	; 0x30
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff ff76 	bl	800b3f0 <__multadd>
 800b504:	e7ee      	b.n	800b4e4 <__s2b+0x68>
 800b506:	bf00      	nop
 800b508:	0800d0e8 	.word	0x0800d0e8
 800b50c:	0800d1d8 	.word	0x0800d1d8

0800b510 <__hi0bits>:
 800b510:	0c03      	lsrs	r3, r0, #16
 800b512:	041b      	lsls	r3, r3, #16
 800b514:	b9d3      	cbnz	r3, 800b54c <__hi0bits+0x3c>
 800b516:	0400      	lsls	r0, r0, #16
 800b518:	2310      	movs	r3, #16
 800b51a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b51e:	bf04      	itt	eq
 800b520:	0200      	lsleq	r0, r0, #8
 800b522:	3308      	addeq	r3, #8
 800b524:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b528:	bf04      	itt	eq
 800b52a:	0100      	lsleq	r0, r0, #4
 800b52c:	3304      	addeq	r3, #4
 800b52e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b532:	bf04      	itt	eq
 800b534:	0080      	lsleq	r0, r0, #2
 800b536:	3302      	addeq	r3, #2
 800b538:	2800      	cmp	r0, #0
 800b53a:	db05      	blt.n	800b548 <__hi0bits+0x38>
 800b53c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b540:	f103 0301 	add.w	r3, r3, #1
 800b544:	bf08      	it	eq
 800b546:	2320      	moveq	r3, #32
 800b548:	4618      	mov	r0, r3
 800b54a:	4770      	bx	lr
 800b54c:	2300      	movs	r3, #0
 800b54e:	e7e4      	b.n	800b51a <__hi0bits+0xa>

0800b550 <__lo0bits>:
 800b550:	6803      	ldr	r3, [r0, #0]
 800b552:	f013 0207 	ands.w	r2, r3, #7
 800b556:	4601      	mov	r1, r0
 800b558:	d00b      	beq.n	800b572 <__lo0bits+0x22>
 800b55a:	07da      	lsls	r2, r3, #31
 800b55c:	d423      	bmi.n	800b5a6 <__lo0bits+0x56>
 800b55e:	0798      	lsls	r0, r3, #30
 800b560:	bf49      	itett	mi
 800b562:	085b      	lsrmi	r3, r3, #1
 800b564:	089b      	lsrpl	r3, r3, #2
 800b566:	2001      	movmi	r0, #1
 800b568:	600b      	strmi	r3, [r1, #0]
 800b56a:	bf5c      	itt	pl
 800b56c:	600b      	strpl	r3, [r1, #0]
 800b56e:	2002      	movpl	r0, #2
 800b570:	4770      	bx	lr
 800b572:	b298      	uxth	r0, r3
 800b574:	b9a8      	cbnz	r0, 800b5a2 <__lo0bits+0x52>
 800b576:	0c1b      	lsrs	r3, r3, #16
 800b578:	2010      	movs	r0, #16
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	b90a      	cbnz	r2, 800b582 <__lo0bits+0x32>
 800b57e:	3008      	adds	r0, #8
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	071a      	lsls	r2, r3, #28
 800b584:	bf04      	itt	eq
 800b586:	091b      	lsreq	r3, r3, #4
 800b588:	3004      	addeq	r0, #4
 800b58a:	079a      	lsls	r2, r3, #30
 800b58c:	bf04      	itt	eq
 800b58e:	089b      	lsreq	r3, r3, #2
 800b590:	3002      	addeq	r0, #2
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d403      	bmi.n	800b59e <__lo0bits+0x4e>
 800b596:	085b      	lsrs	r3, r3, #1
 800b598:	f100 0001 	add.w	r0, r0, #1
 800b59c:	d005      	beq.n	800b5aa <__lo0bits+0x5a>
 800b59e:	600b      	str	r3, [r1, #0]
 800b5a0:	4770      	bx	lr
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	e7e9      	b.n	800b57a <__lo0bits+0x2a>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	4770      	bx	lr
 800b5aa:	2020      	movs	r0, #32
 800b5ac:	4770      	bx	lr
	...

0800b5b0 <__i2b>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	f7ff feb9 	bl	800b32c <_Balloc>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	b928      	cbnz	r0, 800b5ca <__i2b+0x1a>
 800b5be:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <__i2b+0x24>)
 800b5c0:	4805      	ldr	r0, [pc, #20]	; (800b5d8 <__i2b+0x28>)
 800b5c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5c6:	f000 febd 	bl	800c344 <__assert_func>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	6144      	str	r4, [r0, #20]
 800b5ce:	6103      	str	r3, [r0, #16]
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	bf00      	nop
 800b5d4:	0800d0e8 	.word	0x0800d0e8
 800b5d8:	0800d1d8 	.word	0x0800d1d8

0800b5dc <__multiply>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	4691      	mov	r9, r2
 800b5e2:	690a      	ldr	r2, [r1, #16]
 800b5e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	bfb8      	it	lt
 800b5ec:	460b      	movlt	r3, r1
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	bfbc      	itt	lt
 800b5f2:	464c      	movlt	r4, r9
 800b5f4:	4699      	movlt	r9, r3
 800b5f6:	6927      	ldr	r7, [r4, #16]
 800b5f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5fc:	68a3      	ldr	r3, [r4, #8]
 800b5fe:	6861      	ldr	r1, [r4, #4]
 800b600:	eb07 060a 	add.w	r6, r7, sl
 800b604:	42b3      	cmp	r3, r6
 800b606:	b085      	sub	sp, #20
 800b608:	bfb8      	it	lt
 800b60a:	3101      	addlt	r1, #1
 800b60c:	f7ff fe8e 	bl	800b32c <_Balloc>
 800b610:	b930      	cbnz	r0, 800b620 <__multiply+0x44>
 800b612:	4602      	mov	r2, r0
 800b614:	4b44      	ldr	r3, [pc, #272]	; (800b728 <__multiply+0x14c>)
 800b616:	4845      	ldr	r0, [pc, #276]	; (800b72c <__multiply+0x150>)
 800b618:	f240 115d 	movw	r1, #349	; 0x15d
 800b61c:	f000 fe92 	bl	800c344 <__assert_func>
 800b620:	f100 0514 	add.w	r5, r0, #20
 800b624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b628:	462b      	mov	r3, r5
 800b62a:	2200      	movs	r2, #0
 800b62c:	4543      	cmp	r3, r8
 800b62e:	d321      	bcc.n	800b674 <__multiply+0x98>
 800b630:	f104 0314 	add.w	r3, r4, #20
 800b634:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b638:	f109 0314 	add.w	r3, r9, #20
 800b63c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b640:	9202      	str	r2, [sp, #8]
 800b642:	1b3a      	subs	r2, r7, r4
 800b644:	3a15      	subs	r2, #21
 800b646:	f022 0203 	bic.w	r2, r2, #3
 800b64a:	3204      	adds	r2, #4
 800b64c:	f104 0115 	add.w	r1, r4, #21
 800b650:	428f      	cmp	r7, r1
 800b652:	bf38      	it	cc
 800b654:	2204      	movcc	r2, #4
 800b656:	9201      	str	r2, [sp, #4]
 800b658:	9a02      	ldr	r2, [sp, #8]
 800b65a:	9303      	str	r3, [sp, #12]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d80c      	bhi.n	800b67a <__multiply+0x9e>
 800b660:	2e00      	cmp	r6, #0
 800b662:	dd03      	ble.n	800b66c <__multiply+0x90>
 800b664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d05a      	beq.n	800b722 <__multiply+0x146>
 800b66c:	6106      	str	r6, [r0, #16]
 800b66e:	b005      	add	sp, #20
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	f843 2b04 	str.w	r2, [r3], #4
 800b678:	e7d8      	b.n	800b62c <__multiply+0x50>
 800b67a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b67e:	f1ba 0f00 	cmp.w	sl, #0
 800b682:	d024      	beq.n	800b6ce <__multiply+0xf2>
 800b684:	f104 0e14 	add.w	lr, r4, #20
 800b688:	46a9      	mov	r9, r5
 800b68a:	f04f 0c00 	mov.w	ip, #0
 800b68e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b692:	f8d9 1000 	ldr.w	r1, [r9]
 800b696:	fa1f fb82 	uxth.w	fp, r2
 800b69a:	b289      	uxth	r1, r1
 800b69c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b6a8:	4461      	add	r1, ip
 800b6aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6b6:	b289      	uxth	r1, r1
 800b6b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6bc:	4577      	cmp	r7, lr
 800b6be:	f849 1b04 	str.w	r1, [r9], #4
 800b6c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6c6:	d8e2      	bhi.n	800b68e <__multiply+0xb2>
 800b6c8:	9a01      	ldr	r2, [sp, #4]
 800b6ca:	f845 c002 	str.w	ip, [r5, r2]
 800b6ce:	9a03      	ldr	r2, [sp, #12]
 800b6d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	f1b9 0f00 	cmp.w	r9, #0
 800b6da:	d020      	beq.n	800b71e <__multiply+0x142>
 800b6dc:	6829      	ldr	r1, [r5, #0]
 800b6de:	f104 0c14 	add.w	ip, r4, #20
 800b6e2:	46ae      	mov	lr, r5
 800b6e4:	f04f 0a00 	mov.w	sl, #0
 800b6e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b6ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b6f4:	4492      	add	sl, r2
 800b6f6:	b289      	uxth	r1, r1
 800b6f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6fc:	f84e 1b04 	str.w	r1, [lr], #4
 800b700:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b704:	f8be 1000 	ldrh.w	r1, [lr]
 800b708:	0c12      	lsrs	r2, r2, #16
 800b70a:	fb09 1102 	mla	r1, r9, r2, r1
 800b70e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b712:	4567      	cmp	r7, ip
 800b714:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b718:	d8e6      	bhi.n	800b6e8 <__multiply+0x10c>
 800b71a:	9a01      	ldr	r2, [sp, #4]
 800b71c:	50a9      	str	r1, [r5, r2]
 800b71e:	3504      	adds	r5, #4
 800b720:	e79a      	b.n	800b658 <__multiply+0x7c>
 800b722:	3e01      	subs	r6, #1
 800b724:	e79c      	b.n	800b660 <__multiply+0x84>
 800b726:	bf00      	nop
 800b728:	0800d0e8 	.word	0x0800d0e8
 800b72c:	0800d1d8 	.word	0x0800d1d8

0800b730 <__pow5mult>:
 800b730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b734:	4615      	mov	r5, r2
 800b736:	f012 0203 	ands.w	r2, r2, #3
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	d007      	beq.n	800b750 <__pow5mult+0x20>
 800b740:	4c25      	ldr	r4, [pc, #148]	; (800b7d8 <__pow5mult+0xa8>)
 800b742:	3a01      	subs	r2, #1
 800b744:	2300      	movs	r3, #0
 800b746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b74a:	f7ff fe51 	bl	800b3f0 <__multadd>
 800b74e:	4607      	mov	r7, r0
 800b750:	10ad      	asrs	r5, r5, #2
 800b752:	d03d      	beq.n	800b7d0 <__pow5mult+0xa0>
 800b754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b756:	b97c      	cbnz	r4, 800b778 <__pow5mult+0x48>
 800b758:	2010      	movs	r0, #16
 800b75a:	f7fc fa15 	bl	8007b88 <malloc>
 800b75e:	4602      	mov	r2, r0
 800b760:	6270      	str	r0, [r6, #36]	; 0x24
 800b762:	b928      	cbnz	r0, 800b770 <__pow5mult+0x40>
 800b764:	4b1d      	ldr	r3, [pc, #116]	; (800b7dc <__pow5mult+0xac>)
 800b766:	481e      	ldr	r0, [pc, #120]	; (800b7e0 <__pow5mult+0xb0>)
 800b768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b76c:	f000 fdea 	bl	800c344 <__assert_func>
 800b770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b774:	6004      	str	r4, [r0, #0]
 800b776:	60c4      	str	r4, [r0, #12]
 800b778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b77c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b780:	b94c      	cbnz	r4, 800b796 <__pow5mult+0x66>
 800b782:	f240 2171 	movw	r1, #625	; 0x271
 800b786:	4630      	mov	r0, r6
 800b788:	f7ff ff12 	bl	800b5b0 <__i2b>
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b792:	4604      	mov	r4, r0
 800b794:	6003      	str	r3, [r0, #0]
 800b796:	f04f 0900 	mov.w	r9, #0
 800b79a:	07eb      	lsls	r3, r5, #31
 800b79c:	d50a      	bpl.n	800b7b4 <__pow5mult+0x84>
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7ff ff1a 	bl	800b5dc <__multiply>
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff fdfd 	bl	800b3ac <_Bfree>
 800b7b2:	4647      	mov	r7, r8
 800b7b4:	106d      	asrs	r5, r5, #1
 800b7b6:	d00b      	beq.n	800b7d0 <__pow5mult+0xa0>
 800b7b8:	6820      	ldr	r0, [r4, #0]
 800b7ba:	b938      	cbnz	r0, 800b7cc <__pow5mult+0x9c>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff ff0b 	bl	800b5dc <__multiply>
 800b7c6:	6020      	str	r0, [r4, #0]
 800b7c8:	f8c0 9000 	str.w	r9, [r0]
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	e7e4      	b.n	800b79a <__pow5mult+0x6a>
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800d328 	.word	0x0800d328
 800b7dc:	0800d076 	.word	0x0800d076
 800b7e0:	0800d1d8 	.word	0x0800d1d8

0800b7e4 <__lshift>:
 800b7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	6849      	ldr	r1, [r1, #4]
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	4691      	mov	r9, r2
 800b7f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7fc:	f108 0601 	add.w	r6, r8, #1
 800b800:	42b3      	cmp	r3, r6
 800b802:	db0b      	blt.n	800b81c <__lshift+0x38>
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff fd91 	bl	800b32c <_Balloc>
 800b80a:	4605      	mov	r5, r0
 800b80c:	b948      	cbnz	r0, 800b822 <__lshift+0x3e>
 800b80e:	4602      	mov	r2, r0
 800b810:	4b2a      	ldr	r3, [pc, #168]	; (800b8bc <__lshift+0xd8>)
 800b812:	482b      	ldr	r0, [pc, #172]	; (800b8c0 <__lshift+0xdc>)
 800b814:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b818:	f000 fd94 	bl	800c344 <__assert_func>
 800b81c:	3101      	adds	r1, #1
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	e7ee      	b.n	800b800 <__lshift+0x1c>
 800b822:	2300      	movs	r3, #0
 800b824:	f100 0114 	add.w	r1, r0, #20
 800b828:	f100 0210 	add.w	r2, r0, #16
 800b82c:	4618      	mov	r0, r3
 800b82e:	4553      	cmp	r3, sl
 800b830:	db37      	blt.n	800b8a2 <__lshift+0xbe>
 800b832:	6920      	ldr	r0, [r4, #16]
 800b834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b838:	f104 0314 	add.w	r3, r4, #20
 800b83c:	f019 091f 	ands.w	r9, r9, #31
 800b840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b848:	d02f      	beq.n	800b8aa <__lshift+0xc6>
 800b84a:	f1c9 0e20 	rsb	lr, r9, #32
 800b84e:	468a      	mov	sl, r1
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	fa02 f209 	lsl.w	r2, r2, r9
 800b85a:	ea42 020c 	orr.w	r2, r2, ip
 800b85e:	f84a 2b04 	str.w	r2, [sl], #4
 800b862:	f853 2b04 	ldr.w	r2, [r3], #4
 800b866:	4298      	cmp	r0, r3
 800b868:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b86c:	d8f2      	bhi.n	800b854 <__lshift+0x70>
 800b86e:	1b03      	subs	r3, r0, r4
 800b870:	3b15      	subs	r3, #21
 800b872:	f023 0303 	bic.w	r3, r3, #3
 800b876:	3304      	adds	r3, #4
 800b878:	f104 0215 	add.w	r2, r4, #21
 800b87c:	4290      	cmp	r0, r2
 800b87e:	bf38      	it	cc
 800b880:	2304      	movcc	r3, #4
 800b882:	f841 c003 	str.w	ip, [r1, r3]
 800b886:	f1bc 0f00 	cmp.w	ip, #0
 800b88a:	d001      	beq.n	800b890 <__lshift+0xac>
 800b88c:	f108 0602 	add.w	r6, r8, #2
 800b890:	3e01      	subs	r6, #1
 800b892:	4638      	mov	r0, r7
 800b894:	612e      	str	r6, [r5, #16]
 800b896:	4621      	mov	r1, r4
 800b898:	f7ff fd88 	bl	800b3ac <_Bfree>
 800b89c:	4628      	mov	r0, r5
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	e7c1      	b.n	800b82e <__lshift+0x4a>
 800b8aa:	3904      	subs	r1, #4
 800b8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8b4:	4298      	cmp	r0, r3
 800b8b6:	d8f9      	bhi.n	800b8ac <__lshift+0xc8>
 800b8b8:	e7ea      	b.n	800b890 <__lshift+0xac>
 800b8ba:	bf00      	nop
 800b8bc:	0800d0e8 	.word	0x0800d0e8
 800b8c0:	0800d1d8 	.word	0x0800d1d8

0800b8c4 <__mcmp>:
 800b8c4:	b530      	push	{r4, r5, lr}
 800b8c6:	6902      	ldr	r2, [r0, #16]
 800b8c8:	690c      	ldr	r4, [r1, #16]
 800b8ca:	1b12      	subs	r2, r2, r4
 800b8cc:	d10e      	bne.n	800b8ec <__mcmp+0x28>
 800b8ce:	f100 0314 	add.w	r3, r0, #20
 800b8d2:	3114      	adds	r1, #20
 800b8d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8e4:	42a5      	cmp	r5, r4
 800b8e6:	d003      	beq.n	800b8f0 <__mcmp+0x2c>
 800b8e8:	d305      	bcc.n	800b8f6 <__mcmp+0x32>
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	bd30      	pop	{r4, r5, pc}
 800b8f0:	4283      	cmp	r3, r0
 800b8f2:	d3f3      	bcc.n	800b8dc <__mcmp+0x18>
 800b8f4:	e7fa      	b.n	800b8ec <__mcmp+0x28>
 800b8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fa:	e7f7      	b.n	800b8ec <__mcmp+0x28>

0800b8fc <__mdiff>:
 800b8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b900:	460c      	mov	r4, r1
 800b902:	4606      	mov	r6, r0
 800b904:	4611      	mov	r1, r2
 800b906:	4620      	mov	r0, r4
 800b908:	4690      	mov	r8, r2
 800b90a:	f7ff ffdb 	bl	800b8c4 <__mcmp>
 800b90e:	1e05      	subs	r5, r0, #0
 800b910:	d110      	bne.n	800b934 <__mdiff+0x38>
 800b912:	4629      	mov	r1, r5
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff fd09 	bl	800b32c <_Balloc>
 800b91a:	b930      	cbnz	r0, 800b92a <__mdiff+0x2e>
 800b91c:	4b3a      	ldr	r3, [pc, #232]	; (800ba08 <__mdiff+0x10c>)
 800b91e:	4602      	mov	r2, r0
 800b920:	f240 2132 	movw	r1, #562	; 0x232
 800b924:	4839      	ldr	r0, [pc, #228]	; (800ba0c <__mdiff+0x110>)
 800b926:	f000 fd0d 	bl	800c344 <__assert_func>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	bfa4      	itt	ge
 800b936:	4643      	movge	r3, r8
 800b938:	46a0      	movge	r8, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b940:	bfa6      	itte	ge
 800b942:	461c      	movge	r4, r3
 800b944:	2500      	movge	r5, #0
 800b946:	2501      	movlt	r5, #1
 800b948:	f7ff fcf0 	bl	800b32c <_Balloc>
 800b94c:	b920      	cbnz	r0, 800b958 <__mdiff+0x5c>
 800b94e:	4b2e      	ldr	r3, [pc, #184]	; (800ba08 <__mdiff+0x10c>)
 800b950:	4602      	mov	r2, r0
 800b952:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b956:	e7e5      	b.n	800b924 <__mdiff+0x28>
 800b958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b95c:	6926      	ldr	r6, [r4, #16]
 800b95e:	60c5      	str	r5, [r0, #12]
 800b960:	f104 0914 	add.w	r9, r4, #20
 800b964:	f108 0514 	add.w	r5, r8, #20
 800b968:	f100 0e14 	add.w	lr, r0, #20
 800b96c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b974:	f108 0210 	add.w	r2, r8, #16
 800b978:	46f2      	mov	sl, lr
 800b97a:	2100      	movs	r1, #0
 800b97c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b984:	fa1f f883 	uxth.w	r8, r3
 800b988:	fa11 f18b 	uxtah	r1, r1, fp
 800b98c:	0c1b      	lsrs	r3, r3, #16
 800b98e:	eba1 0808 	sub.w	r8, r1, r8
 800b992:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b996:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b99a:	fa1f f888 	uxth.w	r8, r8
 800b99e:	1419      	asrs	r1, r3, #16
 800b9a0:	454e      	cmp	r6, r9
 800b9a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b9aa:	d8e7      	bhi.n	800b97c <__mdiff+0x80>
 800b9ac:	1b33      	subs	r3, r6, r4
 800b9ae:	3b15      	subs	r3, #21
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	3415      	adds	r4, #21
 800b9b8:	42a6      	cmp	r6, r4
 800b9ba:	bf38      	it	cc
 800b9bc:	2304      	movcc	r3, #4
 800b9be:	441d      	add	r5, r3
 800b9c0:	4473      	add	r3, lr
 800b9c2:	469e      	mov	lr, r3
 800b9c4:	462e      	mov	r6, r5
 800b9c6:	4566      	cmp	r6, ip
 800b9c8:	d30e      	bcc.n	800b9e8 <__mdiff+0xec>
 800b9ca:	f10c 0203 	add.w	r2, ip, #3
 800b9ce:	1b52      	subs	r2, r2, r5
 800b9d0:	f022 0203 	bic.w	r2, r2, #3
 800b9d4:	3d03      	subs	r5, #3
 800b9d6:	45ac      	cmp	ip, r5
 800b9d8:	bf38      	it	cc
 800b9da:	2200      	movcc	r2, #0
 800b9dc:	441a      	add	r2, r3
 800b9de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9e2:	b17b      	cbz	r3, 800ba04 <__mdiff+0x108>
 800b9e4:	6107      	str	r7, [r0, #16]
 800b9e6:	e7a3      	b.n	800b930 <__mdiff+0x34>
 800b9e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9ec:	fa11 f288 	uxtah	r2, r1, r8
 800b9f0:	1414      	asrs	r4, r2, #16
 800b9f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9f6:	b292      	uxth	r2, r2
 800b9f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9fc:	f84e 2b04 	str.w	r2, [lr], #4
 800ba00:	1421      	asrs	r1, r4, #16
 800ba02:	e7e0      	b.n	800b9c6 <__mdiff+0xca>
 800ba04:	3f01      	subs	r7, #1
 800ba06:	e7ea      	b.n	800b9de <__mdiff+0xe2>
 800ba08:	0800d0e8 	.word	0x0800d0e8
 800ba0c:	0800d1d8 	.word	0x0800d1d8

0800ba10 <__ulp>:
 800ba10:	b082      	sub	sp, #8
 800ba12:	ed8d 0b00 	vstr	d0, [sp]
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	4912      	ldr	r1, [pc, #72]	; (800ba64 <__ulp+0x54>)
 800ba1a:	4019      	ands	r1, r3
 800ba1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ba20:	2900      	cmp	r1, #0
 800ba22:	dd05      	ble.n	800ba30 <__ulp+0x20>
 800ba24:	2200      	movs	r2, #0
 800ba26:	460b      	mov	r3, r1
 800ba28:	ec43 2b10 	vmov	d0, r2, r3
 800ba2c:	b002      	add	sp, #8
 800ba2e:	4770      	bx	lr
 800ba30:	4249      	negs	r1, r1
 800ba32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ba36:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	f04f 0300 	mov.w	r3, #0
 800ba42:	da04      	bge.n	800ba4e <__ulp+0x3e>
 800ba44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ba48:	fa41 f300 	asr.w	r3, r1, r0
 800ba4c:	e7ec      	b.n	800ba28 <__ulp+0x18>
 800ba4e:	f1a0 0114 	sub.w	r1, r0, #20
 800ba52:	291e      	cmp	r1, #30
 800ba54:	bfda      	itte	le
 800ba56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ba5a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ba5e:	2101      	movgt	r1, #1
 800ba60:	460a      	mov	r2, r1
 800ba62:	e7e1      	b.n	800ba28 <__ulp+0x18>
 800ba64:	7ff00000 	.word	0x7ff00000

0800ba68 <__b2d>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	6905      	ldr	r5, [r0, #16]
 800ba6c:	f100 0714 	add.w	r7, r0, #20
 800ba70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba74:	1f2e      	subs	r6, r5, #4
 800ba76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff fd48 	bl	800b510 <__hi0bits>
 800ba80:	f1c0 0320 	rsb	r3, r0, #32
 800ba84:	280a      	cmp	r0, #10
 800ba86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bb04 <__b2d+0x9c>
 800ba8a:	600b      	str	r3, [r1, #0]
 800ba8c:	dc14      	bgt.n	800bab8 <__b2d+0x50>
 800ba8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba92:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba96:	42b7      	cmp	r7, r6
 800ba98:	ea41 030c 	orr.w	r3, r1, ip
 800ba9c:	bf34      	ite	cc
 800ba9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800baa2:	2100      	movcs	r1, #0
 800baa4:	3015      	adds	r0, #21
 800baa6:	fa04 f000 	lsl.w	r0, r4, r0
 800baaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800baae:	ea40 0201 	orr.w	r2, r0, r1
 800bab2:	ec43 2b10 	vmov	d0, r2, r3
 800bab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab8:	42b7      	cmp	r7, r6
 800baba:	bf3a      	itte	cc
 800babc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bac0:	f1a5 0608 	subcc.w	r6, r5, #8
 800bac4:	2100      	movcs	r1, #0
 800bac6:	380b      	subs	r0, #11
 800bac8:	d017      	beq.n	800bafa <__b2d+0x92>
 800baca:	f1c0 0c20 	rsb	ip, r0, #32
 800bace:	fa04 f500 	lsl.w	r5, r4, r0
 800bad2:	42be      	cmp	r6, r7
 800bad4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bad8:	ea45 0504 	orr.w	r5, r5, r4
 800badc:	bf8c      	ite	hi
 800bade:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bae2:	2400      	movls	r4, #0
 800bae4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bae8:	fa01 f000 	lsl.w	r0, r1, r0
 800baec:	fa24 f40c 	lsr.w	r4, r4, ip
 800baf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800baf4:	ea40 0204 	orr.w	r2, r0, r4
 800baf8:	e7db      	b.n	800bab2 <__b2d+0x4a>
 800bafa:	ea44 030c 	orr.w	r3, r4, ip
 800bafe:	460a      	mov	r2, r1
 800bb00:	e7d7      	b.n	800bab2 <__b2d+0x4a>
 800bb02:	bf00      	nop
 800bb04:	3ff00000 	.word	0x3ff00000

0800bb08 <__d2b>:
 800bb08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	4689      	mov	r9, r1
 800bb0e:	2101      	movs	r1, #1
 800bb10:	ec57 6b10 	vmov	r6, r7, d0
 800bb14:	4690      	mov	r8, r2
 800bb16:	f7ff fc09 	bl	800b32c <_Balloc>
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	b930      	cbnz	r0, 800bb2c <__d2b+0x24>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	4b25      	ldr	r3, [pc, #148]	; (800bbb8 <__d2b+0xb0>)
 800bb22:	4826      	ldr	r0, [pc, #152]	; (800bbbc <__d2b+0xb4>)
 800bb24:	f240 310a 	movw	r1, #778	; 0x30a
 800bb28:	f000 fc0c 	bl	800c344 <__assert_func>
 800bb2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb34:	bb35      	cbnz	r5, 800bb84 <__d2b+0x7c>
 800bb36:	2e00      	cmp	r6, #0
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	d028      	beq.n	800bb8e <__d2b+0x86>
 800bb3c:	4668      	mov	r0, sp
 800bb3e:	9600      	str	r6, [sp, #0]
 800bb40:	f7ff fd06 	bl	800b550 <__lo0bits>
 800bb44:	9900      	ldr	r1, [sp, #0]
 800bb46:	b300      	cbz	r0, 800bb8a <__d2b+0x82>
 800bb48:	9a01      	ldr	r2, [sp, #4]
 800bb4a:	f1c0 0320 	rsb	r3, r0, #32
 800bb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb52:	430b      	orrs	r3, r1
 800bb54:	40c2      	lsrs	r2, r0
 800bb56:	6163      	str	r3, [r4, #20]
 800bb58:	9201      	str	r2, [sp, #4]
 800bb5a:	9b01      	ldr	r3, [sp, #4]
 800bb5c:	61a3      	str	r3, [r4, #24]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	bf14      	ite	ne
 800bb62:	2202      	movne	r2, #2
 800bb64:	2201      	moveq	r2, #1
 800bb66:	6122      	str	r2, [r4, #16]
 800bb68:	b1d5      	cbz	r5, 800bba0 <__d2b+0x98>
 800bb6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb6e:	4405      	add	r5, r0
 800bb70:	f8c9 5000 	str.w	r5, [r9]
 800bb74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb78:	f8c8 0000 	str.w	r0, [r8]
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	b003      	add	sp, #12
 800bb80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb88:	e7d5      	b.n	800bb36 <__d2b+0x2e>
 800bb8a:	6161      	str	r1, [r4, #20]
 800bb8c:	e7e5      	b.n	800bb5a <__d2b+0x52>
 800bb8e:	a801      	add	r0, sp, #4
 800bb90:	f7ff fcde 	bl	800b550 <__lo0bits>
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	6163      	str	r3, [r4, #20]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	6122      	str	r2, [r4, #16]
 800bb9c:	3020      	adds	r0, #32
 800bb9e:	e7e3      	b.n	800bb68 <__d2b+0x60>
 800bba0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bba4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bba8:	f8c9 0000 	str.w	r0, [r9]
 800bbac:	6918      	ldr	r0, [r3, #16]
 800bbae:	f7ff fcaf 	bl	800b510 <__hi0bits>
 800bbb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbb6:	e7df      	b.n	800bb78 <__d2b+0x70>
 800bbb8:	0800d0e8 	.word	0x0800d0e8
 800bbbc:	0800d1d8 	.word	0x0800d1d8

0800bbc0 <__ratio>:
 800bbc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	4688      	mov	r8, r1
 800bbc6:	4669      	mov	r1, sp
 800bbc8:	4681      	mov	r9, r0
 800bbca:	f7ff ff4d 	bl	800ba68 <__b2d>
 800bbce:	a901      	add	r1, sp, #4
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	ec55 4b10 	vmov	r4, r5, d0
 800bbd6:	f7ff ff47 	bl	800ba68 <__b2d>
 800bbda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbe2:	eba3 0c02 	sub.w	ip, r3, r2
 800bbe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbf0:	ec51 0b10 	vmov	r0, r1, d0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bfd6      	itet	le
 800bbf8:	460a      	movle	r2, r1
 800bbfa:	462a      	movgt	r2, r5
 800bbfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc00:	468b      	mov	fp, r1
 800bc02:	462f      	mov	r7, r5
 800bc04:	bfd4      	ite	le
 800bc06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc0e:	4620      	mov	r0, r4
 800bc10:	ee10 2a10 	vmov	r2, s0
 800bc14:	465b      	mov	r3, fp
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 fe18 	bl	800084c <__aeabi_ddiv>
 800bc1c:	ec41 0b10 	vmov	d0, r0, r1
 800bc20:	b003      	add	sp, #12
 800bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc26 <__copybits>:
 800bc26:	3901      	subs	r1, #1
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	1149      	asrs	r1, r1, #5
 800bc2c:	6914      	ldr	r4, [r2, #16]
 800bc2e:	3101      	adds	r1, #1
 800bc30:	f102 0314 	add.w	r3, r2, #20
 800bc34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc3c:	1f05      	subs	r5, r0, #4
 800bc3e:	42a3      	cmp	r3, r4
 800bc40:	d30c      	bcc.n	800bc5c <__copybits+0x36>
 800bc42:	1aa3      	subs	r3, r4, r2
 800bc44:	3b11      	subs	r3, #17
 800bc46:	f023 0303 	bic.w	r3, r3, #3
 800bc4a:	3211      	adds	r2, #17
 800bc4c:	42a2      	cmp	r2, r4
 800bc4e:	bf88      	it	hi
 800bc50:	2300      	movhi	r3, #0
 800bc52:	4418      	add	r0, r3
 800bc54:	2300      	movs	r3, #0
 800bc56:	4288      	cmp	r0, r1
 800bc58:	d305      	bcc.n	800bc66 <__copybits+0x40>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc60:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc64:	e7eb      	b.n	800bc3e <__copybits+0x18>
 800bc66:	f840 3b04 	str.w	r3, [r0], #4
 800bc6a:	e7f4      	b.n	800bc56 <__copybits+0x30>

0800bc6c <__any_on>:
 800bc6c:	f100 0214 	add.w	r2, r0, #20
 800bc70:	6900      	ldr	r0, [r0, #16]
 800bc72:	114b      	asrs	r3, r1, #5
 800bc74:	4298      	cmp	r0, r3
 800bc76:	b510      	push	{r4, lr}
 800bc78:	db11      	blt.n	800bc9e <__any_on+0x32>
 800bc7a:	dd0a      	ble.n	800bc92 <__any_on+0x26>
 800bc7c:	f011 011f 	ands.w	r1, r1, #31
 800bc80:	d007      	beq.n	800bc92 <__any_on+0x26>
 800bc82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc86:	fa24 f001 	lsr.w	r0, r4, r1
 800bc8a:	fa00 f101 	lsl.w	r1, r0, r1
 800bc8e:	428c      	cmp	r4, r1
 800bc90:	d10b      	bne.n	800bcaa <__any_on+0x3e>
 800bc92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d803      	bhi.n	800bca2 <__any_on+0x36>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	bd10      	pop	{r4, pc}
 800bc9e:	4603      	mov	r3, r0
 800bca0:	e7f7      	b.n	800bc92 <__any_on+0x26>
 800bca2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bca6:	2900      	cmp	r1, #0
 800bca8:	d0f5      	beq.n	800bc96 <__any_on+0x2a>
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7f6      	b.n	800bc9c <__any_on+0x30>

0800bcae <_calloc_r>:
 800bcae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcb0:	fba1 2402 	umull	r2, r4, r1, r2
 800bcb4:	b94c      	cbnz	r4, 800bcca <_calloc_r+0x1c>
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	9201      	str	r2, [sp, #4]
 800bcba:	f7fb ffef 	bl	8007c9c <_malloc_r>
 800bcbe:	9a01      	ldr	r2, [sp, #4]
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	b930      	cbnz	r0, 800bcd2 <_calloc_r+0x24>
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	b003      	add	sp, #12
 800bcc8:	bd30      	pop	{r4, r5, pc}
 800bcca:	220c      	movs	r2, #12
 800bccc:	6002      	str	r2, [r0, #0]
 800bcce:	2500      	movs	r5, #0
 800bcd0:	e7f8      	b.n	800bcc4 <_calloc_r+0x16>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	f7fb ff6e 	bl	8007bb4 <memset>
 800bcd8:	e7f4      	b.n	800bcc4 <_calloc_r+0x16>

0800bcda <__ssputs_r>:
 800bcda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcde:	688e      	ldr	r6, [r1, #8]
 800bce0:	429e      	cmp	r6, r3
 800bce2:	4682      	mov	sl, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	4690      	mov	r8, r2
 800bce8:	461f      	mov	r7, r3
 800bcea:	d838      	bhi.n	800bd5e <__ssputs_r+0x84>
 800bcec:	898a      	ldrh	r2, [r1, #12]
 800bcee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcf2:	d032      	beq.n	800bd5a <__ssputs_r+0x80>
 800bcf4:	6825      	ldr	r5, [r4, #0]
 800bcf6:	6909      	ldr	r1, [r1, #16]
 800bcf8:	eba5 0901 	sub.w	r9, r5, r1
 800bcfc:	6965      	ldr	r5, [r4, #20]
 800bcfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd06:	3301      	adds	r3, #1
 800bd08:	444b      	add	r3, r9
 800bd0a:	106d      	asrs	r5, r5, #1
 800bd0c:	429d      	cmp	r5, r3
 800bd0e:	bf38      	it	cc
 800bd10:	461d      	movcc	r5, r3
 800bd12:	0553      	lsls	r3, r2, #21
 800bd14:	d531      	bpl.n	800bd7a <__ssputs_r+0xa0>
 800bd16:	4629      	mov	r1, r5
 800bd18:	f7fb ffc0 	bl	8007c9c <_malloc_r>
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	b950      	cbnz	r0, 800bd36 <__ssputs_r+0x5c>
 800bd20:	230c      	movs	r3, #12
 800bd22:	f8ca 3000 	str.w	r3, [sl]
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd36:	6921      	ldr	r1, [r4, #16]
 800bd38:	464a      	mov	r2, r9
 800bd3a:	f7fb ff2d 	bl	8007b98 <memcpy>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	6126      	str	r6, [r4, #16]
 800bd4c:	6165      	str	r5, [r4, #20]
 800bd4e:	444e      	add	r6, r9
 800bd50:	eba5 0509 	sub.w	r5, r5, r9
 800bd54:	6026      	str	r6, [r4, #0]
 800bd56:	60a5      	str	r5, [r4, #8]
 800bd58:	463e      	mov	r6, r7
 800bd5a:	42be      	cmp	r6, r7
 800bd5c:	d900      	bls.n	800bd60 <__ssputs_r+0x86>
 800bd5e:	463e      	mov	r6, r7
 800bd60:	6820      	ldr	r0, [r4, #0]
 800bd62:	4632      	mov	r2, r6
 800bd64:	4641      	mov	r1, r8
 800bd66:	f000 fb61 	bl	800c42c <memmove>
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	1b9b      	subs	r3, r3, r6
 800bd6e:	60a3      	str	r3, [r4, #8]
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	4433      	add	r3, r6
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	2000      	movs	r0, #0
 800bd78:	e7db      	b.n	800bd32 <__ssputs_r+0x58>
 800bd7a:	462a      	mov	r2, r5
 800bd7c:	f000 fb70 	bl	800c460 <_realloc_r>
 800bd80:	4606      	mov	r6, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d1e1      	bne.n	800bd4a <__ssputs_r+0x70>
 800bd86:	6921      	ldr	r1, [r4, #16]
 800bd88:	4650      	mov	r0, sl
 800bd8a:	f7fb ff1b 	bl	8007bc4 <_free_r>
 800bd8e:	e7c7      	b.n	800bd20 <__ssputs_r+0x46>

0800bd90 <_svfiprintf_r>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	4698      	mov	r8, r3
 800bd96:	898b      	ldrh	r3, [r1, #12]
 800bd98:	061b      	lsls	r3, r3, #24
 800bd9a:	b09d      	sub	sp, #116	; 0x74
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	460d      	mov	r5, r1
 800bda0:	4614      	mov	r4, r2
 800bda2:	d50e      	bpl.n	800bdc2 <_svfiprintf_r+0x32>
 800bda4:	690b      	ldr	r3, [r1, #16]
 800bda6:	b963      	cbnz	r3, 800bdc2 <_svfiprintf_r+0x32>
 800bda8:	2140      	movs	r1, #64	; 0x40
 800bdaa:	f7fb ff77 	bl	8007c9c <_malloc_r>
 800bdae:	6028      	str	r0, [r5, #0]
 800bdb0:	6128      	str	r0, [r5, #16]
 800bdb2:	b920      	cbnz	r0, 800bdbe <_svfiprintf_r+0x2e>
 800bdb4:	230c      	movs	r3, #12
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	e0d1      	b.n	800bf62 <_svfiprintf_r+0x1d2>
 800bdbe:	2340      	movs	r3, #64	; 0x40
 800bdc0:	616b      	str	r3, [r5, #20]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc6:	2320      	movs	r3, #32
 800bdc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdd0:	2330      	movs	r3, #48	; 0x30
 800bdd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf7c <_svfiprintf_r+0x1ec>
 800bdd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdda:	f04f 0901 	mov.w	r9, #1
 800bdde:	4623      	mov	r3, r4
 800bde0:	469a      	mov	sl, r3
 800bde2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bde6:	b10a      	cbz	r2, 800bdec <_svfiprintf_r+0x5c>
 800bde8:	2a25      	cmp	r2, #37	; 0x25
 800bdea:	d1f9      	bne.n	800bde0 <_svfiprintf_r+0x50>
 800bdec:	ebba 0b04 	subs.w	fp, sl, r4
 800bdf0:	d00b      	beq.n	800be0a <_svfiprintf_r+0x7a>
 800bdf2:	465b      	mov	r3, fp
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	f7ff ff6e 	bl	800bcda <__ssputs_r>
 800bdfe:	3001      	adds	r0, #1
 800be00:	f000 80aa 	beq.w	800bf58 <_svfiprintf_r+0x1c8>
 800be04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be06:	445a      	add	r2, fp
 800be08:	9209      	str	r2, [sp, #36]	; 0x24
 800be0a:	f89a 3000 	ldrb.w	r3, [sl]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 80a2 	beq.w	800bf58 <_svfiprintf_r+0x1c8>
 800be14:	2300      	movs	r3, #0
 800be16:	f04f 32ff 	mov.w	r2, #4294967295
 800be1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be1e:	f10a 0a01 	add.w	sl, sl, #1
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	9307      	str	r3, [sp, #28]
 800be26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be2a:	931a      	str	r3, [sp, #104]	; 0x68
 800be2c:	4654      	mov	r4, sl
 800be2e:	2205      	movs	r2, #5
 800be30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be34:	4851      	ldr	r0, [pc, #324]	; (800bf7c <_svfiprintf_r+0x1ec>)
 800be36:	f7f4 f9d3 	bl	80001e0 <memchr>
 800be3a:	9a04      	ldr	r2, [sp, #16]
 800be3c:	b9d8      	cbnz	r0, 800be76 <_svfiprintf_r+0xe6>
 800be3e:	06d0      	lsls	r0, r2, #27
 800be40:	bf44      	itt	mi
 800be42:	2320      	movmi	r3, #32
 800be44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be48:	0711      	lsls	r1, r2, #28
 800be4a:	bf44      	itt	mi
 800be4c:	232b      	movmi	r3, #43	; 0x2b
 800be4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be52:	f89a 3000 	ldrb.w	r3, [sl]
 800be56:	2b2a      	cmp	r3, #42	; 0x2a
 800be58:	d015      	beq.n	800be86 <_svfiprintf_r+0xf6>
 800be5a:	9a07      	ldr	r2, [sp, #28]
 800be5c:	4654      	mov	r4, sl
 800be5e:	2000      	movs	r0, #0
 800be60:	f04f 0c0a 	mov.w	ip, #10
 800be64:	4621      	mov	r1, r4
 800be66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be6a:	3b30      	subs	r3, #48	; 0x30
 800be6c:	2b09      	cmp	r3, #9
 800be6e:	d94e      	bls.n	800bf0e <_svfiprintf_r+0x17e>
 800be70:	b1b0      	cbz	r0, 800bea0 <_svfiprintf_r+0x110>
 800be72:	9207      	str	r2, [sp, #28]
 800be74:	e014      	b.n	800bea0 <_svfiprintf_r+0x110>
 800be76:	eba0 0308 	sub.w	r3, r0, r8
 800be7a:	fa09 f303 	lsl.w	r3, r9, r3
 800be7e:	4313      	orrs	r3, r2
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	46a2      	mov	sl, r4
 800be84:	e7d2      	b.n	800be2c <_svfiprintf_r+0x9c>
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	1d19      	adds	r1, r3, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	9103      	str	r1, [sp, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfbb      	ittet	lt
 800be92:	425b      	neglt	r3, r3
 800be94:	f042 0202 	orrlt.w	r2, r2, #2
 800be98:	9307      	strge	r3, [sp, #28]
 800be9a:	9307      	strlt	r3, [sp, #28]
 800be9c:	bfb8      	it	lt
 800be9e:	9204      	strlt	r2, [sp, #16]
 800bea0:	7823      	ldrb	r3, [r4, #0]
 800bea2:	2b2e      	cmp	r3, #46	; 0x2e
 800bea4:	d10c      	bne.n	800bec0 <_svfiprintf_r+0x130>
 800bea6:	7863      	ldrb	r3, [r4, #1]
 800bea8:	2b2a      	cmp	r3, #42	; 0x2a
 800beaa:	d135      	bne.n	800bf18 <_svfiprintf_r+0x188>
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	1d1a      	adds	r2, r3, #4
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	9203      	str	r2, [sp, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bfb8      	it	lt
 800beb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bebc:	3402      	adds	r4, #2
 800bebe:	9305      	str	r3, [sp, #20]
 800bec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf8c <_svfiprintf_r+0x1fc>
 800bec4:	7821      	ldrb	r1, [r4, #0]
 800bec6:	2203      	movs	r2, #3
 800bec8:	4650      	mov	r0, sl
 800beca:	f7f4 f989 	bl	80001e0 <memchr>
 800bece:	b140      	cbz	r0, 800bee2 <_svfiprintf_r+0x152>
 800bed0:	2340      	movs	r3, #64	; 0x40
 800bed2:	eba0 000a 	sub.w	r0, r0, sl
 800bed6:	fa03 f000 	lsl.w	r0, r3, r0
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	4303      	orrs	r3, r0
 800bede:	3401      	adds	r4, #1
 800bee0:	9304      	str	r3, [sp, #16]
 800bee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee6:	4826      	ldr	r0, [pc, #152]	; (800bf80 <_svfiprintf_r+0x1f0>)
 800bee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800beec:	2206      	movs	r2, #6
 800beee:	f7f4 f977 	bl	80001e0 <memchr>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d038      	beq.n	800bf68 <_svfiprintf_r+0x1d8>
 800bef6:	4b23      	ldr	r3, [pc, #140]	; (800bf84 <_svfiprintf_r+0x1f4>)
 800bef8:	bb1b      	cbnz	r3, 800bf42 <_svfiprintf_r+0x1b2>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	3307      	adds	r3, #7
 800befe:	f023 0307 	bic.w	r3, r3, #7
 800bf02:	3308      	adds	r3, #8
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf08:	4433      	add	r3, r6
 800bf0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0c:	e767      	b.n	800bdde <_svfiprintf_r+0x4e>
 800bf0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf12:	460c      	mov	r4, r1
 800bf14:	2001      	movs	r0, #1
 800bf16:	e7a5      	b.n	800be64 <_svfiprintf_r+0xd4>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	3401      	adds	r4, #1
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f04f 0c0a 	mov.w	ip, #10
 800bf24:	4620      	mov	r0, r4
 800bf26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf2a:	3a30      	subs	r2, #48	; 0x30
 800bf2c:	2a09      	cmp	r2, #9
 800bf2e:	d903      	bls.n	800bf38 <_svfiprintf_r+0x1a8>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d0c5      	beq.n	800bec0 <_svfiprintf_r+0x130>
 800bf34:	9105      	str	r1, [sp, #20]
 800bf36:	e7c3      	b.n	800bec0 <_svfiprintf_r+0x130>
 800bf38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e7f0      	b.n	800bf24 <_svfiprintf_r+0x194>
 800bf42:	ab03      	add	r3, sp, #12
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	462a      	mov	r2, r5
 800bf48:	4b0f      	ldr	r3, [pc, #60]	; (800bf88 <_svfiprintf_r+0x1f8>)
 800bf4a:	a904      	add	r1, sp, #16
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	f7fb ffb9 	bl	8007ec4 <_printf_float>
 800bf52:	1c42      	adds	r2, r0, #1
 800bf54:	4606      	mov	r6, r0
 800bf56:	d1d6      	bne.n	800bf06 <_svfiprintf_r+0x176>
 800bf58:	89ab      	ldrh	r3, [r5, #12]
 800bf5a:	065b      	lsls	r3, r3, #25
 800bf5c:	f53f af2c 	bmi.w	800bdb8 <_svfiprintf_r+0x28>
 800bf60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf62:	b01d      	add	sp, #116	; 0x74
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	ab03      	add	r3, sp, #12
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <_svfiprintf_r+0x1f8>)
 800bf70:	a904      	add	r1, sp, #16
 800bf72:	4638      	mov	r0, r7
 800bf74:	f7fc fa4a 	bl	800840c <_printf_i>
 800bf78:	e7eb      	b.n	800bf52 <_svfiprintf_r+0x1c2>
 800bf7a:	bf00      	nop
 800bf7c:	0800d334 	.word	0x0800d334
 800bf80:	0800d33e 	.word	0x0800d33e
 800bf84:	08007ec5 	.word	0x08007ec5
 800bf88:	0800bcdb 	.word	0x0800bcdb
 800bf8c:	0800d33a 	.word	0x0800d33a

0800bf90 <__sfputc_r>:
 800bf90:	6893      	ldr	r3, [r2, #8]
 800bf92:	3b01      	subs	r3, #1
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	b410      	push	{r4}
 800bf98:	6093      	str	r3, [r2, #8]
 800bf9a:	da08      	bge.n	800bfae <__sfputc_r+0x1e>
 800bf9c:	6994      	ldr	r4, [r2, #24]
 800bf9e:	42a3      	cmp	r3, r4
 800bfa0:	db01      	blt.n	800bfa6 <__sfputc_r+0x16>
 800bfa2:	290a      	cmp	r1, #10
 800bfa4:	d103      	bne.n	800bfae <__sfputc_r+0x1e>
 800bfa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfaa:	f7fd bcd5 	b.w	8009958 <__swbuf_r>
 800bfae:	6813      	ldr	r3, [r2, #0]
 800bfb0:	1c58      	adds	r0, r3, #1
 800bfb2:	6010      	str	r0, [r2, #0]
 800bfb4:	7019      	strb	r1, [r3, #0]
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <__sfputs_r>:
 800bfbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	18d5      	adds	r5, r2, r3
 800bfc8:	42ac      	cmp	r4, r5
 800bfca:	d101      	bne.n	800bfd0 <__sfputs_r+0x12>
 800bfcc:	2000      	movs	r0, #0
 800bfce:	e007      	b.n	800bfe0 <__sfputs_r+0x22>
 800bfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd4:	463a      	mov	r2, r7
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ffda 	bl	800bf90 <__sfputc_r>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d1f3      	bne.n	800bfc8 <__sfputs_r+0xa>
 800bfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfe4 <_vfiprintf_r>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	460d      	mov	r5, r1
 800bfea:	b09d      	sub	sp, #116	; 0x74
 800bfec:	4614      	mov	r4, r2
 800bfee:	4698      	mov	r8, r3
 800bff0:	4606      	mov	r6, r0
 800bff2:	b118      	cbz	r0, 800bffc <_vfiprintf_r+0x18>
 800bff4:	6983      	ldr	r3, [r0, #24]
 800bff6:	b90b      	cbnz	r3, 800bffc <_vfiprintf_r+0x18>
 800bff8:	f7fe fd02 	bl	800aa00 <__sinit>
 800bffc:	4b89      	ldr	r3, [pc, #548]	; (800c224 <_vfiprintf_r+0x240>)
 800bffe:	429d      	cmp	r5, r3
 800c000:	d11b      	bne.n	800c03a <_vfiprintf_r+0x56>
 800c002:	6875      	ldr	r5, [r6, #4]
 800c004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c006:	07d9      	lsls	r1, r3, #31
 800c008:	d405      	bmi.n	800c016 <_vfiprintf_r+0x32>
 800c00a:	89ab      	ldrh	r3, [r5, #12]
 800c00c:	059a      	lsls	r2, r3, #22
 800c00e:	d402      	bmi.n	800c016 <_vfiprintf_r+0x32>
 800c010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c012:	f7ff f906 	bl	800b222 <__retarget_lock_acquire_recursive>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	071b      	lsls	r3, r3, #28
 800c01a:	d501      	bpl.n	800c020 <_vfiprintf_r+0x3c>
 800c01c:	692b      	ldr	r3, [r5, #16]
 800c01e:	b9eb      	cbnz	r3, 800c05c <_vfiprintf_r+0x78>
 800c020:	4629      	mov	r1, r5
 800c022:	4630      	mov	r0, r6
 800c024:	f7fd fcea 	bl	80099fc <__swsetup_r>
 800c028:	b1c0      	cbz	r0, 800c05c <_vfiprintf_r+0x78>
 800c02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02c:	07dc      	lsls	r4, r3, #31
 800c02e:	d50e      	bpl.n	800c04e <_vfiprintf_r+0x6a>
 800c030:	f04f 30ff 	mov.w	r0, #4294967295
 800c034:	b01d      	add	sp, #116	; 0x74
 800c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03a:	4b7b      	ldr	r3, [pc, #492]	; (800c228 <_vfiprintf_r+0x244>)
 800c03c:	429d      	cmp	r5, r3
 800c03e:	d101      	bne.n	800c044 <_vfiprintf_r+0x60>
 800c040:	68b5      	ldr	r5, [r6, #8]
 800c042:	e7df      	b.n	800c004 <_vfiprintf_r+0x20>
 800c044:	4b79      	ldr	r3, [pc, #484]	; (800c22c <_vfiprintf_r+0x248>)
 800c046:	429d      	cmp	r5, r3
 800c048:	bf08      	it	eq
 800c04a:	68f5      	ldreq	r5, [r6, #12]
 800c04c:	e7da      	b.n	800c004 <_vfiprintf_r+0x20>
 800c04e:	89ab      	ldrh	r3, [r5, #12]
 800c050:	0598      	lsls	r0, r3, #22
 800c052:	d4ed      	bmi.n	800c030 <_vfiprintf_r+0x4c>
 800c054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c056:	f7ff f8e5 	bl	800b224 <__retarget_lock_release_recursive>
 800c05a:	e7e9      	b.n	800c030 <_vfiprintf_r+0x4c>
 800c05c:	2300      	movs	r3, #0
 800c05e:	9309      	str	r3, [sp, #36]	; 0x24
 800c060:	2320      	movs	r3, #32
 800c062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c066:	f8cd 800c 	str.w	r8, [sp, #12]
 800c06a:	2330      	movs	r3, #48	; 0x30
 800c06c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c230 <_vfiprintf_r+0x24c>
 800c070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c074:	f04f 0901 	mov.w	r9, #1
 800c078:	4623      	mov	r3, r4
 800c07a:	469a      	mov	sl, r3
 800c07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c080:	b10a      	cbz	r2, 800c086 <_vfiprintf_r+0xa2>
 800c082:	2a25      	cmp	r2, #37	; 0x25
 800c084:	d1f9      	bne.n	800c07a <_vfiprintf_r+0x96>
 800c086:	ebba 0b04 	subs.w	fp, sl, r4
 800c08a:	d00b      	beq.n	800c0a4 <_vfiprintf_r+0xc0>
 800c08c:	465b      	mov	r3, fp
 800c08e:	4622      	mov	r2, r4
 800c090:	4629      	mov	r1, r5
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff ff93 	bl	800bfbe <__sfputs_r>
 800c098:	3001      	adds	r0, #1
 800c09a:	f000 80aa 	beq.w	800c1f2 <_vfiprintf_r+0x20e>
 800c09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a0:	445a      	add	r2, fp
 800c0a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 80a2 	beq.w	800c1f2 <_vfiprintf_r+0x20e>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b8:	f10a 0a01 	add.w	sl, sl, #1
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	9307      	str	r3, [sp, #28]
 800c0c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c0c6:	4654      	mov	r4, sl
 800c0c8:	2205      	movs	r2, #5
 800c0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ce:	4858      	ldr	r0, [pc, #352]	; (800c230 <_vfiprintf_r+0x24c>)
 800c0d0:	f7f4 f886 	bl	80001e0 <memchr>
 800c0d4:	9a04      	ldr	r2, [sp, #16]
 800c0d6:	b9d8      	cbnz	r0, 800c110 <_vfiprintf_r+0x12c>
 800c0d8:	06d1      	lsls	r1, r2, #27
 800c0da:	bf44      	itt	mi
 800c0dc:	2320      	movmi	r3, #32
 800c0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e2:	0713      	lsls	r3, r2, #28
 800c0e4:	bf44      	itt	mi
 800c0e6:	232b      	movmi	r3, #43	; 0x2b
 800c0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f2:	d015      	beq.n	800c120 <_vfiprintf_r+0x13c>
 800c0f4:	9a07      	ldr	r2, [sp, #28]
 800c0f6:	4654      	mov	r4, sl
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	f04f 0c0a 	mov.w	ip, #10
 800c0fe:	4621      	mov	r1, r4
 800c100:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c104:	3b30      	subs	r3, #48	; 0x30
 800c106:	2b09      	cmp	r3, #9
 800c108:	d94e      	bls.n	800c1a8 <_vfiprintf_r+0x1c4>
 800c10a:	b1b0      	cbz	r0, 800c13a <_vfiprintf_r+0x156>
 800c10c:	9207      	str	r2, [sp, #28]
 800c10e:	e014      	b.n	800c13a <_vfiprintf_r+0x156>
 800c110:	eba0 0308 	sub.w	r3, r0, r8
 800c114:	fa09 f303 	lsl.w	r3, r9, r3
 800c118:	4313      	orrs	r3, r2
 800c11a:	9304      	str	r3, [sp, #16]
 800c11c:	46a2      	mov	sl, r4
 800c11e:	e7d2      	b.n	800c0c6 <_vfiprintf_r+0xe2>
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	1d19      	adds	r1, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	9103      	str	r1, [sp, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	bfbb      	ittet	lt
 800c12c:	425b      	neglt	r3, r3
 800c12e:	f042 0202 	orrlt.w	r2, r2, #2
 800c132:	9307      	strge	r3, [sp, #28]
 800c134:	9307      	strlt	r3, [sp, #28]
 800c136:	bfb8      	it	lt
 800c138:	9204      	strlt	r2, [sp, #16]
 800c13a:	7823      	ldrb	r3, [r4, #0]
 800c13c:	2b2e      	cmp	r3, #46	; 0x2e
 800c13e:	d10c      	bne.n	800c15a <_vfiprintf_r+0x176>
 800c140:	7863      	ldrb	r3, [r4, #1]
 800c142:	2b2a      	cmp	r3, #42	; 0x2a
 800c144:	d135      	bne.n	800c1b2 <_vfiprintf_r+0x1ce>
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	1d1a      	adds	r2, r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	9203      	str	r2, [sp, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bfb8      	it	lt
 800c152:	f04f 33ff 	movlt.w	r3, #4294967295
 800c156:	3402      	adds	r4, #2
 800c158:	9305      	str	r3, [sp, #20]
 800c15a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c240 <_vfiprintf_r+0x25c>
 800c15e:	7821      	ldrb	r1, [r4, #0]
 800c160:	2203      	movs	r2, #3
 800c162:	4650      	mov	r0, sl
 800c164:	f7f4 f83c 	bl	80001e0 <memchr>
 800c168:	b140      	cbz	r0, 800c17c <_vfiprintf_r+0x198>
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	eba0 000a 	sub.w	r0, r0, sl
 800c170:	fa03 f000 	lsl.w	r0, r3, r0
 800c174:	9b04      	ldr	r3, [sp, #16]
 800c176:	4303      	orrs	r3, r0
 800c178:	3401      	adds	r4, #1
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c180:	482c      	ldr	r0, [pc, #176]	; (800c234 <_vfiprintf_r+0x250>)
 800c182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c186:	2206      	movs	r2, #6
 800c188:	f7f4 f82a 	bl	80001e0 <memchr>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d03f      	beq.n	800c210 <_vfiprintf_r+0x22c>
 800c190:	4b29      	ldr	r3, [pc, #164]	; (800c238 <_vfiprintf_r+0x254>)
 800c192:	bb1b      	cbnz	r3, 800c1dc <_vfiprintf_r+0x1f8>
 800c194:	9b03      	ldr	r3, [sp, #12]
 800c196:	3307      	adds	r3, #7
 800c198:	f023 0307 	bic.w	r3, r3, #7
 800c19c:	3308      	adds	r3, #8
 800c19e:	9303      	str	r3, [sp, #12]
 800c1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a2:	443b      	add	r3, r7
 800c1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a6:	e767      	b.n	800c078 <_vfiprintf_r+0x94>
 800c1a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	e7a5      	b.n	800c0fe <_vfiprintf_r+0x11a>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	3401      	adds	r4, #1
 800c1b6:	9305      	str	r3, [sp, #20]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f04f 0c0a 	mov.w	ip, #10
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c4:	3a30      	subs	r2, #48	; 0x30
 800c1c6:	2a09      	cmp	r2, #9
 800c1c8:	d903      	bls.n	800c1d2 <_vfiprintf_r+0x1ee>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0c5      	beq.n	800c15a <_vfiprintf_r+0x176>
 800c1ce:	9105      	str	r1, [sp, #20]
 800c1d0:	e7c3      	b.n	800c15a <_vfiprintf_r+0x176>
 800c1d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e7f0      	b.n	800c1be <_vfiprintf_r+0x1da>
 800c1dc:	ab03      	add	r3, sp, #12
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	462a      	mov	r2, r5
 800c1e2:	4b16      	ldr	r3, [pc, #88]	; (800c23c <_vfiprintf_r+0x258>)
 800c1e4:	a904      	add	r1, sp, #16
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f7fb fe6c 	bl	8007ec4 <_printf_float>
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	1c78      	adds	r0, r7, #1
 800c1f0:	d1d6      	bne.n	800c1a0 <_vfiprintf_r+0x1bc>
 800c1f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f4:	07d9      	lsls	r1, r3, #31
 800c1f6:	d405      	bmi.n	800c204 <_vfiprintf_r+0x220>
 800c1f8:	89ab      	ldrh	r3, [r5, #12]
 800c1fa:	059a      	lsls	r2, r3, #22
 800c1fc:	d402      	bmi.n	800c204 <_vfiprintf_r+0x220>
 800c1fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c200:	f7ff f810 	bl	800b224 <__retarget_lock_release_recursive>
 800c204:	89ab      	ldrh	r3, [r5, #12]
 800c206:	065b      	lsls	r3, r3, #25
 800c208:	f53f af12 	bmi.w	800c030 <_vfiprintf_r+0x4c>
 800c20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c20e:	e711      	b.n	800c034 <_vfiprintf_r+0x50>
 800c210:	ab03      	add	r3, sp, #12
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	462a      	mov	r2, r5
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <_vfiprintf_r+0x258>)
 800c218:	a904      	add	r1, sp, #16
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7fc f8f6 	bl	800840c <_printf_i>
 800c220:	e7e4      	b.n	800c1ec <_vfiprintf_r+0x208>
 800c222:	bf00      	nop
 800c224:	0800d11c 	.word	0x0800d11c
 800c228:	0800d13c 	.word	0x0800d13c
 800c22c:	0800d0fc 	.word	0x0800d0fc
 800c230:	0800d334 	.word	0x0800d334
 800c234:	0800d33e 	.word	0x0800d33e
 800c238:	08007ec5 	.word	0x08007ec5
 800c23c:	0800bfbf 	.word	0x0800bfbf
 800c240:	0800d33a 	.word	0x0800d33a
 800c244:	00000000 	.word	0x00000000

0800c248 <nan>:
 800c248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c250 <nan+0x8>
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	00000000 	.word	0x00000000
 800c254:	7ff80000 	.word	0x7ff80000

0800c258 <__sread>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	460c      	mov	r4, r1
 800c25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c260:	f000 f92e 	bl	800c4c0 <_read_r>
 800c264:	2800      	cmp	r0, #0
 800c266:	bfab      	itete	ge
 800c268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c26a:	89a3      	ldrhlt	r3, [r4, #12]
 800c26c:	181b      	addge	r3, r3, r0
 800c26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c272:	bfac      	ite	ge
 800c274:	6563      	strge	r3, [r4, #84]	; 0x54
 800c276:	81a3      	strhlt	r3, [r4, #12]
 800c278:	bd10      	pop	{r4, pc}

0800c27a <__swrite>:
 800c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	461f      	mov	r7, r3
 800c280:	898b      	ldrh	r3, [r1, #12]
 800c282:	05db      	lsls	r3, r3, #23
 800c284:	4605      	mov	r5, r0
 800c286:	460c      	mov	r4, r1
 800c288:	4616      	mov	r6, r2
 800c28a:	d505      	bpl.n	800c298 <__swrite+0x1e>
 800c28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c290:	2302      	movs	r3, #2
 800c292:	2200      	movs	r2, #0
 800c294:	f000 f8b8 	bl	800c408 <_lseek_r>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c29e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	463b      	mov	r3, r7
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ae:	f000 b837 	b.w	800c320 <_write_r>

0800c2b2 <__sseek>:
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ba:	f000 f8a5 	bl	800c408 <_lseek_r>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	bf15      	itete	ne
 800c2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2ce:	81a3      	strheq	r3, [r4, #12]
 800c2d0:	bf18      	it	ne
 800c2d2:	81a3      	strhne	r3, [r4, #12]
 800c2d4:	bd10      	pop	{r4, pc}

0800c2d6 <__sclose>:
 800c2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2da:	f000 b851 	b.w	800c380 <_close_r>

0800c2de <strncmp>:
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	b17a      	cbz	r2, 800c302 <strncmp+0x24>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	3901      	subs	r1, #1
 800c2e6:	1884      	adds	r4, r0, r2
 800c2e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2f0:	4290      	cmp	r0, r2
 800c2f2:	d101      	bne.n	800c2f8 <strncmp+0x1a>
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d101      	bne.n	800c2fc <strncmp+0x1e>
 800c2f8:	1a80      	subs	r0, r0, r2
 800c2fa:	bd10      	pop	{r4, pc}
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d1f3      	bne.n	800c2e8 <strncmp+0xa>
 800c300:	e7fa      	b.n	800c2f8 <strncmp+0x1a>
 800c302:	4610      	mov	r0, r2
 800c304:	e7f9      	b.n	800c2fa <strncmp+0x1c>

0800c306 <__ascii_wctomb>:
 800c306:	b149      	cbz	r1, 800c31c <__ascii_wctomb+0x16>
 800c308:	2aff      	cmp	r2, #255	; 0xff
 800c30a:	bf85      	ittet	hi
 800c30c:	238a      	movhi	r3, #138	; 0x8a
 800c30e:	6003      	strhi	r3, [r0, #0]
 800c310:	700a      	strbls	r2, [r1, #0]
 800c312:	f04f 30ff 	movhi.w	r0, #4294967295
 800c316:	bf98      	it	ls
 800c318:	2001      	movls	r0, #1
 800c31a:	4770      	bx	lr
 800c31c:	4608      	mov	r0, r1
 800c31e:	4770      	bx	lr

0800c320 <_write_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	; (800c340 <_write_r+0x20>)
 800c324:	4604      	mov	r4, r0
 800c326:	4608      	mov	r0, r1
 800c328:	4611      	mov	r1, r2
 800c32a:	2200      	movs	r2, #0
 800c32c:	602a      	str	r2, [r5, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	f7f6 fd53 	bl	8002dda <_write>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_write_r+0x1e>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_write_r+0x1e>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	20003478 	.word	0x20003478

0800c344 <__assert_func>:
 800c344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c346:	4614      	mov	r4, r2
 800c348:	461a      	mov	r2, r3
 800c34a:	4b09      	ldr	r3, [pc, #36]	; (800c370 <__assert_func+0x2c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4605      	mov	r5, r0
 800c350:	68d8      	ldr	r0, [r3, #12]
 800c352:	b14c      	cbz	r4, 800c368 <__assert_func+0x24>
 800c354:	4b07      	ldr	r3, [pc, #28]	; (800c374 <__assert_func+0x30>)
 800c356:	9100      	str	r1, [sp, #0]
 800c358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c35c:	4906      	ldr	r1, [pc, #24]	; (800c378 <__assert_func+0x34>)
 800c35e:	462b      	mov	r3, r5
 800c360:	f000 f81e 	bl	800c3a0 <fiprintf>
 800c364:	f000 f8be 	bl	800c4e4 <abort>
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <__assert_func+0x38>)
 800c36a:	461c      	mov	r4, r3
 800c36c:	e7f3      	b.n	800c356 <__assert_func+0x12>
 800c36e:	bf00      	nop
 800c370:	20000024 	.word	0x20000024
 800c374:	0800d345 	.word	0x0800d345
 800c378:	0800d352 	.word	0x0800d352
 800c37c:	0800d380 	.word	0x0800d380

0800c380 <_close_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	; (800c39c <_close_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f6 fd41 	bl	8002e12 <_close>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_close_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_close_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	20003478 	.word	0x20003478

0800c3a0 <fiprintf>:
 800c3a0:	b40e      	push	{r1, r2, r3}
 800c3a2:	b503      	push	{r0, r1, lr}
 800c3a4:	4601      	mov	r1, r0
 800c3a6:	ab03      	add	r3, sp, #12
 800c3a8:	4805      	ldr	r0, [pc, #20]	; (800c3c0 <fiprintf+0x20>)
 800c3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ae:	6800      	ldr	r0, [r0, #0]
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	f7ff fe17 	bl	800bfe4 <_vfiprintf_r>
 800c3b6:	b002      	add	sp, #8
 800c3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3bc:	b003      	add	sp, #12
 800c3be:	4770      	bx	lr
 800c3c0:	20000024 	.word	0x20000024

0800c3c4 <_fstat_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d07      	ldr	r5, [pc, #28]	; (800c3e4 <_fstat_r+0x20>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	f7f6 fd2a 	bl	8002e2a <_fstat>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d102      	bne.n	800c3e0 <_fstat_r+0x1c>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	b103      	cbz	r3, 800c3e0 <_fstat_r+0x1c>
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	bd38      	pop	{r3, r4, r5, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20003478 	.word	0x20003478

0800c3e8 <_isatty_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_isatty_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f6 fd29 	bl	8002e4a <_isatty>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_isatty_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_isatty_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20003478 	.word	0x20003478

0800c408 <_lseek_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_lseek_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f6 fd22 	bl	8002e60 <_lseek>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_lseek_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_lseek_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20003478 	.word	0x20003478

0800c42c <memmove>:
 800c42c:	4288      	cmp	r0, r1
 800c42e:	b510      	push	{r4, lr}
 800c430:	eb01 0402 	add.w	r4, r1, r2
 800c434:	d902      	bls.n	800c43c <memmove+0x10>
 800c436:	4284      	cmp	r4, r0
 800c438:	4623      	mov	r3, r4
 800c43a:	d807      	bhi.n	800c44c <memmove+0x20>
 800c43c:	1e43      	subs	r3, r0, #1
 800c43e:	42a1      	cmp	r1, r4
 800c440:	d008      	beq.n	800c454 <memmove+0x28>
 800c442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c44a:	e7f8      	b.n	800c43e <memmove+0x12>
 800c44c:	4402      	add	r2, r0
 800c44e:	4601      	mov	r1, r0
 800c450:	428a      	cmp	r2, r1
 800c452:	d100      	bne.n	800c456 <memmove+0x2a>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c45e:	e7f7      	b.n	800c450 <memmove+0x24>

0800c460 <_realloc_r>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	4680      	mov	r8, r0
 800c466:	4614      	mov	r4, r2
 800c468:	460e      	mov	r6, r1
 800c46a:	b921      	cbnz	r1, 800c476 <_realloc_r+0x16>
 800c46c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c470:	4611      	mov	r1, r2
 800c472:	f7fb bc13 	b.w	8007c9c <_malloc_r>
 800c476:	b92a      	cbnz	r2, 800c484 <_realloc_r+0x24>
 800c478:	f7fb fba4 	bl	8007bc4 <_free_r>
 800c47c:	4625      	mov	r5, r4
 800c47e:	4628      	mov	r0, r5
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	f000 f835 	bl	800c4f2 <_malloc_usable_size_r>
 800c488:	4284      	cmp	r4, r0
 800c48a:	4607      	mov	r7, r0
 800c48c:	d802      	bhi.n	800c494 <_realloc_r+0x34>
 800c48e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c492:	d812      	bhi.n	800c4ba <_realloc_r+0x5a>
 800c494:	4621      	mov	r1, r4
 800c496:	4640      	mov	r0, r8
 800c498:	f7fb fc00 	bl	8007c9c <_malloc_r>
 800c49c:	4605      	mov	r5, r0
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d0ed      	beq.n	800c47e <_realloc_r+0x1e>
 800c4a2:	42bc      	cmp	r4, r7
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	bf28      	it	cs
 800c4aa:	463a      	movcs	r2, r7
 800c4ac:	f7fb fb74 	bl	8007b98 <memcpy>
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	f7fb fb86 	bl	8007bc4 <_free_r>
 800c4b8:	e7e1      	b.n	800c47e <_realloc_r+0x1e>
 800c4ba:	4635      	mov	r5, r6
 800c4bc:	e7df      	b.n	800c47e <_realloc_r+0x1e>
	...

0800c4c0 <_read_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d07      	ldr	r5, [pc, #28]	; (800c4e0 <_read_r+0x20>)
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	4608      	mov	r0, r1
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	602a      	str	r2, [r5, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	f7f6 fc66 	bl	8002da0 <_read>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_read_r+0x1e>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_read_r+0x1e>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20003478 	.word	0x20003478

0800c4e4 <abort>:
 800c4e4:	b508      	push	{r3, lr}
 800c4e6:	2006      	movs	r0, #6
 800c4e8:	f000 f834 	bl	800c554 <raise>
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	f7f6 fc4d 	bl	8002d8c <_exit>

0800c4f2 <_malloc_usable_size_r>:
 800c4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f6:	1f18      	subs	r0, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	bfbc      	itt	lt
 800c4fc:	580b      	ldrlt	r3, [r1, r0]
 800c4fe:	18c0      	addlt	r0, r0, r3
 800c500:	4770      	bx	lr

0800c502 <_raise_r>:
 800c502:	291f      	cmp	r1, #31
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4604      	mov	r4, r0
 800c508:	460d      	mov	r5, r1
 800c50a:	d904      	bls.n	800c516 <_raise_r+0x14>
 800c50c:	2316      	movs	r3, #22
 800c50e:	6003      	str	r3, [r0, #0]
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	bd38      	pop	{r3, r4, r5, pc}
 800c516:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c518:	b112      	cbz	r2, 800c520 <_raise_r+0x1e>
 800c51a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c51e:	b94b      	cbnz	r3, 800c534 <_raise_r+0x32>
 800c520:	4620      	mov	r0, r4
 800c522:	f000 f831 	bl	800c588 <_getpid_r>
 800c526:	462a      	mov	r2, r5
 800c528:	4601      	mov	r1, r0
 800c52a:	4620      	mov	r0, r4
 800c52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c530:	f000 b818 	b.w	800c564 <_kill_r>
 800c534:	2b01      	cmp	r3, #1
 800c536:	d00a      	beq.n	800c54e <_raise_r+0x4c>
 800c538:	1c59      	adds	r1, r3, #1
 800c53a:	d103      	bne.n	800c544 <_raise_r+0x42>
 800c53c:	2316      	movs	r3, #22
 800c53e:	6003      	str	r3, [r0, #0]
 800c540:	2001      	movs	r0, #1
 800c542:	e7e7      	b.n	800c514 <_raise_r+0x12>
 800c544:	2400      	movs	r4, #0
 800c546:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c54a:	4628      	mov	r0, r5
 800c54c:	4798      	blx	r3
 800c54e:	2000      	movs	r0, #0
 800c550:	e7e0      	b.n	800c514 <_raise_r+0x12>
	...

0800c554 <raise>:
 800c554:	4b02      	ldr	r3, [pc, #8]	; (800c560 <raise+0xc>)
 800c556:	4601      	mov	r1, r0
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	f7ff bfd2 	b.w	800c502 <_raise_r>
 800c55e:	bf00      	nop
 800c560:	20000024 	.word	0x20000024

0800c564 <_kill_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	; (800c584 <_kill_r+0x20>)
 800c568:	2300      	movs	r3, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f7f6 fbfb 	bl	8002d6c <_kill>
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	d102      	bne.n	800c580 <_kill_r+0x1c>
 800c57a:	682b      	ldr	r3, [r5, #0]
 800c57c:	b103      	cbz	r3, 800c580 <_kill_r+0x1c>
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	bf00      	nop
 800c584:	20003478 	.word	0x20003478

0800c588 <_getpid_r>:
 800c588:	f7f6 bbe8 	b.w	8002d5c <_getpid>

0800c58c <sqrtf>:
 800c58c:	b508      	push	{r3, lr}
 800c58e:	ed2d 8b02 	vpush	{d8}
 800c592:	eeb0 8a40 	vmov.f32	s16, s0
 800c596:	f000 f817 	bl	800c5c8 <__ieee754_sqrtf>
 800c59a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a2:	d60c      	bvs.n	800c5be <sqrtf+0x32>
 800c5a4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c5c4 <sqrtf+0x38>
 800c5a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b0:	d505      	bpl.n	800c5be <sqrtf+0x32>
 800c5b2:	f7fb fabf 	bl	8007b34 <__errno>
 800c5b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c5ba:	2321      	movs	r3, #33	; 0x21
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	ecbd 8b02 	vpop	{d8}
 800c5c2:	bd08      	pop	{r3, pc}
 800c5c4:	00000000 	.word	0x00000000

0800c5c8 <__ieee754_sqrtf>:
 800c5c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <_init>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	bf00      	nop
 800c5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d6:	bc08      	pop	{r3}
 800c5d8:	469e      	mov	lr, r3
 800c5da:	4770      	bx	lr

0800c5dc <_fini>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr
=======
 8007512:	e0b9      	b.n	8007688 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007516:	461c      	mov	r4, r3
 8007518:	f04f 0500 	mov.w	r5, #0
 800751c:	4622      	mov	r2, r4
 800751e:	462b      	mov	r3, r5
 8007520:	1891      	adds	r1, r2, r2
 8007522:	6139      	str	r1, [r7, #16]
 8007524:	415b      	adcs	r3, r3
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800752c:	1912      	adds	r2, r2, r4
 800752e:	eb45 0303 	adc.w	r3, r5, r3
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f04f 0100 	mov.w	r1, #0
 800753a:	00d9      	lsls	r1, r3, #3
 800753c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007540:	00d0      	lsls	r0, r2, #3
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	eb12 0804 	adds.w	r8, r2, r4
 800754a:	eb43 0905 	adc.w	r9, r3, r5
 800754e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4618      	mov	r0, r3
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	008b      	lsls	r3, r1, #2
 8007562:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007566:	0082      	lsls	r2, r0, #2
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4b49      	ldr	r3, [pc, #292]	; (800769c <UART_SetConfig+0x38c>)
 8007576:	fba3 2302 	umull	r2, r3, r3, r2
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	011e      	lsls	r6, r3, #4
 800757e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007580:	4618      	mov	r0, r3
 8007582:	f04f 0100 	mov.w	r1, #0
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	1894      	adds	r4, r2, r2
 800758c:	60bc      	str	r4, [r7, #8]
 800758e:	415b      	adcs	r3, r3
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007596:	1812      	adds	r2, r2, r0
 8007598:	eb41 0303 	adc.w	r3, r1, r3
 800759c:	f04f 0400 	mov.w	r4, #0
 80075a0:	f04f 0500 	mov.w	r5, #0
 80075a4:	00dd      	lsls	r5, r3, #3
 80075a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075aa:	00d4      	lsls	r4, r2, #3
 80075ac:	4622      	mov	r2, r4
 80075ae:	462b      	mov	r3, r5
 80075b0:	1814      	adds	r4, r2, r0
 80075b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80075b4:	414b      	adcs	r3, r1
 80075b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f04f 0100 	mov.w	r1, #0
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	008b      	lsls	r3, r1, #2
 80075cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075d0:	0082      	lsls	r2, r0, #2
 80075d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075d6:	f7f9 fb57 	bl	8000c88 <__aeabi_uldivmod>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4b2f      	ldr	r3, [pc, #188]	; (800769c <UART_SetConfig+0x38c>)
 80075e0:	fba3 1302 	umull	r1, r3, r3, r2
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	2164      	movs	r1, #100	; 0x64
 80075e8:	fb01 f303 	mul.w	r3, r1, r3
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	3332      	adds	r3, #50	; 0x32
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <UART_SetConfig+0x38c>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075fe:	441e      	add	r6, r3
 8007600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007602:	4618      	mov	r0, r3
 8007604:	f04f 0100 	mov.w	r1, #0
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	1894      	adds	r4, r2, r2
 800760e:	603c      	str	r4, [r7, #0]
 8007610:	415b      	adcs	r3, r3
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007618:	1812      	adds	r2, r2, r0
 800761a:	eb41 0303 	adc.w	r3, r1, r3
 800761e:	f04f 0400 	mov.w	r4, #0
 8007622:	f04f 0500 	mov.w	r5, #0
 8007626:	00dd      	lsls	r5, r3, #3
 8007628:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800762c:	00d4      	lsls	r4, r2, #3
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	eb12 0a00 	adds.w	sl, r2, r0
 8007636:	eb43 0b01 	adc.w	fp, r3, r1
 800763a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	008b      	lsls	r3, r1, #2
 800764e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007652:	0082      	lsls	r2, r0, #2
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	f7f9 fb16 	bl	8000c88 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <UART_SetConfig+0x38c>)
 8007662:	fba3 1302 	umull	r1, r3, r3, r2
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	2164      	movs	r1, #100	; 0x64
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	3332      	adds	r3, #50	; 0x32
 8007674:	4a09      	ldr	r2, [pc, #36]	; (800769c <UART_SetConfig+0x38c>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4432      	add	r2, r6
 8007686:	609a      	str	r2, [r3, #8]
}
 8007688:	bf00      	nop
 800768a:	377c      	adds	r7, #124	; 0x7c
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	40011000 	.word	0x40011000
 8007698:	40011400 	.word	0x40011400
 800769c:	51eb851f 	.word	0x51eb851f

080076a0 <arm_sin_f32>:
 80076a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007720 <arm_sin_f32+0x80>
 80076a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80076ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80076b4:	d504      	bpl.n	80076c0 <arm_sin_f32+0x20>
 80076b6:	ee17 3a90 	vmov	r3, s15
 80076ba:	3b01      	subs	r3, #1
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007724 <arm_sin_f32+0x84>
 80076c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80076d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80076d4:	ee17 3a90 	vmov	r3, s15
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076de:	d21a      	bcs.n	8007716 <arm_sin_f32+0x76>
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	1c59      	adds	r1, r3, #1
 80076ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076ee:	4a0e      	ldr	r2, [pc, #56]	; (8007728 <arm_sin_f32+0x88>)
 80076f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80076fc:	ed93 7a00 	vldr	s14, [r3]
 8007700:	edd2 6a00 	vldr	s13, [r2]
 8007704:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007708:	ee20 0a26 	vmul.f32	s0, s0, s13
 800770c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007710:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007714:	4770      	bx	lr
 8007716:	ee30 0a47 	vsub.f32	s0, s0, s14
 800771a:	2101      	movs	r1, #1
 800771c:	2300      	movs	r3, #0
 800771e:	e7e6      	b.n	80076ee <arm_sin_f32+0x4e>
 8007720:	3e22f983 	.word	0x3e22f983
 8007724:	44000000 	.word	0x44000000
 8007728:	0800c2a8 	.word	0x0800c2a8

0800772c <arm_cos_f32>:
 800772c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80077b4 <arm_cos_f32+0x88>
 8007730:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007734:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007738:	ee30 0a27 	vadd.f32	s0, s0, s15
 800773c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007744:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007748:	d504      	bpl.n	8007754 <arm_cos_f32+0x28>
 800774a:	ee17 3a90 	vmov	r3, s15
 800774e:	3b01      	subs	r3, #1
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007758:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80077b8 <arm_cos_f32+0x8c>
 800775c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007760:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007764:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007768:	ee17 3a90 	vmov	r3, s15
 800776c:	b29b      	uxth	r3, r3
 800776e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007772:	d21a      	bcs.n	80077aa <arm_cos_f32+0x7e>
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777c:	1c59      	adds	r1, r3, #1
 800777e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007782:	4a0e      	ldr	r2, [pc, #56]	; (80077bc <arm_cos_f32+0x90>)
 8007784:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800778c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007790:	ed93 7a00 	vldr	s14, [r3]
 8007794:	edd2 6a00 	vldr	s13, [r2]
 8007798:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800779c:	ee20 0a26 	vmul.f32	s0, s0, s13
 80077a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80077a8:	4770      	bx	lr
 80077aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077ae:	2101      	movs	r1, #1
 80077b0:	2300      	movs	r3, #0
 80077b2:	e7e6      	b.n	8007782 <arm_cos_f32+0x56>
 80077b4:	3e22f983 	.word	0x3e22f983
 80077b8:	44000000 	.word	0x44000000
 80077bc:	0800c2a8 	.word	0x0800c2a8

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	; (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20000024 	.word	0x20000024

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4d0d      	ldr	r5, [pc, #52]	; (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d2:	1b64      	subs	r4, r4, r5
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2600      	movs	r6, #0
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4d0b      	ldr	r5, [pc, #44]	; (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	; (8007810 <__libc_init_array+0x44>)
 80077e0:	f004 fcfa 	bl	800c1d8 <_init>
 80077e4:	1b64      	subs	r4, r4, r5
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2600      	movs	r6, #0
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	0800cf6c 	.word	0x0800cf6c
 8007808:	0800cf6c 	.word	0x0800cf6c
 800780c:	0800cf6c 	.word	0x0800cf6c
 8007810:	0800cf70 	.word	0x0800cf70

08007814 <malloc>:
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <malloc+0xc>)
 8007816:	4601      	mov	r1, r0
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f000 b869 	b.w	80078f0 <_malloc_r>
 800781e:	bf00      	nop
 8007820:	20000024 	.word	0x20000024

08007824 <memcpy>:
 8007824:	440a      	add	r2, r1
 8007826:	4291      	cmp	r1, r2
 8007828:	f100 33ff 	add.w	r3, r0, #4294967295
 800782c:	d100      	bne.n	8007830 <memcpy+0xc>
 800782e:	4770      	bx	lr
 8007830:	b510      	push	{r4, lr}
 8007832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783a:	4291      	cmp	r1, r2
 800783c:	d1f9      	bne.n	8007832 <memcpy+0xe>
 800783e:	bd10      	pop	{r4, pc}

08007840 <memset>:
 8007840:	4402      	add	r2, r0
 8007842:	4603      	mov	r3, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	f803 1b01 	strb.w	r1, [r3], #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <_free_r>:
 8007850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007852:	2900      	cmp	r1, #0
 8007854:	d048      	beq.n	80078e8 <_free_r+0x98>
 8007856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f1a1 0404 	sub.w	r4, r1, #4
 8007862:	bfb8      	it	lt
 8007864:	18e4      	addlt	r4, r4, r3
 8007866:	f003 fb6b 	bl	800af40 <__malloc_lock>
 800786a:	4a20      	ldr	r2, [pc, #128]	; (80078ec <_free_r+0x9c>)
 800786c:	9801      	ldr	r0, [sp, #4]
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	4615      	mov	r5, r2
 8007872:	b933      	cbnz	r3, 8007882 <_free_r+0x32>
 8007874:	6063      	str	r3, [r4, #4]
 8007876:	6014      	str	r4, [r2, #0]
 8007878:	b003      	add	sp, #12
 800787a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800787e:	f003 bb65 	b.w	800af4c <__malloc_unlock>
 8007882:	42a3      	cmp	r3, r4
 8007884:	d90b      	bls.n	800789e <_free_r+0x4e>
 8007886:	6821      	ldr	r1, [r4, #0]
 8007888:	1862      	adds	r2, r4, r1
 800788a:	4293      	cmp	r3, r2
 800788c:	bf04      	itt	eq
 800788e:	681a      	ldreq	r2, [r3, #0]
 8007890:	685b      	ldreq	r3, [r3, #4]
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	bf04      	itt	eq
 8007896:	1852      	addeq	r2, r2, r1
 8007898:	6022      	streq	r2, [r4, #0]
 800789a:	602c      	str	r4, [r5, #0]
 800789c:	e7ec      	b.n	8007878 <_free_r+0x28>
 800789e:	461a      	mov	r2, r3
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	b10b      	cbz	r3, 80078a8 <_free_r+0x58>
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d9fa      	bls.n	800789e <_free_r+0x4e>
 80078a8:	6811      	ldr	r1, [r2, #0]
 80078aa:	1855      	adds	r5, r2, r1
 80078ac:	42a5      	cmp	r5, r4
 80078ae:	d10b      	bne.n	80078c8 <_free_r+0x78>
 80078b0:	6824      	ldr	r4, [r4, #0]
 80078b2:	4421      	add	r1, r4
 80078b4:	1854      	adds	r4, r2, r1
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	6011      	str	r1, [r2, #0]
 80078ba:	d1dd      	bne.n	8007878 <_free_r+0x28>
 80078bc:	681c      	ldr	r4, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	6053      	str	r3, [r2, #4]
 80078c2:	4421      	add	r1, r4
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	e7d7      	b.n	8007878 <_free_r+0x28>
 80078c8:	d902      	bls.n	80078d0 <_free_r+0x80>
 80078ca:	230c      	movs	r3, #12
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	e7d3      	b.n	8007878 <_free_r+0x28>
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	1961      	adds	r1, r4, r5
 80078d4:	428b      	cmp	r3, r1
 80078d6:	bf04      	itt	eq
 80078d8:	6819      	ldreq	r1, [r3, #0]
 80078da:	685b      	ldreq	r3, [r3, #4]
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	bf04      	itt	eq
 80078e0:	1949      	addeq	r1, r1, r5
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	6054      	str	r4, [r2, #4]
 80078e6:	e7c7      	b.n	8007878 <_free_r+0x28>
 80078e8:	b003      	add	sp, #12
 80078ea:	bd30      	pop	{r4, r5, pc}
 80078ec:	2000313c 	.word	0x2000313c

080078f0 <_malloc_r>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	1ccd      	adds	r5, r1, #3
 80078f4:	f025 0503 	bic.w	r5, r5, #3
 80078f8:	3508      	adds	r5, #8
 80078fa:	2d0c      	cmp	r5, #12
 80078fc:	bf38      	it	cc
 80078fe:	250c      	movcc	r5, #12
 8007900:	2d00      	cmp	r5, #0
 8007902:	4606      	mov	r6, r0
 8007904:	db01      	blt.n	800790a <_malloc_r+0x1a>
 8007906:	42a9      	cmp	r1, r5
 8007908:	d903      	bls.n	8007912 <_malloc_r+0x22>
 800790a:	230c      	movs	r3, #12
 800790c:	6033      	str	r3, [r6, #0]
 800790e:	2000      	movs	r0, #0
 8007910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007912:	f003 fb15 	bl	800af40 <__malloc_lock>
 8007916:	4921      	ldr	r1, [pc, #132]	; (800799c <_malloc_r+0xac>)
 8007918:	680a      	ldr	r2, [r1, #0]
 800791a:	4614      	mov	r4, r2
 800791c:	b99c      	cbnz	r4, 8007946 <_malloc_r+0x56>
 800791e:	4f20      	ldr	r7, [pc, #128]	; (80079a0 <_malloc_r+0xb0>)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	b923      	cbnz	r3, 800792e <_malloc_r+0x3e>
 8007924:	4621      	mov	r1, r4
 8007926:	4630      	mov	r0, r6
 8007928:	f000 ff44 	bl	80087b4 <_sbrk_r>
 800792c:	6038      	str	r0, [r7, #0]
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	f000 ff3f 	bl	80087b4 <_sbrk_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d123      	bne.n	8007982 <_malloc_r+0x92>
 800793a:	230c      	movs	r3, #12
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	4630      	mov	r0, r6
 8007940:	f003 fb04 	bl	800af4c <__malloc_unlock>
 8007944:	e7e3      	b.n	800790e <_malloc_r+0x1e>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	1b5b      	subs	r3, r3, r5
 800794a:	d417      	bmi.n	800797c <_malloc_r+0x8c>
 800794c:	2b0b      	cmp	r3, #11
 800794e:	d903      	bls.n	8007958 <_malloc_r+0x68>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	441c      	add	r4, r3
 8007954:	6025      	str	r5, [r4, #0]
 8007956:	e004      	b.n	8007962 <_malloc_r+0x72>
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	42a2      	cmp	r2, r4
 800795c:	bf0c      	ite	eq
 800795e:	600b      	streq	r3, [r1, #0]
 8007960:	6053      	strne	r3, [r2, #4]
 8007962:	4630      	mov	r0, r6
 8007964:	f003 faf2 	bl	800af4c <__malloc_unlock>
 8007968:	f104 000b 	add.w	r0, r4, #11
 800796c:	1d23      	adds	r3, r4, #4
 800796e:	f020 0007 	bic.w	r0, r0, #7
 8007972:	1ac2      	subs	r2, r0, r3
 8007974:	d0cc      	beq.n	8007910 <_malloc_r+0x20>
 8007976:	1a1b      	subs	r3, r3, r0
 8007978:	50a3      	str	r3, [r4, r2]
 800797a:	e7c9      	b.n	8007910 <_malloc_r+0x20>
 800797c:	4622      	mov	r2, r4
 800797e:	6864      	ldr	r4, [r4, #4]
 8007980:	e7cc      	b.n	800791c <_malloc_r+0x2c>
 8007982:	1cc4      	adds	r4, r0, #3
 8007984:	f024 0403 	bic.w	r4, r4, #3
 8007988:	42a0      	cmp	r0, r4
 800798a:	d0e3      	beq.n	8007954 <_malloc_r+0x64>
 800798c:	1a21      	subs	r1, r4, r0
 800798e:	4630      	mov	r0, r6
 8007990:	f000 ff10 	bl	80087b4 <_sbrk_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d1dd      	bne.n	8007954 <_malloc_r+0x64>
 8007998:	e7cf      	b.n	800793a <_malloc_r+0x4a>
 800799a:	bf00      	nop
 800799c:	2000313c 	.word	0x2000313c
 80079a0:	20003140 	.word	0x20003140

080079a4 <__cvt>:
 80079a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a8:	ec55 4b10 	vmov	r4, r5, d0
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	460e      	mov	r6, r1
 80079b0:	4619      	mov	r1, r3
 80079b2:	462b      	mov	r3, r5
 80079b4:	bfbb      	ittet	lt
 80079b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ba:	461d      	movlt	r5, r3
 80079bc:	2300      	movge	r3, #0
 80079be:	232d      	movlt	r3, #45	; 0x2d
 80079c0:	700b      	strb	r3, [r1, #0]
 80079c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079c8:	4691      	mov	r9, r2
 80079ca:	f023 0820 	bic.w	r8, r3, #32
 80079ce:	bfbc      	itt	lt
 80079d0:	4622      	movlt	r2, r4
 80079d2:	4614      	movlt	r4, r2
 80079d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079d8:	d005      	beq.n	80079e6 <__cvt+0x42>
 80079da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079de:	d100      	bne.n	80079e2 <__cvt+0x3e>
 80079e0:	3601      	adds	r6, #1
 80079e2:	2102      	movs	r1, #2
 80079e4:	e000      	b.n	80079e8 <__cvt+0x44>
 80079e6:	2103      	movs	r1, #3
 80079e8:	ab03      	add	r3, sp, #12
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	ab02      	add	r3, sp, #8
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	ec45 4b10 	vmov	d0, r4, r5
 80079f4:	4653      	mov	r3, sl
 80079f6:	4632      	mov	r2, r6
 80079f8:	f001 ff12 	bl	8009820 <_dtoa_r>
 80079fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a00:	4607      	mov	r7, r0
 8007a02:	d102      	bne.n	8007a0a <__cvt+0x66>
 8007a04:	f019 0f01 	tst.w	r9, #1
 8007a08:	d022      	beq.n	8007a50 <__cvt+0xac>
 8007a0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a0e:	eb07 0906 	add.w	r9, r7, r6
 8007a12:	d110      	bne.n	8007a36 <__cvt+0x92>
 8007a14:	783b      	ldrb	r3, [r7, #0]
 8007a16:	2b30      	cmp	r3, #48	; 0x30
 8007a18:	d10a      	bne.n	8007a30 <__cvt+0x8c>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f9 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a26:	b918      	cbnz	r0, 8007a30 <__cvt+0x8c>
 8007a28:	f1c6 0601 	rsb	r6, r6, #1
 8007a2c:	f8ca 6000 	str.w	r6, [sl]
 8007a30:	f8da 3000 	ldr.w	r3, [sl]
 8007a34:	4499      	add	r9, r3
 8007a36:	2200      	movs	r2, #0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f9 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a42:	b108      	cbz	r0, 8007a48 <__cvt+0xa4>
 8007a44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a48:	2230      	movs	r2, #48	; 0x30
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	454b      	cmp	r3, r9
 8007a4e:	d307      	bcc.n	8007a60 <__cvt+0xbc>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a54:	1bdb      	subs	r3, r3, r7
 8007a56:	4638      	mov	r0, r7
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	b004      	add	sp, #16
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	1c59      	adds	r1, r3, #1
 8007a62:	9103      	str	r1, [sp, #12]
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e7f0      	b.n	8007a4a <__cvt+0xa6>

08007a68 <__exponent>:
 8007a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	bfb8      	it	lt
 8007a70:	4249      	neglt	r1, r1
 8007a72:	f803 2b02 	strb.w	r2, [r3], #2
 8007a76:	bfb4      	ite	lt
 8007a78:	222d      	movlt	r2, #45	; 0x2d
 8007a7a:	222b      	movge	r2, #43	; 0x2b
 8007a7c:	2909      	cmp	r1, #9
 8007a7e:	7042      	strb	r2, [r0, #1]
 8007a80:	dd2a      	ble.n	8007ad8 <__exponent+0x70>
 8007a82:	f10d 0407 	add.w	r4, sp, #7
 8007a86:	46a4      	mov	ip, r4
 8007a88:	270a      	movs	r7, #10
 8007a8a:	46a6      	mov	lr, r4
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a92:	fb07 1516 	mls	r5, r7, r6, r1
 8007a96:	3530      	adds	r5, #48	; 0x30
 8007a98:	2a63      	cmp	r2, #99	; 0x63
 8007a9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	dcf1      	bgt.n	8007a8a <__exponent+0x22>
 8007aa6:	3130      	adds	r1, #48	; 0x30
 8007aa8:	f1ae 0502 	sub.w	r5, lr, #2
 8007aac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ab0:	1c44      	adds	r4, r0, #1
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4561      	cmp	r1, ip
 8007ab6:	d30a      	bcc.n	8007ace <__exponent+0x66>
 8007ab8:	f10d 0209 	add.w	r2, sp, #9
 8007abc:	eba2 020e 	sub.w	r2, r2, lr
 8007ac0:	4565      	cmp	r5, ip
 8007ac2:	bf88      	it	hi
 8007ac4:	2200      	movhi	r2, #0
 8007ac6:	4413      	add	r3, r2
 8007ac8:	1a18      	subs	r0, r3, r0
 8007aca:	b003      	add	sp, #12
 8007acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ad6:	e7ed      	b.n	8007ab4 <__exponent+0x4c>
 8007ad8:	2330      	movs	r3, #48	; 0x30
 8007ada:	3130      	adds	r1, #48	; 0x30
 8007adc:	7083      	strb	r3, [r0, #2]
 8007ade:	70c1      	strb	r1, [r0, #3]
 8007ae0:	1d03      	adds	r3, r0, #4
 8007ae2:	e7f1      	b.n	8007ac8 <__exponent+0x60>

08007ae4 <_printf_float>:
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	ed2d 8b02 	vpush	{d8}
 8007aec:	b08d      	sub	sp, #52	; 0x34
 8007aee:	460c      	mov	r4, r1
 8007af0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007af4:	4616      	mov	r6, r2
 8007af6:	461f      	mov	r7, r3
 8007af8:	4605      	mov	r5, r0
 8007afa:	f003 f9a3 	bl	800ae44 <_localeconv_r>
 8007afe:	f8d0 a000 	ldr.w	sl, [r0]
 8007b02:	4650      	mov	r0, sl
 8007b04:	f7f8 fb64 	bl	80001d0 <strlen>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	9305      	str	r3, [sp, #20]
 8007b10:	f8d8 3000 	ldr.w	r3, [r8]
 8007b14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	f103 0208 	add.w	r2, r3, #8
 8007b22:	f8c8 2000 	str.w	r2, [r8]
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b3c:	ee08 0a10 	vmov	s16, r0
 8007b40:	4b9f      	ldr	r3, [pc, #636]	; (8007dc0 <_printf_float+0x2dc>)
 8007b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	f7f8 ffef 	bl	8000b2c <__aeabi_dcmpun>
 8007b4e:	bb88      	cbnz	r0, 8007bb4 <_printf_float+0xd0>
 8007b50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b54:	4b9a      	ldr	r3, [pc, #616]	; (8007dc0 <_printf_float+0x2dc>)
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	f7f8 ffc9 	bl	8000af0 <__aeabi_dcmple>
 8007b5e:	bb48      	cbnz	r0, 8007bb4 <_printf_float+0xd0>
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 ffb8 	bl	8000adc <__aeabi_dcmplt>
 8007b6c:	b110      	cbz	r0, 8007b74 <_printf_float+0x90>
 8007b6e:	232d      	movs	r3, #45	; 0x2d
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	4b93      	ldr	r3, [pc, #588]	; (8007dc4 <_printf_float+0x2e0>)
 8007b76:	4894      	ldr	r0, [pc, #592]	; (8007dc8 <_printf_float+0x2e4>)
 8007b78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b7c:	bf94      	ite	ls
 8007b7e:	4698      	movls	r8, r3
 8007b80:	4680      	movhi	r8, r0
 8007b82:	2303      	movs	r3, #3
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	9b05      	ldr	r3, [sp, #20]
 8007b88:	f023 0204 	bic.w	r2, r3, #4
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	f04f 0900 	mov.w	r9, #0
 8007b92:	9700      	str	r7, [sp, #0]
 8007b94:	4633      	mov	r3, r6
 8007b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f9d8 	bl	8007f50 <_printf_common>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f040 8090 	bne.w	8007cc6 <_printf_float+0x1e2>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	b00d      	add	sp, #52	; 0x34
 8007bac:	ecbd 8b02 	vpop	{d8}
 8007bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	4649      	mov	r1, r9
 8007bbc:	f7f8 ffb6 	bl	8000b2c <__aeabi_dcmpun>
 8007bc0:	b140      	cbz	r0, 8007bd4 <_printf_float+0xf0>
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bfbc      	itt	lt
 8007bc8:	232d      	movlt	r3, #45	; 0x2d
 8007bca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bce:	487f      	ldr	r0, [pc, #508]	; (8007dcc <_printf_float+0x2e8>)
 8007bd0:	4b7f      	ldr	r3, [pc, #508]	; (8007dd0 <_printf_float+0x2ec>)
 8007bd2:	e7d1      	b.n	8007b78 <_printf_float+0x94>
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bda:	9206      	str	r2, [sp, #24]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	d13f      	bne.n	8007c60 <_printf_float+0x17c>
 8007be0:	2306      	movs	r3, #6
 8007be2:	6063      	str	r3, [r4, #4]
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	6861      	ldr	r1, [r4, #4]
 8007be8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bec:	2300      	movs	r3, #0
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	ab0a      	add	r3, sp, #40	; 0x28
 8007bf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bf6:	ab09      	add	r3, sp, #36	; 0x24
 8007bf8:	ec49 8b10 	vmov	d0, r8, r9
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c04:	4628      	mov	r0, r5
 8007c06:	f7ff fecd 	bl	80079a4 <__cvt>
 8007c0a:	9b06      	ldr	r3, [sp, #24]
 8007c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c0e:	2b47      	cmp	r3, #71	; 0x47
 8007c10:	4680      	mov	r8, r0
 8007c12:	d108      	bne.n	8007c26 <_printf_float+0x142>
 8007c14:	1cc8      	adds	r0, r1, #3
 8007c16:	db02      	blt.n	8007c1e <_printf_float+0x13a>
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	dd41      	ble.n	8007ca2 <_printf_float+0x1be>
 8007c1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c22:	fa5f fb8b 	uxtb.w	fp, fp
 8007c26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c2a:	d820      	bhi.n	8007c6e <_printf_float+0x18a>
 8007c2c:	3901      	subs	r1, #1
 8007c2e:	465a      	mov	r2, fp
 8007c30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c34:	9109      	str	r1, [sp, #36]	; 0x24
 8007c36:	f7ff ff17 	bl	8007a68 <__exponent>
 8007c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3c:	1813      	adds	r3, r2, r0
 8007c3e:	2a01      	cmp	r2, #1
 8007c40:	4681      	mov	r9, r0
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	dc02      	bgt.n	8007c4c <_printf_float+0x168>
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	07d2      	lsls	r2, r2, #31
 8007c4a:	d501      	bpl.n	8007c50 <_printf_float+0x16c>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d09c      	beq.n	8007b92 <_printf_float+0xae>
 8007c58:	232d      	movs	r3, #45	; 0x2d
 8007c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5e:	e798      	b.n	8007b92 <_printf_float+0xae>
 8007c60:	9a06      	ldr	r2, [sp, #24]
 8007c62:	2a47      	cmp	r2, #71	; 0x47
 8007c64:	d1be      	bne.n	8007be4 <_printf_float+0x100>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1bc      	bne.n	8007be4 <_printf_float+0x100>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e7b9      	b.n	8007be2 <_printf_float+0xfe>
 8007c6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c72:	d118      	bne.n	8007ca6 <_printf_float+0x1c2>
 8007c74:	2900      	cmp	r1, #0
 8007c76:	6863      	ldr	r3, [r4, #4]
 8007c78:	dd0b      	ble.n	8007c92 <_printf_float+0x1ae>
 8007c7a:	6121      	str	r1, [r4, #16]
 8007c7c:	b913      	cbnz	r3, 8007c84 <_printf_float+0x1a0>
 8007c7e:	6822      	ldr	r2, [r4, #0]
 8007c80:	07d0      	lsls	r0, r2, #31
 8007c82:	d502      	bpl.n	8007c8a <_printf_float+0x1a6>
 8007c84:	3301      	adds	r3, #1
 8007c86:	440b      	add	r3, r1
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c8c:	f04f 0900 	mov.w	r9, #0
 8007c90:	e7de      	b.n	8007c50 <_printf_float+0x16c>
 8007c92:	b913      	cbnz	r3, 8007c9a <_printf_float+0x1b6>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	07d2      	lsls	r2, r2, #31
 8007c98:	d501      	bpl.n	8007c9e <_printf_float+0x1ba>
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	e7f4      	b.n	8007c88 <_printf_float+0x1a4>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e7f2      	b.n	8007c88 <_printf_float+0x1a4>
 8007ca2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	db05      	blt.n	8007cb8 <_printf_float+0x1d4>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	6121      	str	r1, [r4, #16]
 8007cb0:	07d8      	lsls	r0, r3, #31
 8007cb2:	d5ea      	bpl.n	8007c8a <_printf_float+0x1a6>
 8007cb4:	1c4b      	adds	r3, r1, #1
 8007cb6:	e7e7      	b.n	8007c88 <_printf_float+0x1a4>
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	bfd4      	ite	le
 8007cbc:	f1c1 0202 	rsble	r2, r1, #2
 8007cc0:	2201      	movgt	r2, #1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	e7e0      	b.n	8007c88 <_printf_float+0x1a4>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	055a      	lsls	r2, r3, #21
 8007cca:	d407      	bmi.n	8007cdc <_printf_float+0x1f8>
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	4642      	mov	r2, r8
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d12c      	bne.n	8007d34 <_printf_float+0x250>
 8007cda:	e764      	b.n	8007ba6 <_printf_float+0xc2>
 8007cdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ce0:	f240 80e0 	bls.w	8007ea4 <_printf_float+0x3c0>
 8007ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2300      	movs	r3, #0
 8007cec:	f7f8 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d034      	beq.n	8007d5e <_printf_float+0x27a>
 8007cf4:	4a37      	ldr	r2, [pc, #220]	; (8007dd4 <_printf_float+0x2f0>)
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f af51 	beq.w	8007ba6 <_printf_float+0xc2>
 8007d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	db02      	blt.n	8007d12 <_printf_float+0x22e>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	07d8      	lsls	r0, r3, #31
 8007d10:	d510      	bpl.n	8007d34 <_printf_float+0x250>
 8007d12:	ee18 3a10 	vmov	r3, s16
 8007d16:	4652      	mov	r2, sl
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	f43f af41 	beq.w	8007ba6 <_printf_float+0xc2>
 8007d24:	f04f 0800 	mov.w	r8, #0
 8007d28:	f104 091a 	add.w	r9, r4, #26
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	4543      	cmp	r3, r8
 8007d32:	dc09      	bgt.n	8007d48 <_printf_float+0x264>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	079b      	lsls	r3, r3, #30
 8007d38:	f100 8105 	bmi.w	8007f46 <_printf_float+0x462>
 8007d3c:	68e0      	ldr	r0, [r4, #12]
 8007d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d40:	4298      	cmp	r0, r3
 8007d42:	bfb8      	it	lt
 8007d44:	4618      	movlt	r0, r3
 8007d46:	e730      	b.n	8007baa <_printf_float+0xc6>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	464a      	mov	r2, r9
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f af27 	beq.w	8007ba6 <_printf_float+0xc2>
 8007d58:	f108 0801 	add.w	r8, r8, #1
 8007d5c:	e7e6      	b.n	8007d2c <_printf_float+0x248>
 8007d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc39      	bgt.n	8007dd8 <_printf_float+0x2f4>
 8007d64:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <_printf_float+0x2f0>)
 8007d66:	2301      	movs	r3, #1
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f af19 	beq.w	8007ba6 <_printf_float+0xc2>
 8007d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d102      	bne.n	8007d82 <_printf_float+0x29e>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	d5d8      	bpl.n	8007d34 <_printf_float+0x250>
 8007d82:	ee18 3a10 	vmov	r3, s16
 8007d86:	4652      	mov	r2, sl
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f af09 	beq.w	8007ba6 <_printf_float+0xc2>
 8007d94:	f04f 0900 	mov.w	r9, #0
 8007d98:	f104 0a1a 	add.w	sl, r4, #26
 8007d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9e:	425b      	negs	r3, r3
 8007da0:	454b      	cmp	r3, r9
 8007da2:	dc01      	bgt.n	8007da8 <_printf_float+0x2c4>
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	e792      	b.n	8007cce <_printf_float+0x1ea>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4652      	mov	r2, sl
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f aef7 	beq.w	8007ba6 <_printf_float+0xc2>
 8007db8:	f109 0901 	add.w	r9, r9, #1
 8007dbc:	e7ee      	b.n	8007d9c <_printf_float+0x2b8>
 8007dbe:	bf00      	nop
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	0800cab0 	.word	0x0800cab0
 8007dc8:	0800cab4 	.word	0x0800cab4
 8007dcc:	0800cabc 	.word	0x0800cabc
 8007dd0:	0800cab8 	.word	0x0800cab8
 8007dd4:	0800cac0 	.word	0x0800cac0
 8007dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	bfa8      	it	ge
 8007de0:	461a      	movge	r2, r3
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	4691      	mov	r9, r2
 8007de6:	dc37      	bgt.n	8007e58 <_printf_float+0x374>
 8007de8:	f04f 0b00 	mov.w	fp, #0
 8007dec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df0:	f104 021a 	add.w	r2, r4, #26
 8007df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	eba3 0309 	sub.w	r3, r3, r9
 8007dfc:	455b      	cmp	r3, fp
 8007dfe:	dc33      	bgt.n	8007e68 <_printf_float+0x384>
 8007e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e04:	429a      	cmp	r2, r3
 8007e06:	db3b      	blt.n	8007e80 <_printf_float+0x39c>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	07da      	lsls	r2, r3, #31
 8007e0c:	d438      	bmi.n	8007e80 <_printf_float+0x39c>
 8007e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	eba2 0901 	sub.w	r9, r2, r1
 8007e1a:	4599      	cmp	r9, r3
 8007e1c:	bfa8      	it	ge
 8007e1e:	4699      	movge	r9, r3
 8007e20:	f1b9 0f00 	cmp.w	r9, #0
 8007e24:	dc35      	bgt.n	8007e92 <_printf_float+0x3ae>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e2e:	f104 0a1a 	add.w	sl, r4, #26
 8007e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	eba3 0309 	sub.w	r3, r3, r9
 8007e3c:	4543      	cmp	r3, r8
 8007e3e:	f77f af79 	ble.w	8007d34 <_printf_float+0x250>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4652      	mov	r2, sl
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b8      	blx	r7
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f43f aeaa 	beq.w	8007ba6 <_printf_float+0xc2>
 8007e52:	f108 0801 	add.w	r8, r8, #1
 8007e56:	e7ec      	b.n	8007e32 <_printf_float+0x34e>
 8007e58:	4613      	mov	r3, r2
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	d1c0      	bne.n	8007de8 <_printf_float+0x304>
 8007e66:	e69e      	b.n	8007ba6 <_printf_float+0xc2>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	9205      	str	r2, [sp, #20]
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f ae97 	beq.w	8007ba6 <_printf_float+0xc2>
 8007e78:	9a05      	ldr	r2, [sp, #20]
 8007e7a:	f10b 0b01 	add.w	fp, fp, #1
 8007e7e:	e7b9      	b.n	8007df4 <_printf_float+0x310>
 8007e80:	ee18 3a10 	vmov	r3, s16
 8007e84:	4652      	mov	r2, sl
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b8      	blx	r7
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d1be      	bne.n	8007e0e <_printf_float+0x32a>
 8007e90:	e689      	b.n	8007ba6 <_printf_float+0xc2>
 8007e92:	9a05      	ldr	r2, [sp, #20]
 8007e94:	464b      	mov	r3, r9
 8007e96:	4442      	add	r2, r8
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d1c1      	bne.n	8007e26 <_printf_float+0x342>
 8007ea2:	e680      	b.n	8007ba6 <_printf_float+0xc2>
 8007ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	dc01      	bgt.n	8007eae <_printf_float+0x3ca>
 8007eaa:	07db      	lsls	r3, r3, #31
 8007eac:	d538      	bpl.n	8007f20 <_printf_float+0x43c>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f ae74 	beq.w	8007ba6 <_printf_float+0xc2>
 8007ebe:	ee18 3a10 	vmov	r3, s16
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	f43f ae6b 	beq.w	8007ba6 <_printf_float+0xc2>
 8007ed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f7f8 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007edc:	b9d8      	cbnz	r0, 8007f16 <_printf_float+0x432>
 8007ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee0:	f108 0201 	add.w	r2, r8, #1
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	d10e      	bne.n	8007f0e <_printf_float+0x42a>
 8007ef0:	e659      	b.n	8007ba6 <_printf_float+0xc2>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae52 	beq.w	8007ba6 <_printf_float+0xc2>
 8007f02:	f108 0801 	add.w	r8, r8, #1
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4543      	cmp	r3, r8
 8007f0c:	dcf1      	bgt.n	8007ef2 <_printf_float+0x40e>
 8007f0e:	464b      	mov	r3, r9
 8007f10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f14:	e6dc      	b.n	8007cd0 <_printf_float+0x1ec>
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	f104 0a1a 	add.w	sl, r4, #26
 8007f1e:	e7f2      	b.n	8007f06 <_printf_float+0x422>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4642      	mov	r2, r8
 8007f24:	e7df      	b.n	8007ee6 <_printf_float+0x402>
 8007f26:	2301      	movs	r3, #1
 8007f28:	464a      	mov	r2, r9
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f ae38 	beq.w	8007ba6 <_printf_float+0xc2>
 8007f36:	f108 0801 	add.w	r8, r8, #1
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f3e:	1a5b      	subs	r3, r3, r1
 8007f40:	4543      	cmp	r3, r8
 8007f42:	dcf0      	bgt.n	8007f26 <_printf_float+0x442>
 8007f44:	e6fa      	b.n	8007d3c <_printf_float+0x258>
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	f104 0919 	add.w	r9, r4, #25
 8007f4e:	e7f4      	b.n	8007f3a <_printf_float+0x456>

08007f50 <_printf_common>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	4616      	mov	r6, r2
 8007f56:	4699      	mov	r9, r3
 8007f58:	688a      	ldr	r2, [r1, #8]
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	bfb8      	it	lt
 8007f64:	4613      	movlt	r3, r2
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b10a      	cbz	r2, 8007f76 <_printf_common+0x26>
 8007f72:	3301      	adds	r3, #1
 8007f74:	6033      	str	r3, [r6, #0]
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	0699      	lsls	r1, r3, #26
 8007f7a:	bf42      	ittt	mi
 8007f7c:	6833      	ldrmi	r3, [r6, #0]
 8007f7e:	3302      	addmi	r3, #2
 8007f80:	6033      	strmi	r3, [r6, #0]
 8007f82:	6825      	ldr	r5, [r4, #0]
 8007f84:	f015 0506 	ands.w	r5, r5, #6
 8007f88:	d106      	bne.n	8007f98 <_printf_common+0x48>
 8007f8a:	f104 0a19 	add.w	sl, r4, #25
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	6832      	ldr	r2, [r6, #0]
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	dc26      	bgt.n	8007fe6 <_printf_common+0x96>
 8007f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f9c:	1e13      	subs	r3, r2, #0
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	bf18      	it	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	0692      	lsls	r2, r2, #26
 8007fa6:	d42b      	bmi.n	8008000 <_printf_common+0xb0>
 8007fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fac:	4649      	mov	r1, r9
 8007fae:	4638      	mov	r0, r7
 8007fb0:	47c0      	blx	r8
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d01e      	beq.n	8007ff4 <_printf_common+0xa4>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	68e5      	ldr	r5, [r4, #12]
 8007fba:	6832      	ldr	r2, [r6, #0]
 8007fbc:	f003 0306 	and.w	r3, r3, #6
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	bf08      	it	eq
 8007fc4:	1aad      	subeq	r5, r5, r2
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	6922      	ldr	r2, [r4, #16]
 8007fca:	bf0c      	ite	eq
 8007fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd0:	2500      	movne	r5, #0
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	bfc4      	itt	gt
 8007fd6:	1a9b      	subgt	r3, r3, r2
 8007fd8:	18ed      	addgt	r5, r5, r3
 8007fda:	2600      	movs	r6, #0
 8007fdc:	341a      	adds	r4, #26
 8007fde:	42b5      	cmp	r5, r6
 8007fe0:	d11a      	bne.n	8008018 <_printf_common+0xc8>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e008      	b.n	8007ff8 <_printf_common+0xa8>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4652      	mov	r2, sl
 8007fea:	4649      	mov	r1, r9
 8007fec:	4638      	mov	r0, r7
 8007fee:	47c0      	blx	r8
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d103      	bne.n	8007ffc <_printf_common+0xac>
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	e7c6      	b.n	8007f8e <_printf_common+0x3e>
 8008000:	18e1      	adds	r1, r4, r3
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	2030      	movs	r0, #48	; 0x30
 8008006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800800a:	4422      	add	r2, r4
 800800c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008014:	3302      	adds	r3, #2
 8008016:	e7c7      	b.n	8007fa8 <_printf_common+0x58>
 8008018:	2301      	movs	r3, #1
 800801a:	4622      	mov	r2, r4
 800801c:	4649      	mov	r1, r9
 800801e:	4638      	mov	r0, r7
 8008020:	47c0      	blx	r8
 8008022:	3001      	adds	r0, #1
 8008024:	d0e6      	beq.n	8007ff4 <_printf_common+0xa4>
 8008026:	3601      	adds	r6, #1
 8008028:	e7d9      	b.n	8007fde <_printf_common+0x8e>
	...

0800802c <_printf_i>:
 800802c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	4691      	mov	r9, r2
 8008034:	7e27      	ldrb	r7, [r4, #24]
 8008036:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008038:	2f78      	cmp	r7, #120	; 0x78
 800803a:	4680      	mov	r8, r0
 800803c:	469a      	mov	sl, r3
 800803e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008042:	d807      	bhi.n	8008054 <_printf_i+0x28>
 8008044:	2f62      	cmp	r7, #98	; 0x62
 8008046:	d80a      	bhi.n	800805e <_printf_i+0x32>
 8008048:	2f00      	cmp	r7, #0
 800804a:	f000 80d8 	beq.w	80081fe <_printf_i+0x1d2>
 800804e:	2f58      	cmp	r7, #88	; 0x58
 8008050:	f000 80a3 	beq.w	800819a <_printf_i+0x16e>
 8008054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800805c:	e03a      	b.n	80080d4 <_printf_i+0xa8>
 800805e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008062:	2b15      	cmp	r3, #21
 8008064:	d8f6      	bhi.n	8008054 <_printf_i+0x28>
 8008066:	a001      	add	r0, pc, #4	; (adr r0, 800806c <_printf_i+0x40>)
 8008068:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800806c:	080080c5 	.word	0x080080c5
 8008070:	080080d9 	.word	0x080080d9
 8008074:	08008055 	.word	0x08008055
 8008078:	08008055 	.word	0x08008055
 800807c:	08008055 	.word	0x08008055
 8008080:	08008055 	.word	0x08008055
 8008084:	080080d9 	.word	0x080080d9
 8008088:	08008055 	.word	0x08008055
 800808c:	08008055 	.word	0x08008055
 8008090:	08008055 	.word	0x08008055
 8008094:	08008055 	.word	0x08008055
 8008098:	080081e5 	.word	0x080081e5
 800809c:	08008109 	.word	0x08008109
 80080a0:	080081c7 	.word	0x080081c7
 80080a4:	08008055 	.word	0x08008055
 80080a8:	08008055 	.word	0x08008055
 80080ac:	08008207 	.word	0x08008207
 80080b0:	08008055 	.word	0x08008055
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008055 	.word	0x08008055
 80080bc:	08008055 	.word	0x08008055
 80080c0:	080081cf 	.word	0x080081cf
 80080c4:	680b      	ldr	r3, [r1, #0]
 80080c6:	1d1a      	adds	r2, r3, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	600a      	str	r2, [r1, #0]
 80080cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0a3      	b.n	8008220 <_printf_i+0x1f4>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	6808      	ldr	r0, [r1, #0]
 80080dc:	062e      	lsls	r6, r5, #24
 80080de:	f100 0304 	add.w	r3, r0, #4
 80080e2:	d50a      	bpl.n	80080fa <_printf_i+0xce>
 80080e4:	6805      	ldr	r5, [r0, #0]
 80080e6:	600b      	str	r3, [r1, #0]
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	da03      	bge.n	80080f4 <_printf_i+0xc8>
 80080ec:	232d      	movs	r3, #45	; 0x2d
 80080ee:	426d      	negs	r5, r5
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f4:	485e      	ldr	r0, [pc, #376]	; (8008270 <_printf_i+0x244>)
 80080f6:	230a      	movs	r3, #10
 80080f8:	e019      	b.n	800812e <_printf_i+0x102>
 80080fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080fe:	6805      	ldr	r5, [r0, #0]
 8008100:	600b      	str	r3, [r1, #0]
 8008102:	bf18      	it	ne
 8008104:	b22d      	sxthne	r5, r5
 8008106:	e7ef      	b.n	80080e8 <_printf_i+0xbc>
 8008108:	680b      	ldr	r3, [r1, #0]
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	1d18      	adds	r0, r3, #4
 800810e:	6008      	str	r0, [r1, #0]
 8008110:	0628      	lsls	r0, r5, #24
 8008112:	d501      	bpl.n	8008118 <_printf_i+0xec>
 8008114:	681d      	ldr	r5, [r3, #0]
 8008116:	e002      	b.n	800811e <_printf_i+0xf2>
 8008118:	0669      	lsls	r1, r5, #25
 800811a:	d5fb      	bpl.n	8008114 <_printf_i+0xe8>
 800811c:	881d      	ldrh	r5, [r3, #0]
 800811e:	4854      	ldr	r0, [pc, #336]	; (8008270 <_printf_i+0x244>)
 8008120:	2f6f      	cmp	r7, #111	; 0x6f
 8008122:	bf0c      	ite	eq
 8008124:	2308      	moveq	r3, #8
 8008126:	230a      	movne	r3, #10
 8008128:	2100      	movs	r1, #0
 800812a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800812e:	6866      	ldr	r6, [r4, #4]
 8008130:	60a6      	str	r6, [r4, #8]
 8008132:	2e00      	cmp	r6, #0
 8008134:	bfa2      	ittt	ge
 8008136:	6821      	ldrge	r1, [r4, #0]
 8008138:	f021 0104 	bicge.w	r1, r1, #4
 800813c:	6021      	strge	r1, [r4, #0]
 800813e:	b90d      	cbnz	r5, 8008144 <_printf_i+0x118>
 8008140:	2e00      	cmp	r6, #0
 8008142:	d04d      	beq.n	80081e0 <_printf_i+0x1b4>
 8008144:	4616      	mov	r6, r2
 8008146:	fbb5 f1f3 	udiv	r1, r5, r3
 800814a:	fb03 5711 	mls	r7, r3, r1, r5
 800814e:	5dc7      	ldrb	r7, [r0, r7]
 8008150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008154:	462f      	mov	r7, r5
 8008156:	42bb      	cmp	r3, r7
 8008158:	460d      	mov	r5, r1
 800815a:	d9f4      	bls.n	8008146 <_printf_i+0x11a>
 800815c:	2b08      	cmp	r3, #8
 800815e:	d10b      	bne.n	8008178 <_printf_i+0x14c>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07df      	lsls	r7, r3, #31
 8008164:	d508      	bpl.n	8008178 <_printf_i+0x14c>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	6861      	ldr	r1, [r4, #4]
 800816a:	4299      	cmp	r1, r3
 800816c:	bfde      	ittt	le
 800816e:	2330      	movle	r3, #48	; 0x30
 8008170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008178:	1b92      	subs	r2, r2, r6
 800817a:	6122      	str	r2, [r4, #16]
 800817c:	f8cd a000 	str.w	sl, [sp]
 8008180:	464b      	mov	r3, r9
 8008182:	aa03      	add	r2, sp, #12
 8008184:	4621      	mov	r1, r4
 8008186:	4640      	mov	r0, r8
 8008188:	f7ff fee2 	bl	8007f50 <_printf_common>
 800818c:	3001      	adds	r0, #1
 800818e:	d14c      	bne.n	800822a <_printf_i+0x1fe>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	b004      	add	sp, #16
 8008196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819a:	4835      	ldr	r0, [pc, #212]	; (8008270 <_printf_i+0x244>)
 800819c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	680e      	ldr	r6, [r1, #0]
 80081a4:	061f      	lsls	r7, r3, #24
 80081a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80081aa:	600e      	str	r6, [r1, #0]
 80081ac:	d514      	bpl.n	80081d8 <_printf_i+0x1ac>
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	bf44      	itt	mi
 80081b2:	f043 0320 	orrmi.w	r3, r3, #32
 80081b6:	6023      	strmi	r3, [r4, #0]
 80081b8:	b91d      	cbnz	r5, 80081c2 <_printf_i+0x196>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	f023 0320 	bic.w	r3, r3, #32
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	2310      	movs	r3, #16
 80081c4:	e7b0      	b.n	8008128 <_printf_i+0xfc>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f043 0320 	orr.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	2378      	movs	r3, #120	; 0x78
 80081d0:	4828      	ldr	r0, [pc, #160]	; (8008274 <_printf_i+0x248>)
 80081d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081d6:	e7e3      	b.n	80081a0 <_printf_i+0x174>
 80081d8:	065e      	lsls	r6, r3, #25
 80081da:	bf48      	it	mi
 80081dc:	b2ad      	uxthmi	r5, r5
 80081de:	e7e6      	b.n	80081ae <_printf_i+0x182>
 80081e0:	4616      	mov	r6, r2
 80081e2:	e7bb      	b.n	800815c <_printf_i+0x130>
 80081e4:	680b      	ldr	r3, [r1, #0]
 80081e6:	6826      	ldr	r6, [r4, #0]
 80081e8:	6960      	ldr	r0, [r4, #20]
 80081ea:	1d1d      	adds	r5, r3, #4
 80081ec:	600d      	str	r5, [r1, #0]
 80081ee:	0635      	lsls	r5, r6, #24
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0x1cc>
 80081f4:	6018      	str	r0, [r3, #0]
 80081f6:	e002      	b.n	80081fe <_printf_i+0x1d2>
 80081f8:	0671      	lsls	r1, r6, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0x1c8>
 80081fc:	8018      	strh	r0, [r3, #0]
 80081fe:	2300      	movs	r3, #0
 8008200:	6123      	str	r3, [r4, #16]
 8008202:	4616      	mov	r6, r2
 8008204:	e7ba      	b.n	800817c <_printf_i+0x150>
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	1d1a      	adds	r2, r3, #4
 800820a:	600a      	str	r2, [r1, #0]
 800820c:	681e      	ldr	r6, [r3, #0]
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	2100      	movs	r1, #0
 8008212:	4630      	mov	r0, r6
 8008214:	f7f7 ffe4 	bl	80001e0 <memchr>
 8008218:	b108      	cbz	r0, 800821e <_printf_i+0x1f2>
 800821a:	1b80      	subs	r0, r0, r6
 800821c:	6060      	str	r0, [r4, #4]
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	2300      	movs	r3, #0
 8008224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008228:	e7a8      	b.n	800817c <_printf_i+0x150>
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	4632      	mov	r2, r6
 800822e:	4649      	mov	r1, r9
 8008230:	4640      	mov	r0, r8
 8008232:	47d0      	blx	sl
 8008234:	3001      	adds	r0, #1
 8008236:	d0ab      	beq.n	8008190 <_printf_i+0x164>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	079b      	lsls	r3, r3, #30
 800823c:	d413      	bmi.n	8008266 <_printf_i+0x23a>
 800823e:	68e0      	ldr	r0, [r4, #12]
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	4298      	cmp	r0, r3
 8008244:	bfb8      	it	lt
 8008246:	4618      	movlt	r0, r3
 8008248:	e7a4      	b.n	8008194 <_printf_i+0x168>
 800824a:	2301      	movs	r3, #1
 800824c:	4632      	mov	r2, r6
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	47d0      	blx	sl
 8008254:	3001      	adds	r0, #1
 8008256:	d09b      	beq.n	8008190 <_printf_i+0x164>
 8008258:	3501      	adds	r5, #1
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	9903      	ldr	r1, [sp, #12]
 800825e:	1a5b      	subs	r3, r3, r1
 8008260:	42ab      	cmp	r3, r5
 8008262:	dcf2      	bgt.n	800824a <_printf_i+0x21e>
 8008264:	e7eb      	b.n	800823e <_printf_i+0x212>
 8008266:	2500      	movs	r5, #0
 8008268:	f104 0619 	add.w	r6, r4, #25
 800826c:	e7f5      	b.n	800825a <_printf_i+0x22e>
 800826e:	bf00      	nop
 8008270:	0800cac2 	.word	0x0800cac2
 8008274:	0800cad3 	.word	0x0800cad3

08008278 <_scanf_float>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	b087      	sub	sp, #28
 800827e:	4617      	mov	r7, r2
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	688b      	ldr	r3, [r1, #8]
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800828a:	bf83      	ittte	hi
 800828c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008290:	195b      	addhi	r3, r3, r5
 8008292:	9302      	strhi	r3, [sp, #8]
 8008294:	2300      	movls	r3, #0
 8008296:	bf86      	itte	hi
 8008298:	f240 135d 	movwhi	r3, #349	; 0x15d
 800829c:	608b      	strhi	r3, [r1, #8]
 800829e:	9302      	strls	r3, [sp, #8]
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	468b      	mov	fp, r1
 80082a4:	2500      	movs	r5, #0
 80082a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80082ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082b2:	4680      	mov	r8, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	465e      	mov	r6, fp
 80082b8:	46aa      	mov	sl, r5
 80082ba:	46a9      	mov	r9, r5
 80082bc:	9501      	str	r5, [sp, #4]
 80082be:	68a2      	ldr	r2, [r4, #8]
 80082c0:	b152      	cbz	r2, 80082d8 <_scanf_float+0x60>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b4e      	cmp	r3, #78	; 0x4e
 80082c8:	d864      	bhi.n	8008394 <_scanf_float+0x11c>
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d83c      	bhi.n	8008348 <_scanf_float+0xd0>
 80082ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80082d2:	b2c8      	uxtb	r0, r1
 80082d4:	280e      	cmp	r0, #14
 80082d6:	d93a      	bls.n	800834e <_scanf_float+0xd6>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	d003      	beq.n	80082e6 <_scanf_float+0x6e>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ea:	f1ba 0f01 	cmp.w	sl, #1
 80082ee:	f200 8113 	bhi.w	8008518 <_scanf_float+0x2a0>
 80082f2:	455e      	cmp	r6, fp
 80082f4:	f200 8105 	bhi.w	8008502 <_scanf_float+0x28a>
 80082f8:	2501      	movs	r5, #1
 80082fa:	4628      	mov	r0, r5
 80082fc:	b007      	add	sp, #28
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008306:	2a0d      	cmp	r2, #13
 8008308:	d8e6      	bhi.n	80082d8 <_scanf_float+0x60>
 800830a:	a101      	add	r1, pc, #4	; (adr r1, 8008310 <_scanf_float+0x98>)
 800830c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008310:	0800844f 	.word	0x0800844f
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	080082d9 	.word	0x080082d9
 8008320:	080084af 	.word	0x080084af
 8008324:	08008487 	.word	0x08008487
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800845d 	.word	0x0800845d
 8008334:	080082d9 	.word	0x080082d9
 8008338:	080082d9 	.word	0x080082d9
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	08008415 	.word	0x08008415
 8008348:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800834c:	e7db      	b.n	8008306 <_scanf_float+0x8e>
 800834e:	290e      	cmp	r1, #14
 8008350:	d8c2      	bhi.n	80082d8 <_scanf_float+0x60>
 8008352:	a001      	add	r0, pc, #4	; (adr r0, 8008358 <_scanf_float+0xe0>)
 8008354:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008358:	08008407 	.word	0x08008407
 800835c:	080082d9 	.word	0x080082d9
 8008360:	08008407 	.word	0x08008407
 8008364:	0800849b 	.word	0x0800849b
 8008368:	080082d9 	.word	0x080082d9
 800836c:	080083b5 	.word	0x080083b5
 8008370:	080083f1 	.word	0x080083f1
 8008374:	080083f1 	.word	0x080083f1
 8008378:	080083f1 	.word	0x080083f1
 800837c:	080083f1 	.word	0x080083f1
 8008380:	080083f1 	.word	0x080083f1
 8008384:	080083f1 	.word	0x080083f1
 8008388:	080083f1 	.word	0x080083f1
 800838c:	080083f1 	.word	0x080083f1
 8008390:	080083f1 	.word	0x080083f1
 8008394:	2b6e      	cmp	r3, #110	; 0x6e
 8008396:	d809      	bhi.n	80083ac <_scanf_float+0x134>
 8008398:	2b60      	cmp	r3, #96	; 0x60
 800839a:	d8b2      	bhi.n	8008302 <_scanf_float+0x8a>
 800839c:	2b54      	cmp	r3, #84	; 0x54
 800839e:	d077      	beq.n	8008490 <_scanf_float+0x218>
 80083a0:	2b59      	cmp	r3, #89	; 0x59
 80083a2:	d199      	bne.n	80082d8 <_scanf_float+0x60>
 80083a4:	2d07      	cmp	r5, #7
 80083a6:	d197      	bne.n	80082d8 <_scanf_float+0x60>
 80083a8:	2508      	movs	r5, #8
 80083aa:	e029      	b.n	8008400 <_scanf_float+0x188>
 80083ac:	2b74      	cmp	r3, #116	; 0x74
 80083ae:	d06f      	beq.n	8008490 <_scanf_float+0x218>
 80083b0:	2b79      	cmp	r3, #121	; 0x79
 80083b2:	e7f6      	b.n	80083a2 <_scanf_float+0x12a>
 80083b4:	6821      	ldr	r1, [r4, #0]
 80083b6:	05c8      	lsls	r0, r1, #23
 80083b8:	d51a      	bpl.n	80083f0 <_scanf_float+0x178>
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083c0:	6021      	str	r1, [r4, #0]
 80083c2:	f109 0901 	add.w	r9, r9, #1
 80083c6:	b11b      	cbz	r3, 80083d0 <_scanf_float+0x158>
 80083c8:	3b01      	subs	r3, #1
 80083ca:	3201      	adds	r2, #1
 80083cc:	9302      	str	r3, [sp, #8]
 80083ce:	60a2      	str	r2, [r4, #8]
 80083d0:	68a3      	ldr	r3, [r4, #8]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	3301      	adds	r3, #1
 80083da:	6123      	str	r3, [r4, #16]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3b01      	subs	r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	607b      	str	r3, [r7, #4]
 80083e4:	f340 8084 	ble.w	80084f0 <_scanf_float+0x278>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	e766      	b.n	80082be <_scanf_float+0x46>
 80083f0:	eb1a 0f05 	cmn.w	sl, r5
 80083f4:	f47f af70 	bne.w	80082d8 <_scanf_float+0x60>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	f806 3b01 	strb.w	r3, [r6], #1
 8008404:	e7e4      	b.n	80083d0 <_scanf_float+0x158>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0610      	lsls	r0, r2, #24
 800840a:	f57f af65 	bpl.w	80082d8 <_scanf_float+0x60>
 800840e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008412:	e7f4      	b.n	80083fe <_scanf_float+0x186>
 8008414:	f1ba 0f00 	cmp.w	sl, #0
 8008418:	d10e      	bne.n	8008438 <_scanf_float+0x1c0>
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	d10e      	bne.n	800843e <_scanf_float+0x1c6>
 8008420:	6822      	ldr	r2, [r4, #0]
 8008422:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008426:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800842a:	d108      	bne.n	800843e <_scanf_float+0x1c6>
 800842c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	f04f 0a01 	mov.w	sl, #1
 8008436:	e7e3      	b.n	8008400 <_scanf_float+0x188>
 8008438:	f1ba 0f02 	cmp.w	sl, #2
 800843c:	d055      	beq.n	80084ea <_scanf_float+0x272>
 800843e:	2d01      	cmp	r5, #1
 8008440:	d002      	beq.n	8008448 <_scanf_float+0x1d0>
 8008442:	2d04      	cmp	r5, #4
 8008444:	f47f af48 	bne.w	80082d8 <_scanf_float+0x60>
 8008448:	3501      	adds	r5, #1
 800844a:	b2ed      	uxtb	r5, r5
 800844c:	e7d8      	b.n	8008400 <_scanf_float+0x188>
 800844e:	f1ba 0f01 	cmp.w	sl, #1
 8008452:	f47f af41 	bne.w	80082d8 <_scanf_float+0x60>
 8008456:	f04f 0a02 	mov.w	sl, #2
 800845a:	e7d1      	b.n	8008400 <_scanf_float+0x188>
 800845c:	b97d      	cbnz	r5, 800847e <_scanf_float+0x206>
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	f47f af3c 	bne.w	80082de <_scanf_float+0x66>
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800846c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008470:	f47f af39 	bne.w	80082e6 <_scanf_float+0x6e>
 8008474:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008478:	6022      	str	r2, [r4, #0]
 800847a:	2501      	movs	r5, #1
 800847c:	e7c0      	b.n	8008400 <_scanf_float+0x188>
 800847e:	2d03      	cmp	r5, #3
 8008480:	d0e2      	beq.n	8008448 <_scanf_float+0x1d0>
 8008482:	2d05      	cmp	r5, #5
 8008484:	e7de      	b.n	8008444 <_scanf_float+0x1cc>
 8008486:	2d02      	cmp	r5, #2
 8008488:	f47f af26 	bne.w	80082d8 <_scanf_float+0x60>
 800848c:	2503      	movs	r5, #3
 800848e:	e7b7      	b.n	8008400 <_scanf_float+0x188>
 8008490:	2d06      	cmp	r5, #6
 8008492:	f47f af21 	bne.w	80082d8 <_scanf_float+0x60>
 8008496:	2507      	movs	r5, #7
 8008498:	e7b2      	b.n	8008400 <_scanf_float+0x188>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	0591      	lsls	r1, r2, #22
 800849e:	f57f af1b 	bpl.w	80082d8 <_scanf_float+0x60>
 80084a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084a6:	6022      	str	r2, [r4, #0]
 80084a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80084ac:	e7a8      	b.n	8008400 <_scanf_float+0x188>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084b8:	d006      	beq.n	80084c8 <_scanf_float+0x250>
 80084ba:	0550      	lsls	r0, r2, #21
 80084bc:	f57f af0c 	bpl.w	80082d8 <_scanf_float+0x60>
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	f43f af0f 	beq.w	80082e6 <_scanf_float+0x6e>
 80084c8:	0591      	lsls	r1, r2, #22
 80084ca:	bf58      	it	pl
 80084cc:	9901      	ldrpl	r1, [sp, #4]
 80084ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084d2:	bf58      	it	pl
 80084d4:	eba9 0101 	subpl.w	r1, r9, r1
 80084d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80084dc:	bf58      	it	pl
 80084de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80084e2:	6022      	str	r2, [r4, #0]
 80084e4:	f04f 0900 	mov.w	r9, #0
 80084e8:	e78a      	b.n	8008400 <_scanf_float+0x188>
 80084ea:	f04f 0a03 	mov.w	sl, #3
 80084ee:	e787      	b.n	8008400 <_scanf_float+0x188>
 80084f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084f4:	4639      	mov	r1, r7
 80084f6:	4640      	mov	r0, r8
 80084f8:	4798      	blx	r3
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f43f aedf 	beq.w	80082be <_scanf_float+0x46>
 8008500:	e6ea      	b.n	80082d8 <_scanf_float+0x60>
 8008502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800850a:	463a      	mov	r2, r7
 800850c:	4640      	mov	r0, r8
 800850e:	4798      	blx	r3
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	3b01      	subs	r3, #1
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	e6ec      	b.n	80082f2 <_scanf_float+0x7a>
 8008518:	1e6b      	subs	r3, r5, #1
 800851a:	2b06      	cmp	r3, #6
 800851c:	d825      	bhi.n	800856a <_scanf_float+0x2f2>
 800851e:	2d02      	cmp	r5, #2
 8008520:	d836      	bhi.n	8008590 <_scanf_float+0x318>
 8008522:	455e      	cmp	r6, fp
 8008524:	f67f aee8 	bls.w	80082f8 <_scanf_float+0x80>
 8008528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800852c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008530:	463a      	mov	r2, r7
 8008532:	4640      	mov	r0, r8
 8008534:	4798      	blx	r3
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	3b01      	subs	r3, #1
 800853a:	6123      	str	r3, [r4, #16]
 800853c:	e7f1      	b.n	8008522 <_scanf_float+0x2aa>
 800853e:	9802      	ldr	r0, [sp, #8]
 8008540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008544:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008548:	9002      	str	r0, [sp, #8]
 800854a:	463a      	mov	r2, r7
 800854c:	4640      	mov	r0, r8
 800854e:	4798      	blx	r3
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	3b01      	subs	r3, #1
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800855a:	fa5f fa8a 	uxtb.w	sl, sl
 800855e:	f1ba 0f02 	cmp.w	sl, #2
 8008562:	d1ec      	bne.n	800853e <_scanf_float+0x2c6>
 8008564:	3d03      	subs	r5, #3
 8008566:	b2ed      	uxtb	r5, r5
 8008568:	1b76      	subs	r6, r6, r5
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	05da      	lsls	r2, r3, #23
 800856e:	d52f      	bpl.n	80085d0 <_scanf_float+0x358>
 8008570:	055b      	lsls	r3, r3, #21
 8008572:	d510      	bpl.n	8008596 <_scanf_float+0x31e>
 8008574:	455e      	cmp	r6, fp
 8008576:	f67f aebf 	bls.w	80082f8 <_scanf_float+0x80>
 800857a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800857e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008582:	463a      	mov	r2, r7
 8008584:	4640      	mov	r0, r8
 8008586:	4798      	blx	r3
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	e7f1      	b.n	8008574 <_scanf_float+0x2fc>
 8008590:	46aa      	mov	sl, r5
 8008592:	9602      	str	r6, [sp, #8]
 8008594:	e7df      	b.n	8008556 <_scanf_float+0x2de>
 8008596:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	2965      	cmp	r1, #101	; 0x65
 800859e:	f103 33ff 	add.w	r3, r3, #4294967295
 80085a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80085a6:	6123      	str	r3, [r4, #16]
 80085a8:	d00c      	beq.n	80085c4 <_scanf_float+0x34c>
 80085aa:	2945      	cmp	r1, #69	; 0x45
 80085ac:	d00a      	beq.n	80085c4 <_scanf_float+0x34c>
 80085ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b2:	463a      	mov	r2, r7
 80085b4:	4640      	mov	r0, r8
 80085b6:	4798      	blx	r3
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085be:	3b01      	subs	r3, #1
 80085c0:	1eb5      	subs	r5, r6, #2
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085c8:	463a      	mov	r2, r7
 80085ca:	4640      	mov	r0, r8
 80085cc:	4798      	blx	r3
 80085ce:	462e      	mov	r6, r5
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	f015 0510 	ands.w	r5, r5, #16
 80085d6:	d158      	bne.n	800868a <_scanf_float+0x412>
 80085d8:	7035      	strb	r5, [r6, #0]
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e4:	d11c      	bne.n	8008620 <_scanf_float+0x3a8>
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	454b      	cmp	r3, r9
 80085ea:	eba3 0209 	sub.w	r2, r3, r9
 80085ee:	d124      	bne.n	800863a <_scanf_float+0x3c2>
 80085f0:	2200      	movs	r2, #0
 80085f2:	4659      	mov	r1, fp
 80085f4:	4640      	mov	r0, r8
 80085f6:	f000 ff39 	bl	800946c <_strtod_r>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	6821      	ldr	r1, [r4, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f011 0f02 	tst.w	r1, #2
 8008604:	ec57 6b10 	vmov	r6, r7, d0
 8008608:	f103 0204 	add.w	r2, r3, #4
 800860c:	d020      	beq.n	8008650 <_scanf_float+0x3d8>
 800860e:	9903      	ldr	r1, [sp, #12]
 8008610:	600a      	str	r2, [r1, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	e9c3 6700 	strd	r6, r7, [r3]
 8008618:	68e3      	ldr	r3, [r4, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60e3      	str	r3, [r4, #12]
 800861e:	e66c      	b.n	80082fa <_scanf_float+0x82>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0e4      	beq.n	80085f0 <_scanf_float+0x378>
 8008626:	9905      	ldr	r1, [sp, #20]
 8008628:	230a      	movs	r3, #10
 800862a:	462a      	mov	r2, r5
 800862c:	3101      	adds	r1, #1
 800862e:	4640      	mov	r0, r8
 8008630:	f000 ffa6 	bl	8009580 <_strtol_r>
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	9e05      	ldr	r6, [sp, #20]
 8008638:	1ac2      	subs	r2, r0, r3
 800863a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800863e:	429e      	cmp	r6, r3
 8008640:	bf28      	it	cs
 8008642:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008646:	4912      	ldr	r1, [pc, #72]	; (8008690 <_scanf_float+0x418>)
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f8c9 	bl	80087e0 <siprintf>
 800864e:	e7cf      	b.n	80085f0 <_scanf_float+0x378>
 8008650:	f011 0f04 	tst.w	r1, #4
 8008654:	9903      	ldr	r1, [sp, #12]
 8008656:	600a      	str	r2, [r1, #0]
 8008658:	d1db      	bne.n	8008612 <_scanf_float+0x39a>
 800865a:	f8d3 8000 	ldr.w	r8, [r3]
 800865e:	ee10 2a10 	vmov	r2, s0
 8008662:	ee10 0a10 	vmov	r0, s0
 8008666:	463b      	mov	r3, r7
 8008668:	4639      	mov	r1, r7
 800866a:	f7f8 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800866e:	b128      	cbz	r0, 800867c <_scanf_float+0x404>
 8008670:	4808      	ldr	r0, [pc, #32]	; (8008694 <_scanf_float+0x41c>)
 8008672:	f000 f8af 	bl	80087d4 <nanf>
 8008676:	ed88 0a00 	vstr	s0, [r8]
 800867a:	e7cd      	b.n	8008618 <_scanf_float+0x3a0>
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 fab2 	bl	8000be8 <__aeabi_d2f>
 8008684:	f8c8 0000 	str.w	r0, [r8]
 8008688:	e7c6      	b.n	8008618 <_scanf_float+0x3a0>
 800868a:	2500      	movs	r5, #0
 800868c:	e635      	b.n	80082fa <_scanf_float+0x82>
 800868e:	bf00      	nop
 8008690:	0800cae4 	.word	0x0800cae4
 8008694:	0800cf60 	.word	0x0800cf60

08008698 <iprintf>:
 8008698:	b40f      	push	{r0, r1, r2, r3}
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <iprintf+0x2c>)
 800869c:	b513      	push	{r0, r1, r4, lr}
 800869e:	681c      	ldr	r4, [r3, #0]
 80086a0:	b124      	cbz	r4, 80086ac <iprintf+0x14>
 80086a2:	69a3      	ldr	r3, [r4, #24]
 80086a4:	b913      	cbnz	r3, 80086ac <iprintf+0x14>
 80086a6:	4620      	mov	r0, r4
 80086a8:	f001 ffc0 	bl	800a62c <__sinit>
 80086ac:	ab05      	add	r3, sp, #20
 80086ae:	9a04      	ldr	r2, [sp, #16]
 80086b0:	68a1      	ldr	r1, [r4, #8]
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	4620      	mov	r0, r4
 80086b6:	f003 fa9f 	bl	800bbf8 <_vfiprintf_r>
 80086ba:	b002      	add	sp, #8
 80086bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c0:	b004      	add	sp, #16
 80086c2:	4770      	bx	lr
 80086c4:	20000024 	.word	0x20000024

080086c8 <_puts_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	460e      	mov	r6, r1
 80086cc:	4605      	mov	r5, r0
 80086ce:	b118      	cbz	r0, 80086d8 <_puts_r+0x10>
 80086d0:	6983      	ldr	r3, [r0, #24]
 80086d2:	b90b      	cbnz	r3, 80086d8 <_puts_r+0x10>
 80086d4:	f001 ffaa 	bl	800a62c <__sinit>
 80086d8:	69ab      	ldr	r3, [r5, #24]
 80086da:	68ac      	ldr	r4, [r5, #8]
 80086dc:	b913      	cbnz	r3, 80086e4 <_puts_r+0x1c>
 80086de:	4628      	mov	r0, r5
 80086e0:	f001 ffa4 	bl	800a62c <__sinit>
 80086e4:	4b2c      	ldr	r3, [pc, #176]	; (8008798 <_puts_r+0xd0>)
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d120      	bne.n	800872c <_puts_r+0x64>
 80086ea:	686c      	ldr	r4, [r5, #4]
 80086ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d405      	bmi.n	80086fe <_puts_r+0x36>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	0598      	lsls	r0, r3, #22
 80086f6:	d402      	bmi.n	80086fe <_puts_r+0x36>
 80086f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086fa:	f002 fba8 	bl	800ae4e <__retarget_lock_acquire_recursive>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	0719      	lsls	r1, r3, #28
 8008702:	d51d      	bpl.n	8008740 <_puts_r+0x78>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b1db      	cbz	r3, 8008740 <_puts_r+0x78>
 8008708:	3e01      	subs	r6, #1
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008710:	3b01      	subs	r3, #1
 8008712:	60a3      	str	r3, [r4, #8]
 8008714:	bb39      	cbnz	r1, 8008766 <_puts_r+0x9e>
 8008716:	2b00      	cmp	r3, #0
 8008718:	da38      	bge.n	800878c <_puts_r+0xc4>
 800871a:	4622      	mov	r2, r4
 800871c:	210a      	movs	r1, #10
 800871e:	4628      	mov	r0, r5
 8008720:	f000 ff30 	bl	8009584 <__swbuf_r>
 8008724:	3001      	adds	r0, #1
 8008726:	d011      	beq.n	800874c <_puts_r+0x84>
 8008728:	250a      	movs	r5, #10
 800872a:	e011      	b.n	8008750 <_puts_r+0x88>
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <_puts_r+0xd4>)
 800872e:	429c      	cmp	r4, r3
 8008730:	d101      	bne.n	8008736 <_puts_r+0x6e>
 8008732:	68ac      	ldr	r4, [r5, #8]
 8008734:	e7da      	b.n	80086ec <_puts_r+0x24>
 8008736:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <_puts_r+0xd8>)
 8008738:	429c      	cmp	r4, r3
 800873a:	bf08      	it	eq
 800873c:	68ec      	ldreq	r4, [r5, #12]
 800873e:	e7d5      	b.n	80086ec <_puts_r+0x24>
 8008740:	4621      	mov	r1, r4
 8008742:	4628      	mov	r0, r5
 8008744:	f000 ff70 	bl	8009628 <__swsetup_r>
 8008748:	2800      	cmp	r0, #0
 800874a:	d0dd      	beq.n	8008708 <_puts_r+0x40>
 800874c:	f04f 35ff 	mov.w	r5, #4294967295
 8008750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008752:	07da      	lsls	r2, r3, #31
 8008754:	d405      	bmi.n	8008762 <_puts_r+0x9a>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	d402      	bmi.n	8008762 <_puts_r+0x9a>
 800875c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875e:	f002 fb77 	bl	800ae50 <__retarget_lock_release_recursive>
 8008762:	4628      	mov	r0, r5
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	2b00      	cmp	r3, #0
 8008768:	da04      	bge.n	8008774 <_puts_r+0xac>
 800876a:	69a2      	ldr	r2, [r4, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	dc06      	bgt.n	800877e <_puts_r+0xb6>
 8008770:	290a      	cmp	r1, #10
 8008772:	d004      	beq.n	800877e <_puts_r+0xb6>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	6022      	str	r2, [r4, #0]
 800877a:	7019      	strb	r1, [r3, #0]
 800877c:	e7c5      	b.n	800870a <_puts_r+0x42>
 800877e:	4622      	mov	r2, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 feff 	bl	8009584 <__swbuf_r>
 8008786:	3001      	adds	r0, #1
 8008788:	d1bf      	bne.n	800870a <_puts_r+0x42>
 800878a:	e7df      	b.n	800874c <_puts_r+0x84>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	250a      	movs	r5, #10
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	701d      	strb	r5, [r3, #0]
 8008796:	e7db      	b.n	8008750 <_puts_r+0x88>
 8008798:	0800ccf8 	.word	0x0800ccf8
 800879c:	0800cd18 	.word	0x0800cd18
 80087a0:	0800ccd8 	.word	0x0800ccd8

080087a4 <puts>:
 80087a4:	4b02      	ldr	r3, [pc, #8]	; (80087b0 <puts+0xc>)
 80087a6:	4601      	mov	r1, r0
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f7ff bf8d 	b.w	80086c8 <_puts_r>
 80087ae:	bf00      	nop
 80087b0:	20000024 	.word	0x20000024

080087b4 <_sbrk_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d06      	ldr	r5, [pc, #24]	; (80087d0 <_sbrk_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f7fa fa72 	bl	8002ca8 <_sbrk>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_sbrk_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_sbrk_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20003490 	.word	0x20003490

080087d4 <nanf>:
 80087d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087dc <nanf+0x8>
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	7fc00000 	.word	0x7fc00000

080087e0 <siprintf>:
 80087e0:	b40e      	push	{r1, r2, r3}
 80087e2:	b500      	push	{lr}
 80087e4:	b09c      	sub	sp, #112	; 0x70
 80087e6:	ab1d      	add	r3, sp, #116	; 0x74
 80087e8:	9002      	str	r0, [sp, #8]
 80087ea:	9006      	str	r0, [sp, #24]
 80087ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087f0:	4809      	ldr	r0, [pc, #36]	; (8008818 <siprintf+0x38>)
 80087f2:	9107      	str	r1, [sp, #28]
 80087f4:	9104      	str	r1, [sp, #16]
 80087f6:	4909      	ldr	r1, [pc, #36]	; (800881c <siprintf+0x3c>)
 80087f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fc:	9105      	str	r1, [sp, #20]
 80087fe:	6800      	ldr	r0, [r0, #0]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	a902      	add	r1, sp, #8
 8008804:	f003 f8ce 	bl	800b9a4 <_svfiprintf_r>
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	b01c      	add	sp, #112	; 0x70
 8008810:	f85d eb04 	ldr.w	lr, [sp], #4
 8008814:	b003      	add	sp, #12
 8008816:	4770      	bx	lr
 8008818:	20000024 	.word	0x20000024
 800881c:	ffff0208 	.word	0xffff0208

08008820 <sulp>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	4604      	mov	r4, r0
 8008824:	460d      	mov	r5, r1
 8008826:	ec45 4b10 	vmov	d0, r4, r5
 800882a:	4616      	mov	r6, r2
 800882c:	f002 ff00 	bl	800b630 <__ulp>
 8008830:	ec51 0b10 	vmov	r0, r1, d0
 8008834:	b17e      	cbz	r6, 8008856 <sulp+0x36>
 8008836:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800883a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800883e:	2b00      	cmp	r3, #0
 8008840:	dd09      	ble.n	8008856 <sulp+0x36>
 8008842:	051b      	lsls	r3, r3, #20
 8008844:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008848:	2400      	movs	r4, #0
 800884a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800884e:	4622      	mov	r2, r4
 8008850:	462b      	mov	r3, r5
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	bd70      	pop	{r4, r5, r6, pc}

08008858 <_strtod_l>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	b0a3      	sub	sp, #140	; 0x8c
 800885e:	461f      	mov	r7, r3
 8008860:	2300      	movs	r3, #0
 8008862:	931e      	str	r3, [sp, #120]	; 0x78
 8008864:	4ba4      	ldr	r3, [pc, #656]	; (8008af8 <_strtod_l+0x2a0>)
 8008866:	9219      	str	r2, [sp, #100]	; 0x64
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	4604      	mov	r4, r0
 800886e:	4618      	mov	r0, r3
 8008870:	4688      	mov	r8, r1
 8008872:	f7f7 fcad 	bl	80001d0 <strlen>
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	4605      	mov	r5, r0
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	2a2b      	cmp	r2, #43	; 0x2b
 800888a:	d04c      	beq.n	8008926 <_strtod_l+0xce>
 800888c:	d839      	bhi.n	8008902 <_strtod_l+0xaa>
 800888e:	2a0d      	cmp	r2, #13
 8008890:	d832      	bhi.n	80088f8 <_strtod_l+0xa0>
 8008892:	2a08      	cmp	r2, #8
 8008894:	d832      	bhi.n	80088fc <_strtod_l+0xa4>
 8008896:	2a00      	cmp	r2, #0
 8008898:	d03c      	beq.n	8008914 <_strtod_l+0xbc>
 800889a:	2300      	movs	r3, #0
 800889c:	930e      	str	r3, [sp, #56]	; 0x38
 800889e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80088a0:	7833      	ldrb	r3, [r6, #0]
 80088a2:	2b30      	cmp	r3, #48	; 0x30
 80088a4:	f040 80b4 	bne.w	8008a10 <_strtod_l+0x1b8>
 80088a8:	7873      	ldrb	r3, [r6, #1]
 80088aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088ae:	2b58      	cmp	r3, #88	; 0x58
 80088b0:	d16c      	bne.n	800898c <_strtod_l+0x134>
 80088b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	ab1e      	add	r3, sp, #120	; 0x78
 80088b8:	9702      	str	r7, [sp, #8]
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	4a8f      	ldr	r2, [pc, #572]	; (8008afc <_strtod_l+0x2a4>)
 80088be:	ab1f      	add	r3, sp, #124	; 0x7c
 80088c0:	a91d      	add	r1, sp, #116	; 0x74
 80088c2:	4620      	mov	r0, r4
 80088c4:	f001 ffb6 	bl	800a834 <__gethex>
 80088c8:	f010 0707 	ands.w	r7, r0, #7
 80088cc:	4605      	mov	r5, r0
 80088ce:	d005      	beq.n	80088dc <_strtod_l+0x84>
 80088d0:	2f06      	cmp	r7, #6
 80088d2:	d12a      	bne.n	800892a <_strtod_l+0xd2>
 80088d4:	3601      	adds	r6, #1
 80088d6:	2300      	movs	r3, #0
 80088d8:	961d      	str	r6, [sp, #116]	; 0x74
 80088da:	930e      	str	r3, [sp, #56]	; 0x38
 80088dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 8596 	bne.w	8009410 <_strtod_l+0xbb8>
 80088e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e6:	b1db      	cbz	r3, 8008920 <_strtod_l+0xc8>
 80088e8:	4652      	mov	r2, sl
 80088ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088ee:	ec43 2b10 	vmov	d0, r2, r3
 80088f2:	b023      	add	sp, #140	; 0x8c
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	2a20      	cmp	r2, #32
 80088fa:	d1ce      	bne.n	800889a <_strtod_l+0x42>
 80088fc:	3301      	adds	r3, #1
 80088fe:	931d      	str	r3, [sp, #116]	; 0x74
 8008900:	e7c0      	b.n	8008884 <_strtod_l+0x2c>
 8008902:	2a2d      	cmp	r2, #45	; 0x2d
 8008904:	d1c9      	bne.n	800889a <_strtod_l+0x42>
 8008906:	2201      	movs	r2, #1
 8008908:	920e      	str	r2, [sp, #56]	; 0x38
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	921d      	str	r2, [sp, #116]	; 0x74
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1c4      	bne.n	800889e <_strtod_l+0x46>
 8008914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008916:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800891a:	2b00      	cmp	r3, #0
 800891c:	f040 8576 	bne.w	800940c <_strtod_l+0xbb4>
 8008920:	4652      	mov	r2, sl
 8008922:	465b      	mov	r3, fp
 8008924:	e7e3      	b.n	80088ee <_strtod_l+0x96>
 8008926:	2200      	movs	r2, #0
 8008928:	e7ee      	b.n	8008908 <_strtod_l+0xb0>
 800892a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800892c:	b13a      	cbz	r2, 800893e <_strtod_l+0xe6>
 800892e:	2135      	movs	r1, #53	; 0x35
 8008930:	a820      	add	r0, sp, #128	; 0x80
 8008932:	f002 ff88 	bl	800b846 <__copybits>
 8008936:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008938:	4620      	mov	r0, r4
 800893a:	f002 fb4d 	bl	800afd8 <_Bfree>
 800893e:	3f01      	subs	r7, #1
 8008940:	2f05      	cmp	r7, #5
 8008942:	d807      	bhi.n	8008954 <_strtod_l+0xfc>
 8008944:	e8df f007 	tbb	[pc, r7]
 8008948:	1d180b0e 	.word	0x1d180b0e
 800894c:	030e      	.short	0x030e
 800894e:	f04f 0b00 	mov.w	fp, #0
 8008952:	46da      	mov	sl, fp
 8008954:	0728      	lsls	r0, r5, #28
 8008956:	d5c1      	bpl.n	80088dc <_strtod_l+0x84>
 8008958:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800895c:	e7be      	b.n	80088dc <_strtod_l+0x84>
 800895e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008962:	e7f7      	b.n	8008954 <_strtod_l+0xfc>
 8008964:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008968:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800896a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800896e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008976:	e7ed      	b.n	8008954 <_strtod_l+0xfc>
 8008978:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008b00 <_strtod_l+0x2a8>
 800897c:	f04f 0a00 	mov.w	sl, #0
 8008980:	e7e8      	b.n	8008954 <_strtod_l+0xfc>
 8008982:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008986:	f04f 3aff 	mov.w	sl, #4294967295
 800898a:	e7e3      	b.n	8008954 <_strtod_l+0xfc>
 800898c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	921d      	str	r2, [sp, #116]	; 0x74
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b30      	cmp	r3, #48	; 0x30
 8008996:	d0f9      	beq.n	800898c <_strtod_l+0x134>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d09f      	beq.n	80088dc <_strtod_l+0x84>
 800899c:	2301      	movs	r3, #1
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089a6:	930a      	str	r3, [sp, #40]	; 0x28
 80089a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80089ac:	464f      	mov	r7, r9
 80089ae:	220a      	movs	r2, #10
 80089b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80089b2:	7806      	ldrb	r6, [r0, #0]
 80089b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80089b8:	b2d9      	uxtb	r1, r3
 80089ba:	2909      	cmp	r1, #9
 80089bc:	d92a      	bls.n	8008a14 <_strtod_l+0x1bc>
 80089be:	9907      	ldr	r1, [sp, #28]
 80089c0:	462a      	mov	r2, r5
 80089c2:	f003 fa94 	bl	800beee <strncmp>
 80089c6:	b398      	cbz	r0, 8008a30 <_strtod_l+0x1d8>
 80089c8:	2000      	movs	r0, #0
 80089ca:	4633      	mov	r3, r6
 80089cc:	463d      	mov	r5, r7
 80089ce:	9007      	str	r0, [sp, #28]
 80089d0:	4602      	mov	r2, r0
 80089d2:	2b65      	cmp	r3, #101	; 0x65
 80089d4:	d001      	beq.n	80089da <_strtod_l+0x182>
 80089d6:	2b45      	cmp	r3, #69	; 0x45
 80089d8:	d118      	bne.n	8008a0c <_strtod_l+0x1b4>
 80089da:	b91d      	cbnz	r5, 80089e4 <_strtod_l+0x18c>
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	4303      	orrs	r3, r0
 80089e0:	d098      	beq.n	8008914 <_strtod_l+0xbc>
 80089e2:	2500      	movs	r5, #0
 80089e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80089e8:	f108 0301 	add.w	r3, r8, #1
 80089ec:	931d      	str	r3, [sp, #116]	; 0x74
 80089ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80089f2:	2b2b      	cmp	r3, #43	; 0x2b
 80089f4:	d075      	beq.n	8008ae2 <_strtod_l+0x28a>
 80089f6:	2b2d      	cmp	r3, #45	; 0x2d
 80089f8:	d07b      	beq.n	8008af2 <_strtod_l+0x29a>
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008a02:	2909      	cmp	r1, #9
 8008a04:	f240 8082 	bls.w	8008b0c <_strtod_l+0x2b4>
 8008a08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	e09d      	b.n	8008b4c <_strtod_l+0x2f4>
 8008a10:	2300      	movs	r3, #0
 8008a12:	e7c4      	b.n	800899e <_strtod_l+0x146>
 8008a14:	2f08      	cmp	r7, #8
 8008a16:	bfd8      	it	le
 8008a18:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a1a:	f100 0001 	add.w	r0, r0, #1
 8008a1e:	bfda      	itte	le
 8008a20:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a24:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a26:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008a2a:	3701      	adds	r7, #1
 8008a2c:	901d      	str	r0, [sp, #116]	; 0x74
 8008a2e:	e7bf      	b.n	80089b0 <_strtod_l+0x158>
 8008a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a32:	195a      	adds	r2, r3, r5
 8008a34:	921d      	str	r2, [sp, #116]	; 0x74
 8008a36:	5d5b      	ldrb	r3, [r3, r5]
 8008a38:	2f00      	cmp	r7, #0
 8008a3a:	d037      	beq.n	8008aac <_strtod_l+0x254>
 8008a3c:	9007      	str	r0, [sp, #28]
 8008a3e:	463d      	mov	r5, r7
 8008a40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008a44:	2a09      	cmp	r2, #9
 8008a46:	d912      	bls.n	8008a6e <_strtod_l+0x216>
 8008a48:	2201      	movs	r2, #1
 8008a4a:	e7c2      	b.n	80089d2 <_strtod_l+0x17a>
 8008a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	921d      	str	r2, [sp, #116]	; 0x74
 8008a52:	785b      	ldrb	r3, [r3, #1]
 8008a54:	3001      	adds	r0, #1
 8008a56:	2b30      	cmp	r3, #48	; 0x30
 8008a58:	d0f8      	beq.n	8008a4c <_strtod_l+0x1f4>
 8008a5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008a5e:	2a08      	cmp	r2, #8
 8008a60:	f200 84db 	bhi.w	800941a <_strtod_l+0xbc2>
 8008a64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a66:	9007      	str	r0, [sp, #28]
 8008a68:	2000      	movs	r0, #0
 8008a6a:	920a      	str	r2, [sp, #40]	; 0x28
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	3b30      	subs	r3, #48	; 0x30
 8008a70:	f100 0201 	add.w	r2, r0, #1
 8008a74:	d014      	beq.n	8008aa0 <_strtod_l+0x248>
 8008a76:	9907      	ldr	r1, [sp, #28]
 8008a78:	4411      	add	r1, r2
 8008a7a:	9107      	str	r1, [sp, #28]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	eb00 0e05 	add.w	lr, r0, r5
 8008a82:	210a      	movs	r1, #10
 8008a84:	4572      	cmp	r2, lr
 8008a86:	d113      	bne.n	8008ab0 <_strtod_l+0x258>
 8008a88:	182a      	adds	r2, r5, r0
 8008a8a:	2a08      	cmp	r2, #8
 8008a8c:	f105 0501 	add.w	r5, r5, #1
 8008a90:	4405      	add	r5, r0
 8008a92:	dc1c      	bgt.n	8008ace <_strtod_l+0x276>
 8008a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a96:	220a      	movs	r2, #10
 8008a98:	fb02 3301 	mla	r3, r2, r1, r3
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	911d      	str	r1, [sp, #116]	; 0x74
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	e7c9      	b.n	8008a40 <_strtod_l+0x1e8>
 8008aac:	4638      	mov	r0, r7
 8008aae:	e7d2      	b.n	8008a56 <_strtod_l+0x1fe>
 8008ab0:	2a08      	cmp	r2, #8
 8008ab2:	dc04      	bgt.n	8008abe <_strtod_l+0x266>
 8008ab4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ab6:	434e      	muls	r6, r1
 8008ab8:	9609      	str	r6, [sp, #36]	; 0x24
 8008aba:	3201      	adds	r2, #1
 8008abc:	e7e2      	b.n	8008a84 <_strtod_l+0x22c>
 8008abe:	f102 0c01 	add.w	ip, r2, #1
 8008ac2:	f1bc 0f10 	cmp.w	ip, #16
 8008ac6:	bfd8      	it	le
 8008ac8:	fb01 f909 	mulle.w	r9, r1, r9
 8008acc:	e7f5      	b.n	8008aba <_strtod_l+0x262>
 8008ace:	2d10      	cmp	r5, #16
 8008ad0:	bfdc      	itt	le
 8008ad2:	220a      	movle	r2, #10
 8008ad4:	fb02 3909 	mlale	r9, r2, r9, r3
 8008ad8:	e7e1      	b.n	8008a9e <_strtod_l+0x246>
 8008ada:	2300      	movs	r3, #0
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	e77c      	b.n	80089dc <_strtod_l+0x184>
 8008ae2:	f04f 0c00 	mov.w	ip, #0
 8008ae6:	f108 0302 	add.w	r3, r8, #2
 8008aea:	931d      	str	r3, [sp, #116]	; 0x74
 8008aec:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008af0:	e785      	b.n	80089fe <_strtod_l+0x1a6>
 8008af2:	f04f 0c01 	mov.w	ip, #1
 8008af6:	e7f6      	b.n	8008ae6 <_strtod_l+0x28e>
 8008af8:	0800cda4 	.word	0x0800cda4
 8008afc:	0800caec 	.word	0x0800caec
 8008b00:	7ff00000 	.word	0x7ff00000
 8008b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b06:	1c59      	adds	r1, r3, #1
 8008b08:	911d      	str	r1, [sp, #116]	; 0x74
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b30      	cmp	r3, #48	; 0x30
 8008b0e:	d0f9      	beq.n	8008b04 <_strtod_l+0x2ac>
 8008b10:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008b14:	2908      	cmp	r1, #8
 8008b16:	f63f af79 	bhi.w	8008a0c <_strtod_l+0x1b4>
 8008b1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008b1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b24:	1c59      	adds	r1, r3, #1
 8008b26:	911d      	str	r1, [sp, #116]	; 0x74
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008b2e:	2e09      	cmp	r6, #9
 8008b30:	d937      	bls.n	8008ba2 <_strtod_l+0x34a>
 8008b32:	9e08      	ldr	r6, [sp, #32]
 8008b34:	1b89      	subs	r1, r1, r6
 8008b36:	2908      	cmp	r1, #8
 8008b38:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008b3c:	dc02      	bgt.n	8008b44 <_strtod_l+0x2ec>
 8008b3e:	4576      	cmp	r6, lr
 8008b40:	bfa8      	it	ge
 8008b42:	4676      	movge	r6, lr
 8008b44:	f1bc 0f00 	cmp.w	ip, #0
 8008b48:	d000      	beq.n	8008b4c <_strtod_l+0x2f4>
 8008b4a:	4276      	negs	r6, r6
 8008b4c:	2d00      	cmp	r5, #0
 8008b4e:	d14f      	bne.n	8008bf0 <_strtod_l+0x398>
 8008b50:	9904      	ldr	r1, [sp, #16]
 8008b52:	4301      	orrs	r1, r0
 8008b54:	f47f aec2 	bne.w	80088dc <_strtod_l+0x84>
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	f47f aedb 	bne.w	8008914 <_strtod_l+0xbc>
 8008b5e:	2b69      	cmp	r3, #105	; 0x69
 8008b60:	d027      	beq.n	8008bb2 <_strtod_l+0x35a>
 8008b62:	dc24      	bgt.n	8008bae <_strtod_l+0x356>
 8008b64:	2b49      	cmp	r3, #73	; 0x49
 8008b66:	d024      	beq.n	8008bb2 <_strtod_l+0x35a>
 8008b68:	2b4e      	cmp	r3, #78	; 0x4e
 8008b6a:	f47f aed3 	bne.w	8008914 <_strtod_l+0xbc>
 8008b6e:	499e      	ldr	r1, [pc, #632]	; (8008de8 <_strtod_l+0x590>)
 8008b70:	a81d      	add	r0, sp, #116	; 0x74
 8008b72:	f002 f8b7 	bl	800ace4 <__match>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f aecc 	beq.w	8008914 <_strtod_l+0xbc>
 8008b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b28      	cmp	r3, #40	; 0x28
 8008b82:	d12d      	bne.n	8008be0 <_strtod_l+0x388>
 8008b84:	4999      	ldr	r1, [pc, #612]	; (8008dec <_strtod_l+0x594>)
 8008b86:	aa20      	add	r2, sp, #128	; 0x80
 8008b88:	a81d      	add	r0, sp, #116	; 0x74
 8008b8a:	f002 f8bf 	bl	800ad0c <__hexnan>
 8008b8e:	2805      	cmp	r0, #5
 8008b90:	d126      	bne.n	8008be0 <_strtod_l+0x388>
 8008b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b94:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008b98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008b9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ba0:	e69c      	b.n	80088dc <_strtod_l+0x84>
 8008ba2:	210a      	movs	r1, #10
 8008ba4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ba8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008bac:	e7b9      	b.n	8008b22 <_strtod_l+0x2ca>
 8008bae:	2b6e      	cmp	r3, #110	; 0x6e
 8008bb0:	e7db      	b.n	8008b6a <_strtod_l+0x312>
 8008bb2:	498f      	ldr	r1, [pc, #572]	; (8008df0 <_strtod_l+0x598>)
 8008bb4:	a81d      	add	r0, sp, #116	; 0x74
 8008bb6:	f002 f895 	bl	800ace4 <__match>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f43f aeaa 	beq.w	8008914 <_strtod_l+0xbc>
 8008bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bc2:	498c      	ldr	r1, [pc, #560]	; (8008df4 <_strtod_l+0x59c>)
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	a81d      	add	r0, sp, #116	; 0x74
 8008bc8:	931d      	str	r3, [sp, #116]	; 0x74
 8008bca:	f002 f88b 	bl	800ace4 <__match>
 8008bce:	b910      	cbnz	r0, 8008bd6 <_strtod_l+0x37e>
 8008bd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	931d      	str	r3, [sp, #116]	; 0x74
 8008bd6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008e04 <_strtod_l+0x5ac>
 8008bda:	f04f 0a00 	mov.w	sl, #0
 8008bde:	e67d      	b.n	80088dc <_strtod_l+0x84>
 8008be0:	4885      	ldr	r0, [pc, #532]	; (8008df8 <_strtod_l+0x5a0>)
 8008be2:	f003 f939 	bl	800be58 <nan>
 8008be6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008bea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008bee:	e675      	b.n	80088dc <_strtod_l+0x84>
 8008bf0:	9b07      	ldr	r3, [sp, #28]
 8008bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bf4:	1af3      	subs	r3, r6, r3
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	bf08      	it	eq
 8008bfa:	462f      	moveq	r7, r5
 8008bfc:	2d10      	cmp	r5, #16
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	46a8      	mov	r8, r5
 8008c02:	bfa8      	it	ge
 8008c04:	f04f 0810 	movge.w	r8, #16
 8008c08:	f7f7 fc7c 	bl	8000504 <__aeabi_ui2d>
 8008c0c:	2d09      	cmp	r5, #9
 8008c0e:	4682      	mov	sl, r0
 8008c10:	468b      	mov	fp, r1
 8008c12:	dd13      	ble.n	8008c3c <_strtod_l+0x3e4>
 8008c14:	4b79      	ldr	r3, [pc, #484]	; (8008dfc <_strtod_l+0x5a4>)
 8008c16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008c1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c1e:	f7f7 fceb 	bl	80005f8 <__aeabi_dmul>
 8008c22:	4682      	mov	sl, r0
 8008c24:	4648      	mov	r0, r9
 8008c26:	468b      	mov	fp, r1
 8008c28:	f7f7 fc6c 	bl	8000504 <__aeabi_ui2d>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4650      	mov	r0, sl
 8008c32:	4659      	mov	r1, fp
 8008c34:	f7f7 fb2a 	bl	800028c <__adddf3>
 8008c38:	4682      	mov	sl, r0
 8008c3a:	468b      	mov	fp, r1
 8008c3c:	2d0f      	cmp	r5, #15
 8008c3e:	dc38      	bgt.n	8008cb2 <_strtod_l+0x45a>
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f43f ae4a 	beq.w	80088dc <_strtod_l+0x84>
 8008c48:	dd24      	ble.n	8008c94 <_strtod_l+0x43c>
 8008c4a:	2b16      	cmp	r3, #22
 8008c4c:	dc0b      	bgt.n	8008c66 <_strtod_l+0x40e>
 8008c4e:	4d6b      	ldr	r5, [pc, #428]	; (8008dfc <_strtod_l+0x5a4>)
 8008c50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008c54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008c58:	4652      	mov	r2, sl
 8008c5a:	465b      	mov	r3, fp
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	4682      	mov	sl, r0
 8008c62:	468b      	mov	fp, r1
 8008c64:	e63a      	b.n	80088dc <_strtod_l+0x84>
 8008c66:	9a08      	ldr	r2, [sp, #32]
 8008c68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	db20      	blt.n	8008cb2 <_strtod_l+0x45a>
 8008c70:	4c62      	ldr	r4, [pc, #392]	; (8008dfc <_strtod_l+0x5a4>)
 8008c72:	f1c5 050f 	rsb	r5, r5, #15
 8008c76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	465b      	mov	r3, fp
 8008c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	1b5d      	subs	r5, r3, r5
 8008c8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c92:	e7e3      	b.n	8008c5c <_strtod_l+0x404>
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	3316      	adds	r3, #22
 8008c98:	db0b      	blt.n	8008cb2 <_strtod_l+0x45a>
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	4a57      	ldr	r2, [pc, #348]	; (8008dfc <_strtod_l+0x5a4>)
 8008c9e:	1b9e      	subs	r6, r3, r6
 8008ca0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	f7f7 fdce 	bl	800084c <__aeabi_ddiv>
 8008cb0:	e7d6      	b.n	8008c60 <_strtod_l+0x408>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	eba5 0808 	sub.w	r8, r5, r8
 8008cb8:	4498      	add	r8, r3
 8008cba:	f1b8 0f00 	cmp.w	r8, #0
 8008cbe:	dd71      	ble.n	8008da4 <_strtod_l+0x54c>
 8008cc0:	f018 030f 	ands.w	r3, r8, #15
 8008cc4:	d00a      	beq.n	8008cdc <_strtod_l+0x484>
 8008cc6:	494d      	ldr	r1, [pc, #308]	; (8008dfc <_strtod_l+0x5a4>)
 8008cc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ccc:	4652      	mov	r2, sl
 8008cce:	465b      	mov	r3, fp
 8008cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	f038 080f 	bics.w	r8, r8, #15
 8008ce0:	d04d      	beq.n	8008d7e <_strtod_l+0x526>
 8008ce2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008ce6:	dd22      	ble.n	8008d2e <_strtod_l+0x4d6>
 8008ce8:	2500      	movs	r5, #0
 8008cea:	462e      	mov	r6, r5
 8008cec:	9509      	str	r5, [sp, #36]	; 0x24
 8008cee:	9507      	str	r5, [sp, #28]
 8008cf0:	2322      	movs	r3, #34	; 0x22
 8008cf2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008e04 <_strtod_l+0x5ac>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	f04f 0a00 	mov.w	sl, #0
 8008cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f43f adec 	beq.w	80088dc <_strtod_l+0x84>
 8008d04:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d06:	4620      	mov	r0, r4
 8008d08:	f002 f966 	bl	800afd8 <_Bfree>
 8008d0c:	9907      	ldr	r1, [sp, #28]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f002 f962 	bl	800afd8 <_Bfree>
 8008d14:	4631      	mov	r1, r6
 8008d16:	4620      	mov	r0, r4
 8008d18:	f002 f95e 	bl	800afd8 <_Bfree>
 8008d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f002 f95a 	bl	800afd8 <_Bfree>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4620      	mov	r0, r4
 8008d28:	f002 f956 	bl	800afd8 <_Bfree>
 8008d2c:	e5d6      	b.n	80088dc <_strtod_l+0x84>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008d34:	4650      	mov	r0, sl
 8008d36:	4659      	mov	r1, fp
 8008d38:	4699      	mov	r9, r3
 8008d3a:	f1b8 0f01 	cmp.w	r8, #1
 8008d3e:	dc21      	bgt.n	8008d84 <_strtod_l+0x52c>
 8008d40:	b10b      	cbz	r3, 8008d46 <_strtod_l+0x4ee>
 8008d42:	4682      	mov	sl, r0
 8008d44:	468b      	mov	fp, r1
 8008d46:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <_strtod_l+0x5a8>)
 8008d48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008d4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008d50:	4652      	mov	r2, sl
 8008d52:	465b      	mov	r3, fp
 8008d54:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <_strtod_l+0x5ac>)
 8008d5e:	460a      	mov	r2, r1
 8008d60:	400b      	ands	r3, r1
 8008d62:	4929      	ldr	r1, [pc, #164]	; (8008e08 <_strtod_l+0x5b0>)
 8008d64:	428b      	cmp	r3, r1
 8008d66:	4682      	mov	sl, r0
 8008d68:	d8be      	bhi.n	8008ce8 <_strtod_l+0x490>
 8008d6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008d6e:	428b      	cmp	r3, r1
 8008d70:	bf86      	itte	hi
 8008d72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008e0c <_strtod_l+0x5b4>
 8008d76:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	e081      	b.n	8008e88 <_strtod_l+0x630>
 8008d84:	f018 0f01 	tst.w	r8, #1
 8008d88:	d007      	beq.n	8008d9a <_strtod_l+0x542>
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <_strtod_l+0x5a8>)
 8008d8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fc30 	bl	80005f8 <__aeabi_dmul>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f109 0901 	add.w	r9, r9, #1
 8008d9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008da2:	e7ca      	b.n	8008d3a <_strtod_l+0x4e2>
 8008da4:	d0eb      	beq.n	8008d7e <_strtod_l+0x526>
 8008da6:	f1c8 0800 	rsb	r8, r8, #0
 8008daa:	f018 020f 	ands.w	r2, r8, #15
 8008dae:	d00a      	beq.n	8008dc6 <_strtod_l+0x56e>
 8008db0:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <_strtod_l+0x5a4>)
 8008db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db6:	4650      	mov	r0, sl
 8008db8:	4659      	mov	r1, fp
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fd45 	bl	800084c <__aeabi_ddiv>
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008dca:	d0d8      	beq.n	8008d7e <_strtod_l+0x526>
 8008dcc:	f1b8 0f1f 	cmp.w	r8, #31
 8008dd0:	dd1e      	ble.n	8008e10 <_strtod_l+0x5b8>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	462e      	mov	r6, r5
 8008dd6:	9509      	str	r5, [sp, #36]	; 0x24
 8008dd8:	9507      	str	r5, [sp, #28]
 8008dda:	2322      	movs	r3, #34	; 0x22
 8008ddc:	f04f 0a00 	mov.w	sl, #0
 8008de0:	f04f 0b00 	mov.w	fp, #0
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	e789      	b.n	8008cfc <_strtod_l+0x4a4>
 8008de8:	0800cabd 	.word	0x0800cabd
 8008dec:	0800cb00 	.word	0x0800cb00
 8008df0:	0800cab5 	.word	0x0800cab5
 8008df4:	0800cc44 	.word	0x0800cc44
 8008df8:	0800cf60 	.word	0x0800cf60
 8008dfc:	0800ce40 	.word	0x0800ce40
 8008e00:	0800ce18 	.word	0x0800ce18
 8008e04:	7ff00000 	.word	0x7ff00000
 8008e08:	7ca00000 	.word	0x7ca00000
 8008e0c:	7fefffff 	.word	0x7fefffff
 8008e10:	f018 0310 	ands.w	r3, r8, #16
 8008e14:	bf18      	it	ne
 8008e16:	236a      	movne	r3, #106	; 0x6a
 8008e18:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80091d0 <_strtod_l+0x978>
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	4650      	mov	r0, sl
 8008e20:	4659      	mov	r1, fp
 8008e22:	2300      	movs	r3, #0
 8008e24:	f018 0f01 	tst.w	r8, #1
 8008e28:	d004      	beq.n	8008e34 <_strtod_l+0x5dc>
 8008e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	2301      	movs	r3, #1
 8008e34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008e38:	f109 0908 	add.w	r9, r9, #8
 8008e3c:	d1f2      	bne.n	8008e24 <_strtod_l+0x5cc>
 8008e3e:	b10b      	cbz	r3, 8008e44 <_strtod_l+0x5ec>
 8008e40:	4682      	mov	sl, r0
 8008e42:	468b      	mov	fp, r1
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	b1bb      	cbz	r3, 8008e78 <_strtod_l+0x620>
 8008e48:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008e4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	4659      	mov	r1, fp
 8008e54:	dd10      	ble.n	8008e78 <_strtod_l+0x620>
 8008e56:	2b1f      	cmp	r3, #31
 8008e58:	f340 8128 	ble.w	80090ac <_strtod_l+0x854>
 8008e5c:	2b34      	cmp	r3, #52	; 0x34
 8008e5e:	bfde      	ittt	le
 8008e60:	3b20      	suble	r3, #32
 8008e62:	f04f 32ff 	movle.w	r2, #4294967295
 8008e66:	fa02 f303 	lslle.w	r3, r2, r3
 8008e6a:	f04f 0a00 	mov.w	sl, #0
 8008e6e:	bfcc      	ite	gt
 8008e70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008e74:	ea03 0b01 	andle.w	fp, r3, r1
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	4659      	mov	r1, fp
 8008e80:	f7f7 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d1a4      	bne.n	8008dd2 <_strtod_l+0x57a>
 8008e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e8e:	462b      	mov	r3, r5
 8008e90:	463a      	mov	r2, r7
 8008e92:	4620      	mov	r0, r4
 8008e94:	f002 f90c 	bl	800b0b0 <__s2b>
 8008e98:	9009      	str	r0, [sp, #36]	; 0x24
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f43f af24 	beq.w	8008ce8 <_strtod_l+0x490>
 8008ea0:	9b07      	ldr	r3, [sp, #28]
 8008ea2:	1b9e      	subs	r6, r3, r6
 8008ea4:	9b08      	ldr	r3, [sp, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bfb4      	ite	lt
 8008eaa:	4633      	movlt	r3, r6
 8008eac:	2300      	movge	r3, #0
 8008eae:	9310      	str	r3, [sp, #64]	; 0x40
 8008eb0:	9b08      	ldr	r3, [sp, #32]
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008eb8:	9318      	str	r3, [sp, #96]	; 0x60
 8008eba:	462e      	mov	r6, r5
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	6859      	ldr	r1, [r3, #4]
 8008ec2:	f002 f849 	bl	800af58 <_Balloc>
 8008ec6:	9007      	str	r0, [sp, #28]
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f43f af11 	beq.w	8008cf0 <_strtod_l+0x498>
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	3202      	adds	r2, #2
 8008ed4:	f103 010c 	add.w	r1, r3, #12
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	300c      	adds	r0, #12
 8008edc:	f7fe fca2 	bl	8007824 <memcpy>
 8008ee0:	ec4b ab10 	vmov	d0, sl, fp
 8008ee4:	aa20      	add	r2, sp, #128	; 0x80
 8008ee6:	a91f      	add	r1, sp, #124	; 0x7c
 8008ee8:	4620      	mov	r0, r4
 8008eea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008eee:	f002 fc1b 	bl	800b728 <__d2b>
 8008ef2:	901e      	str	r0, [sp, #120]	; 0x78
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f aefb 	beq.w	8008cf0 <_strtod_l+0x498>
 8008efa:	2101      	movs	r1, #1
 8008efc:	4620      	mov	r0, r4
 8008efe:	f002 f971 	bl	800b1e4 <__i2b>
 8008f02:	4606      	mov	r6, r0
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f43f aef3 	beq.w	8008cf0 <_strtod_l+0x498>
 8008f0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f0c:	9904      	ldr	r1, [sp, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfab      	itete	ge
 8008f12:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008f14:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008f16:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008f18:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008f1c:	bfac      	ite	ge
 8008f1e:	eb03 0902 	addge.w	r9, r3, r2
 8008f22:	1ad7      	sublt	r7, r2, r3
 8008f24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f26:	eba3 0801 	sub.w	r8, r3, r1
 8008f2a:	4490      	add	r8, r2
 8008f2c:	4ba3      	ldr	r3, [pc, #652]	; (80091bc <_strtod_l+0x964>)
 8008f2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f32:	4598      	cmp	r8, r3
 8008f34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f38:	f280 80cc 	bge.w	80090d4 <_strtod_l+0x87c>
 8008f3c:	eba3 0308 	sub.w	r3, r3, r8
 8008f40:	2b1f      	cmp	r3, #31
 8008f42:	eba2 0203 	sub.w	r2, r2, r3
 8008f46:	f04f 0101 	mov.w	r1, #1
 8008f4a:	f300 80b6 	bgt.w	80090ba <_strtod_l+0x862>
 8008f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f52:	9311      	str	r3, [sp, #68]	; 0x44
 8008f54:	2300      	movs	r3, #0
 8008f56:	930c      	str	r3, [sp, #48]	; 0x30
 8008f58:	eb09 0802 	add.w	r8, r9, r2
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	45c1      	cmp	r9, r8
 8008f60:	4417      	add	r7, r2
 8008f62:	441f      	add	r7, r3
 8008f64:	464b      	mov	r3, r9
 8008f66:	bfa8      	it	ge
 8008f68:	4643      	movge	r3, r8
 8008f6a:	42bb      	cmp	r3, r7
 8008f6c:	bfa8      	it	ge
 8008f6e:	463b      	movge	r3, r7
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfc2      	ittt	gt
 8008f74:	eba8 0803 	subgt.w	r8, r8, r3
 8008f78:	1aff      	subgt	r7, r7, r3
 8008f7a:	eba9 0903 	subgt.w	r9, r9, r3
 8008f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dd17      	ble.n	8008fb4 <_strtod_l+0x75c>
 8008f84:	4631      	mov	r1, r6
 8008f86:	461a      	mov	r2, r3
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f002 f9e7 	bl	800b35c <__pow5mult>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f43f aead 	beq.w	8008cf0 <_strtod_l+0x498>
 8008f96:	4601      	mov	r1, r0
 8008f98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f002 f938 	bl	800b210 <__multiply>
 8008fa0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f43f aea4 	beq.w	8008cf0 <_strtod_l+0x498>
 8008fa8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008faa:	4620      	mov	r0, r4
 8008fac:	f002 f814 	bl	800afd8 <_Bfree>
 8008fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb2:	931e      	str	r3, [sp, #120]	; 0x78
 8008fb4:	f1b8 0f00 	cmp.w	r8, #0
 8008fb8:	f300 8091 	bgt.w	80090de <_strtod_l+0x886>
 8008fbc:	9b08      	ldr	r3, [sp, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd08      	ble.n	8008fd4 <_strtod_l+0x77c>
 8008fc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fc4:	9907      	ldr	r1, [sp, #28]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f002 f9c8 	bl	800b35c <__pow5mult>
 8008fcc:	9007      	str	r0, [sp, #28]
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f ae8e 	beq.w	8008cf0 <_strtod_l+0x498>
 8008fd4:	2f00      	cmp	r7, #0
 8008fd6:	dd08      	ble.n	8008fea <_strtod_l+0x792>
 8008fd8:	9907      	ldr	r1, [sp, #28]
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f002 fa17 	bl	800b410 <__lshift>
 8008fe2:	9007      	str	r0, [sp, #28]
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f43f ae83 	beq.w	8008cf0 <_strtod_l+0x498>
 8008fea:	f1b9 0f00 	cmp.w	r9, #0
 8008fee:	dd08      	ble.n	8009002 <_strtod_l+0x7aa>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	464a      	mov	r2, r9
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f002 fa0b 	bl	800b410 <__lshift>
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f43f ae77 	beq.w	8008cf0 <_strtod_l+0x498>
 8009002:	9a07      	ldr	r2, [sp, #28]
 8009004:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009006:	4620      	mov	r0, r4
 8009008:	f002 fa8a 	bl	800b520 <__mdiff>
 800900c:	4605      	mov	r5, r0
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f ae6e 	beq.w	8008cf0 <_strtod_l+0x498>
 8009014:	68c3      	ldr	r3, [r0, #12]
 8009016:	930f      	str	r3, [sp, #60]	; 0x3c
 8009018:	2300      	movs	r3, #0
 800901a:	60c3      	str	r3, [r0, #12]
 800901c:	4631      	mov	r1, r6
 800901e:	f002 fa63 	bl	800b4e8 <__mcmp>
 8009022:	2800      	cmp	r0, #0
 8009024:	da65      	bge.n	80090f2 <_strtod_l+0x89a>
 8009026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009028:	ea53 030a 	orrs.w	r3, r3, sl
 800902c:	f040 8087 	bne.w	800913e <_strtod_l+0x8e6>
 8009030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009034:	2b00      	cmp	r3, #0
 8009036:	f040 8082 	bne.w	800913e <_strtod_l+0x8e6>
 800903a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800903e:	0d1b      	lsrs	r3, r3, #20
 8009040:	051b      	lsls	r3, r3, #20
 8009042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009046:	d97a      	bls.n	800913e <_strtod_l+0x8e6>
 8009048:	696b      	ldr	r3, [r5, #20]
 800904a:	b913      	cbnz	r3, 8009052 <_strtod_l+0x7fa>
 800904c:	692b      	ldr	r3, [r5, #16]
 800904e:	2b01      	cmp	r3, #1
 8009050:	dd75      	ble.n	800913e <_strtod_l+0x8e6>
 8009052:	4629      	mov	r1, r5
 8009054:	2201      	movs	r2, #1
 8009056:	4620      	mov	r0, r4
 8009058:	f002 f9da 	bl	800b410 <__lshift>
 800905c:	4631      	mov	r1, r6
 800905e:	4605      	mov	r5, r0
 8009060:	f002 fa42 	bl	800b4e8 <__mcmp>
 8009064:	2800      	cmp	r0, #0
 8009066:	dd6a      	ble.n	800913e <_strtod_l+0x8e6>
 8009068:	9904      	ldr	r1, [sp, #16]
 800906a:	4a55      	ldr	r2, [pc, #340]	; (80091c0 <_strtod_l+0x968>)
 800906c:	465b      	mov	r3, fp
 800906e:	2900      	cmp	r1, #0
 8009070:	f000 8085 	beq.w	800917e <_strtod_l+0x926>
 8009074:	ea02 010b 	and.w	r1, r2, fp
 8009078:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800907c:	dc7f      	bgt.n	800917e <_strtod_l+0x926>
 800907e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009082:	f77f aeaa 	ble.w	8008dda <_strtod_l+0x582>
 8009086:	4a4f      	ldr	r2, [pc, #316]	; (80091c4 <_strtod_l+0x96c>)
 8009088:	2300      	movs	r3, #0
 800908a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800908e:	4650      	mov	r0, sl
 8009090:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009094:	4659      	mov	r1, fp
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	460b      	mov	r3, r1
 800909c:	4303      	orrs	r3, r0
 800909e:	bf08      	it	eq
 80090a0:	2322      	moveq	r3, #34	; 0x22
 80090a2:	4682      	mov	sl, r0
 80090a4:	468b      	mov	fp, r1
 80090a6:	bf08      	it	eq
 80090a8:	6023      	streq	r3, [r4, #0]
 80090aa:	e62b      	b.n	8008d04 <_strtod_l+0x4ac>
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	ea03 0a0a 	and.w	sl, r3, sl
 80090b8:	e6de      	b.n	8008e78 <_strtod_l+0x620>
 80090ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80090be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80090c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80090c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80090ca:	fa01 f308 	lsl.w	r3, r1, r8
 80090ce:	930c      	str	r3, [sp, #48]	; 0x30
 80090d0:	9111      	str	r1, [sp, #68]	; 0x44
 80090d2:	e741      	b.n	8008f58 <_strtod_l+0x700>
 80090d4:	2300      	movs	r3, #0
 80090d6:	930c      	str	r3, [sp, #48]	; 0x30
 80090d8:	2301      	movs	r3, #1
 80090da:	9311      	str	r3, [sp, #68]	; 0x44
 80090dc:	e73c      	b.n	8008f58 <_strtod_l+0x700>
 80090de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090e0:	4642      	mov	r2, r8
 80090e2:	4620      	mov	r0, r4
 80090e4:	f002 f994 	bl	800b410 <__lshift>
 80090e8:	901e      	str	r0, [sp, #120]	; 0x78
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f47f af66 	bne.w	8008fbc <_strtod_l+0x764>
 80090f0:	e5fe      	b.n	8008cf0 <_strtod_l+0x498>
 80090f2:	465f      	mov	r7, fp
 80090f4:	d16e      	bne.n	80091d4 <_strtod_l+0x97c>
 80090f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090fc:	b342      	cbz	r2, 8009150 <_strtod_l+0x8f8>
 80090fe:	4a32      	ldr	r2, [pc, #200]	; (80091c8 <_strtod_l+0x970>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d128      	bne.n	8009156 <_strtod_l+0x8fe>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	4650      	mov	r0, sl
 8009108:	b1eb      	cbz	r3, 8009146 <_strtod_l+0x8ee>
 800910a:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <_strtod_l+0x968>)
 800910c:	403a      	ands	r2, r7
 800910e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009112:	f04f 31ff 	mov.w	r1, #4294967295
 8009116:	d819      	bhi.n	800914c <_strtod_l+0x8f4>
 8009118:	0d12      	lsrs	r2, r2, #20
 800911a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800911e:	fa01 f303 	lsl.w	r3, r1, r3
 8009122:	4298      	cmp	r0, r3
 8009124:	d117      	bne.n	8009156 <_strtod_l+0x8fe>
 8009126:	4b29      	ldr	r3, [pc, #164]	; (80091cc <_strtod_l+0x974>)
 8009128:	429f      	cmp	r7, r3
 800912a:	d102      	bne.n	8009132 <_strtod_l+0x8da>
 800912c:	3001      	adds	r0, #1
 800912e:	f43f addf 	beq.w	8008cf0 <_strtod_l+0x498>
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <_strtod_l+0x968>)
 8009134:	403b      	ands	r3, r7
 8009136:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800913a:	f04f 0a00 	mov.w	sl, #0
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1a0      	bne.n	8009086 <_strtod_l+0x82e>
 8009144:	e5de      	b.n	8008d04 <_strtod_l+0x4ac>
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	e7ea      	b.n	8009122 <_strtod_l+0x8ca>
 800914c:	460b      	mov	r3, r1
 800914e:	e7e8      	b.n	8009122 <_strtod_l+0x8ca>
 8009150:	ea53 030a 	orrs.w	r3, r3, sl
 8009154:	d088      	beq.n	8009068 <_strtod_l+0x810>
 8009156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009158:	b1db      	cbz	r3, 8009192 <_strtod_l+0x93a>
 800915a:	423b      	tst	r3, r7
 800915c:	d0ef      	beq.n	800913e <_strtod_l+0x8e6>
 800915e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	4650      	mov	r0, sl
 8009164:	4659      	mov	r1, fp
 8009166:	b1c3      	cbz	r3, 800919a <_strtod_l+0x942>
 8009168:	f7ff fb5a 	bl	8008820 <sulp>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009174:	f7f7 f88a 	bl	800028c <__adddf3>
 8009178:	4682      	mov	sl, r0
 800917a:	468b      	mov	fp, r1
 800917c:	e7df      	b.n	800913e <_strtod_l+0x8e6>
 800917e:	4013      	ands	r3, r2
 8009180:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009184:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009188:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800918c:	f04f 3aff 	mov.w	sl, #4294967295
 8009190:	e7d5      	b.n	800913e <_strtod_l+0x8e6>
 8009192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009194:	ea13 0f0a 	tst.w	r3, sl
 8009198:	e7e0      	b.n	800915c <_strtod_l+0x904>
 800919a:	f7ff fb41 	bl	8008820 <sulp>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091a6:	f7f7 f86f 	bl	8000288 <__aeabi_dsub>
 80091aa:	2200      	movs	r2, #0
 80091ac:	2300      	movs	r3, #0
 80091ae:	4682      	mov	sl, r0
 80091b0:	468b      	mov	fp, r1
 80091b2:	f7f7 fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0c1      	beq.n	800913e <_strtod_l+0x8e6>
 80091ba:	e60e      	b.n	8008dda <_strtod_l+0x582>
 80091bc:	fffffc02 	.word	0xfffffc02
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	39500000 	.word	0x39500000
 80091c8:	000fffff 	.word	0x000fffff
 80091cc:	7fefffff 	.word	0x7fefffff
 80091d0:	0800cb18 	.word	0x0800cb18
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	f002 fb02 	bl	800b7e0 <__ratio>
 80091dc:	ec59 8b10 	vmov	r8, r9, d0
 80091e0:	ee10 0a10 	vmov	r0, s0
 80091e4:	2200      	movs	r2, #0
 80091e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f7 fc80 	bl	8000af0 <__aeabi_dcmple>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d07c      	beq.n	80092ee <_strtod_l+0xa96>
 80091f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04c      	beq.n	8009294 <_strtod_l+0xa3c>
 80091fa:	4b95      	ldr	r3, [pc, #596]	; (8009450 <_strtod_l+0xbf8>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009202:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009450 <_strtod_l+0xbf8>
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	4b92      	ldr	r3, [pc, #584]	; (8009454 <_strtod_l+0xbfc>)
 800920c:	403b      	ands	r3, r7
 800920e:	9311      	str	r3, [sp, #68]	; 0x44
 8009210:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009212:	4b91      	ldr	r3, [pc, #580]	; (8009458 <_strtod_l+0xc00>)
 8009214:	429a      	cmp	r2, r3
 8009216:	f040 80b2 	bne.w	800937e <_strtod_l+0xb26>
 800921a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800921e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009222:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009226:	ec4b ab10 	vmov	d0, sl, fp
 800922a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800922e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009232:	f002 f9fd 	bl	800b630 <__ulp>
 8009236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800923a:	ec53 2b10 	vmov	r2, r3, d0
 800923e:	f7f7 f9db 	bl	80005f8 <__aeabi_dmul>
 8009242:	4652      	mov	r2, sl
 8009244:	465b      	mov	r3, fp
 8009246:	f7f7 f821 	bl	800028c <__adddf3>
 800924a:	460b      	mov	r3, r1
 800924c:	4981      	ldr	r1, [pc, #516]	; (8009454 <_strtod_l+0xbfc>)
 800924e:	4a83      	ldr	r2, [pc, #524]	; (800945c <_strtod_l+0xc04>)
 8009250:	4019      	ands	r1, r3
 8009252:	4291      	cmp	r1, r2
 8009254:	4682      	mov	sl, r0
 8009256:	d95e      	bls.n	8009316 <_strtod_l+0xabe>
 8009258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800925a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800925e:	4293      	cmp	r3, r2
 8009260:	d103      	bne.n	800926a <_strtod_l+0xa12>
 8009262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009264:	3301      	adds	r3, #1
 8009266:	f43f ad43 	beq.w	8008cf0 <_strtod_l+0x498>
 800926a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009468 <_strtod_l+0xc10>
 800926e:	f04f 3aff 	mov.w	sl, #4294967295
 8009272:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009274:	4620      	mov	r0, r4
 8009276:	f001 feaf 	bl	800afd8 <_Bfree>
 800927a:	9907      	ldr	r1, [sp, #28]
 800927c:	4620      	mov	r0, r4
 800927e:	f001 feab 	bl	800afd8 <_Bfree>
 8009282:	4631      	mov	r1, r6
 8009284:	4620      	mov	r0, r4
 8009286:	f001 fea7 	bl	800afd8 <_Bfree>
 800928a:	4629      	mov	r1, r5
 800928c:	4620      	mov	r0, r4
 800928e:	f001 fea3 	bl	800afd8 <_Bfree>
 8009292:	e613      	b.n	8008ebc <_strtod_l+0x664>
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	d11b      	bne.n	80092d2 <_strtod_l+0xa7a>
 800929a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800929e:	b9f3      	cbnz	r3, 80092de <_strtod_l+0xa86>
 80092a0:	4b6b      	ldr	r3, [pc, #428]	; (8009450 <_strtod_l+0xbf8>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f7 fc18 	bl	8000adc <__aeabi_dcmplt>
 80092ac:	b9d0      	cbnz	r0, 80092e4 <_strtod_l+0xa8c>
 80092ae:	4640      	mov	r0, r8
 80092b0:	4649      	mov	r1, r9
 80092b2:	4b6b      	ldr	r3, [pc, #428]	; (8009460 <_strtod_l+0xc08>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	f7f7 f99f 	bl	80005f8 <__aeabi_dmul>
 80092ba:	4680      	mov	r8, r0
 80092bc:	4689      	mov	r9, r1
 80092be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80092c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80092c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80092c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80092cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092d0:	e79b      	b.n	800920a <_strtod_l+0x9b2>
 80092d2:	f1ba 0f01 	cmp.w	sl, #1
 80092d6:	d102      	bne.n	80092de <_strtod_l+0xa86>
 80092d8:	2f00      	cmp	r7, #0
 80092da:	f43f ad7e 	beq.w	8008dda <_strtod_l+0x582>
 80092de:	4b61      	ldr	r3, [pc, #388]	; (8009464 <_strtod_l+0xc0c>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	e78c      	b.n	80091fe <_strtod_l+0x9a6>
 80092e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009460 <_strtod_l+0xc08>
 80092e8:	f04f 0800 	mov.w	r8, #0
 80092ec:	e7e7      	b.n	80092be <_strtod_l+0xa66>
 80092ee:	4b5c      	ldr	r3, [pc, #368]	; (8009460 <_strtod_l+0xc08>)
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	2200      	movs	r2, #0
 80092f6:	f7f7 f97f 	bl	80005f8 <__aeabi_dmul>
 80092fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	b933      	cbnz	r3, 8009310 <_strtod_l+0xab8>
 8009302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009306:	9012      	str	r0, [sp, #72]	; 0x48
 8009308:	9313      	str	r3, [sp, #76]	; 0x4c
 800930a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800930e:	e7dd      	b.n	80092cc <_strtod_l+0xa74>
 8009310:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009314:	e7f9      	b.n	800930a <_strtod_l+0xab2>
 8009316:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1a8      	bne.n	8009272 <_strtod_l+0xa1a>
 8009320:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009324:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009326:	0d1b      	lsrs	r3, r3, #20
 8009328:	051b      	lsls	r3, r3, #20
 800932a:	429a      	cmp	r2, r3
 800932c:	d1a1      	bne.n	8009272 <_strtod_l+0xa1a>
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 fcc1 	bl	8000cb8 <__aeabi_d2lz>
 8009336:	f7f7 f931 	bl	800059c <__aeabi_l2d>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4640      	mov	r0, r8
 8009340:	4649      	mov	r1, r9
 8009342:	f7f6 ffa1 	bl	8000288 <__aeabi_dsub>
 8009346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009348:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800934c:	ea43 030a 	orr.w	r3, r3, sl
 8009350:	4313      	orrs	r3, r2
 8009352:	4680      	mov	r8, r0
 8009354:	4689      	mov	r9, r1
 8009356:	d053      	beq.n	8009400 <_strtod_l+0xba8>
 8009358:	a335      	add	r3, pc, #212	; (adr r3, 8009430 <_strtod_l+0xbd8>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 fbbd 	bl	8000adc <__aeabi_dcmplt>
 8009362:	2800      	cmp	r0, #0
 8009364:	f47f acce 	bne.w	8008d04 <_strtod_l+0x4ac>
 8009368:	a333      	add	r3, pc, #204	; (adr r3, 8009438 <_strtod_l+0xbe0>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	4640      	mov	r0, r8
 8009370:	4649      	mov	r1, r9
 8009372:	f7f7 fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8009376:	2800      	cmp	r0, #0
 8009378:	f43f af7b 	beq.w	8009272 <_strtod_l+0xa1a>
 800937c:	e4c2      	b.n	8008d04 <_strtod_l+0x4ac>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	b333      	cbz	r3, 80093d0 <_strtod_l+0xb78>
 8009382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009384:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009388:	d822      	bhi.n	80093d0 <_strtod_l+0xb78>
 800938a:	a32d      	add	r3, pc, #180	; (adr r3, 8009440 <_strtod_l+0xbe8>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 fbac 	bl	8000af0 <__aeabi_dcmple>
 8009398:	b1a0      	cbz	r0, 80093c4 <_strtod_l+0xb6c>
 800939a:	4649      	mov	r1, r9
 800939c:	4640      	mov	r0, r8
 800939e:	f7f7 fc03 	bl	8000ba8 <__aeabi_d2uiz>
 80093a2:	2801      	cmp	r0, #1
 80093a4:	bf38      	it	cc
 80093a6:	2001      	movcc	r0, #1
 80093a8:	f7f7 f8ac 	bl	8000504 <__aeabi_ui2d>
 80093ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ae:	4680      	mov	r8, r0
 80093b0:	4689      	mov	r9, r1
 80093b2:	bb13      	cbnz	r3, 80093fa <_strtod_l+0xba2>
 80093b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b8:	9014      	str	r0, [sp, #80]	; 0x50
 80093ba:	9315      	str	r3, [sp, #84]	; 0x54
 80093bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80093c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	930d      	str	r3, [sp, #52]	; 0x34
 80093d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80093d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093dc:	f002 f928 	bl	800b630 <__ulp>
 80093e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093e4:	ec53 2b10 	vmov	r2, r3, d0
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093f0:	f7f6 ff4c 	bl	800028c <__adddf3>
 80093f4:	4682      	mov	sl, r0
 80093f6:	468b      	mov	fp, r1
 80093f8:	e78f      	b.n	800931a <_strtod_l+0xac2>
 80093fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80093fe:	e7dd      	b.n	80093bc <_strtod_l+0xb64>
 8009400:	a311      	add	r3, pc, #68	; (adr r3, 8009448 <_strtod_l+0xbf0>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f7 fb69 	bl	8000adc <__aeabi_dcmplt>
 800940a:	e7b4      	b.n	8009376 <_strtod_l+0xb1e>
 800940c:	2300      	movs	r3, #0
 800940e:	930e      	str	r3, [sp, #56]	; 0x38
 8009410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009412:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	f7ff ba65 	b.w	80088e4 <_strtod_l+0x8c>
 800941a:	2b65      	cmp	r3, #101	; 0x65
 800941c:	f43f ab5d 	beq.w	8008ada <_strtod_l+0x282>
 8009420:	2b45      	cmp	r3, #69	; 0x45
 8009422:	f43f ab5a 	beq.w	8008ada <_strtod_l+0x282>
 8009426:	2201      	movs	r2, #1
 8009428:	f7ff bb92 	b.w	8008b50 <_strtod_l+0x2f8>
 800942c:	f3af 8000 	nop.w
 8009430:	94a03595 	.word	0x94a03595
 8009434:	3fdfffff 	.word	0x3fdfffff
 8009438:	35afe535 	.word	0x35afe535
 800943c:	3fe00000 	.word	0x3fe00000
 8009440:	ffc00000 	.word	0xffc00000
 8009444:	41dfffff 	.word	0x41dfffff
 8009448:	94a03595 	.word	0x94a03595
 800944c:	3fcfffff 	.word	0x3fcfffff
 8009450:	3ff00000 	.word	0x3ff00000
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	7fe00000 	.word	0x7fe00000
 800945c:	7c9fffff 	.word	0x7c9fffff
 8009460:	3fe00000 	.word	0x3fe00000
 8009464:	bff00000 	.word	0xbff00000
 8009468:	7fefffff 	.word	0x7fefffff

0800946c <_strtod_r>:
 800946c:	4b01      	ldr	r3, [pc, #4]	; (8009474 <_strtod_r+0x8>)
 800946e:	f7ff b9f3 	b.w	8008858 <_strtod_l>
 8009472:	bf00      	nop
 8009474:	2000008c 	.word	0x2000008c

08009478 <_strtol_l.isra.0>:
 8009478:	2b01      	cmp	r3, #1
 800947a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947e:	d001      	beq.n	8009484 <_strtol_l.isra.0+0xc>
 8009480:	2b24      	cmp	r3, #36	; 0x24
 8009482:	d906      	bls.n	8009492 <_strtol_l.isra.0+0x1a>
 8009484:	f7fe f99c 	bl	80077c0 <__errno>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	4f3a      	ldr	r7, [pc, #232]	; (800957c <_strtol_l.isra.0+0x104>)
 8009494:	468e      	mov	lr, r1
 8009496:	4676      	mov	r6, lr
 8009498:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800949c:	5de5      	ldrb	r5, [r4, r7]
 800949e:	f015 0508 	ands.w	r5, r5, #8
 80094a2:	d1f8      	bne.n	8009496 <_strtol_l.isra.0+0x1e>
 80094a4:	2c2d      	cmp	r4, #45	; 0x2d
 80094a6:	d134      	bne.n	8009512 <_strtol_l.isra.0+0x9a>
 80094a8:	f89e 4000 	ldrb.w	r4, [lr]
 80094ac:	f04f 0801 	mov.w	r8, #1
 80094b0:	f106 0e02 	add.w	lr, r6, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d05c      	beq.n	8009572 <_strtol_l.isra.0+0xfa>
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d10c      	bne.n	80094d6 <_strtol_l.isra.0+0x5e>
 80094bc:	2c30      	cmp	r4, #48	; 0x30
 80094be:	d10a      	bne.n	80094d6 <_strtol_l.isra.0+0x5e>
 80094c0:	f89e 4000 	ldrb.w	r4, [lr]
 80094c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094c8:	2c58      	cmp	r4, #88	; 0x58
 80094ca:	d14d      	bne.n	8009568 <_strtol_l.isra.0+0xf0>
 80094cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80094d0:	2310      	movs	r3, #16
 80094d2:	f10e 0e02 	add.w	lr, lr, #2
 80094d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80094da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094de:	2600      	movs	r6, #0
 80094e0:	fbbc f9f3 	udiv	r9, ip, r3
 80094e4:	4635      	mov	r5, r6
 80094e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80094ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80094ee:	2f09      	cmp	r7, #9
 80094f0:	d818      	bhi.n	8009524 <_strtol_l.isra.0+0xac>
 80094f2:	463c      	mov	r4, r7
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	dd24      	ble.n	8009542 <_strtol_l.isra.0+0xca>
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	db1f      	blt.n	800953c <_strtol_l.isra.0+0xc4>
 80094fc:	45a9      	cmp	r9, r5
 80094fe:	d31d      	bcc.n	800953c <_strtol_l.isra.0+0xc4>
 8009500:	d101      	bne.n	8009506 <_strtol_l.isra.0+0x8e>
 8009502:	45a2      	cmp	sl, r4
 8009504:	db1a      	blt.n	800953c <_strtol_l.isra.0+0xc4>
 8009506:	fb05 4503 	mla	r5, r5, r3, r4
 800950a:	2601      	movs	r6, #1
 800950c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009510:	e7eb      	b.n	80094ea <_strtol_l.isra.0+0x72>
 8009512:	2c2b      	cmp	r4, #43	; 0x2b
 8009514:	bf08      	it	eq
 8009516:	f89e 4000 	ldrbeq.w	r4, [lr]
 800951a:	46a8      	mov	r8, r5
 800951c:	bf08      	it	eq
 800951e:	f106 0e02 	addeq.w	lr, r6, #2
 8009522:	e7c7      	b.n	80094b4 <_strtol_l.isra.0+0x3c>
 8009524:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009528:	2f19      	cmp	r7, #25
 800952a:	d801      	bhi.n	8009530 <_strtol_l.isra.0+0xb8>
 800952c:	3c37      	subs	r4, #55	; 0x37
 800952e:	e7e1      	b.n	80094f4 <_strtol_l.isra.0+0x7c>
 8009530:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009534:	2f19      	cmp	r7, #25
 8009536:	d804      	bhi.n	8009542 <_strtol_l.isra.0+0xca>
 8009538:	3c57      	subs	r4, #87	; 0x57
 800953a:	e7db      	b.n	80094f4 <_strtol_l.isra.0+0x7c>
 800953c:	f04f 36ff 	mov.w	r6, #4294967295
 8009540:	e7e4      	b.n	800950c <_strtol_l.isra.0+0x94>
 8009542:	2e00      	cmp	r6, #0
 8009544:	da05      	bge.n	8009552 <_strtol_l.isra.0+0xda>
 8009546:	2322      	movs	r3, #34	; 0x22
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	4665      	mov	r5, ip
 800954c:	b942      	cbnz	r2, 8009560 <_strtol_l.isra.0+0xe8>
 800954e:	4628      	mov	r0, r5
 8009550:	e79d      	b.n	800948e <_strtol_l.isra.0+0x16>
 8009552:	f1b8 0f00 	cmp.w	r8, #0
 8009556:	d000      	beq.n	800955a <_strtol_l.isra.0+0xe2>
 8009558:	426d      	negs	r5, r5
 800955a:	2a00      	cmp	r2, #0
 800955c:	d0f7      	beq.n	800954e <_strtol_l.isra.0+0xd6>
 800955e:	b10e      	cbz	r6, 8009564 <_strtol_l.isra.0+0xec>
 8009560:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009564:	6011      	str	r1, [r2, #0]
 8009566:	e7f2      	b.n	800954e <_strtol_l.isra.0+0xd6>
 8009568:	2430      	movs	r4, #48	; 0x30
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1b3      	bne.n	80094d6 <_strtol_l.isra.0+0x5e>
 800956e:	2308      	movs	r3, #8
 8009570:	e7b1      	b.n	80094d6 <_strtol_l.isra.0+0x5e>
 8009572:	2c30      	cmp	r4, #48	; 0x30
 8009574:	d0a4      	beq.n	80094c0 <_strtol_l.isra.0+0x48>
 8009576:	230a      	movs	r3, #10
 8009578:	e7ad      	b.n	80094d6 <_strtol_l.isra.0+0x5e>
 800957a:	bf00      	nop
 800957c:	0800cb41 	.word	0x0800cb41

08009580 <_strtol_r>:
 8009580:	f7ff bf7a 	b.w	8009478 <_strtol_l.isra.0>

08009584 <__swbuf_r>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	460e      	mov	r6, r1
 8009588:	4614      	mov	r4, r2
 800958a:	4605      	mov	r5, r0
 800958c:	b118      	cbz	r0, 8009596 <__swbuf_r+0x12>
 800958e:	6983      	ldr	r3, [r0, #24]
 8009590:	b90b      	cbnz	r3, 8009596 <__swbuf_r+0x12>
 8009592:	f001 f84b 	bl	800a62c <__sinit>
 8009596:	4b21      	ldr	r3, [pc, #132]	; (800961c <__swbuf_r+0x98>)
 8009598:	429c      	cmp	r4, r3
 800959a:	d12b      	bne.n	80095f4 <__swbuf_r+0x70>
 800959c:	686c      	ldr	r4, [r5, #4]
 800959e:	69a3      	ldr	r3, [r4, #24]
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	071a      	lsls	r2, r3, #28
 80095a6:	d52f      	bpl.n	8009608 <__swbuf_r+0x84>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	b36b      	cbz	r3, 8009608 <__swbuf_r+0x84>
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	1ac0      	subs	r0, r0, r3
 80095b2:	6963      	ldr	r3, [r4, #20]
 80095b4:	b2f6      	uxtb	r6, r6
 80095b6:	4283      	cmp	r3, r0
 80095b8:	4637      	mov	r7, r6
 80095ba:	dc04      	bgt.n	80095c6 <__swbuf_r+0x42>
 80095bc:	4621      	mov	r1, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 ffa0 	bl	800a504 <_fflush_r>
 80095c4:	bb30      	cbnz	r0, 8009614 <__swbuf_r+0x90>
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	6022      	str	r2, [r4, #0]
 80095d2:	701e      	strb	r6, [r3, #0]
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	3001      	adds	r0, #1
 80095d8:	4283      	cmp	r3, r0
 80095da:	d004      	beq.n	80095e6 <__swbuf_r+0x62>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	07db      	lsls	r3, r3, #31
 80095e0:	d506      	bpl.n	80095f0 <__swbuf_r+0x6c>
 80095e2:	2e0a      	cmp	r6, #10
 80095e4:	d104      	bne.n	80095f0 <__swbuf_r+0x6c>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 ff8b 	bl	800a504 <_fflush_r>
 80095ee:	b988      	cbnz	r0, 8009614 <__swbuf_r+0x90>
 80095f0:	4638      	mov	r0, r7
 80095f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <__swbuf_r+0x9c>)
 80095f6:	429c      	cmp	r4, r3
 80095f8:	d101      	bne.n	80095fe <__swbuf_r+0x7a>
 80095fa:	68ac      	ldr	r4, [r5, #8]
 80095fc:	e7cf      	b.n	800959e <__swbuf_r+0x1a>
 80095fe:	4b09      	ldr	r3, [pc, #36]	; (8009624 <__swbuf_r+0xa0>)
 8009600:	429c      	cmp	r4, r3
 8009602:	bf08      	it	eq
 8009604:	68ec      	ldreq	r4, [r5, #12]
 8009606:	e7ca      	b.n	800959e <__swbuf_r+0x1a>
 8009608:	4621      	mov	r1, r4
 800960a:	4628      	mov	r0, r5
 800960c:	f000 f80c 	bl	8009628 <__swsetup_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	d0cb      	beq.n	80095ac <__swbuf_r+0x28>
 8009614:	f04f 37ff 	mov.w	r7, #4294967295
 8009618:	e7ea      	b.n	80095f0 <__swbuf_r+0x6c>
 800961a:	bf00      	nop
 800961c:	0800ccf8 	.word	0x0800ccf8
 8009620:	0800cd18 	.word	0x0800cd18
 8009624:	0800ccd8 	.word	0x0800ccd8

08009628 <__swsetup_r>:
 8009628:	4b32      	ldr	r3, [pc, #200]	; (80096f4 <__swsetup_r+0xcc>)
 800962a:	b570      	push	{r4, r5, r6, lr}
 800962c:	681d      	ldr	r5, [r3, #0]
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	b125      	cbz	r5, 800963e <__swsetup_r+0x16>
 8009634:	69ab      	ldr	r3, [r5, #24]
 8009636:	b913      	cbnz	r3, 800963e <__swsetup_r+0x16>
 8009638:	4628      	mov	r0, r5
 800963a:	f000 fff7 	bl	800a62c <__sinit>
 800963e:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <__swsetup_r+0xd0>)
 8009640:	429c      	cmp	r4, r3
 8009642:	d10f      	bne.n	8009664 <__swsetup_r+0x3c>
 8009644:	686c      	ldr	r4, [r5, #4]
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800964c:	0719      	lsls	r1, r3, #28
 800964e:	d42c      	bmi.n	80096aa <__swsetup_r+0x82>
 8009650:	06dd      	lsls	r5, r3, #27
 8009652:	d411      	bmi.n	8009678 <__swsetup_r+0x50>
 8009654:	2309      	movs	r3, #9
 8009656:	6033      	str	r3, [r6, #0]
 8009658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	f04f 30ff 	mov.w	r0, #4294967295
 8009662:	e03e      	b.n	80096e2 <__swsetup_r+0xba>
 8009664:	4b25      	ldr	r3, [pc, #148]	; (80096fc <__swsetup_r+0xd4>)
 8009666:	429c      	cmp	r4, r3
 8009668:	d101      	bne.n	800966e <__swsetup_r+0x46>
 800966a:	68ac      	ldr	r4, [r5, #8]
 800966c:	e7eb      	b.n	8009646 <__swsetup_r+0x1e>
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <__swsetup_r+0xd8>)
 8009670:	429c      	cmp	r4, r3
 8009672:	bf08      	it	eq
 8009674:	68ec      	ldreq	r4, [r5, #12]
 8009676:	e7e6      	b.n	8009646 <__swsetup_r+0x1e>
 8009678:	0758      	lsls	r0, r3, #29
 800967a:	d512      	bpl.n	80096a2 <__swsetup_r+0x7a>
 800967c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800967e:	b141      	cbz	r1, 8009692 <__swsetup_r+0x6a>
 8009680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009684:	4299      	cmp	r1, r3
 8009686:	d002      	beq.n	800968e <__swsetup_r+0x66>
 8009688:	4630      	mov	r0, r6
 800968a:	f7fe f8e1 	bl	8007850 <_free_r>
 800968e:	2300      	movs	r3, #0
 8009690:	6363      	str	r3, [r4, #52]	; 0x34
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	2300      	movs	r3, #0
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f043 0308 	orr.w	r3, r3, #8
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	b94b      	cbnz	r3, 80096c2 <__swsetup_r+0x9a>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b8:	d003      	beq.n	80096c2 <__swsetup_r+0x9a>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4630      	mov	r0, r6
 80096be:	f001 fbed 	bl	800ae9c <__smakebuf_r>
 80096c2:	89a0      	ldrh	r0, [r4, #12]
 80096c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c8:	f010 0301 	ands.w	r3, r0, #1
 80096cc:	d00a      	beq.n	80096e4 <__swsetup_r+0xbc>
 80096ce:	2300      	movs	r3, #0
 80096d0:	60a3      	str	r3, [r4, #8]
 80096d2:	6963      	ldr	r3, [r4, #20]
 80096d4:	425b      	negs	r3, r3
 80096d6:	61a3      	str	r3, [r4, #24]
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	b943      	cbnz	r3, 80096ee <__swsetup_r+0xc6>
 80096dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096e0:	d1ba      	bne.n	8009658 <__swsetup_r+0x30>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	0781      	lsls	r1, r0, #30
 80096e6:	bf58      	it	pl
 80096e8:	6963      	ldrpl	r3, [r4, #20]
 80096ea:	60a3      	str	r3, [r4, #8]
 80096ec:	e7f4      	b.n	80096d8 <__swsetup_r+0xb0>
 80096ee:	2000      	movs	r0, #0
 80096f0:	e7f7      	b.n	80096e2 <__swsetup_r+0xba>
 80096f2:	bf00      	nop
 80096f4:	20000024 	.word	0x20000024
 80096f8:	0800ccf8 	.word	0x0800ccf8
 80096fc:	0800cd18 	.word	0x0800cd18
 8009700:	0800ccd8 	.word	0x0800ccd8

08009704 <quorem>:
 8009704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	6903      	ldr	r3, [r0, #16]
 800970a:	690c      	ldr	r4, [r1, #16]
 800970c:	42a3      	cmp	r3, r4
 800970e:	4607      	mov	r7, r0
 8009710:	f2c0 8081 	blt.w	8009816 <quorem+0x112>
 8009714:	3c01      	subs	r4, #1
 8009716:	f101 0814 	add.w	r8, r1, #20
 800971a:	f100 0514 	add.w	r5, r0, #20
 800971e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800972c:	3301      	adds	r3, #1
 800972e:	429a      	cmp	r2, r3
 8009730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009738:	fbb2 f6f3 	udiv	r6, r2, r3
 800973c:	d331      	bcc.n	80097a2 <quorem+0x9e>
 800973e:	f04f 0e00 	mov.w	lr, #0
 8009742:	4640      	mov	r0, r8
 8009744:	46ac      	mov	ip, r5
 8009746:	46f2      	mov	sl, lr
 8009748:	f850 2b04 	ldr.w	r2, [r0], #4
 800974c:	b293      	uxth	r3, r2
 800974e:	fb06 e303 	mla	r3, r6, r3, lr
 8009752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009756:	b29b      	uxth	r3, r3
 8009758:	ebaa 0303 	sub.w	r3, sl, r3
 800975c:	0c12      	lsrs	r2, r2, #16
 800975e:	f8dc a000 	ldr.w	sl, [ip]
 8009762:	fb06 e202 	mla	r2, r6, r2, lr
 8009766:	fa13 f38a 	uxtah	r3, r3, sl
 800976a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800976e:	fa1f fa82 	uxth.w	sl, r2
 8009772:	f8dc 2000 	ldr.w	r2, [ip]
 8009776:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800977a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800977e:	b29b      	uxth	r3, r3
 8009780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009784:	4581      	cmp	r9, r0
 8009786:	f84c 3b04 	str.w	r3, [ip], #4
 800978a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800978e:	d2db      	bcs.n	8009748 <quorem+0x44>
 8009790:	f855 300b 	ldr.w	r3, [r5, fp]
 8009794:	b92b      	cbnz	r3, 80097a2 <quorem+0x9e>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	3b04      	subs	r3, #4
 800979a:	429d      	cmp	r5, r3
 800979c:	461a      	mov	r2, r3
 800979e:	d32e      	bcc.n	80097fe <quorem+0xfa>
 80097a0:	613c      	str	r4, [r7, #16]
 80097a2:	4638      	mov	r0, r7
 80097a4:	f001 fea0 	bl	800b4e8 <__mcmp>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	db24      	blt.n	80097f6 <quorem+0xf2>
 80097ac:	3601      	adds	r6, #1
 80097ae:	4628      	mov	r0, r5
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097b8:	f8d0 e000 	ldr.w	lr, [r0]
 80097bc:	b293      	uxth	r3, r2
 80097be:	ebac 0303 	sub.w	r3, ip, r3
 80097c2:	0c12      	lsrs	r2, r2, #16
 80097c4:	fa13 f38e 	uxtah	r3, r3, lr
 80097c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d6:	45c1      	cmp	r9, r8
 80097d8:	f840 3b04 	str.w	r3, [r0], #4
 80097dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097e0:	d2e8      	bcs.n	80097b4 <quorem+0xb0>
 80097e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ea:	b922      	cbnz	r2, 80097f6 <quorem+0xf2>
 80097ec:	3b04      	subs	r3, #4
 80097ee:	429d      	cmp	r5, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	d30a      	bcc.n	800980a <quorem+0x106>
 80097f4:	613c      	str	r4, [r7, #16]
 80097f6:	4630      	mov	r0, r6
 80097f8:	b003      	add	sp, #12
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	3b04      	subs	r3, #4
 8009802:	2a00      	cmp	r2, #0
 8009804:	d1cc      	bne.n	80097a0 <quorem+0x9c>
 8009806:	3c01      	subs	r4, #1
 8009808:	e7c7      	b.n	800979a <quorem+0x96>
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	3b04      	subs	r3, #4
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1f0      	bne.n	80097f4 <quorem+0xf0>
 8009812:	3c01      	subs	r4, #1
 8009814:	e7eb      	b.n	80097ee <quorem+0xea>
 8009816:	2000      	movs	r0, #0
 8009818:	e7ee      	b.n	80097f8 <quorem+0xf4>
 800981a:	0000      	movs	r0, r0
 800981c:	0000      	movs	r0, r0
	...

08009820 <_dtoa_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	ed2d 8b02 	vpush	{d8}
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	b095      	sub	sp, #84	; 0x54
 800982e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800983a:	4604      	mov	r4, r0
 800983c:	9209      	str	r2, [sp, #36]	; 0x24
 800983e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009840:	b975      	cbnz	r5, 8009860 <_dtoa_r+0x40>
 8009842:	2010      	movs	r0, #16
 8009844:	f7fd ffe6 	bl	8007814 <malloc>
 8009848:	4602      	mov	r2, r0
 800984a:	6260      	str	r0, [r4, #36]	; 0x24
 800984c:	b920      	cbnz	r0, 8009858 <_dtoa_r+0x38>
 800984e:	4bb2      	ldr	r3, [pc, #712]	; (8009b18 <_dtoa_r+0x2f8>)
 8009850:	21ea      	movs	r1, #234	; 0xea
 8009852:	48b2      	ldr	r0, [pc, #712]	; (8009b1c <_dtoa_r+0x2fc>)
 8009854:	f002 fb7c 	bl	800bf50 <__assert_func>
 8009858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800985c:	6005      	str	r5, [r0, #0]
 800985e:	60c5      	str	r5, [r0, #12]
 8009860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	b151      	cbz	r1, 800987c <_dtoa_r+0x5c>
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	604a      	str	r2, [r1, #4]
 800986a:	2301      	movs	r3, #1
 800986c:	4093      	lsls	r3, r2
 800986e:	608b      	str	r3, [r1, #8]
 8009870:	4620      	mov	r0, r4
 8009872:	f001 fbb1 	bl	800afd8 <_Bfree>
 8009876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	1e3b      	subs	r3, r7, #0
 800987e:	bfb9      	ittee	lt
 8009880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009884:	9303      	strlt	r3, [sp, #12]
 8009886:	2300      	movge	r3, #0
 8009888:	f8c8 3000 	strge.w	r3, [r8]
 800988c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009890:	4ba3      	ldr	r3, [pc, #652]	; (8009b20 <_dtoa_r+0x300>)
 8009892:	bfbc      	itt	lt
 8009894:	2201      	movlt	r2, #1
 8009896:	f8c8 2000 	strlt.w	r2, [r8]
 800989a:	ea33 0309 	bics.w	r3, r3, r9
 800989e:	d11b      	bne.n	80098d8 <_dtoa_r+0xb8>
 80098a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ac:	4333      	orrs	r3, r6
 80098ae:	f000 857a 	beq.w	800a3a6 <_dtoa_r+0xb86>
 80098b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b4:	b963      	cbnz	r3, 80098d0 <_dtoa_r+0xb0>
 80098b6:	4b9b      	ldr	r3, [pc, #620]	; (8009b24 <_dtoa_r+0x304>)
 80098b8:	e024      	b.n	8009904 <_dtoa_r+0xe4>
 80098ba:	4b9b      	ldr	r3, [pc, #620]	; (8009b28 <_dtoa_r+0x308>)
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	9800      	ldr	r0, [sp, #0]
 80098c6:	b015      	add	sp, #84	; 0x54
 80098c8:	ecbd 8b02 	vpop	{d8}
 80098cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	4b94      	ldr	r3, [pc, #592]	; (8009b24 <_dtoa_r+0x304>)
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	3303      	adds	r3, #3
 80098d6:	e7f3      	b.n	80098c0 <_dtoa_r+0xa0>
 80098d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	ec51 0b17 	vmov	r0, r1, d7
 80098e2:	2300      	movs	r3, #0
 80098e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098e8:	f7f7 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ec:	4680      	mov	r8, r0
 80098ee:	b158      	cbz	r0, 8009908 <_dtoa_r+0xe8>
 80098f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098f2:	2301      	movs	r3, #1
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8551 	beq.w	800a3a0 <_dtoa_r+0xb80>
 80098fe:	488b      	ldr	r0, [pc, #556]	; (8009b2c <_dtoa_r+0x30c>)
 8009900:	6018      	str	r0, [r3, #0]
 8009902:	1e43      	subs	r3, r0, #1
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	e7dd      	b.n	80098c4 <_dtoa_r+0xa4>
 8009908:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800990c:	aa12      	add	r2, sp, #72	; 0x48
 800990e:	a913      	add	r1, sp, #76	; 0x4c
 8009910:	4620      	mov	r0, r4
 8009912:	f001 ff09 	bl	800b728 <__d2b>
 8009916:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800991a:	4683      	mov	fp, r0
 800991c:	2d00      	cmp	r5, #0
 800991e:	d07c      	beq.n	8009a1a <_dtoa_r+0x1fa>
 8009920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009922:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800992a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800992e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800993a:	4b7d      	ldr	r3, [pc, #500]	; (8009b30 <_dtoa_r+0x310>)
 800993c:	2200      	movs	r2, #0
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f6 fca1 	bl	8000288 <__aeabi_dsub>
 8009946:	a36e      	add	r3, pc, #440	; (adr r3, 8009b00 <_dtoa_r+0x2e0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	a36d      	add	r3, pc, #436	; (adr r3, 8009b08 <_dtoa_r+0x2e8>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fc99 	bl	800028c <__adddf3>
 800995a:	4606      	mov	r6, r0
 800995c:	4628      	mov	r0, r5
 800995e:	460f      	mov	r7, r1
 8009960:	f7f6 fde0 	bl	8000524 <__aeabi_i2d>
 8009964:	a36a      	add	r3, pc, #424	; (adr r3, 8009b10 <_dtoa_r+0x2f0>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fe45 	bl	80005f8 <__aeabi_dmul>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4630      	mov	r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 fc89 	bl	800028c <__adddf3>
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	f7f7 f8eb 	bl	8000b58 <__aeabi_d2iz>
 8009982:	2200      	movs	r2, #0
 8009984:	4682      	mov	sl, r0
 8009986:	2300      	movs	r3, #0
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8009990:	b148      	cbz	r0, 80099a6 <_dtoa_r+0x186>
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fdc6 	bl	8000524 <__aeabi_i2d>
 8009998:	4632      	mov	r2, r6
 800999a:	463b      	mov	r3, r7
 800999c:	f7f7 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a0:	b908      	cbnz	r0, 80099a6 <_dtoa_r+0x186>
 80099a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099a6:	f1ba 0f16 	cmp.w	sl, #22
 80099aa:	d854      	bhi.n	8009a56 <_dtoa_r+0x236>
 80099ac:	4b61      	ldr	r3, [pc, #388]	; (8009b34 <_dtoa_r+0x314>)
 80099ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099ba:	f7f7 f88f 	bl	8000adc <__aeabi_dcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d04b      	beq.n	8009a5a <_dtoa_r+0x23a>
 80099c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099c6:	2300      	movs	r3, #0
 80099c8:	930e      	str	r3, [sp, #56]	; 0x38
 80099ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099cc:	1b5d      	subs	r5, r3, r5
 80099ce:	1e6b      	subs	r3, r5, #1
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	bf43      	ittte	mi
 80099d4:	2300      	movmi	r3, #0
 80099d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80099da:	9304      	strmi	r3, [sp, #16]
 80099dc:	f04f 0800 	movpl.w	r8, #0
 80099e0:	f1ba 0f00 	cmp.w	sl, #0
 80099e4:	db3b      	blt.n	8009a5e <_dtoa_r+0x23e>
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099ec:	4453      	add	r3, sl
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9306      	str	r3, [sp, #24]
 80099f4:	9b05      	ldr	r3, [sp, #20]
 80099f6:	2b09      	cmp	r3, #9
 80099f8:	d869      	bhi.n	8009ace <_dtoa_r+0x2ae>
 80099fa:	2b05      	cmp	r3, #5
 80099fc:	bfc4      	itt	gt
 80099fe:	3b04      	subgt	r3, #4
 8009a00:	9305      	strgt	r3, [sp, #20]
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	f1a3 0302 	sub.w	r3, r3, #2
 8009a08:	bfcc      	ite	gt
 8009a0a:	2500      	movgt	r5, #0
 8009a0c:	2501      	movle	r5, #1
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d869      	bhi.n	8009ae6 <_dtoa_r+0x2c6>
 8009a12:	e8df f003 	tbb	[pc, r3]
 8009a16:	4e2c      	.short	0x4e2c
 8009a18:	5a4c      	.short	0x5a4c
 8009a1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a1e:	441d      	add	r5, r3
 8009a20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	bfc1      	itttt	gt
 8009a28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a30:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a38:	bfda      	itte	le
 8009a3a:	f1c3 0320 	rsble	r3, r3, #32
 8009a3e:	fa06 f003 	lslle.w	r0, r6, r3
 8009a42:	4318      	orrgt	r0, r3
 8009a44:	f7f6 fd5e 	bl	8000504 <__aeabi_ui2d>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a50:	3d01      	subs	r5, #1
 8009a52:	9310      	str	r3, [sp, #64]	; 0x40
 8009a54:	e771      	b.n	800993a <_dtoa_r+0x11a>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e7b6      	b.n	80099c8 <_dtoa_r+0x1a8>
 8009a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a5c:	e7b5      	b.n	80099ca <_dtoa_r+0x1aa>
 8009a5e:	f1ca 0300 	rsb	r3, sl, #0
 8009a62:	9306      	str	r3, [sp, #24]
 8009a64:	2300      	movs	r3, #0
 8009a66:	eba8 080a 	sub.w	r8, r8, sl
 8009a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a6c:	e7c2      	b.n	80099f4 <_dtoa_r+0x1d4>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc39      	bgt.n	8009aec <_dtoa_r+0x2cc>
 8009a78:	f04f 0901 	mov.w	r9, #1
 8009a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a80:	464b      	mov	r3, r9
 8009a82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a88:	2200      	movs	r2, #0
 8009a8a:	6042      	str	r2, [r0, #4]
 8009a8c:	2204      	movs	r2, #4
 8009a8e:	f102 0614 	add.w	r6, r2, #20
 8009a92:	429e      	cmp	r6, r3
 8009a94:	6841      	ldr	r1, [r0, #4]
 8009a96:	d92f      	bls.n	8009af8 <_dtoa_r+0x2d8>
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f001 fa5d 	bl	800af58 <_Balloc>
 8009a9e:	9000      	str	r0, [sp, #0]
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d14b      	bne.n	8009b3c <_dtoa_r+0x31c>
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <_dtoa_r+0x318>)
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aac:	e6d1      	b.n	8009852 <_dtoa_r+0x32>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7de      	b.n	8009a70 <_dtoa_r+0x250>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9308      	str	r3, [sp, #32]
 8009ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab8:	eb0a 0903 	add.w	r9, sl, r3
 8009abc:	f109 0301 	add.w	r3, r9, #1
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	bfb8      	it	lt
 8009ac6:	2301      	movlt	r3, #1
 8009ac8:	e7dd      	b.n	8009a86 <_dtoa_r+0x266>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f2      	b.n	8009ab4 <_dtoa_r+0x294>
 8009ace:	2501      	movs	r5, #1
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	9508      	str	r5, [sp, #32]
 8009ad6:	f04f 39ff 	mov.w	r9, #4294967295
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ae0:	2312      	movs	r3, #18
 8009ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae4:	e7cf      	b.n	8009a86 <_dtoa_r+0x266>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9308      	str	r3, [sp, #32]
 8009aea:	e7f4      	b.n	8009ad6 <_dtoa_r+0x2b6>
 8009aec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009af4:	464b      	mov	r3, r9
 8009af6:	e7c6      	b.n	8009a86 <_dtoa_r+0x266>
 8009af8:	3101      	adds	r1, #1
 8009afa:	6041      	str	r1, [r0, #4]
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7c6      	b.n	8009a8e <_dtoa_r+0x26e>
 8009b00:	636f4361 	.word	0x636f4361
 8009b04:	3fd287a7 	.word	0x3fd287a7
 8009b08:	8b60c8b3 	.word	0x8b60c8b3
 8009b0c:	3fc68a28 	.word	0x3fc68a28
 8009b10:	509f79fb 	.word	0x509f79fb
 8009b14:	3fd34413 	.word	0x3fd34413
 8009b18:	0800cc4e 	.word	0x0800cc4e
 8009b1c:	0800cc65 	.word	0x0800cc65
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	0800cc4a 	.word	0x0800cc4a
 8009b28:	0800cc41 	.word	0x0800cc41
 8009b2c:	0800cac1 	.word	0x0800cac1
 8009b30:	3ff80000 	.word	0x3ff80000
 8009b34:	0800ce40 	.word	0x0800ce40
 8009b38:	0800ccc4 	.word	0x0800ccc4
 8009b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3e:	9a00      	ldr	r2, [sp, #0]
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	2b0e      	cmp	r3, #14
 8009b46:	f200 80ad 	bhi.w	8009ca4 <_dtoa_r+0x484>
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	f000 80aa 	beq.w	8009ca4 <_dtoa_r+0x484>
 8009b50:	f1ba 0f00 	cmp.w	sl, #0
 8009b54:	dd36      	ble.n	8009bc4 <_dtoa_r+0x3a4>
 8009b56:	4ac3      	ldr	r2, [pc, #780]	; (8009e64 <_dtoa_r+0x644>)
 8009b58:	f00a 030f 	and.w	r3, sl, #15
 8009b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b60:	ed93 7b00 	vldr	d7, [r3]
 8009b64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b70:	eef0 8a67 	vmov.f32	s17, s15
 8009b74:	d016      	beq.n	8009ba4 <_dtoa_r+0x384>
 8009b76:	4bbc      	ldr	r3, [pc, #752]	; (8009e68 <_dtoa_r+0x648>)
 8009b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b80:	f7f6 fe64 	bl	800084c <__aeabi_ddiv>
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	f007 070f 	and.w	r7, r7, #15
 8009b8c:	2503      	movs	r5, #3
 8009b8e:	4eb6      	ldr	r6, [pc, #728]	; (8009e68 <_dtoa_r+0x648>)
 8009b90:	b957      	cbnz	r7, 8009ba8 <_dtoa_r+0x388>
 8009b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b96:	ec53 2b18 	vmov	r2, r3, d8
 8009b9a:	f7f6 fe57 	bl	800084c <__aeabi_ddiv>
 8009b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba2:	e029      	b.n	8009bf8 <_dtoa_r+0x3d8>
 8009ba4:	2502      	movs	r5, #2
 8009ba6:	e7f2      	b.n	8009b8e <_dtoa_r+0x36e>
 8009ba8:	07f9      	lsls	r1, r7, #31
 8009baa:	d508      	bpl.n	8009bbe <_dtoa_r+0x39e>
 8009bac:	ec51 0b18 	vmov	r0, r1, d8
 8009bb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	ec41 0b18 	vmov	d8, r0, r1
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	107f      	asrs	r7, r7, #1
 8009bc0:	3608      	adds	r6, #8
 8009bc2:	e7e5      	b.n	8009b90 <_dtoa_r+0x370>
 8009bc4:	f000 80a6 	beq.w	8009d14 <_dtoa_r+0x4f4>
 8009bc8:	f1ca 0600 	rsb	r6, sl, #0
 8009bcc:	4ba5      	ldr	r3, [pc, #660]	; (8009e64 <_dtoa_r+0x644>)
 8009bce:	4fa6      	ldr	r7, [pc, #664]	; (8009e68 <_dtoa_r+0x648>)
 8009bd0:	f006 020f 	and.w	r2, r6, #15
 8009bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	1136      	asrs	r6, r6, #4
 8009bea:	2300      	movs	r3, #0
 8009bec:	2502      	movs	r5, #2
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	f040 8085 	bne.w	8009cfe <_dtoa_r+0x4de>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1d2      	bne.n	8009b9e <_dtoa_r+0x37e>
 8009bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 808c 	beq.w	8009d18 <_dtoa_r+0x4f8>
 8009c00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c04:	4b99      	ldr	r3, [pc, #612]	; (8009e6c <_dtoa_r+0x64c>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 ff66 	bl	8000adc <__aeabi_dcmplt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f000 8081 	beq.w	8009d18 <_dtoa_r+0x4f8>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d07d      	beq.n	8009d18 <_dtoa_r+0x4f8>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	dd3c      	ble.n	8009c9c <_dtoa_r+0x47c>
 8009c22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c26:	9307      	str	r3, [sp, #28]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4b91      	ldr	r3, [pc, #580]	; (8009e70 <_dtoa_r+0x650>)
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	3501      	adds	r5, #1
 8009c3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7f6 fc6e 	bl	8000524 <__aeabi_i2d>
 8009c48:	4632      	mov	r2, r6
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	f7f6 fcd4 	bl	80005f8 <__aeabi_dmul>
 8009c50:	4b88      	ldr	r3, [pc, #544]	; (8009e74 <_dtoa_r+0x654>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	f7f6 fb1a 	bl	800028c <__adddf3>
 8009c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d15c      	bne.n	8009d22 <_dtoa_r+0x502>
 8009c68:	4b83      	ldr	r3, [pc, #524]	; (8009e78 <_dtoa_r+0x658>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 fb0a 	bl	8000288 <__aeabi_dsub>
 8009c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460f      	mov	r7, r1
 8009c7c:	f7f6 ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	f040 8296 	bne.w	800a1b2 <_dtoa_r+0x992>
 8009c86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 ff23 	bl	8000adc <__aeabi_dcmplt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8288 	bne.w	800a1ac <_dtoa_r+0x98c>
 8009c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f2c0 8158 	blt.w	8009f5c <_dtoa_r+0x73c>
 8009cac:	f1ba 0f0e 	cmp.w	sl, #14
 8009cb0:	f300 8154 	bgt.w	8009f5c <_dtoa_r+0x73c>
 8009cb4:	4b6b      	ldr	r3, [pc, #428]	; (8009e64 <_dtoa_r+0x644>)
 8009cb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f280 80e3 	bge.w	8009e8c <_dtoa_r+0x66c>
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f300 80df 	bgt.w	8009e8c <_dtoa_r+0x66c>
 8009cce:	f040 826d 	bne.w	800a1ac <_dtoa_r+0x98c>
 8009cd2:	4b69      	ldr	r3, [pc, #420]	; (8009e78 <_dtoa_r+0x658>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fc8d 	bl	80005f8 <__aeabi_dmul>
 8009cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce2:	f7f6 ff0f 	bl	8000b04 <__aeabi_dcmpge>
 8009ce6:	9e01      	ldr	r6, [sp, #4]
 8009ce8:	4637      	mov	r7, r6
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f040 8243 	bne.w	800a176 <_dtoa_r+0x956>
 8009cf0:	9d00      	ldr	r5, [sp, #0]
 8009cf2:	2331      	movs	r3, #49	; 0x31
 8009cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	e23f      	b.n	800a17e <_dtoa_r+0x95e>
 8009cfe:	07f2      	lsls	r2, r6, #31
 8009d00:	d505      	bpl.n	8009d0e <_dtoa_r+0x4ee>
 8009d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	1076      	asrs	r6, r6, #1
 8009d10:	3708      	adds	r7, #8
 8009d12:	e76c      	b.n	8009bee <_dtoa_r+0x3ce>
 8009d14:	2502      	movs	r5, #2
 8009d16:	e76f      	b.n	8009bf8 <_dtoa_r+0x3d8>
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d20:	e78d      	b.n	8009c3e <_dtoa_r+0x41e>
 8009d22:	9900      	ldr	r1, [sp, #0]
 8009d24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d28:	4b4e      	ldr	r3, [pc, #312]	; (8009e64 <_dtoa_r+0x644>)
 8009d2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d2e:	4401      	add	r1, r0
 8009d30:	9102      	str	r1, [sp, #8]
 8009d32:	9908      	ldr	r1, [sp, #32]
 8009d34:	eeb0 8a47 	vmov.f32	s16, s14
 8009d38:	eef0 8a67 	vmov.f32	s17, s15
 8009d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d045      	beq.n	8009dd4 <_dtoa_r+0x5b4>
 8009d48:	494c      	ldr	r1, [pc, #304]	; (8009e7c <_dtoa_r+0x65c>)
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f6 fd7e 	bl	800084c <__aeabi_ddiv>
 8009d50:	ec53 2b18 	vmov	r2, r3, d8
 8009d54:	f7f6 fa98 	bl	8000288 <__aeabi_dsub>
 8009d58:	9d00      	ldr	r5, [sp, #0]
 8009d5a:	ec41 0b18 	vmov	d8, r0, r1
 8009d5e:	4639      	mov	r1, r7
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7f6 fef9 	bl	8000b58 <__aeabi_d2iz>
 8009d66:	900c      	str	r0, [sp, #48]	; 0x30
 8009d68:	f7f6 fbdc 	bl	8000524 <__aeabi_i2d>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7a:	3330      	adds	r3, #48	; 0x30
 8009d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d80:	ec53 2b18 	vmov	r2, r3, d8
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	f7f6 fea8 	bl	8000adc <__aeabi_dcmplt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d165      	bne.n	8009e5c <_dtoa_r+0x63c>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	4935      	ldr	r1, [pc, #212]	; (8009e6c <_dtoa_r+0x64c>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	f7f6 fa76 	bl	8000288 <__aeabi_dsub>
 8009d9c:	ec53 2b18 	vmov	r2, r3, d8
 8009da0:	f7f6 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f040 80b9 	bne.w	8009f1c <_dtoa_r+0x6fc>
 8009daa:	9b02      	ldr	r3, [sp, #8]
 8009dac:	429d      	cmp	r5, r3
 8009dae:	f43f af75 	beq.w	8009c9c <_dtoa_r+0x47c>
 8009db2:	4b2f      	ldr	r3, [pc, #188]	; (8009e70 <_dtoa_r+0x650>)
 8009db4:	ec51 0b18 	vmov	r0, r1, d8
 8009db8:	2200      	movs	r2, #0
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <_dtoa_r+0x650>)
 8009dc0:	ec41 0b18 	vmov	d8, r0, r1
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	e7c4      	b.n	8009d5e <_dtoa_r+0x53e>
 8009dd4:	ec51 0b17 	vmov	r0, r1, d7
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	9d00      	ldr	r5, [sp, #0]
 8009de0:	930c      	str	r3, [sp, #48]	; 0x30
 8009de2:	ec41 0b18 	vmov	d8, r0, r1
 8009de6:	4639      	mov	r1, r7
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7f6 feb5 	bl	8000b58 <__aeabi_d2iz>
 8009dee:	9011      	str	r0, [sp, #68]	; 0x44
 8009df0:	f7f6 fb98 	bl	8000524 <__aeabi_i2d>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fa44 	bl	8000288 <__aeabi_dsub>
 8009e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e02:	3330      	adds	r3, #48	; 0x30
 8009e04:	f805 3b01 	strb.w	r3, [r5], #1
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	429d      	cmp	r5, r3
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	d134      	bne.n	8009e80 <_dtoa_r+0x660>
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <_dtoa_r+0x65c>)
 8009e18:	ec51 0b18 	vmov	r0, r1, d8
 8009e1c:	f7f6 fa36 	bl	800028c <__adddf3>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4630      	mov	r0, r6
 8009e26:	4639      	mov	r1, r7
 8009e28:	f7f6 fe76 	bl	8000b18 <__aeabi_dcmpgt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d175      	bne.n	8009f1c <_dtoa_r+0x6fc>
 8009e30:	ec53 2b18 	vmov	r2, r3, d8
 8009e34:	4911      	ldr	r1, [pc, #68]	; (8009e7c <_dtoa_r+0x65c>)
 8009e36:	2000      	movs	r0, #0
 8009e38:	f7f6 fa26 	bl	8000288 <__aeabi_dsub>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fe4a 	bl	8000adc <__aeabi_dcmplt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f43f af27 	beq.w	8009c9c <_dtoa_r+0x47c>
 8009e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e50:	1e6b      	subs	r3, r5, #1
 8009e52:	930c      	str	r3, [sp, #48]	; 0x30
 8009e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e58:	2b30      	cmp	r3, #48	; 0x30
 8009e5a:	d0f8      	beq.n	8009e4e <_dtoa_r+0x62e>
 8009e5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e60:	e04a      	b.n	8009ef8 <_dtoa_r+0x6d8>
 8009e62:	bf00      	nop
 8009e64:	0800ce40 	.word	0x0800ce40
 8009e68:	0800ce18 	.word	0x0800ce18
 8009e6c:	3ff00000 	.word	0x3ff00000
 8009e70:	40240000 	.word	0x40240000
 8009e74:	401c0000 	.word	0x401c0000
 8009e78:	40140000 	.word	0x40140000
 8009e7c:	3fe00000 	.word	0x3fe00000
 8009e80:	4baf      	ldr	r3, [pc, #700]	; (800a140 <_dtoa_r+0x920>)
 8009e82:	f7f6 fbb9 	bl	80005f8 <__aeabi_dmul>
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	e7ac      	b.n	8009de6 <_dtoa_r+0x5c6>
 8009e8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e90:	9d00      	ldr	r5, [sp, #0]
 8009e92:	4642      	mov	r2, r8
 8009e94:	464b      	mov	r3, r9
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fcd7 	bl	800084c <__aeabi_ddiv>
 8009e9e:	f7f6 fe5b 	bl	8000b58 <__aeabi_d2iz>
 8009ea2:	9002      	str	r0, [sp, #8]
 8009ea4:	f7f6 fb3e 	bl	8000524 <__aeabi_i2d>
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	464b      	mov	r3, r9
 8009eac:	f7f6 fba4 	bl	80005f8 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 f9e6 	bl	8000288 <__aeabi_dsub>
 8009ebc:	9e02      	ldr	r6, [sp, #8]
 8009ebe:	9f01      	ldr	r7, [sp, #4]
 8009ec0:	3630      	adds	r6, #48	; 0x30
 8009ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec6:	9e00      	ldr	r6, [sp, #0]
 8009ec8:	1bae      	subs	r6, r5, r6
 8009eca:	42b7      	cmp	r7, r6
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	d137      	bne.n	8009f42 <_dtoa_r+0x722>
 8009ed2:	f7f6 f9db 	bl	800028c <__adddf3>
 8009ed6:	4642      	mov	r2, r8
 8009ed8:	464b      	mov	r3, r9
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	f7f6 fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ee2:	b9c8      	cbnz	r0, 8009f18 <_dtoa_r+0x6f8>
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef0:	b110      	cbz	r0, 8009ef8 <_dtoa_r+0x6d8>
 8009ef2:	9b02      	ldr	r3, [sp, #8]
 8009ef4:	07d9      	lsls	r1, r3, #31
 8009ef6:	d40f      	bmi.n	8009f18 <_dtoa_r+0x6f8>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4659      	mov	r1, fp
 8009efc:	f001 f86c 	bl	800afd8 <_Bfree>
 8009f00:	2300      	movs	r3, #0
 8009f02:	702b      	strb	r3, [r5, #0]
 8009f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f06:	f10a 0001 	add.w	r0, sl, #1
 8009f0a:	6018      	str	r0, [r3, #0]
 8009f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f43f acd8 	beq.w	80098c4 <_dtoa_r+0xa4>
 8009f14:	601d      	str	r5, [r3, #0]
 8009f16:	e4d5      	b.n	80098c4 <_dtoa_r+0xa4>
 8009f18:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	461d      	mov	r5, r3
 8009f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f24:	2a39      	cmp	r2, #57	; 0x39
 8009f26:	d108      	bne.n	8009f3a <_dtoa_r+0x71a>
 8009f28:	9a00      	ldr	r2, [sp, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d1f7      	bne.n	8009f1e <_dtoa_r+0x6fe>
 8009f2e:	9a07      	ldr	r2, [sp, #28]
 8009f30:	9900      	ldr	r1, [sp, #0]
 8009f32:	3201      	adds	r2, #1
 8009f34:	9207      	str	r2, [sp, #28]
 8009f36:	2230      	movs	r2, #48	; 0x30
 8009f38:	700a      	strb	r2, [r1, #0]
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	3201      	adds	r2, #1
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e78c      	b.n	8009e5c <_dtoa_r+0x63c>
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <_dtoa_r+0x920>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	f7f6 fb57 	bl	80005f8 <__aeabi_dmul>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460f      	mov	r7, r1
 8009f52:	f7f6 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d09b      	beq.n	8009e92 <_dtoa_r+0x672>
 8009f5a:	e7cd      	b.n	8009ef8 <_dtoa_r+0x6d8>
 8009f5c:	9a08      	ldr	r2, [sp, #32]
 8009f5e:	2a00      	cmp	r2, #0
 8009f60:	f000 80c4 	beq.w	800a0ec <_dtoa_r+0x8cc>
 8009f64:	9a05      	ldr	r2, [sp, #20]
 8009f66:	2a01      	cmp	r2, #1
 8009f68:	f300 80a8 	bgt.w	800a0bc <_dtoa_r+0x89c>
 8009f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	f000 80a0 	beq.w	800a0b4 <_dtoa_r+0x894>
 8009f74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f78:	9e06      	ldr	r6, [sp, #24]
 8009f7a:	4645      	mov	r5, r8
 8009f7c:	9a04      	ldr	r2, [sp, #16]
 8009f7e:	2101      	movs	r1, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	4620      	mov	r0, r4
 8009f84:	4498      	add	r8, r3
 8009f86:	9204      	str	r2, [sp, #16]
 8009f88:	f001 f92c 	bl	800b1e4 <__i2b>
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	dd0b      	ble.n	8009faa <_dtoa_r+0x78a>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd08      	ble.n	8009faa <_dtoa_r+0x78a>
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	bfa8      	it	ge
 8009f9e:	462b      	movge	r3, r5
 8009fa0:	eba8 0803 	sub.w	r8, r8, r3
 8009fa4:	1aed      	subs	r5, r5, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	b1fb      	cbz	r3, 8009fee <_dtoa_r+0x7ce>
 8009fae:	9b08      	ldr	r3, [sp, #32]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 809f 	beq.w	800a0f4 <_dtoa_r+0x8d4>
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	dd11      	ble.n	8009fde <_dtoa_r+0x7be>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f001 f9cc 	bl	800b35c <__pow5mult>
 8009fc4:	465a      	mov	r2, fp
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f001 f920 	bl	800b210 <__multiply>
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	9007      	str	r0, [sp, #28]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 ffff 	bl	800afd8 <_Bfree>
 8009fda:	9b07      	ldr	r3, [sp, #28]
 8009fdc:	469b      	mov	fp, r3
 8009fde:	9b06      	ldr	r3, [sp, #24]
 8009fe0:	1b9a      	subs	r2, r3, r6
 8009fe2:	d004      	beq.n	8009fee <_dtoa_r+0x7ce>
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f001 f9b8 	bl	800b35c <__pow5mult>
 8009fec:	4683      	mov	fp, r0
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 f8f7 	bl	800b1e4 <__i2b>
 8009ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	dd7c      	ble.n	800a0f8 <_dtoa_r+0x8d8>
 8009ffe:	461a      	mov	r2, r3
 800a000:	4601      	mov	r1, r0
 800a002:	4620      	mov	r0, r4
 800a004:	f001 f9aa 	bl	800b35c <__pow5mult>
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	4606      	mov	r6, r0
 800a00e:	dd76      	ble.n	800a0fe <_dtoa_r+0x8de>
 800a010:	2300      	movs	r3, #0
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	6933      	ldr	r3, [r6, #16]
 800a016:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a01a:	6918      	ldr	r0, [r3, #16]
 800a01c:	f001 f892 	bl	800b144 <__hi0bits>
 800a020:	f1c0 0020 	rsb	r0, r0, #32
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	4418      	add	r0, r3
 800a028:	f010 001f 	ands.w	r0, r0, #31
 800a02c:	f000 8086 	beq.w	800a13c <_dtoa_r+0x91c>
 800a030:	f1c0 0320 	rsb	r3, r0, #32
 800a034:	2b04      	cmp	r3, #4
 800a036:	dd7f      	ble.n	800a138 <_dtoa_r+0x918>
 800a038:	f1c0 001c 	rsb	r0, r0, #28
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	4403      	add	r3, r0
 800a040:	4480      	add	r8, r0
 800a042:	4405      	add	r5, r0
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	f1b8 0f00 	cmp.w	r8, #0
 800a04a:	dd05      	ble.n	800a058 <_dtoa_r+0x838>
 800a04c:	4659      	mov	r1, fp
 800a04e:	4642      	mov	r2, r8
 800a050:	4620      	mov	r0, r4
 800a052:	f001 f9dd 	bl	800b410 <__lshift>
 800a056:	4683      	mov	fp, r0
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd05      	ble.n	800a06a <_dtoa_r+0x84a>
 800a05e:	4631      	mov	r1, r6
 800a060:	461a      	mov	r2, r3
 800a062:	4620      	mov	r0, r4
 800a064:	f001 f9d4 	bl	800b410 <__lshift>
 800a068:	4606      	mov	r6, r0
 800a06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d069      	beq.n	800a144 <_dtoa_r+0x924>
 800a070:	4631      	mov	r1, r6
 800a072:	4658      	mov	r0, fp
 800a074:	f001 fa38 	bl	800b4e8 <__mcmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	da63      	bge.n	800a144 <_dtoa_r+0x924>
 800a07c:	2300      	movs	r3, #0
 800a07e:	4659      	mov	r1, fp
 800a080:	220a      	movs	r2, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f000 ffca 	bl	800b01c <__multadd>
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a08e:	4683      	mov	fp, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 818f 	beq.w	800a3b4 <_dtoa_r+0xb94>
 800a096:	4639      	mov	r1, r7
 800a098:	2300      	movs	r3, #0
 800a09a:	220a      	movs	r2, #10
 800a09c:	4620      	mov	r0, r4
 800a09e:	f000 ffbd 	bl	800b01c <__multadd>
 800a0a2:	f1b9 0f00 	cmp.w	r9, #0
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	f300 808e 	bgt.w	800a1c8 <_dtoa_r+0x9a8>
 800a0ac:	9b05      	ldr	r3, [sp, #20]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	dc50      	bgt.n	800a154 <_dtoa_r+0x934>
 800a0b2:	e089      	b.n	800a1c8 <_dtoa_r+0x9a8>
 800a0b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ba:	e75d      	b.n	8009f78 <_dtoa_r+0x758>
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	1e5e      	subs	r6, r3, #1
 800a0c0:	9b06      	ldr	r3, [sp, #24]
 800a0c2:	42b3      	cmp	r3, r6
 800a0c4:	bfbf      	itttt	lt
 800a0c6:	9b06      	ldrlt	r3, [sp, #24]
 800a0c8:	9606      	strlt	r6, [sp, #24]
 800a0ca:	1af2      	sublt	r2, r6, r3
 800a0cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0ce:	bfb6      	itet	lt
 800a0d0:	189b      	addlt	r3, r3, r2
 800a0d2:	1b9e      	subge	r6, r3, r6
 800a0d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	bfb8      	it	lt
 800a0da:	2600      	movlt	r6, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfb5      	itete	lt
 800a0e0:	eba8 0503 	sublt.w	r5, r8, r3
 800a0e4:	9b01      	ldrge	r3, [sp, #4]
 800a0e6:	2300      	movlt	r3, #0
 800a0e8:	4645      	movge	r5, r8
 800a0ea:	e747      	b.n	8009f7c <_dtoa_r+0x75c>
 800a0ec:	9e06      	ldr	r6, [sp, #24]
 800a0ee:	9f08      	ldr	r7, [sp, #32]
 800a0f0:	4645      	mov	r5, r8
 800a0f2:	e74c      	b.n	8009f8e <_dtoa_r+0x76e>
 800a0f4:	9a06      	ldr	r2, [sp, #24]
 800a0f6:	e775      	b.n	8009fe4 <_dtoa_r+0x7c4>
 800a0f8:	9b05      	ldr	r3, [sp, #20]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	dc18      	bgt.n	800a130 <_dtoa_r+0x910>
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	b9b3      	cbnz	r3, 800a130 <_dtoa_r+0x910>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a108:	b9a3      	cbnz	r3, 800a134 <_dtoa_r+0x914>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a110:	0d1b      	lsrs	r3, r3, #20
 800a112:	051b      	lsls	r3, r3, #20
 800a114:	b12b      	cbz	r3, 800a122 <_dtoa_r+0x902>
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	3301      	adds	r3, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	f108 0801 	add.w	r8, r8, #1
 800a120:	2301      	movs	r3, #1
 800a122:	9306      	str	r3, [sp, #24]
 800a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a126:	2b00      	cmp	r3, #0
 800a128:	f47f af74 	bne.w	800a014 <_dtoa_r+0x7f4>
 800a12c:	2001      	movs	r0, #1
 800a12e:	e779      	b.n	800a024 <_dtoa_r+0x804>
 800a130:	2300      	movs	r3, #0
 800a132:	e7f6      	b.n	800a122 <_dtoa_r+0x902>
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	e7f4      	b.n	800a122 <_dtoa_r+0x902>
 800a138:	d085      	beq.n	800a046 <_dtoa_r+0x826>
 800a13a:	4618      	mov	r0, r3
 800a13c:	301c      	adds	r0, #28
 800a13e:	e77d      	b.n	800a03c <_dtoa_r+0x81c>
 800a140:	40240000 	.word	0x40240000
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dc38      	bgt.n	800a1bc <_dtoa_r+0x99c>
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	dd35      	ble.n	800a1bc <_dtoa_r+0x99c>
 800a150:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a154:	f1b9 0f00 	cmp.w	r9, #0
 800a158:	d10d      	bne.n	800a176 <_dtoa_r+0x956>
 800a15a:	4631      	mov	r1, r6
 800a15c:	464b      	mov	r3, r9
 800a15e:	2205      	movs	r2, #5
 800a160:	4620      	mov	r0, r4
 800a162:	f000 ff5b 	bl	800b01c <__multadd>
 800a166:	4601      	mov	r1, r0
 800a168:	4606      	mov	r6, r0
 800a16a:	4658      	mov	r0, fp
 800a16c:	f001 f9bc 	bl	800b4e8 <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	f73f adbd 	bgt.w	8009cf0 <_dtoa_r+0x4d0>
 800a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a178:	9d00      	ldr	r5, [sp, #0]
 800a17a:	ea6f 0a03 	mvn.w	sl, r3
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	4631      	mov	r1, r6
 800a184:	4620      	mov	r0, r4
 800a186:	f000 ff27 	bl	800afd8 <_Bfree>
 800a18a:	2f00      	cmp	r7, #0
 800a18c:	f43f aeb4 	beq.w	8009ef8 <_dtoa_r+0x6d8>
 800a190:	f1b8 0f00 	cmp.w	r8, #0
 800a194:	d005      	beq.n	800a1a2 <_dtoa_r+0x982>
 800a196:	45b8      	cmp	r8, r7
 800a198:	d003      	beq.n	800a1a2 <_dtoa_r+0x982>
 800a19a:	4641      	mov	r1, r8
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 ff1b 	bl	800afd8 <_Bfree>
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 ff17 	bl	800afd8 <_Bfree>
 800a1aa:	e6a5      	b.n	8009ef8 <_dtoa_r+0x6d8>
 800a1ac:	2600      	movs	r6, #0
 800a1ae:	4637      	mov	r7, r6
 800a1b0:	e7e1      	b.n	800a176 <_dtoa_r+0x956>
 800a1b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a1b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1b8:	4637      	mov	r7, r6
 800a1ba:	e599      	b.n	8009cf0 <_dtoa_r+0x4d0>
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80fd 	beq.w	800a3c2 <_dtoa_r+0xba2>
 800a1c8:	2d00      	cmp	r5, #0
 800a1ca:	dd05      	ble.n	800a1d8 <_dtoa_r+0x9b8>
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f001 f91d 	bl	800b410 <__lshift>
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d05c      	beq.n	800a298 <_dtoa_r+0xa78>
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 feb9 	bl	800af58 <_Balloc>
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b928      	cbnz	r0, 800a1f6 <_dtoa_r+0x9d6>
 800a1ea:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <_dtoa_r+0xbcc>)
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1f2:	f7ff bb2e 	b.w	8009852 <_dtoa_r+0x32>
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	3202      	adds	r2, #2
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	f107 010c 	add.w	r1, r7, #12
 800a200:	300c      	adds	r0, #12
 800a202:	f7fd fb0f 	bl	8007824 <memcpy>
 800a206:	2201      	movs	r2, #1
 800a208:	4629      	mov	r1, r5
 800a20a:	4620      	mov	r0, r4
 800a20c:	f001 f900 	bl	800b410 <__lshift>
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	444b      	add	r3, r9
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	46b8      	mov	r8, r7
 800a224:	9306      	str	r3, [sp, #24]
 800a226:	4607      	mov	r7, r0
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	4631      	mov	r1, r6
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4658      	mov	r0, fp
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	f7ff fa67 	bl	8009704 <quorem>
 800a236:	4603      	mov	r3, r0
 800a238:	3330      	adds	r3, #48	; 0x30
 800a23a:	9004      	str	r0, [sp, #16]
 800a23c:	4641      	mov	r1, r8
 800a23e:	4658      	mov	r0, fp
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	f001 f951 	bl	800b4e8 <__mcmp>
 800a246:	463a      	mov	r2, r7
 800a248:	4681      	mov	r9, r0
 800a24a:	4631      	mov	r1, r6
 800a24c:	4620      	mov	r0, r4
 800a24e:	f001 f967 	bl	800b520 <__mdiff>
 800a252:	68c2      	ldr	r2, [r0, #12]
 800a254:	9b08      	ldr	r3, [sp, #32]
 800a256:	4605      	mov	r5, r0
 800a258:	bb02      	cbnz	r2, 800a29c <_dtoa_r+0xa7c>
 800a25a:	4601      	mov	r1, r0
 800a25c:	4658      	mov	r0, fp
 800a25e:	f001 f943 	bl	800b4e8 <__mcmp>
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	4602      	mov	r2, r0
 800a266:	4629      	mov	r1, r5
 800a268:	4620      	mov	r0, r4
 800a26a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a26e:	f000 feb3 	bl	800afd8 <_Bfree>
 800a272:	9b05      	ldr	r3, [sp, #20]
 800a274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a276:	9d01      	ldr	r5, [sp, #4]
 800a278:	ea43 0102 	orr.w	r1, r3, r2
 800a27c:	9b06      	ldr	r3, [sp, #24]
 800a27e:	430b      	orrs	r3, r1
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	d10d      	bne.n	800a2a0 <_dtoa_r+0xa80>
 800a284:	2b39      	cmp	r3, #57	; 0x39
 800a286:	d029      	beq.n	800a2dc <_dtoa_r+0xabc>
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	dd01      	ble.n	800a292 <_dtoa_r+0xa72>
 800a28e:	9b04      	ldr	r3, [sp, #16]
 800a290:	3331      	adds	r3, #49	; 0x31
 800a292:	9a02      	ldr	r2, [sp, #8]
 800a294:	7013      	strb	r3, [r2, #0]
 800a296:	e774      	b.n	800a182 <_dtoa_r+0x962>
 800a298:	4638      	mov	r0, r7
 800a29a:	e7b9      	b.n	800a210 <_dtoa_r+0x9f0>
 800a29c:	2201      	movs	r2, #1
 800a29e:	e7e2      	b.n	800a266 <_dtoa_r+0xa46>
 800a2a0:	f1b9 0f00 	cmp.w	r9, #0
 800a2a4:	db06      	blt.n	800a2b4 <_dtoa_r+0xa94>
 800a2a6:	9905      	ldr	r1, [sp, #20]
 800a2a8:	ea41 0909 	orr.w	r9, r1, r9
 800a2ac:	9906      	ldr	r1, [sp, #24]
 800a2ae:	ea59 0101 	orrs.w	r1, r9, r1
 800a2b2:	d120      	bne.n	800a2f6 <_dtoa_r+0xad6>
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	ddec      	ble.n	800a292 <_dtoa_r+0xa72>
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	f001 f8a6 	bl	800b410 <__lshift>
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	f001 f90e 	bl	800b4e8 <__mcmp>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	dc02      	bgt.n	800a2d8 <_dtoa_r+0xab8>
 800a2d2:	d1de      	bne.n	800a292 <_dtoa_r+0xa72>
 800a2d4:	07da      	lsls	r2, r3, #31
 800a2d6:	d5dc      	bpl.n	800a292 <_dtoa_r+0xa72>
 800a2d8:	2b39      	cmp	r3, #57	; 0x39
 800a2da:	d1d8      	bne.n	800a28e <_dtoa_r+0xa6e>
 800a2dc:	9a02      	ldr	r2, [sp, #8]
 800a2de:	2339      	movs	r3, #57	; 0x39
 800a2e0:	7013      	strb	r3, [r2, #0]
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	461d      	mov	r5, r3
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ec:	2a39      	cmp	r2, #57	; 0x39
 800a2ee:	d050      	beq.n	800a392 <_dtoa_r+0xb72>
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e745      	b.n	800a182 <_dtoa_r+0x962>
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	dd03      	ble.n	800a302 <_dtoa_r+0xae2>
 800a2fa:	2b39      	cmp	r3, #57	; 0x39
 800a2fc:	d0ee      	beq.n	800a2dc <_dtoa_r+0xabc>
 800a2fe:	3301      	adds	r3, #1
 800a300:	e7c7      	b.n	800a292 <_dtoa_r+0xa72>
 800a302:	9a01      	ldr	r2, [sp, #4]
 800a304:	9907      	ldr	r1, [sp, #28]
 800a306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a30a:	428a      	cmp	r2, r1
 800a30c:	d02a      	beq.n	800a364 <_dtoa_r+0xb44>
 800a30e:	4659      	mov	r1, fp
 800a310:	2300      	movs	r3, #0
 800a312:	220a      	movs	r2, #10
 800a314:	4620      	mov	r0, r4
 800a316:	f000 fe81 	bl	800b01c <__multadd>
 800a31a:	45b8      	cmp	r8, r7
 800a31c:	4683      	mov	fp, r0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	f04f 020a 	mov.w	r2, #10
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	d107      	bne.n	800a33c <_dtoa_r+0xb1c>
 800a32c:	f000 fe76 	bl	800b01c <__multadd>
 800a330:	4680      	mov	r8, r0
 800a332:	4607      	mov	r7, r0
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	3301      	adds	r3, #1
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	e775      	b.n	800a228 <_dtoa_r+0xa08>
 800a33c:	f000 fe6e 	bl	800b01c <__multadd>
 800a340:	4639      	mov	r1, r7
 800a342:	4680      	mov	r8, r0
 800a344:	2300      	movs	r3, #0
 800a346:	220a      	movs	r2, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fe67 	bl	800b01c <__multadd>
 800a34e:	4607      	mov	r7, r0
 800a350:	e7f0      	b.n	800a334 <_dtoa_r+0xb14>
 800a352:	f1b9 0f00 	cmp.w	r9, #0
 800a356:	9a00      	ldr	r2, [sp, #0]
 800a358:	bfcc      	ite	gt
 800a35a:	464d      	movgt	r5, r9
 800a35c:	2501      	movle	r5, #1
 800a35e:	4415      	add	r5, r2
 800a360:	f04f 0800 	mov.w	r8, #0
 800a364:	4659      	mov	r1, fp
 800a366:	2201      	movs	r2, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	f001 f850 	bl	800b410 <__lshift>
 800a370:	4631      	mov	r1, r6
 800a372:	4683      	mov	fp, r0
 800a374:	f001 f8b8 	bl	800b4e8 <__mcmp>
 800a378:	2800      	cmp	r0, #0
 800a37a:	dcb2      	bgt.n	800a2e2 <_dtoa_r+0xac2>
 800a37c:	d102      	bne.n	800a384 <_dtoa_r+0xb64>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	07db      	lsls	r3, r3, #31
 800a382:	d4ae      	bmi.n	800a2e2 <_dtoa_r+0xac2>
 800a384:	462b      	mov	r3, r5
 800a386:	461d      	mov	r5, r3
 800a388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38c:	2a30      	cmp	r2, #48	; 0x30
 800a38e:	d0fa      	beq.n	800a386 <_dtoa_r+0xb66>
 800a390:	e6f7      	b.n	800a182 <_dtoa_r+0x962>
 800a392:	9a00      	ldr	r2, [sp, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d1a5      	bne.n	800a2e4 <_dtoa_r+0xac4>
 800a398:	f10a 0a01 	add.w	sl, sl, #1
 800a39c:	2331      	movs	r3, #49	; 0x31
 800a39e:	e779      	b.n	800a294 <_dtoa_r+0xa74>
 800a3a0:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <_dtoa_r+0xbd0>)
 800a3a2:	f7ff baaf 	b.w	8009904 <_dtoa_r+0xe4>
 800a3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f47f aa86 	bne.w	80098ba <_dtoa_r+0x9a>
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <_dtoa_r+0xbd4>)
 800a3b0:	f7ff baa8 	b.w	8009904 <_dtoa_r+0xe4>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	dc03      	bgt.n	800a3c2 <_dtoa_r+0xba2>
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	f73f aec9 	bgt.w	800a154 <_dtoa_r+0x934>
 800a3c2:	9d00      	ldr	r5, [sp, #0]
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f7ff f99c 	bl	8009704 <quorem>
 800a3cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	1aaa      	subs	r2, r5, r2
 800a3d8:	4591      	cmp	r9, r2
 800a3da:	ddba      	ble.n	800a352 <_dtoa_r+0xb32>
 800a3dc:	4659      	mov	r1, fp
 800a3de:	2300      	movs	r3, #0
 800a3e0:	220a      	movs	r2, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fe1a 	bl	800b01c <__multadd>
 800a3e8:	4683      	mov	fp, r0
 800a3ea:	e7eb      	b.n	800a3c4 <_dtoa_r+0xba4>
 800a3ec:	0800ccc4 	.word	0x0800ccc4
 800a3f0:	0800cac0 	.word	0x0800cac0
 800a3f4:	0800cc41 	.word	0x0800cc41

0800a3f8 <__sflush_r>:
 800a3f8:	898a      	ldrh	r2, [r1, #12]
 800a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fe:	4605      	mov	r5, r0
 800a400:	0710      	lsls	r0, r2, #28
 800a402:	460c      	mov	r4, r1
 800a404:	d458      	bmi.n	800a4b8 <__sflush_r+0xc0>
 800a406:	684b      	ldr	r3, [r1, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc05      	bgt.n	800a418 <__sflush_r+0x20>
 800a40c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dc02      	bgt.n	800a418 <__sflush_r+0x20>
 800a412:	2000      	movs	r0, #0
 800a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	d0f9      	beq.n	800a412 <__sflush_r+0x1a>
 800a41e:	2300      	movs	r3, #0
 800a420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a424:	682f      	ldr	r7, [r5, #0]
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	d032      	beq.n	800a490 <__sflush_r+0x98>
 800a42a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	075a      	lsls	r2, r3, #29
 800a430:	d505      	bpl.n	800a43e <__sflush_r+0x46>
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	1ac0      	subs	r0, r0, r3
 800a436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a438:	b10b      	cbz	r3, 800a43e <__sflush_r+0x46>
 800a43a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a43c:	1ac0      	subs	r0, r0, r3
 800a43e:	2300      	movs	r3, #0
 800a440:	4602      	mov	r2, r0
 800a442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a444:	6a21      	ldr	r1, [r4, #32]
 800a446:	4628      	mov	r0, r5
 800a448:	47b0      	blx	r6
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	d106      	bne.n	800a45e <__sflush_r+0x66>
 800a450:	6829      	ldr	r1, [r5, #0]
 800a452:	291d      	cmp	r1, #29
 800a454:	d82c      	bhi.n	800a4b0 <__sflush_r+0xb8>
 800a456:	4a2a      	ldr	r2, [pc, #168]	; (800a500 <__sflush_r+0x108>)
 800a458:	40ca      	lsrs	r2, r1
 800a45a:	07d6      	lsls	r6, r2, #31
 800a45c:	d528      	bpl.n	800a4b0 <__sflush_r+0xb8>
 800a45e:	2200      	movs	r2, #0
 800a460:	6062      	str	r2, [r4, #4]
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	6922      	ldr	r2, [r4, #16]
 800a466:	6022      	str	r2, [r4, #0]
 800a468:	d504      	bpl.n	800a474 <__sflush_r+0x7c>
 800a46a:	1c42      	adds	r2, r0, #1
 800a46c:	d101      	bne.n	800a472 <__sflush_r+0x7a>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	b903      	cbnz	r3, 800a474 <__sflush_r+0x7c>
 800a472:	6560      	str	r0, [r4, #84]	; 0x54
 800a474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a476:	602f      	str	r7, [r5, #0]
 800a478:	2900      	cmp	r1, #0
 800a47a:	d0ca      	beq.n	800a412 <__sflush_r+0x1a>
 800a47c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a480:	4299      	cmp	r1, r3
 800a482:	d002      	beq.n	800a48a <__sflush_r+0x92>
 800a484:	4628      	mov	r0, r5
 800a486:	f7fd f9e3 	bl	8007850 <_free_r>
 800a48a:	2000      	movs	r0, #0
 800a48c:	6360      	str	r0, [r4, #52]	; 0x34
 800a48e:	e7c1      	b.n	800a414 <__sflush_r+0x1c>
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	2301      	movs	r3, #1
 800a494:	4628      	mov	r0, r5
 800a496:	47b0      	blx	r6
 800a498:	1c41      	adds	r1, r0, #1
 800a49a:	d1c7      	bne.n	800a42c <__sflush_r+0x34>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0c4      	beq.n	800a42c <__sflush_r+0x34>
 800a4a2:	2b1d      	cmp	r3, #29
 800a4a4:	d001      	beq.n	800a4aa <__sflush_r+0xb2>
 800a4a6:	2b16      	cmp	r3, #22
 800a4a8:	d101      	bne.n	800a4ae <__sflush_r+0xb6>
 800a4aa:	602f      	str	r7, [r5, #0]
 800a4ac:	e7b1      	b.n	800a412 <__sflush_r+0x1a>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	e7ad      	b.n	800a414 <__sflush_r+0x1c>
 800a4b8:	690f      	ldr	r7, [r1, #16]
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	d0a9      	beq.n	800a412 <__sflush_r+0x1a>
 800a4be:	0793      	lsls	r3, r2, #30
 800a4c0:	680e      	ldr	r6, [r1, #0]
 800a4c2:	bf08      	it	eq
 800a4c4:	694b      	ldreq	r3, [r1, #20]
 800a4c6:	600f      	str	r7, [r1, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	eba6 0807 	sub.w	r8, r6, r7
 800a4d0:	608b      	str	r3, [r1, #8]
 800a4d2:	f1b8 0f00 	cmp.w	r8, #0
 800a4d6:	dd9c      	ble.n	800a412 <__sflush_r+0x1a>
 800a4d8:	6a21      	ldr	r1, [r4, #32]
 800a4da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4dc:	4643      	mov	r3, r8
 800a4de:	463a      	mov	r2, r7
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b0      	blx	r6
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	dc06      	bgt.n	800a4f6 <__sflush_r+0xfe>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	e78e      	b.n	800a414 <__sflush_r+0x1c>
 800a4f6:	4407      	add	r7, r0
 800a4f8:	eba8 0800 	sub.w	r8, r8, r0
 800a4fc:	e7e9      	b.n	800a4d2 <__sflush_r+0xda>
 800a4fe:	bf00      	nop
 800a500:	20400001 	.word	0x20400001

0800a504 <_fflush_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	690b      	ldr	r3, [r1, #16]
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	b913      	cbnz	r3, 800a514 <_fflush_r+0x10>
 800a50e:	2500      	movs	r5, #0
 800a510:	4628      	mov	r0, r5
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	b118      	cbz	r0, 800a51e <_fflush_r+0x1a>
 800a516:	6983      	ldr	r3, [r0, #24]
 800a518:	b90b      	cbnz	r3, 800a51e <_fflush_r+0x1a>
 800a51a:	f000 f887 	bl	800a62c <__sinit>
 800a51e:	4b14      	ldr	r3, [pc, #80]	; (800a570 <_fflush_r+0x6c>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d11b      	bne.n	800a55c <_fflush_r+0x58>
 800a524:	686c      	ldr	r4, [r5, #4]
 800a526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0ef      	beq.n	800a50e <_fflush_r+0xa>
 800a52e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a530:	07d0      	lsls	r0, r2, #31
 800a532:	d404      	bmi.n	800a53e <_fflush_r+0x3a>
 800a534:	0599      	lsls	r1, r3, #22
 800a536:	d402      	bmi.n	800a53e <_fflush_r+0x3a>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f000 fc88 	bl	800ae4e <__retarget_lock_acquire_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	4621      	mov	r1, r4
 800a542:	f7ff ff59 	bl	800a3f8 <__sflush_r>
 800a546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a548:	07da      	lsls	r2, r3, #31
 800a54a:	4605      	mov	r5, r0
 800a54c:	d4e0      	bmi.n	800a510 <_fflush_r+0xc>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	d4dd      	bmi.n	800a510 <_fflush_r+0xc>
 800a554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a556:	f000 fc7b 	bl	800ae50 <__retarget_lock_release_recursive>
 800a55a:	e7d9      	b.n	800a510 <_fflush_r+0xc>
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <_fflush_r+0x70>)
 800a55e:	429c      	cmp	r4, r3
 800a560:	d101      	bne.n	800a566 <_fflush_r+0x62>
 800a562:	68ac      	ldr	r4, [r5, #8]
 800a564:	e7df      	b.n	800a526 <_fflush_r+0x22>
 800a566:	4b04      	ldr	r3, [pc, #16]	; (800a578 <_fflush_r+0x74>)
 800a568:	429c      	cmp	r4, r3
 800a56a:	bf08      	it	eq
 800a56c:	68ec      	ldreq	r4, [r5, #12]
 800a56e:	e7da      	b.n	800a526 <_fflush_r+0x22>
 800a570:	0800ccf8 	.word	0x0800ccf8
 800a574:	0800cd18 	.word	0x0800cd18
 800a578:	0800ccd8 	.word	0x0800ccd8

0800a57c <std>:
 800a57c:	2300      	movs	r3, #0
 800a57e:	b510      	push	{r4, lr}
 800a580:	4604      	mov	r4, r0
 800a582:	e9c0 3300 	strd	r3, r3, [r0]
 800a586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a58a:	6083      	str	r3, [r0, #8]
 800a58c:	8181      	strh	r1, [r0, #12]
 800a58e:	6643      	str	r3, [r0, #100]	; 0x64
 800a590:	81c2      	strh	r2, [r0, #14]
 800a592:	6183      	str	r3, [r0, #24]
 800a594:	4619      	mov	r1, r3
 800a596:	2208      	movs	r2, #8
 800a598:	305c      	adds	r0, #92	; 0x5c
 800a59a:	f7fd f951 	bl	8007840 <memset>
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <std+0x38>)
 800a5a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <std+0x3c>)
 800a5a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x40>)
 800a5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <std+0x44>)
 800a5ac:	6224      	str	r4, [r4, #32]
 800a5ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800be69 	.word	0x0800be69
 800a5b8:	0800be8b 	.word	0x0800be8b
 800a5bc:	0800bec3 	.word	0x0800bec3
 800a5c0:	0800bee7 	.word	0x0800bee7

0800a5c4 <_cleanup_r>:
 800a5c4:	4901      	ldr	r1, [pc, #4]	; (800a5cc <_cleanup_r+0x8>)
 800a5c6:	f000 b8af 	b.w	800a728 <_fwalk_reent>
 800a5ca:	bf00      	nop
 800a5cc:	0800a505 	.word	0x0800a505

0800a5d0 <__sfmoreglue>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	1e4a      	subs	r2, r1, #1
 800a5d4:	2568      	movs	r5, #104	; 0x68
 800a5d6:	4355      	muls	r5, r2
 800a5d8:	460e      	mov	r6, r1
 800a5da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5de:	f7fd f987 	bl	80078f0 <_malloc_r>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	b140      	cbz	r0, 800a5f8 <__sfmoreglue+0x28>
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5ec:	300c      	adds	r0, #12
 800a5ee:	60a0      	str	r0, [r4, #8]
 800a5f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5f4:	f7fd f924 	bl	8007840 <memset>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}

0800a5fc <__sfp_lock_acquire>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	; (800a604 <__sfp_lock_acquire+0x8>)
 800a5fe:	f000 bc26 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800a602:	bf00      	nop
 800a604:	2000348c 	.word	0x2000348c

0800a608 <__sfp_lock_release>:
 800a608:	4801      	ldr	r0, [pc, #4]	; (800a610 <__sfp_lock_release+0x8>)
 800a60a:	f000 bc21 	b.w	800ae50 <__retarget_lock_release_recursive>
 800a60e:	bf00      	nop
 800a610:	2000348c 	.word	0x2000348c

0800a614 <__sinit_lock_acquire>:
 800a614:	4801      	ldr	r0, [pc, #4]	; (800a61c <__sinit_lock_acquire+0x8>)
 800a616:	f000 bc1a 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800a61a:	bf00      	nop
 800a61c:	20003487 	.word	0x20003487

0800a620 <__sinit_lock_release>:
 800a620:	4801      	ldr	r0, [pc, #4]	; (800a628 <__sinit_lock_release+0x8>)
 800a622:	f000 bc15 	b.w	800ae50 <__retarget_lock_release_recursive>
 800a626:	bf00      	nop
 800a628:	20003487 	.word	0x20003487

0800a62c <__sinit>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	f7ff fff0 	bl	800a614 <__sinit_lock_acquire>
 800a634:	69a3      	ldr	r3, [r4, #24]
 800a636:	b11b      	cbz	r3, 800a640 <__sinit+0x14>
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63c:	f7ff bff0 	b.w	800a620 <__sinit_lock_release>
 800a640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a644:	6523      	str	r3, [r4, #80]	; 0x50
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <__sinit+0x68>)
 800a648:	4a13      	ldr	r2, [pc, #76]	; (800a698 <__sinit+0x6c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a64e:	42a3      	cmp	r3, r4
 800a650:	bf04      	itt	eq
 800a652:	2301      	moveq	r3, #1
 800a654:	61a3      	streq	r3, [r4, #24]
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f820 	bl	800a69c <__sfp>
 800a65c:	6060      	str	r0, [r4, #4]
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f81c 	bl	800a69c <__sfp>
 800a664:	60a0      	str	r0, [r4, #8]
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f818 	bl	800a69c <__sfp>
 800a66c:	2200      	movs	r2, #0
 800a66e:	60e0      	str	r0, [r4, #12]
 800a670:	2104      	movs	r1, #4
 800a672:	6860      	ldr	r0, [r4, #4]
 800a674:	f7ff ff82 	bl	800a57c <std>
 800a678:	68a0      	ldr	r0, [r4, #8]
 800a67a:	2201      	movs	r2, #1
 800a67c:	2109      	movs	r1, #9
 800a67e:	f7ff ff7d 	bl	800a57c <std>
 800a682:	68e0      	ldr	r0, [r4, #12]
 800a684:	2202      	movs	r2, #2
 800a686:	2112      	movs	r1, #18
 800a688:	f7ff ff78 	bl	800a57c <std>
 800a68c:	2301      	movs	r3, #1
 800a68e:	61a3      	str	r3, [r4, #24]
 800a690:	e7d2      	b.n	800a638 <__sinit+0xc>
 800a692:	bf00      	nop
 800a694:	0800caac 	.word	0x0800caac
 800a698:	0800a5c5 	.word	0x0800a5c5

0800a69c <__sfp>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	4607      	mov	r7, r0
 800a6a0:	f7ff ffac 	bl	800a5fc <__sfp_lock_acquire>
 800a6a4:	4b1e      	ldr	r3, [pc, #120]	; (800a720 <__sfp+0x84>)
 800a6a6:	681e      	ldr	r6, [r3, #0]
 800a6a8:	69b3      	ldr	r3, [r6, #24]
 800a6aa:	b913      	cbnz	r3, 800a6b2 <__sfp+0x16>
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff ffbd 	bl	800a62c <__sinit>
 800a6b2:	3648      	adds	r6, #72	; 0x48
 800a6b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	d503      	bpl.n	800a6c4 <__sfp+0x28>
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	b30b      	cbz	r3, 800a704 <__sfp+0x68>
 800a6c0:	6836      	ldr	r6, [r6, #0]
 800a6c2:	e7f7      	b.n	800a6b4 <__sfp+0x18>
 800a6c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6c8:	b9d5      	cbnz	r5, 800a700 <__sfp+0x64>
 800a6ca:	4b16      	ldr	r3, [pc, #88]	; (800a724 <__sfp+0x88>)
 800a6cc:	60e3      	str	r3, [r4, #12]
 800a6ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6d4:	f000 fbba 	bl	800ae4c <__retarget_lock_init_recursive>
 800a6d8:	f7ff ff96 	bl	800a608 <__sfp_lock_release>
 800a6dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6e4:	6025      	str	r5, [r4, #0]
 800a6e6:	61a5      	str	r5, [r4, #24]
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6f0:	f7fd f8a6 	bl	8007840 <memset>
 800a6f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a700:	3468      	adds	r4, #104	; 0x68
 800a702:	e7d9      	b.n	800a6b8 <__sfp+0x1c>
 800a704:	2104      	movs	r1, #4
 800a706:	4638      	mov	r0, r7
 800a708:	f7ff ff62 	bl	800a5d0 <__sfmoreglue>
 800a70c:	4604      	mov	r4, r0
 800a70e:	6030      	str	r0, [r6, #0]
 800a710:	2800      	cmp	r0, #0
 800a712:	d1d5      	bne.n	800a6c0 <__sfp+0x24>
 800a714:	f7ff ff78 	bl	800a608 <__sfp_lock_release>
 800a718:	230c      	movs	r3, #12
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	e7ee      	b.n	800a6fc <__sfp+0x60>
 800a71e:	bf00      	nop
 800a720:	0800caac 	.word	0x0800caac
 800a724:	ffff0001 	.word	0xffff0001

0800a728 <_fwalk_reent>:
 800a728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	4606      	mov	r6, r0
 800a72e:	4688      	mov	r8, r1
 800a730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a734:	2700      	movs	r7, #0
 800a736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a73a:	f1b9 0901 	subs.w	r9, r9, #1
 800a73e:	d505      	bpl.n	800a74c <_fwalk_reent+0x24>
 800a740:	6824      	ldr	r4, [r4, #0]
 800a742:	2c00      	cmp	r4, #0
 800a744:	d1f7      	bne.n	800a736 <_fwalk_reent+0xe>
 800a746:	4638      	mov	r0, r7
 800a748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74c:	89ab      	ldrh	r3, [r5, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d907      	bls.n	800a762 <_fwalk_reent+0x3a>
 800a752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a756:	3301      	adds	r3, #1
 800a758:	d003      	beq.n	800a762 <_fwalk_reent+0x3a>
 800a75a:	4629      	mov	r1, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	47c0      	blx	r8
 800a760:	4307      	orrs	r7, r0
 800a762:	3568      	adds	r5, #104	; 0x68
 800a764:	e7e9      	b.n	800a73a <_fwalk_reent+0x12>

0800a766 <rshift>:
 800a766:	6903      	ldr	r3, [r0, #16]
 800a768:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a770:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a774:	f100 0414 	add.w	r4, r0, #20
 800a778:	dd45      	ble.n	800a806 <rshift+0xa0>
 800a77a:	f011 011f 	ands.w	r1, r1, #31
 800a77e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a782:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a786:	d10c      	bne.n	800a7a2 <rshift+0x3c>
 800a788:	f100 0710 	add.w	r7, r0, #16
 800a78c:	4629      	mov	r1, r5
 800a78e:	42b1      	cmp	r1, r6
 800a790:	d334      	bcc.n	800a7fc <rshift+0x96>
 800a792:	1a9b      	subs	r3, r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	1eea      	subs	r2, r5, #3
 800a798:	4296      	cmp	r6, r2
 800a79a:	bf38      	it	cc
 800a79c:	2300      	movcc	r3, #0
 800a79e:	4423      	add	r3, r4
 800a7a0:	e015      	b.n	800a7ce <rshift+0x68>
 800a7a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7a6:	f1c1 0820 	rsb	r8, r1, #32
 800a7aa:	40cf      	lsrs	r7, r1
 800a7ac:	f105 0e04 	add.w	lr, r5, #4
 800a7b0:	46a1      	mov	r9, r4
 800a7b2:	4576      	cmp	r6, lr
 800a7b4:	46f4      	mov	ip, lr
 800a7b6:	d815      	bhi.n	800a7e4 <rshift+0x7e>
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	009a      	lsls	r2, r3, #2
 800a7bc:	3a04      	subs	r2, #4
 800a7be:	3501      	adds	r5, #1
 800a7c0:	42ae      	cmp	r6, r5
 800a7c2:	bf38      	it	cc
 800a7c4:	2200      	movcc	r2, #0
 800a7c6:	18a3      	adds	r3, r4, r2
 800a7c8:	50a7      	str	r7, [r4, r2]
 800a7ca:	b107      	cbz	r7, 800a7ce <rshift+0x68>
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	1b1a      	subs	r2, r3, r4
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7d6:	bf08      	it	eq
 800a7d8:	2300      	moveq	r3, #0
 800a7da:	6102      	str	r2, [r0, #16]
 800a7dc:	bf08      	it	eq
 800a7de:	6143      	streq	r3, [r0, #20]
 800a7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e4:	f8dc c000 	ldr.w	ip, [ip]
 800a7e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7ec:	ea4c 0707 	orr.w	r7, ip, r7
 800a7f0:	f849 7b04 	str.w	r7, [r9], #4
 800a7f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7f8:	40cf      	lsrs	r7, r1
 800a7fa:	e7da      	b.n	800a7b2 <rshift+0x4c>
 800a7fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a800:	f847 cf04 	str.w	ip, [r7, #4]!
 800a804:	e7c3      	b.n	800a78e <rshift+0x28>
 800a806:	4623      	mov	r3, r4
 800a808:	e7e1      	b.n	800a7ce <rshift+0x68>

0800a80a <__hexdig_fun>:
 800a80a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d802      	bhi.n	800a818 <__hexdig_fun+0xe>
 800a812:	3820      	subs	r0, #32
 800a814:	b2c0      	uxtb	r0, r0
 800a816:	4770      	bx	lr
 800a818:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a81c:	2b05      	cmp	r3, #5
 800a81e:	d801      	bhi.n	800a824 <__hexdig_fun+0x1a>
 800a820:	3847      	subs	r0, #71	; 0x47
 800a822:	e7f7      	b.n	800a814 <__hexdig_fun+0xa>
 800a824:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d801      	bhi.n	800a830 <__hexdig_fun+0x26>
 800a82c:	3827      	subs	r0, #39	; 0x27
 800a82e:	e7f1      	b.n	800a814 <__hexdig_fun+0xa>
 800a830:	2000      	movs	r0, #0
 800a832:	4770      	bx	lr

0800a834 <__gethex>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	ed2d 8b02 	vpush	{d8}
 800a83c:	b089      	sub	sp, #36	; 0x24
 800a83e:	ee08 0a10 	vmov	s16, r0
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	4bbc      	ldr	r3, [pc, #752]	; (800ab38 <__gethex+0x304>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	4618      	mov	r0, r3
 800a84c:	468b      	mov	fp, r1
 800a84e:	4690      	mov	r8, r2
 800a850:	f7f5 fcbe 	bl	80001d0 <strlen>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f8db 2000 	ldr.w	r2, [fp]
 800a85a:	4403      	add	r3, r0
 800a85c:	4682      	mov	sl, r0
 800a85e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	1c93      	adds	r3, r2, #2
 800a866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a86a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a86e:	32fe      	adds	r2, #254	; 0xfe
 800a870:	18d1      	adds	r1, r2, r3
 800a872:	461f      	mov	r7, r3
 800a874:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a878:	9100      	str	r1, [sp, #0]
 800a87a:	2830      	cmp	r0, #48	; 0x30
 800a87c:	d0f8      	beq.n	800a870 <__gethex+0x3c>
 800a87e:	f7ff ffc4 	bl	800a80a <__hexdig_fun>
 800a882:	4604      	mov	r4, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d13a      	bne.n	800a8fe <__gethex+0xca>
 800a888:	9901      	ldr	r1, [sp, #4]
 800a88a:	4652      	mov	r2, sl
 800a88c:	4638      	mov	r0, r7
 800a88e:	f001 fb2e 	bl	800beee <strncmp>
 800a892:	4605      	mov	r5, r0
 800a894:	2800      	cmp	r0, #0
 800a896:	d168      	bne.n	800a96a <__gethex+0x136>
 800a898:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a89c:	eb07 060a 	add.w	r6, r7, sl
 800a8a0:	f7ff ffb3 	bl	800a80a <__hexdig_fun>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d062      	beq.n	800a96e <__gethex+0x13a>
 800a8a8:	4633      	mov	r3, r6
 800a8aa:	7818      	ldrb	r0, [r3, #0]
 800a8ac:	2830      	cmp	r0, #48	; 0x30
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	f103 0301 	add.w	r3, r3, #1
 800a8b4:	d0f9      	beq.n	800a8aa <__gethex+0x76>
 800a8b6:	f7ff ffa8 	bl	800a80a <__hexdig_fun>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	fab0 f480 	clz	r4, r0
 800a8c0:	0964      	lsrs	r4, r4, #5
 800a8c2:	4635      	mov	r5, r6
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	7830      	ldrb	r0, [r6, #0]
 800a8ce:	f7ff ff9c 	bl	800a80a <__hexdig_fun>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1f8      	bne.n	800a8c8 <__gethex+0x94>
 800a8d6:	9901      	ldr	r1, [sp, #4]
 800a8d8:	4652      	mov	r2, sl
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f001 fb07 	bl	800beee <strncmp>
 800a8e0:	b980      	cbnz	r0, 800a904 <__gethex+0xd0>
 800a8e2:	b94d      	cbnz	r5, 800a8f8 <__gethex+0xc4>
 800a8e4:	eb06 050a 	add.w	r5, r6, sl
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4616      	mov	r6, r2
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	7830      	ldrb	r0, [r6, #0]
 800a8f0:	f7ff ff8b 	bl	800a80a <__hexdig_fun>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d1f8      	bne.n	800a8ea <__gethex+0xb6>
 800a8f8:	1bad      	subs	r5, r5, r6
 800a8fa:	00ad      	lsls	r5, r5, #2
 800a8fc:	e004      	b.n	800a908 <__gethex+0xd4>
 800a8fe:	2400      	movs	r4, #0
 800a900:	4625      	mov	r5, r4
 800a902:	e7e0      	b.n	800a8c6 <__gethex+0x92>
 800a904:	2d00      	cmp	r5, #0
 800a906:	d1f7      	bne.n	800a8f8 <__gethex+0xc4>
 800a908:	7833      	ldrb	r3, [r6, #0]
 800a90a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a90e:	2b50      	cmp	r3, #80	; 0x50
 800a910:	d13b      	bne.n	800a98a <__gethex+0x156>
 800a912:	7873      	ldrb	r3, [r6, #1]
 800a914:	2b2b      	cmp	r3, #43	; 0x2b
 800a916:	d02c      	beq.n	800a972 <__gethex+0x13e>
 800a918:	2b2d      	cmp	r3, #45	; 0x2d
 800a91a:	d02e      	beq.n	800a97a <__gethex+0x146>
 800a91c:	1c71      	adds	r1, r6, #1
 800a91e:	f04f 0900 	mov.w	r9, #0
 800a922:	7808      	ldrb	r0, [r1, #0]
 800a924:	f7ff ff71 	bl	800a80a <__hexdig_fun>
 800a928:	1e43      	subs	r3, r0, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b18      	cmp	r3, #24
 800a92e:	d82c      	bhi.n	800a98a <__gethex+0x156>
 800a930:	f1a0 0210 	sub.w	r2, r0, #16
 800a934:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a938:	f7ff ff67 	bl	800a80a <__hexdig_fun>
 800a93c:	1e43      	subs	r3, r0, #1
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b18      	cmp	r3, #24
 800a942:	d91d      	bls.n	800a980 <__gethex+0x14c>
 800a944:	f1b9 0f00 	cmp.w	r9, #0
 800a948:	d000      	beq.n	800a94c <__gethex+0x118>
 800a94a:	4252      	negs	r2, r2
 800a94c:	4415      	add	r5, r2
 800a94e:	f8cb 1000 	str.w	r1, [fp]
 800a952:	b1e4      	cbz	r4, 800a98e <__gethex+0x15a>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	bf14      	ite	ne
 800a95a:	2700      	movne	r7, #0
 800a95c:	2706      	moveq	r7, #6
 800a95e:	4638      	mov	r0, r7
 800a960:	b009      	add	sp, #36	; 0x24
 800a962:	ecbd 8b02 	vpop	{d8}
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	463e      	mov	r6, r7
 800a96c:	4625      	mov	r5, r4
 800a96e:	2401      	movs	r4, #1
 800a970:	e7ca      	b.n	800a908 <__gethex+0xd4>
 800a972:	f04f 0900 	mov.w	r9, #0
 800a976:	1cb1      	adds	r1, r6, #2
 800a978:	e7d3      	b.n	800a922 <__gethex+0xee>
 800a97a:	f04f 0901 	mov.w	r9, #1
 800a97e:	e7fa      	b.n	800a976 <__gethex+0x142>
 800a980:	230a      	movs	r3, #10
 800a982:	fb03 0202 	mla	r2, r3, r2, r0
 800a986:	3a10      	subs	r2, #16
 800a988:	e7d4      	b.n	800a934 <__gethex+0x100>
 800a98a:	4631      	mov	r1, r6
 800a98c:	e7df      	b.n	800a94e <__gethex+0x11a>
 800a98e:	1bf3      	subs	r3, r6, r7
 800a990:	3b01      	subs	r3, #1
 800a992:	4621      	mov	r1, r4
 800a994:	2b07      	cmp	r3, #7
 800a996:	dc0b      	bgt.n	800a9b0 <__gethex+0x17c>
 800a998:	ee18 0a10 	vmov	r0, s16
 800a99c:	f000 fadc 	bl	800af58 <_Balloc>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	b940      	cbnz	r0, 800a9b6 <__gethex+0x182>
 800a9a4:	4b65      	ldr	r3, [pc, #404]	; (800ab3c <__gethex+0x308>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	21de      	movs	r1, #222	; 0xde
 800a9aa:	4865      	ldr	r0, [pc, #404]	; (800ab40 <__gethex+0x30c>)
 800a9ac:	f001 fad0 	bl	800bf50 <__assert_func>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	105b      	asrs	r3, r3, #1
 800a9b4:	e7ee      	b.n	800a994 <__gethex+0x160>
 800a9b6:	f100 0914 	add.w	r9, r0, #20
 800a9ba:	f04f 0b00 	mov.w	fp, #0
 800a9be:	f1ca 0301 	rsb	r3, sl, #1
 800a9c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9c6:	f8cd b000 	str.w	fp, [sp]
 800a9ca:	9306      	str	r3, [sp, #24]
 800a9cc:	42b7      	cmp	r7, r6
 800a9ce:	d340      	bcc.n	800aa52 <__gethex+0x21e>
 800a9d0:	9802      	ldr	r0, [sp, #8]
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	f840 3b04 	str.w	r3, [r0], #4
 800a9d8:	eba0 0009 	sub.w	r0, r0, r9
 800a9dc:	1080      	asrs	r0, r0, #2
 800a9de:	0146      	lsls	r6, r0, #5
 800a9e0:	6120      	str	r0, [r4, #16]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fbae 	bl	800b144 <__hi0bits>
 800a9e8:	1a30      	subs	r0, r6, r0
 800a9ea:	f8d8 6000 	ldr.w	r6, [r8]
 800a9ee:	42b0      	cmp	r0, r6
 800a9f0:	dd63      	ble.n	800aaba <__gethex+0x286>
 800a9f2:	1b87      	subs	r7, r0, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 ff48 	bl	800b88c <__any_on>
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	b1a8      	cbz	r0, 800aa2c <__gethex+0x1f8>
 800aa00:	1e7b      	subs	r3, r7, #1
 800aa02:	1159      	asrs	r1, r3, #5
 800aa04:	f003 021f 	and.w	r2, r3, #31
 800aa08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa0c:	f04f 0a01 	mov.w	sl, #1
 800aa10:	fa0a f202 	lsl.w	r2, sl, r2
 800aa14:	420a      	tst	r2, r1
 800aa16:	d009      	beq.n	800aa2c <__gethex+0x1f8>
 800aa18:	4553      	cmp	r3, sl
 800aa1a:	dd05      	ble.n	800aa28 <__gethex+0x1f4>
 800aa1c:	1eb9      	subs	r1, r7, #2
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 ff34 	bl	800b88c <__any_on>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d145      	bne.n	800aab4 <__gethex+0x280>
 800aa28:	f04f 0a02 	mov.w	sl, #2
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff fe99 	bl	800a766 <rshift>
 800aa34:	443d      	add	r5, r7
 800aa36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa3a:	42ab      	cmp	r3, r5
 800aa3c:	da4c      	bge.n	800aad8 <__gethex+0x2a4>
 800aa3e:	ee18 0a10 	vmov	r0, s16
 800aa42:	4621      	mov	r1, r4
 800aa44:	f000 fac8 	bl	800afd8 <_Bfree>
 800aa48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	27a3      	movs	r7, #163	; 0xa3
 800aa50:	e785      	b.n	800a95e <__gethex+0x12a>
 800aa52:	1e73      	subs	r3, r6, #1
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d019      	beq.n	800aa94 <__gethex+0x260>
 800aa60:	f1bb 0f20 	cmp.w	fp, #32
 800aa64:	d107      	bne.n	800aa76 <__gethex+0x242>
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	f843 2b04 	str.w	r2, [r3], #4
 800aa6e:	9302      	str	r3, [sp, #8]
 800aa70:	2300      	movs	r3, #0
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	469b      	mov	fp, r3
 800aa76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa7a:	f7ff fec6 	bl	800a80a <__hexdig_fun>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	f000 000f 	and.w	r0, r0, #15
 800aa84:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa88:	4303      	orrs	r3, r0
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	f10b 0b04 	add.w	fp, fp, #4
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	e00d      	b.n	800aab0 <__gethex+0x27c>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	9a06      	ldr	r2, [sp, #24]
 800aa98:	4413      	add	r3, r2
 800aa9a:	42bb      	cmp	r3, r7
 800aa9c:	d3e0      	bcc.n	800aa60 <__gethex+0x22c>
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	9901      	ldr	r1, [sp, #4]
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	4652      	mov	r2, sl
 800aaa6:	f001 fa22 	bl	800beee <strncmp>
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d1d7      	bne.n	800aa60 <__gethex+0x22c>
 800aab0:	461e      	mov	r6, r3
 800aab2:	e78b      	b.n	800a9cc <__gethex+0x198>
 800aab4:	f04f 0a03 	mov.w	sl, #3
 800aab8:	e7b8      	b.n	800aa2c <__gethex+0x1f8>
 800aaba:	da0a      	bge.n	800aad2 <__gethex+0x29e>
 800aabc:	1a37      	subs	r7, r6, r0
 800aabe:	4621      	mov	r1, r4
 800aac0:	ee18 0a10 	vmov	r0, s16
 800aac4:	463a      	mov	r2, r7
 800aac6:	f000 fca3 	bl	800b410 <__lshift>
 800aaca:	1bed      	subs	r5, r5, r7
 800aacc:	4604      	mov	r4, r0
 800aace:	f100 0914 	add.w	r9, r0, #20
 800aad2:	f04f 0a00 	mov.w	sl, #0
 800aad6:	e7ae      	b.n	800aa36 <__gethex+0x202>
 800aad8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aadc:	42a8      	cmp	r0, r5
 800aade:	dd72      	ble.n	800abc6 <__gethex+0x392>
 800aae0:	1b45      	subs	r5, r0, r5
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	dc36      	bgt.n	800ab54 <__gethex+0x320>
 800aae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d02a      	beq.n	800ab44 <__gethex+0x310>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d02c      	beq.n	800ab4c <__gethex+0x318>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d115      	bne.n	800ab22 <__gethex+0x2ee>
 800aaf6:	42ae      	cmp	r6, r5
 800aaf8:	d113      	bne.n	800ab22 <__gethex+0x2ee>
 800aafa:	2e01      	cmp	r6, #1
 800aafc:	d10b      	bne.n	800ab16 <__gethex+0x2e2>
 800aafe:	9a04      	ldr	r2, [sp, #16]
 800ab00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	2301      	movs	r3, #1
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	f8c9 3000 	str.w	r3, [r9]
 800ab0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab10:	2762      	movs	r7, #98	; 0x62
 800ab12:	601c      	str	r4, [r3, #0]
 800ab14:	e723      	b.n	800a95e <__gethex+0x12a>
 800ab16:	1e71      	subs	r1, r6, #1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 feb7 	bl	800b88c <__any_on>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d1ed      	bne.n	800aafe <__gethex+0x2ca>
 800ab22:	ee18 0a10 	vmov	r0, s16
 800ab26:	4621      	mov	r1, r4
 800ab28:	f000 fa56 	bl	800afd8 <_Bfree>
 800ab2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab2e:	2300      	movs	r3, #0
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	2750      	movs	r7, #80	; 0x50
 800ab34:	e713      	b.n	800a95e <__gethex+0x12a>
 800ab36:	bf00      	nop
 800ab38:	0800cda4 	.word	0x0800cda4
 800ab3c:	0800ccc4 	.word	0x0800ccc4
 800ab40:	0800cd38 	.word	0x0800cd38
 800ab44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1eb      	bne.n	800ab22 <__gethex+0x2ee>
 800ab4a:	e7d8      	b.n	800aafe <__gethex+0x2ca>
 800ab4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1d5      	bne.n	800aafe <__gethex+0x2ca>
 800ab52:	e7e6      	b.n	800ab22 <__gethex+0x2ee>
 800ab54:	1e6f      	subs	r7, r5, #1
 800ab56:	f1ba 0f00 	cmp.w	sl, #0
 800ab5a:	d131      	bne.n	800abc0 <__gethex+0x38c>
 800ab5c:	b127      	cbz	r7, 800ab68 <__gethex+0x334>
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fe93 	bl	800b88c <__any_on>
 800ab66:	4682      	mov	sl, r0
 800ab68:	117b      	asrs	r3, r7, #5
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab70:	f007 071f 	and.w	r7, r7, #31
 800ab74:	fa01 f707 	lsl.w	r7, r1, r7
 800ab78:	421f      	tst	r7, r3
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	bf18      	it	ne
 800ab80:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab84:	1b76      	subs	r6, r6, r5
 800ab86:	f7ff fdee 	bl	800a766 <rshift>
 800ab8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab8e:	2702      	movs	r7, #2
 800ab90:	f1ba 0f00 	cmp.w	sl, #0
 800ab94:	d048      	beq.n	800ac28 <__gethex+0x3f4>
 800ab96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d015      	beq.n	800abca <__gethex+0x396>
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d017      	beq.n	800abd2 <__gethex+0x39e>
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d109      	bne.n	800abba <__gethex+0x386>
 800aba6:	f01a 0f02 	tst.w	sl, #2
 800abaa:	d006      	beq.n	800abba <__gethex+0x386>
 800abac:	f8d9 0000 	ldr.w	r0, [r9]
 800abb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800abb4:	f01a 0f01 	tst.w	sl, #1
 800abb8:	d10e      	bne.n	800abd8 <__gethex+0x3a4>
 800abba:	f047 0710 	orr.w	r7, r7, #16
 800abbe:	e033      	b.n	800ac28 <__gethex+0x3f4>
 800abc0:	f04f 0a01 	mov.w	sl, #1
 800abc4:	e7d0      	b.n	800ab68 <__gethex+0x334>
 800abc6:	2701      	movs	r7, #1
 800abc8:	e7e2      	b.n	800ab90 <__gethex+0x35c>
 800abca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abcc:	f1c3 0301 	rsb	r3, r3, #1
 800abd0:	9315      	str	r3, [sp, #84]	; 0x54
 800abd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0f0      	beq.n	800abba <__gethex+0x386>
 800abd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abdc:	f104 0314 	add.w	r3, r4, #20
 800abe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abf6:	d01c      	beq.n	800ac32 <__gethex+0x3fe>
 800abf8:	3201      	adds	r2, #1
 800abfa:	6002      	str	r2, [r0, #0]
 800abfc:	2f02      	cmp	r7, #2
 800abfe:	f104 0314 	add.w	r3, r4, #20
 800ac02:	d13f      	bne.n	800ac84 <__gethex+0x450>
 800ac04:	f8d8 2000 	ldr.w	r2, [r8]
 800ac08:	3a01      	subs	r2, #1
 800ac0a:	42b2      	cmp	r2, r6
 800ac0c:	d10a      	bne.n	800ac24 <__gethex+0x3f0>
 800ac0e:	1171      	asrs	r1, r6, #5
 800ac10:	2201      	movs	r2, #1
 800ac12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac16:	f006 061f 	and.w	r6, r6, #31
 800ac1a:	fa02 f606 	lsl.w	r6, r2, r6
 800ac1e:	421e      	tst	r6, r3
 800ac20:	bf18      	it	ne
 800ac22:	4617      	movne	r7, r2
 800ac24:	f047 0720 	orr.w	r7, r7, #32
 800ac28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac2a:	601c      	str	r4, [r3, #0]
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	601d      	str	r5, [r3, #0]
 800ac30:	e695      	b.n	800a95e <__gethex+0x12a>
 800ac32:	4299      	cmp	r1, r3
 800ac34:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac38:	d8d8      	bhi.n	800abec <__gethex+0x3b8>
 800ac3a:	68a3      	ldr	r3, [r4, #8]
 800ac3c:	459b      	cmp	fp, r3
 800ac3e:	db19      	blt.n	800ac74 <__gethex+0x440>
 800ac40:	6861      	ldr	r1, [r4, #4]
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	3101      	adds	r1, #1
 800ac48:	f000 f986 	bl	800af58 <_Balloc>
 800ac4c:	4681      	mov	r9, r0
 800ac4e:	b918      	cbnz	r0, 800ac58 <__gethex+0x424>
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <__gethex+0x488>)
 800ac52:	4602      	mov	r2, r0
 800ac54:	2184      	movs	r1, #132	; 0x84
 800ac56:	e6a8      	b.n	800a9aa <__gethex+0x176>
 800ac58:	6922      	ldr	r2, [r4, #16]
 800ac5a:	3202      	adds	r2, #2
 800ac5c:	f104 010c 	add.w	r1, r4, #12
 800ac60:	0092      	lsls	r2, r2, #2
 800ac62:	300c      	adds	r0, #12
 800ac64:	f7fc fdde 	bl	8007824 <memcpy>
 800ac68:	4621      	mov	r1, r4
 800ac6a:	ee18 0a10 	vmov	r0, s16
 800ac6e:	f000 f9b3 	bl	800afd8 <_Bfree>
 800ac72:	464c      	mov	r4, r9
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac7c:	6122      	str	r2, [r4, #16]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	615a      	str	r2, [r3, #20]
 800ac82:	e7bb      	b.n	800abfc <__gethex+0x3c8>
 800ac84:	6922      	ldr	r2, [r4, #16]
 800ac86:	455a      	cmp	r2, fp
 800ac88:	dd0b      	ble.n	800aca2 <__gethex+0x46e>
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7ff fd6a 	bl	800a766 <rshift>
 800ac92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac96:	3501      	adds	r5, #1
 800ac98:	42ab      	cmp	r3, r5
 800ac9a:	f6ff aed0 	blt.w	800aa3e <__gethex+0x20a>
 800ac9e:	2701      	movs	r7, #1
 800aca0:	e7c0      	b.n	800ac24 <__gethex+0x3f0>
 800aca2:	f016 061f 	ands.w	r6, r6, #31
 800aca6:	d0fa      	beq.n	800ac9e <__gethex+0x46a>
 800aca8:	449a      	add	sl, r3
 800acaa:	f1c6 0620 	rsb	r6, r6, #32
 800acae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800acb2:	f000 fa47 	bl	800b144 <__hi0bits>
 800acb6:	42b0      	cmp	r0, r6
 800acb8:	dbe7      	blt.n	800ac8a <__gethex+0x456>
 800acba:	e7f0      	b.n	800ac9e <__gethex+0x46a>
 800acbc:	0800ccc4 	.word	0x0800ccc4

0800acc0 <L_shift>:
 800acc0:	f1c2 0208 	rsb	r2, r2, #8
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	b570      	push	{r4, r5, r6, lr}
 800acc8:	f1c2 0620 	rsb	r6, r2, #32
 800accc:	6843      	ldr	r3, [r0, #4]
 800acce:	6804      	ldr	r4, [r0, #0]
 800acd0:	fa03 f506 	lsl.w	r5, r3, r6
 800acd4:	432c      	orrs	r4, r5
 800acd6:	40d3      	lsrs	r3, r2
 800acd8:	6004      	str	r4, [r0, #0]
 800acda:	f840 3f04 	str.w	r3, [r0, #4]!
 800acde:	4288      	cmp	r0, r1
 800ace0:	d3f4      	bcc.n	800accc <L_shift+0xc>
 800ace2:	bd70      	pop	{r4, r5, r6, pc}

0800ace4 <__match>:
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	6803      	ldr	r3, [r0, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acee:	b914      	cbnz	r4, 800acf6 <__match+0x12>
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	2001      	movs	r0, #1
 800acf4:	bd30      	pop	{r4, r5, pc}
 800acf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acfe:	2d19      	cmp	r5, #25
 800ad00:	bf98      	it	ls
 800ad02:	3220      	addls	r2, #32
 800ad04:	42a2      	cmp	r2, r4
 800ad06:	d0f0      	beq.n	800acea <__match+0x6>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7f3      	b.n	800acf4 <__match+0x10>

0800ad0c <__hexnan>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	680b      	ldr	r3, [r1, #0]
 800ad12:	6801      	ldr	r1, [r0, #0]
 800ad14:	115e      	asrs	r6, r3, #5
 800ad16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad1a:	f013 031f 	ands.w	r3, r3, #31
 800ad1e:	b087      	sub	sp, #28
 800ad20:	bf18      	it	ne
 800ad22:	3604      	addne	r6, #4
 800ad24:	2500      	movs	r5, #0
 800ad26:	1f37      	subs	r7, r6, #4
 800ad28:	4682      	mov	sl, r0
 800ad2a:	4690      	mov	r8, r2
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad32:	46b9      	mov	r9, r7
 800ad34:	463c      	mov	r4, r7
 800ad36:	9502      	str	r5, [sp, #8]
 800ad38:	46ab      	mov	fp, r5
 800ad3a:	784a      	ldrb	r2, [r1, #1]
 800ad3c:	1c4b      	adds	r3, r1, #1
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	b342      	cbz	r2, 800ad94 <__hexnan+0x88>
 800ad42:	4610      	mov	r0, r2
 800ad44:	9105      	str	r1, [sp, #20]
 800ad46:	9204      	str	r2, [sp, #16]
 800ad48:	f7ff fd5f 	bl	800a80a <__hexdig_fun>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d14f      	bne.n	800adf0 <__hexnan+0xe4>
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	9905      	ldr	r1, [sp, #20]
 800ad54:	2a20      	cmp	r2, #32
 800ad56:	d818      	bhi.n	800ad8a <__hexnan+0x7e>
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	459b      	cmp	fp, r3
 800ad5c:	dd13      	ble.n	800ad86 <__hexnan+0x7a>
 800ad5e:	454c      	cmp	r4, r9
 800ad60:	d206      	bcs.n	800ad70 <__hexnan+0x64>
 800ad62:	2d07      	cmp	r5, #7
 800ad64:	dc04      	bgt.n	800ad70 <__hexnan+0x64>
 800ad66:	462a      	mov	r2, r5
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff ffa8 	bl	800acc0 <L_shift>
 800ad70:	4544      	cmp	r4, r8
 800ad72:	d950      	bls.n	800ae16 <__hexnan+0x10a>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f1a4 0904 	sub.w	r9, r4, #4
 800ad7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ad82:	464c      	mov	r4, r9
 800ad84:	461d      	mov	r5, r3
 800ad86:	9903      	ldr	r1, [sp, #12]
 800ad88:	e7d7      	b.n	800ad3a <__hexnan+0x2e>
 800ad8a:	2a29      	cmp	r2, #41	; 0x29
 800ad8c:	d156      	bne.n	800ae3c <__hexnan+0x130>
 800ad8e:	3102      	adds	r1, #2
 800ad90:	f8ca 1000 	str.w	r1, [sl]
 800ad94:	f1bb 0f00 	cmp.w	fp, #0
 800ad98:	d050      	beq.n	800ae3c <__hexnan+0x130>
 800ad9a:	454c      	cmp	r4, r9
 800ad9c:	d206      	bcs.n	800adac <__hexnan+0xa0>
 800ad9e:	2d07      	cmp	r5, #7
 800ada0:	dc04      	bgt.n	800adac <__hexnan+0xa0>
 800ada2:	462a      	mov	r2, r5
 800ada4:	4649      	mov	r1, r9
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7ff ff8a 	bl	800acc0 <L_shift>
 800adac:	4544      	cmp	r4, r8
 800adae:	d934      	bls.n	800ae1a <__hexnan+0x10e>
 800adb0:	f1a8 0204 	sub.w	r2, r8, #4
 800adb4:	4623      	mov	r3, r4
 800adb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800adba:	f842 1f04 	str.w	r1, [r2, #4]!
 800adbe:	429f      	cmp	r7, r3
 800adc0:	d2f9      	bcs.n	800adb6 <__hexnan+0xaa>
 800adc2:	1b3b      	subs	r3, r7, r4
 800adc4:	f023 0303 	bic.w	r3, r3, #3
 800adc8:	3304      	adds	r3, #4
 800adca:	3401      	adds	r4, #1
 800adcc:	3e03      	subs	r6, #3
 800adce:	42b4      	cmp	r4, r6
 800add0:	bf88      	it	hi
 800add2:	2304      	movhi	r3, #4
 800add4:	4443      	add	r3, r8
 800add6:	2200      	movs	r2, #0
 800add8:	f843 2b04 	str.w	r2, [r3], #4
 800addc:	429f      	cmp	r7, r3
 800adde:	d2fb      	bcs.n	800add8 <__hexnan+0xcc>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	b91b      	cbnz	r3, 800adec <__hexnan+0xe0>
 800ade4:	4547      	cmp	r7, r8
 800ade6:	d127      	bne.n	800ae38 <__hexnan+0x12c>
 800ade8:	2301      	movs	r3, #1
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	2005      	movs	r0, #5
 800adee:	e026      	b.n	800ae3e <__hexnan+0x132>
 800adf0:	3501      	adds	r5, #1
 800adf2:	2d08      	cmp	r5, #8
 800adf4:	f10b 0b01 	add.w	fp, fp, #1
 800adf8:	dd06      	ble.n	800ae08 <__hexnan+0xfc>
 800adfa:	4544      	cmp	r4, r8
 800adfc:	d9c3      	bls.n	800ad86 <__hexnan+0x7a>
 800adfe:	2300      	movs	r3, #0
 800ae00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae04:	2501      	movs	r5, #1
 800ae06:	3c04      	subs	r4, #4
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	f000 000f 	and.w	r0, r0, #15
 800ae0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	e7b7      	b.n	800ad86 <__hexnan+0x7a>
 800ae16:	2508      	movs	r5, #8
 800ae18:	e7b5      	b.n	800ad86 <__hexnan+0x7a>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0df      	beq.n	800ade0 <__hexnan+0xd4>
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	f1c3 0320 	rsb	r3, r3, #32
 800ae28:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae30:	401a      	ands	r2, r3
 800ae32:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae36:	e7d3      	b.n	800ade0 <__hexnan+0xd4>
 800ae38:	3f04      	subs	r7, #4
 800ae3a:	e7d1      	b.n	800ade0 <__hexnan+0xd4>
 800ae3c:	2004      	movs	r0, #4
 800ae3e:	b007      	add	sp, #28
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae44 <_localeconv_r>:
 800ae44:	4800      	ldr	r0, [pc, #0]	; (800ae48 <_localeconv_r+0x4>)
 800ae46:	4770      	bx	lr
 800ae48:	2000017c 	.word	0x2000017c

0800ae4c <__retarget_lock_init_recursive>:
 800ae4c:	4770      	bx	lr

0800ae4e <__retarget_lock_acquire_recursive>:
 800ae4e:	4770      	bx	lr

0800ae50 <__retarget_lock_release_recursive>:
 800ae50:	4770      	bx	lr

0800ae52 <__swhatbuf_r>:
 800ae52:	b570      	push	{r4, r5, r6, lr}
 800ae54:	460e      	mov	r6, r1
 800ae56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	b096      	sub	sp, #88	; 0x58
 800ae5e:	4614      	mov	r4, r2
 800ae60:	461d      	mov	r5, r3
 800ae62:	da07      	bge.n	800ae74 <__swhatbuf_r+0x22>
 800ae64:	2300      	movs	r3, #0
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	89b3      	ldrh	r3, [r6, #12]
 800ae6a:	061a      	lsls	r2, r3, #24
 800ae6c:	d410      	bmi.n	800ae90 <__swhatbuf_r+0x3e>
 800ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae72:	e00e      	b.n	800ae92 <__swhatbuf_r+0x40>
 800ae74:	466a      	mov	r2, sp
 800ae76:	f001 f8ab 	bl	800bfd0 <_fstat_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	dbf2      	blt.n	800ae64 <__swhatbuf_r+0x12>
 800ae7e:	9a01      	ldr	r2, [sp, #4]
 800ae80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae88:	425a      	negs	r2, r3
 800ae8a:	415a      	adcs	r2, r3
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	e7ee      	b.n	800ae6e <__swhatbuf_r+0x1c>
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	2000      	movs	r0, #0
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	b016      	add	sp, #88	; 0x58
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae9c <__smakebuf_r>:
 800ae9c:	898b      	ldrh	r3, [r1, #12]
 800ae9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aea0:	079d      	lsls	r5, r3, #30
 800aea2:	4606      	mov	r6, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	d507      	bpl.n	800aeb8 <__smakebuf_r+0x1c>
 800aea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	6123      	str	r3, [r4, #16]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	6163      	str	r3, [r4, #20]
 800aeb4:	b002      	add	sp, #8
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	ab01      	add	r3, sp, #4
 800aeba:	466a      	mov	r2, sp
 800aebc:	f7ff ffc9 	bl	800ae52 <__swhatbuf_r>
 800aec0:	9900      	ldr	r1, [sp, #0]
 800aec2:	4605      	mov	r5, r0
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7fc fd13 	bl	80078f0 <_malloc_r>
 800aeca:	b948      	cbnz	r0, 800aee0 <__smakebuf_r+0x44>
 800aecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed0:	059a      	lsls	r2, r3, #22
 800aed2:	d4ef      	bmi.n	800aeb4 <__smakebuf_r+0x18>
 800aed4:	f023 0303 	bic.w	r3, r3, #3
 800aed8:	f043 0302 	orr.w	r3, r3, #2
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	e7e3      	b.n	800aea8 <__smakebuf_r+0xc>
 800aee0:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <__smakebuf_r+0x7c>)
 800aee2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	6020      	str	r0, [r4, #0]
 800aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	6163      	str	r3, [r4, #20]
 800aef2:	9b01      	ldr	r3, [sp, #4]
 800aef4:	6120      	str	r0, [r4, #16]
 800aef6:	b15b      	cbz	r3, 800af10 <__smakebuf_r+0x74>
 800aef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aefc:	4630      	mov	r0, r6
 800aefe:	f001 f879 	bl	800bff4 <_isatty_r>
 800af02:	b128      	cbz	r0, 800af10 <__smakebuf_r+0x74>
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	f043 0301 	orr.w	r3, r3, #1
 800af0e:	81a3      	strh	r3, [r4, #12]
 800af10:	89a0      	ldrh	r0, [r4, #12]
 800af12:	4305      	orrs	r5, r0
 800af14:	81a5      	strh	r5, [r4, #12]
 800af16:	e7cd      	b.n	800aeb4 <__smakebuf_r+0x18>
 800af18:	0800a5c5 	.word	0x0800a5c5

0800af1c <__ascii_mbtowc>:
 800af1c:	b082      	sub	sp, #8
 800af1e:	b901      	cbnz	r1, 800af22 <__ascii_mbtowc+0x6>
 800af20:	a901      	add	r1, sp, #4
 800af22:	b142      	cbz	r2, 800af36 <__ascii_mbtowc+0x1a>
 800af24:	b14b      	cbz	r3, 800af3a <__ascii_mbtowc+0x1e>
 800af26:	7813      	ldrb	r3, [r2, #0]
 800af28:	600b      	str	r3, [r1, #0]
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	1e10      	subs	r0, r2, #0
 800af2e:	bf18      	it	ne
 800af30:	2001      	movne	r0, #1
 800af32:	b002      	add	sp, #8
 800af34:	4770      	bx	lr
 800af36:	4610      	mov	r0, r2
 800af38:	e7fb      	b.n	800af32 <__ascii_mbtowc+0x16>
 800af3a:	f06f 0001 	mvn.w	r0, #1
 800af3e:	e7f8      	b.n	800af32 <__ascii_mbtowc+0x16>

0800af40 <__malloc_lock>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__malloc_lock+0x8>)
 800af42:	f7ff bf84 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800af46:	bf00      	nop
 800af48:	20003488 	.word	0x20003488

0800af4c <__malloc_unlock>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__malloc_unlock+0x8>)
 800af4e:	f7ff bf7f 	b.w	800ae50 <__retarget_lock_release_recursive>
 800af52:	bf00      	nop
 800af54:	20003488 	.word	0x20003488

0800af58 <_Balloc>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	b976      	cbnz	r6, 800af80 <_Balloc+0x28>
 800af62:	2010      	movs	r0, #16
 800af64:	f7fc fc56 	bl	8007814 <malloc>
 800af68:	4602      	mov	r2, r0
 800af6a:	6260      	str	r0, [r4, #36]	; 0x24
 800af6c:	b920      	cbnz	r0, 800af78 <_Balloc+0x20>
 800af6e:	4b18      	ldr	r3, [pc, #96]	; (800afd0 <_Balloc+0x78>)
 800af70:	4818      	ldr	r0, [pc, #96]	; (800afd4 <_Balloc+0x7c>)
 800af72:	2166      	movs	r1, #102	; 0x66
 800af74:	f000 ffec 	bl	800bf50 <__assert_func>
 800af78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af7c:	6006      	str	r6, [r0, #0]
 800af7e:	60c6      	str	r6, [r0, #12]
 800af80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af82:	68f3      	ldr	r3, [r6, #12]
 800af84:	b183      	cbz	r3, 800afa8 <_Balloc+0x50>
 800af86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af8e:	b9b8      	cbnz	r0, 800afc0 <_Balloc+0x68>
 800af90:	2101      	movs	r1, #1
 800af92:	fa01 f605 	lsl.w	r6, r1, r5
 800af96:	1d72      	adds	r2, r6, #5
 800af98:	0092      	lsls	r2, r2, #2
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 fc97 	bl	800b8ce <_calloc_r>
 800afa0:	b160      	cbz	r0, 800afbc <_Balloc+0x64>
 800afa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afa6:	e00e      	b.n	800afc6 <_Balloc+0x6e>
 800afa8:	2221      	movs	r2, #33	; 0x21
 800afaa:	2104      	movs	r1, #4
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fc8e 	bl	800b8ce <_calloc_r>
 800afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb4:	60f0      	str	r0, [r6, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e4      	bne.n	800af86 <_Balloc+0x2e>
 800afbc:	2000      	movs	r0, #0
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	6802      	ldr	r2, [r0, #0]
 800afc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afc6:	2300      	movs	r3, #0
 800afc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afcc:	e7f7      	b.n	800afbe <_Balloc+0x66>
 800afce:	bf00      	nop
 800afd0:	0800cc4e 	.word	0x0800cc4e
 800afd4:	0800cdb8 	.word	0x0800cdb8

0800afd8 <_Bfree>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	b976      	cbnz	r6, 800b000 <_Bfree+0x28>
 800afe2:	2010      	movs	r0, #16
 800afe4:	f7fc fc16 	bl	8007814 <malloc>
 800afe8:	4602      	mov	r2, r0
 800afea:	6268      	str	r0, [r5, #36]	; 0x24
 800afec:	b920      	cbnz	r0, 800aff8 <_Bfree+0x20>
 800afee:	4b09      	ldr	r3, [pc, #36]	; (800b014 <_Bfree+0x3c>)
 800aff0:	4809      	ldr	r0, [pc, #36]	; (800b018 <_Bfree+0x40>)
 800aff2:	218a      	movs	r1, #138	; 0x8a
 800aff4:	f000 ffac 	bl	800bf50 <__assert_func>
 800aff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800affc:	6006      	str	r6, [r0, #0]
 800affe:	60c6      	str	r6, [r0, #12]
 800b000:	b13c      	cbz	r4, 800b012 <_Bfree+0x3a>
 800b002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b004:	6862      	ldr	r2, [r4, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b00c:	6021      	str	r1, [r4, #0]
 800b00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	0800cc4e 	.word	0x0800cc4e
 800b018:	0800cdb8 	.word	0x0800cdb8

0800b01c <__multadd>:
 800b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	690e      	ldr	r6, [r1, #16]
 800b022:	4607      	mov	r7, r0
 800b024:	4698      	mov	r8, r3
 800b026:	460c      	mov	r4, r1
 800b028:	f101 0014 	add.w	r0, r1, #20
 800b02c:	2300      	movs	r3, #0
 800b02e:	6805      	ldr	r5, [r0, #0]
 800b030:	b2a9      	uxth	r1, r5
 800b032:	fb02 8101 	mla	r1, r2, r1, r8
 800b036:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b03a:	0c2d      	lsrs	r5, r5, #16
 800b03c:	fb02 c505 	mla	r5, r2, r5, ip
 800b040:	b289      	uxth	r1, r1
 800b042:	3301      	adds	r3, #1
 800b044:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b048:	429e      	cmp	r6, r3
 800b04a:	f840 1b04 	str.w	r1, [r0], #4
 800b04e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b052:	dcec      	bgt.n	800b02e <__multadd+0x12>
 800b054:	f1b8 0f00 	cmp.w	r8, #0
 800b058:	d022      	beq.n	800b0a0 <__multadd+0x84>
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	42b3      	cmp	r3, r6
 800b05e:	dc19      	bgt.n	800b094 <__multadd+0x78>
 800b060:	6861      	ldr	r1, [r4, #4]
 800b062:	4638      	mov	r0, r7
 800b064:	3101      	adds	r1, #1
 800b066:	f7ff ff77 	bl	800af58 <_Balloc>
 800b06a:	4605      	mov	r5, r0
 800b06c:	b928      	cbnz	r0, 800b07a <__multadd+0x5e>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b0d      	ldr	r3, [pc, #52]	; (800b0a8 <__multadd+0x8c>)
 800b072:	480e      	ldr	r0, [pc, #56]	; (800b0ac <__multadd+0x90>)
 800b074:	21b5      	movs	r1, #181	; 0xb5
 800b076:	f000 ff6b 	bl	800bf50 <__assert_func>
 800b07a:	6922      	ldr	r2, [r4, #16]
 800b07c:	3202      	adds	r2, #2
 800b07e:	f104 010c 	add.w	r1, r4, #12
 800b082:	0092      	lsls	r2, r2, #2
 800b084:	300c      	adds	r0, #12
 800b086:	f7fc fbcd 	bl	8007824 <memcpy>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff ffa3 	bl	800afd8 <_Bfree>
 800b092:	462c      	mov	r4, r5
 800b094:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b098:	3601      	adds	r6, #1
 800b09a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b09e:	6126      	str	r6, [r4, #16]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800ccc4 	.word	0x0800ccc4
 800b0ac:	0800cdb8 	.word	0x0800cdb8

0800b0b0 <__s2b>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	4615      	mov	r5, r2
 800b0b8:	461f      	mov	r7, r3
 800b0ba:	2209      	movs	r2, #9
 800b0bc:	3308      	adds	r3, #8
 800b0be:	4606      	mov	r6, r0
 800b0c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	db09      	blt.n	800b0e0 <__s2b+0x30>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff ff43 	bl	800af58 <_Balloc>
 800b0d2:	b940      	cbnz	r0, 800b0e6 <__s2b+0x36>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	4b19      	ldr	r3, [pc, #100]	; (800b13c <__s2b+0x8c>)
 800b0d8:	4819      	ldr	r0, [pc, #100]	; (800b140 <__s2b+0x90>)
 800b0da:	21ce      	movs	r1, #206	; 0xce
 800b0dc:	f000 ff38 	bl	800bf50 <__assert_func>
 800b0e0:	0052      	lsls	r2, r2, #1
 800b0e2:	3101      	adds	r1, #1
 800b0e4:	e7f0      	b.n	800b0c8 <__s2b+0x18>
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	6143      	str	r3, [r0, #20]
 800b0ea:	2d09      	cmp	r5, #9
 800b0ec:	f04f 0301 	mov.w	r3, #1
 800b0f0:	6103      	str	r3, [r0, #16]
 800b0f2:	dd16      	ble.n	800b122 <__s2b+0x72>
 800b0f4:	f104 0909 	add.w	r9, r4, #9
 800b0f8:	46c8      	mov	r8, r9
 800b0fa:	442c      	add	r4, r5
 800b0fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b100:	4601      	mov	r1, r0
 800b102:	3b30      	subs	r3, #48	; 0x30
 800b104:	220a      	movs	r2, #10
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff88 	bl	800b01c <__multadd>
 800b10c:	45a0      	cmp	r8, r4
 800b10e:	d1f5      	bne.n	800b0fc <__s2b+0x4c>
 800b110:	f1a5 0408 	sub.w	r4, r5, #8
 800b114:	444c      	add	r4, r9
 800b116:	1b2d      	subs	r5, r5, r4
 800b118:	1963      	adds	r3, r4, r5
 800b11a:	42bb      	cmp	r3, r7
 800b11c:	db04      	blt.n	800b128 <__s2b+0x78>
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	340a      	adds	r4, #10
 800b124:	2509      	movs	r5, #9
 800b126:	e7f6      	b.n	800b116 <__s2b+0x66>
 800b128:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b12c:	4601      	mov	r1, r0
 800b12e:	3b30      	subs	r3, #48	; 0x30
 800b130:	220a      	movs	r2, #10
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff ff72 	bl	800b01c <__multadd>
 800b138:	e7ee      	b.n	800b118 <__s2b+0x68>
 800b13a:	bf00      	nop
 800b13c:	0800ccc4 	.word	0x0800ccc4
 800b140:	0800cdb8 	.word	0x0800cdb8

0800b144 <__hi0bits>:
 800b144:	0c03      	lsrs	r3, r0, #16
 800b146:	041b      	lsls	r3, r3, #16
 800b148:	b9d3      	cbnz	r3, 800b180 <__hi0bits+0x3c>
 800b14a:	0400      	lsls	r0, r0, #16
 800b14c:	2310      	movs	r3, #16
 800b14e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b152:	bf04      	itt	eq
 800b154:	0200      	lsleq	r0, r0, #8
 800b156:	3308      	addeq	r3, #8
 800b158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b15c:	bf04      	itt	eq
 800b15e:	0100      	lsleq	r0, r0, #4
 800b160:	3304      	addeq	r3, #4
 800b162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b166:	bf04      	itt	eq
 800b168:	0080      	lsleq	r0, r0, #2
 800b16a:	3302      	addeq	r3, #2
 800b16c:	2800      	cmp	r0, #0
 800b16e:	db05      	blt.n	800b17c <__hi0bits+0x38>
 800b170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b174:	f103 0301 	add.w	r3, r3, #1
 800b178:	bf08      	it	eq
 800b17a:	2320      	moveq	r3, #32
 800b17c:	4618      	mov	r0, r3
 800b17e:	4770      	bx	lr
 800b180:	2300      	movs	r3, #0
 800b182:	e7e4      	b.n	800b14e <__hi0bits+0xa>

0800b184 <__lo0bits>:
 800b184:	6803      	ldr	r3, [r0, #0]
 800b186:	f013 0207 	ands.w	r2, r3, #7
 800b18a:	4601      	mov	r1, r0
 800b18c:	d00b      	beq.n	800b1a6 <__lo0bits+0x22>
 800b18e:	07da      	lsls	r2, r3, #31
 800b190:	d424      	bmi.n	800b1dc <__lo0bits+0x58>
 800b192:	0798      	lsls	r0, r3, #30
 800b194:	bf49      	itett	mi
 800b196:	085b      	lsrmi	r3, r3, #1
 800b198:	089b      	lsrpl	r3, r3, #2
 800b19a:	2001      	movmi	r0, #1
 800b19c:	600b      	strmi	r3, [r1, #0]
 800b19e:	bf5c      	itt	pl
 800b1a0:	600b      	strpl	r3, [r1, #0]
 800b1a2:	2002      	movpl	r0, #2
 800b1a4:	4770      	bx	lr
 800b1a6:	b298      	uxth	r0, r3
 800b1a8:	b9b0      	cbnz	r0, 800b1d8 <__lo0bits+0x54>
 800b1aa:	0c1b      	lsrs	r3, r3, #16
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1b2:	bf04      	itt	eq
 800b1b4:	0a1b      	lsreq	r3, r3, #8
 800b1b6:	3008      	addeq	r0, #8
 800b1b8:	071a      	lsls	r2, r3, #28
 800b1ba:	bf04      	itt	eq
 800b1bc:	091b      	lsreq	r3, r3, #4
 800b1be:	3004      	addeq	r0, #4
 800b1c0:	079a      	lsls	r2, r3, #30
 800b1c2:	bf04      	itt	eq
 800b1c4:	089b      	lsreq	r3, r3, #2
 800b1c6:	3002      	addeq	r0, #2
 800b1c8:	07da      	lsls	r2, r3, #31
 800b1ca:	d403      	bmi.n	800b1d4 <__lo0bits+0x50>
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	f100 0001 	add.w	r0, r0, #1
 800b1d2:	d005      	beq.n	800b1e0 <__lo0bits+0x5c>
 800b1d4:	600b      	str	r3, [r1, #0]
 800b1d6:	4770      	bx	lr
 800b1d8:	4610      	mov	r0, r2
 800b1da:	e7e8      	b.n	800b1ae <__lo0bits+0x2a>
 800b1dc:	2000      	movs	r0, #0
 800b1de:	4770      	bx	lr
 800b1e0:	2020      	movs	r0, #32
 800b1e2:	4770      	bx	lr

0800b1e4 <__i2b>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	f7ff feb5 	bl	800af58 <_Balloc>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	b928      	cbnz	r0, 800b1fe <__i2b+0x1a>
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <__i2b+0x24>)
 800b1f4:	4805      	ldr	r0, [pc, #20]	; (800b20c <__i2b+0x28>)
 800b1f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1fa:	f000 fea9 	bl	800bf50 <__assert_func>
 800b1fe:	2301      	movs	r3, #1
 800b200:	6144      	str	r4, [r0, #20]
 800b202:	6103      	str	r3, [r0, #16]
 800b204:	bd10      	pop	{r4, pc}
 800b206:	bf00      	nop
 800b208:	0800ccc4 	.word	0x0800ccc4
 800b20c:	0800cdb8 	.word	0x0800cdb8

0800b210 <__multiply>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	4614      	mov	r4, r2
 800b216:	690a      	ldr	r2, [r1, #16]
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	bfb8      	it	lt
 800b21e:	460b      	movlt	r3, r1
 800b220:	460d      	mov	r5, r1
 800b222:	bfbc      	itt	lt
 800b224:	4625      	movlt	r5, r4
 800b226:	461c      	movlt	r4, r3
 800b228:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b22c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b230:	68ab      	ldr	r3, [r5, #8]
 800b232:	6869      	ldr	r1, [r5, #4]
 800b234:	eb0a 0709 	add.w	r7, sl, r9
 800b238:	42bb      	cmp	r3, r7
 800b23a:	b085      	sub	sp, #20
 800b23c:	bfb8      	it	lt
 800b23e:	3101      	addlt	r1, #1
 800b240:	f7ff fe8a 	bl	800af58 <_Balloc>
 800b244:	b930      	cbnz	r0, 800b254 <__multiply+0x44>
 800b246:	4602      	mov	r2, r0
 800b248:	4b42      	ldr	r3, [pc, #264]	; (800b354 <__multiply+0x144>)
 800b24a:	4843      	ldr	r0, [pc, #268]	; (800b358 <__multiply+0x148>)
 800b24c:	f240 115d 	movw	r1, #349	; 0x15d
 800b250:	f000 fe7e 	bl	800bf50 <__assert_func>
 800b254:	f100 0614 	add.w	r6, r0, #20
 800b258:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b25c:	4633      	mov	r3, r6
 800b25e:	2200      	movs	r2, #0
 800b260:	4543      	cmp	r3, r8
 800b262:	d31e      	bcc.n	800b2a2 <__multiply+0x92>
 800b264:	f105 0c14 	add.w	ip, r5, #20
 800b268:	f104 0314 	add.w	r3, r4, #20
 800b26c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b270:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b274:	9202      	str	r2, [sp, #8]
 800b276:	ebac 0205 	sub.w	r2, ip, r5
 800b27a:	3a15      	subs	r2, #21
 800b27c:	f022 0203 	bic.w	r2, r2, #3
 800b280:	3204      	adds	r2, #4
 800b282:	f105 0115 	add.w	r1, r5, #21
 800b286:	458c      	cmp	ip, r1
 800b288:	bf38      	it	cc
 800b28a:	2204      	movcc	r2, #4
 800b28c:	9201      	str	r2, [sp, #4]
 800b28e:	9a02      	ldr	r2, [sp, #8]
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	429a      	cmp	r2, r3
 800b294:	d808      	bhi.n	800b2a8 <__multiply+0x98>
 800b296:	2f00      	cmp	r7, #0
 800b298:	dc55      	bgt.n	800b346 <__multiply+0x136>
 800b29a:	6107      	str	r7, [r0, #16]
 800b29c:	b005      	add	sp, #20
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a2:	f843 2b04 	str.w	r2, [r3], #4
 800b2a6:	e7db      	b.n	800b260 <__multiply+0x50>
 800b2a8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d020      	beq.n	800b2f4 <__multiply+0xe4>
 800b2b2:	f105 0e14 	add.w	lr, r5, #20
 800b2b6:	46b1      	mov	r9, r6
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b2be:	f8d9 b000 	ldr.w	fp, [r9]
 800b2c2:	b2a1      	uxth	r1, r4
 800b2c4:	fa1f fb8b 	uxth.w	fp, fp
 800b2c8:	fb0a b101 	mla	r1, sl, r1, fp
 800b2cc:	4411      	add	r1, r2
 800b2ce:	f8d9 2000 	ldr.w	r2, [r9]
 800b2d2:	0c24      	lsrs	r4, r4, #16
 800b2d4:	0c12      	lsrs	r2, r2, #16
 800b2d6:	fb0a 2404 	mla	r4, sl, r4, r2
 800b2da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b2de:	b289      	uxth	r1, r1
 800b2e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2e4:	45f4      	cmp	ip, lr
 800b2e6:	f849 1b04 	str.w	r1, [r9], #4
 800b2ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b2ee:	d8e4      	bhi.n	800b2ba <__multiply+0xaa>
 800b2f0:	9901      	ldr	r1, [sp, #4]
 800b2f2:	5072      	str	r2, [r6, r1]
 800b2f4:	9a03      	ldr	r2, [sp, #12]
 800b2f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	f1b9 0f00 	cmp.w	r9, #0
 800b300:	d01f      	beq.n	800b342 <__multiply+0x132>
 800b302:	6834      	ldr	r4, [r6, #0]
 800b304:	f105 0114 	add.w	r1, r5, #20
 800b308:	46b6      	mov	lr, r6
 800b30a:	f04f 0a00 	mov.w	sl, #0
 800b30e:	880a      	ldrh	r2, [r1, #0]
 800b310:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b314:	fb09 b202 	mla	r2, r9, r2, fp
 800b318:	4492      	add	sl, r2
 800b31a:	b2a4      	uxth	r4, r4
 800b31c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b320:	f84e 4b04 	str.w	r4, [lr], #4
 800b324:	f851 4b04 	ldr.w	r4, [r1], #4
 800b328:	f8be 2000 	ldrh.w	r2, [lr]
 800b32c:	0c24      	lsrs	r4, r4, #16
 800b32e:	fb09 2404 	mla	r4, r9, r4, r2
 800b332:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b336:	458c      	cmp	ip, r1
 800b338:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b33c:	d8e7      	bhi.n	800b30e <__multiply+0xfe>
 800b33e:	9a01      	ldr	r2, [sp, #4]
 800b340:	50b4      	str	r4, [r6, r2]
 800b342:	3604      	adds	r6, #4
 800b344:	e7a3      	b.n	800b28e <__multiply+0x7e>
 800b346:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1a5      	bne.n	800b29a <__multiply+0x8a>
 800b34e:	3f01      	subs	r7, #1
 800b350:	e7a1      	b.n	800b296 <__multiply+0x86>
 800b352:	bf00      	nop
 800b354:	0800ccc4 	.word	0x0800ccc4
 800b358:	0800cdb8 	.word	0x0800cdb8

0800b35c <__pow5mult>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4615      	mov	r5, r2
 800b362:	f012 0203 	ands.w	r2, r2, #3
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	d007      	beq.n	800b37c <__pow5mult+0x20>
 800b36c:	4c25      	ldr	r4, [pc, #148]	; (800b404 <__pow5mult+0xa8>)
 800b36e:	3a01      	subs	r2, #1
 800b370:	2300      	movs	r3, #0
 800b372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b376:	f7ff fe51 	bl	800b01c <__multadd>
 800b37a:	4607      	mov	r7, r0
 800b37c:	10ad      	asrs	r5, r5, #2
 800b37e:	d03d      	beq.n	800b3fc <__pow5mult+0xa0>
 800b380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b382:	b97c      	cbnz	r4, 800b3a4 <__pow5mult+0x48>
 800b384:	2010      	movs	r0, #16
 800b386:	f7fc fa45 	bl	8007814 <malloc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	6270      	str	r0, [r6, #36]	; 0x24
 800b38e:	b928      	cbnz	r0, 800b39c <__pow5mult+0x40>
 800b390:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <__pow5mult+0xac>)
 800b392:	481e      	ldr	r0, [pc, #120]	; (800b40c <__pow5mult+0xb0>)
 800b394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b398:	f000 fdda 	bl	800bf50 <__assert_func>
 800b39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a0:	6004      	str	r4, [r0, #0]
 800b3a2:	60c4      	str	r4, [r0, #12]
 800b3a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3ac:	b94c      	cbnz	r4, 800b3c2 <__pow5mult+0x66>
 800b3ae:	f240 2171 	movw	r1, #625	; 0x271
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff ff16 	bl	800b1e4 <__i2b>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	f04f 0900 	mov.w	r9, #0
 800b3c6:	07eb      	lsls	r3, r5, #31
 800b3c8:	d50a      	bpl.n	800b3e0 <__pow5mult+0x84>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff ff1e 	bl	800b210 <__multiply>
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff fdfd 	bl	800afd8 <_Bfree>
 800b3de:	4647      	mov	r7, r8
 800b3e0:	106d      	asrs	r5, r5, #1
 800b3e2:	d00b      	beq.n	800b3fc <__pow5mult+0xa0>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	b938      	cbnz	r0, 800b3f8 <__pow5mult+0x9c>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff ff0f 	bl	800b210 <__multiply>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	f8c0 9000 	str.w	r9, [r0]
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e7e4      	b.n	800b3c6 <__pow5mult+0x6a>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b402:	bf00      	nop
 800b404:	0800cf08 	.word	0x0800cf08
 800b408:	0800cc4e 	.word	0x0800cc4e
 800b40c:	0800cdb8 	.word	0x0800cdb8

0800b410 <__lshift>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	6849      	ldr	r1, [r1, #4]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	4607      	mov	r7, r0
 800b422:	4691      	mov	r9, r2
 800b424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b428:	f108 0601 	add.w	r6, r8, #1
 800b42c:	42b3      	cmp	r3, r6
 800b42e:	db0b      	blt.n	800b448 <__lshift+0x38>
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fd91 	bl	800af58 <_Balloc>
 800b436:	4605      	mov	r5, r0
 800b438:	b948      	cbnz	r0, 800b44e <__lshift+0x3e>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b28      	ldr	r3, [pc, #160]	; (800b4e0 <__lshift+0xd0>)
 800b43e:	4829      	ldr	r0, [pc, #164]	; (800b4e4 <__lshift+0xd4>)
 800b440:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b444:	f000 fd84 	bl	800bf50 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	e7ee      	b.n	800b42c <__lshift+0x1c>
 800b44e:	2300      	movs	r3, #0
 800b450:	f100 0114 	add.w	r1, r0, #20
 800b454:	f100 0210 	add.w	r2, r0, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	4553      	cmp	r3, sl
 800b45c:	db33      	blt.n	800b4c6 <__lshift+0xb6>
 800b45e:	6920      	ldr	r0, [r4, #16]
 800b460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b464:	f104 0314 	add.w	r3, r4, #20
 800b468:	f019 091f 	ands.w	r9, r9, #31
 800b46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b474:	d02b      	beq.n	800b4ce <__lshift+0xbe>
 800b476:	f1c9 0e20 	rsb	lr, r9, #32
 800b47a:	468a      	mov	sl, r1
 800b47c:	2200      	movs	r2, #0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	fa00 f009 	lsl.w	r0, r0, r9
 800b484:	4302      	orrs	r2, r0
 800b486:	f84a 2b04 	str.w	r2, [sl], #4
 800b48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b48e:	459c      	cmp	ip, r3
 800b490:	fa22 f20e 	lsr.w	r2, r2, lr
 800b494:	d8f3      	bhi.n	800b47e <__lshift+0x6e>
 800b496:	ebac 0304 	sub.w	r3, ip, r4
 800b49a:	3b15      	subs	r3, #21
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	f104 0015 	add.w	r0, r4, #21
 800b4a6:	4584      	cmp	ip, r0
 800b4a8:	bf38      	it	cc
 800b4aa:	2304      	movcc	r3, #4
 800b4ac:	50ca      	str	r2, [r1, r3]
 800b4ae:	b10a      	cbz	r2, 800b4b4 <__lshift+0xa4>
 800b4b0:	f108 0602 	add.w	r6, r8, #2
 800b4b4:	3e01      	subs	r6, #1
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	612e      	str	r6, [r5, #16]
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f7ff fd8c 	bl	800afd8 <_Bfree>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	e7c5      	b.n	800b45a <__lshift+0x4a>
 800b4ce:	3904      	subs	r1, #4
 800b4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4d8:	459c      	cmp	ip, r3
 800b4da:	d8f9      	bhi.n	800b4d0 <__lshift+0xc0>
 800b4dc:	e7ea      	b.n	800b4b4 <__lshift+0xa4>
 800b4de:	bf00      	nop
 800b4e0:	0800ccc4 	.word	0x0800ccc4
 800b4e4:	0800cdb8 	.word	0x0800cdb8

0800b4e8 <__mcmp>:
 800b4e8:	b530      	push	{r4, r5, lr}
 800b4ea:	6902      	ldr	r2, [r0, #16]
 800b4ec:	690c      	ldr	r4, [r1, #16]
 800b4ee:	1b12      	subs	r2, r2, r4
 800b4f0:	d10e      	bne.n	800b510 <__mcmp+0x28>
 800b4f2:	f100 0314 	add.w	r3, r0, #20
 800b4f6:	3114      	adds	r1, #20
 800b4f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b500:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b504:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b508:	42a5      	cmp	r5, r4
 800b50a:	d003      	beq.n	800b514 <__mcmp+0x2c>
 800b50c:	d305      	bcc.n	800b51a <__mcmp+0x32>
 800b50e:	2201      	movs	r2, #1
 800b510:	4610      	mov	r0, r2
 800b512:	bd30      	pop	{r4, r5, pc}
 800b514:	4283      	cmp	r3, r0
 800b516:	d3f3      	bcc.n	800b500 <__mcmp+0x18>
 800b518:	e7fa      	b.n	800b510 <__mcmp+0x28>
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295
 800b51e:	e7f7      	b.n	800b510 <__mcmp+0x28>

0800b520 <__mdiff>:
 800b520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	460c      	mov	r4, r1
 800b526:	4606      	mov	r6, r0
 800b528:	4611      	mov	r1, r2
 800b52a:	4620      	mov	r0, r4
 800b52c:	4617      	mov	r7, r2
 800b52e:	f7ff ffdb 	bl	800b4e8 <__mcmp>
 800b532:	1e05      	subs	r5, r0, #0
 800b534:	d110      	bne.n	800b558 <__mdiff+0x38>
 800b536:	4629      	mov	r1, r5
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff fd0d 	bl	800af58 <_Balloc>
 800b53e:	b930      	cbnz	r0, 800b54e <__mdiff+0x2e>
 800b540:	4b39      	ldr	r3, [pc, #228]	; (800b628 <__mdiff+0x108>)
 800b542:	4602      	mov	r2, r0
 800b544:	f240 2132 	movw	r1, #562	; 0x232
 800b548:	4838      	ldr	r0, [pc, #224]	; (800b62c <__mdiff+0x10c>)
 800b54a:	f000 fd01 	bl	800bf50 <__assert_func>
 800b54e:	2301      	movs	r3, #1
 800b550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	bfa4      	itt	ge
 800b55a:	463b      	movge	r3, r7
 800b55c:	4627      	movge	r7, r4
 800b55e:	4630      	mov	r0, r6
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	bfa6      	itte	ge
 800b564:	461c      	movge	r4, r3
 800b566:	2500      	movge	r5, #0
 800b568:	2501      	movlt	r5, #1
 800b56a:	f7ff fcf5 	bl	800af58 <_Balloc>
 800b56e:	b920      	cbnz	r0, 800b57a <__mdiff+0x5a>
 800b570:	4b2d      	ldr	r3, [pc, #180]	; (800b628 <__mdiff+0x108>)
 800b572:	4602      	mov	r2, r0
 800b574:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b578:	e7e6      	b.n	800b548 <__mdiff+0x28>
 800b57a:	693e      	ldr	r6, [r7, #16]
 800b57c:	60c5      	str	r5, [r0, #12]
 800b57e:	6925      	ldr	r5, [r4, #16]
 800b580:	f107 0114 	add.w	r1, r7, #20
 800b584:	f104 0914 	add.w	r9, r4, #20
 800b588:	f100 0e14 	add.w	lr, r0, #20
 800b58c:	f107 0210 	add.w	r2, r7, #16
 800b590:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b594:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b598:	46f2      	mov	sl, lr
 800b59a:	2700      	movs	r7, #0
 800b59c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5a4:	fa1f f883 	uxth.w	r8, r3
 800b5a8:	fa17 f78b 	uxtah	r7, r7, fp
 800b5ac:	0c1b      	lsrs	r3, r3, #16
 800b5ae:	eba7 0808 	sub.w	r8, r7, r8
 800b5b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5ba:	fa1f f888 	uxth.w	r8, r8
 800b5be:	141f      	asrs	r7, r3, #16
 800b5c0:	454d      	cmp	r5, r9
 800b5c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5c6:	f84a 3b04 	str.w	r3, [sl], #4
 800b5ca:	d8e7      	bhi.n	800b59c <__mdiff+0x7c>
 800b5cc:	1b2b      	subs	r3, r5, r4
 800b5ce:	3b15      	subs	r3, #21
 800b5d0:	f023 0303 	bic.w	r3, r3, #3
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	3415      	adds	r4, #21
 800b5d8:	42a5      	cmp	r5, r4
 800b5da:	bf38      	it	cc
 800b5dc:	2304      	movcc	r3, #4
 800b5de:	4419      	add	r1, r3
 800b5e0:	4473      	add	r3, lr
 800b5e2:	469e      	mov	lr, r3
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	4565      	cmp	r5, ip
 800b5e8:	d30e      	bcc.n	800b608 <__mdiff+0xe8>
 800b5ea:	f10c 0203 	add.w	r2, ip, #3
 800b5ee:	1a52      	subs	r2, r2, r1
 800b5f0:	f022 0203 	bic.w	r2, r2, #3
 800b5f4:	3903      	subs	r1, #3
 800b5f6:	458c      	cmp	ip, r1
 800b5f8:	bf38      	it	cc
 800b5fa:	2200      	movcc	r2, #0
 800b5fc:	441a      	add	r2, r3
 800b5fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b602:	b17b      	cbz	r3, 800b624 <__mdiff+0x104>
 800b604:	6106      	str	r6, [r0, #16]
 800b606:	e7a5      	b.n	800b554 <__mdiff+0x34>
 800b608:	f855 8b04 	ldr.w	r8, [r5], #4
 800b60c:	fa17 f488 	uxtah	r4, r7, r8
 800b610:	1422      	asrs	r2, r4, #16
 800b612:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b616:	b2a4      	uxth	r4, r4
 800b618:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b61c:	f84e 4b04 	str.w	r4, [lr], #4
 800b620:	1417      	asrs	r7, r2, #16
 800b622:	e7e0      	b.n	800b5e6 <__mdiff+0xc6>
 800b624:	3e01      	subs	r6, #1
 800b626:	e7ea      	b.n	800b5fe <__mdiff+0xde>
 800b628:	0800ccc4 	.word	0x0800ccc4
 800b62c:	0800cdb8 	.word	0x0800cdb8

0800b630 <__ulp>:
 800b630:	b082      	sub	sp, #8
 800b632:	ed8d 0b00 	vstr	d0, [sp]
 800b636:	9b01      	ldr	r3, [sp, #4]
 800b638:	4912      	ldr	r1, [pc, #72]	; (800b684 <__ulp+0x54>)
 800b63a:	4019      	ands	r1, r3
 800b63c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b640:	2900      	cmp	r1, #0
 800b642:	dd05      	ble.n	800b650 <__ulp+0x20>
 800b644:	2200      	movs	r2, #0
 800b646:	460b      	mov	r3, r1
 800b648:	ec43 2b10 	vmov	d0, r2, r3
 800b64c:	b002      	add	sp, #8
 800b64e:	4770      	bx	lr
 800b650:	4249      	negs	r1, r1
 800b652:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b656:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b65a:	f04f 0200 	mov.w	r2, #0
 800b65e:	f04f 0300 	mov.w	r3, #0
 800b662:	da04      	bge.n	800b66e <__ulp+0x3e>
 800b664:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b668:	fa41 f300 	asr.w	r3, r1, r0
 800b66c:	e7ec      	b.n	800b648 <__ulp+0x18>
 800b66e:	f1a0 0114 	sub.w	r1, r0, #20
 800b672:	291e      	cmp	r1, #30
 800b674:	bfda      	itte	le
 800b676:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b67a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b67e:	2101      	movgt	r1, #1
 800b680:	460a      	mov	r2, r1
 800b682:	e7e1      	b.n	800b648 <__ulp+0x18>
 800b684:	7ff00000 	.word	0x7ff00000

0800b688 <__b2d>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	6905      	ldr	r5, [r0, #16]
 800b68c:	f100 0714 	add.w	r7, r0, #20
 800b690:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b694:	1f2e      	subs	r6, r5, #4
 800b696:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7ff fd52 	bl	800b144 <__hi0bits>
 800b6a0:	f1c0 0320 	rsb	r3, r0, #32
 800b6a4:	280a      	cmp	r0, #10
 800b6a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b724 <__b2d+0x9c>
 800b6aa:	600b      	str	r3, [r1, #0]
 800b6ac:	dc14      	bgt.n	800b6d8 <__b2d+0x50>
 800b6ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800b6b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b6b6:	42b7      	cmp	r7, r6
 800b6b8:	ea41 030c 	orr.w	r3, r1, ip
 800b6bc:	bf34      	ite	cc
 800b6be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b6c2:	2100      	movcs	r1, #0
 800b6c4:	3015      	adds	r0, #21
 800b6c6:	fa04 f000 	lsl.w	r0, r4, r0
 800b6ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800b6ce:	ea40 0201 	orr.w	r2, r0, r1
 800b6d2:	ec43 2b10 	vmov	d0, r2, r3
 800b6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d8:	42b7      	cmp	r7, r6
 800b6da:	bf3a      	itte	cc
 800b6dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b6e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b6e4:	2100      	movcs	r1, #0
 800b6e6:	380b      	subs	r0, #11
 800b6e8:	d017      	beq.n	800b71a <__b2d+0x92>
 800b6ea:	f1c0 0c20 	rsb	ip, r0, #32
 800b6ee:	fa04 f500 	lsl.w	r5, r4, r0
 800b6f2:	42be      	cmp	r6, r7
 800b6f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b6f8:	ea45 0504 	orr.w	r5, r5, r4
 800b6fc:	bf8c      	ite	hi
 800b6fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b702:	2400      	movls	r4, #0
 800b704:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b708:	fa01 f000 	lsl.w	r0, r1, r0
 800b70c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b710:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b714:	ea40 0204 	orr.w	r2, r0, r4
 800b718:	e7db      	b.n	800b6d2 <__b2d+0x4a>
 800b71a:	ea44 030c 	orr.w	r3, r4, ip
 800b71e:	460a      	mov	r2, r1
 800b720:	e7d7      	b.n	800b6d2 <__b2d+0x4a>
 800b722:	bf00      	nop
 800b724:	3ff00000 	.word	0x3ff00000

0800b728 <__d2b>:
 800b728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b72c:	4689      	mov	r9, r1
 800b72e:	2101      	movs	r1, #1
 800b730:	ec57 6b10 	vmov	r6, r7, d0
 800b734:	4690      	mov	r8, r2
 800b736:	f7ff fc0f 	bl	800af58 <_Balloc>
 800b73a:	4604      	mov	r4, r0
 800b73c:	b930      	cbnz	r0, 800b74c <__d2b+0x24>
 800b73e:	4602      	mov	r2, r0
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <__d2b+0xb0>)
 800b742:	4826      	ldr	r0, [pc, #152]	; (800b7dc <__d2b+0xb4>)
 800b744:	f240 310a 	movw	r1, #778	; 0x30a
 800b748:	f000 fc02 	bl	800bf50 <__assert_func>
 800b74c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b754:	bb35      	cbnz	r5, 800b7a4 <__d2b+0x7c>
 800b756:	2e00      	cmp	r6, #0
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	d028      	beq.n	800b7ae <__d2b+0x86>
 800b75c:	4668      	mov	r0, sp
 800b75e:	9600      	str	r6, [sp, #0]
 800b760:	f7ff fd10 	bl	800b184 <__lo0bits>
 800b764:	9900      	ldr	r1, [sp, #0]
 800b766:	b300      	cbz	r0, 800b7aa <__d2b+0x82>
 800b768:	9a01      	ldr	r2, [sp, #4]
 800b76a:	f1c0 0320 	rsb	r3, r0, #32
 800b76e:	fa02 f303 	lsl.w	r3, r2, r3
 800b772:	430b      	orrs	r3, r1
 800b774:	40c2      	lsrs	r2, r0
 800b776:	6163      	str	r3, [r4, #20]
 800b778:	9201      	str	r2, [sp, #4]
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	61a3      	str	r3, [r4, #24]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bf14      	ite	ne
 800b782:	2202      	movne	r2, #2
 800b784:	2201      	moveq	r2, #1
 800b786:	6122      	str	r2, [r4, #16]
 800b788:	b1d5      	cbz	r5, 800b7c0 <__d2b+0x98>
 800b78a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b78e:	4405      	add	r5, r0
 800b790:	f8c9 5000 	str.w	r5, [r9]
 800b794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b798:	f8c8 0000 	str.w	r0, [r8]
 800b79c:	4620      	mov	r0, r4
 800b79e:	b003      	add	sp, #12
 800b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a8:	e7d5      	b.n	800b756 <__d2b+0x2e>
 800b7aa:	6161      	str	r1, [r4, #20]
 800b7ac:	e7e5      	b.n	800b77a <__d2b+0x52>
 800b7ae:	a801      	add	r0, sp, #4
 800b7b0:	f7ff fce8 	bl	800b184 <__lo0bits>
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	6122      	str	r2, [r4, #16]
 800b7bc:	3020      	adds	r0, #32
 800b7be:	e7e3      	b.n	800b788 <__d2b+0x60>
 800b7c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7c8:	f8c9 0000 	str.w	r0, [r9]
 800b7cc:	6918      	ldr	r0, [r3, #16]
 800b7ce:	f7ff fcb9 	bl	800b144 <__hi0bits>
 800b7d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7d6:	e7df      	b.n	800b798 <__d2b+0x70>
 800b7d8:	0800ccc4 	.word	0x0800ccc4
 800b7dc:	0800cdb8 	.word	0x0800cdb8

0800b7e0 <__ratio>:
 800b7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	4688      	mov	r8, r1
 800b7e6:	4669      	mov	r1, sp
 800b7e8:	4681      	mov	r9, r0
 800b7ea:	f7ff ff4d 	bl	800b688 <__b2d>
 800b7ee:	a901      	add	r1, sp, #4
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	ec55 4b10 	vmov	r4, r5, d0
 800b7f6:	f7ff ff47 	bl	800b688 <__b2d>
 800b7fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b802:	eba3 0c02 	sub.w	ip, r3, r2
 800b806:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b810:	ec51 0b10 	vmov	r0, r1, d0
 800b814:	2b00      	cmp	r3, #0
 800b816:	bfd6      	itet	le
 800b818:	460a      	movle	r2, r1
 800b81a:	462a      	movgt	r2, r5
 800b81c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b820:	468b      	mov	fp, r1
 800b822:	462f      	mov	r7, r5
 800b824:	bfd4      	ite	le
 800b826:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b82a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b82e:	4620      	mov	r0, r4
 800b830:	ee10 2a10 	vmov	r2, s0
 800b834:	465b      	mov	r3, fp
 800b836:	4639      	mov	r1, r7
 800b838:	f7f5 f808 	bl	800084c <__aeabi_ddiv>
 800b83c:	ec41 0b10 	vmov	d0, r0, r1
 800b840:	b003      	add	sp, #12
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b846 <__copybits>:
 800b846:	3901      	subs	r1, #1
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	1149      	asrs	r1, r1, #5
 800b84c:	6914      	ldr	r4, [r2, #16]
 800b84e:	3101      	adds	r1, #1
 800b850:	f102 0314 	add.w	r3, r2, #20
 800b854:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b858:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b85c:	1f05      	subs	r5, r0, #4
 800b85e:	42a3      	cmp	r3, r4
 800b860:	d30c      	bcc.n	800b87c <__copybits+0x36>
 800b862:	1aa3      	subs	r3, r4, r2
 800b864:	3b11      	subs	r3, #17
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	3211      	adds	r2, #17
 800b86c:	42a2      	cmp	r2, r4
 800b86e:	bf88      	it	hi
 800b870:	2300      	movhi	r3, #0
 800b872:	4418      	add	r0, r3
 800b874:	2300      	movs	r3, #0
 800b876:	4288      	cmp	r0, r1
 800b878:	d305      	bcc.n	800b886 <__copybits+0x40>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b880:	f845 6f04 	str.w	r6, [r5, #4]!
 800b884:	e7eb      	b.n	800b85e <__copybits+0x18>
 800b886:	f840 3b04 	str.w	r3, [r0], #4
 800b88a:	e7f4      	b.n	800b876 <__copybits+0x30>

0800b88c <__any_on>:
 800b88c:	f100 0214 	add.w	r2, r0, #20
 800b890:	6900      	ldr	r0, [r0, #16]
 800b892:	114b      	asrs	r3, r1, #5
 800b894:	4298      	cmp	r0, r3
 800b896:	b510      	push	{r4, lr}
 800b898:	db11      	blt.n	800b8be <__any_on+0x32>
 800b89a:	dd0a      	ble.n	800b8b2 <__any_on+0x26>
 800b89c:	f011 011f 	ands.w	r1, r1, #31
 800b8a0:	d007      	beq.n	800b8b2 <__any_on+0x26>
 800b8a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8a6:	fa24 f001 	lsr.w	r0, r4, r1
 800b8aa:	fa00 f101 	lsl.w	r1, r0, r1
 800b8ae:	428c      	cmp	r4, r1
 800b8b0:	d10b      	bne.n	800b8ca <__any_on+0x3e>
 800b8b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d803      	bhi.n	800b8c2 <__any_on+0x36>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	4603      	mov	r3, r0
 800b8c0:	e7f7      	b.n	800b8b2 <__any_on+0x26>
 800b8c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	d0f5      	beq.n	800b8b6 <__any_on+0x2a>
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	e7f6      	b.n	800b8bc <__any_on+0x30>

0800b8ce <_calloc_r>:
 800b8ce:	b513      	push	{r0, r1, r4, lr}
 800b8d0:	434a      	muls	r2, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	9201      	str	r2, [sp, #4]
 800b8d6:	f7fc f80b 	bl	80078f0 <_malloc_r>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	b118      	cbz	r0, 800b8e6 <_calloc_r+0x18>
 800b8de:	9a01      	ldr	r2, [sp, #4]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	f7fb ffad 	bl	8007840 <memset>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	b002      	add	sp, #8
 800b8ea:	bd10      	pop	{r4, pc}

0800b8ec <__ssputs_r>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	688e      	ldr	r6, [r1, #8]
 800b8f2:	429e      	cmp	r6, r3
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	4690      	mov	r8, r2
 800b8fa:	461f      	mov	r7, r3
 800b8fc:	d838      	bhi.n	800b970 <__ssputs_r+0x84>
 800b8fe:	898a      	ldrh	r2, [r1, #12]
 800b900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b904:	d032      	beq.n	800b96c <__ssputs_r+0x80>
 800b906:	6825      	ldr	r5, [r4, #0]
 800b908:	6909      	ldr	r1, [r1, #16]
 800b90a:	eba5 0901 	sub.w	r9, r5, r1
 800b90e:	6965      	ldr	r5, [r4, #20]
 800b910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b918:	3301      	adds	r3, #1
 800b91a:	444b      	add	r3, r9
 800b91c:	106d      	asrs	r5, r5, #1
 800b91e:	429d      	cmp	r5, r3
 800b920:	bf38      	it	cc
 800b922:	461d      	movcc	r5, r3
 800b924:	0553      	lsls	r3, r2, #21
 800b926:	d531      	bpl.n	800b98c <__ssputs_r+0xa0>
 800b928:	4629      	mov	r1, r5
 800b92a:	f7fb ffe1 	bl	80078f0 <_malloc_r>
 800b92e:	4606      	mov	r6, r0
 800b930:	b950      	cbnz	r0, 800b948 <__ssputs_r+0x5c>
 800b932:	230c      	movs	r3, #12
 800b934:	f8ca 3000 	str.w	r3, [sl]
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b948:	6921      	ldr	r1, [r4, #16]
 800b94a:	464a      	mov	r2, r9
 800b94c:	f7fb ff6a 	bl	8007824 <memcpy>
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	6126      	str	r6, [r4, #16]
 800b95e:	6165      	str	r5, [r4, #20]
 800b960:	444e      	add	r6, r9
 800b962:	eba5 0509 	sub.w	r5, r5, r9
 800b966:	6026      	str	r6, [r4, #0]
 800b968:	60a5      	str	r5, [r4, #8]
 800b96a:	463e      	mov	r6, r7
 800b96c:	42be      	cmp	r6, r7
 800b96e:	d900      	bls.n	800b972 <__ssputs_r+0x86>
 800b970:	463e      	mov	r6, r7
 800b972:	4632      	mov	r2, r6
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	4641      	mov	r1, r8
 800b978:	f000 fb5e 	bl	800c038 <memmove>
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	1b9b      	subs	r3, r3, r6
 800b982:	4432      	add	r2, r6
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6022      	str	r2, [r4, #0]
 800b988:	2000      	movs	r0, #0
 800b98a:	e7db      	b.n	800b944 <__ssputs_r+0x58>
 800b98c:	462a      	mov	r2, r5
 800b98e:	f000 fb6d 	bl	800c06c <_realloc_r>
 800b992:	4606      	mov	r6, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d1e1      	bne.n	800b95c <__ssputs_r+0x70>
 800b998:	6921      	ldr	r1, [r4, #16]
 800b99a:	4650      	mov	r0, sl
 800b99c:	f7fb ff58 	bl	8007850 <_free_r>
 800b9a0:	e7c7      	b.n	800b932 <__ssputs_r+0x46>
	...

0800b9a4 <_svfiprintf_r>:
 800b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	4698      	mov	r8, r3
 800b9aa:	898b      	ldrh	r3, [r1, #12]
 800b9ac:	061b      	lsls	r3, r3, #24
 800b9ae:	b09d      	sub	sp, #116	; 0x74
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	d50e      	bpl.n	800b9d6 <_svfiprintf_r+0x32>
 800b9b8:	690b      	ldr	r3, [r1, #16]
 800b9ba:	b963      	cbnz	r3, 800b9d6 <_svfiprintf_r+0x32>
 800b9bc:	2140      	movs	r1, #64	; 0x40
 800b9be:	f7fb ff97 	bl	80078f0 <_malloc_r>
 800b9c2:	6028      	str	r0, [r5, #0]
 800b9c4:	6128      	str	r0, [r5, #16]
 800b9c6:	b920      	cbnz	r0, 800b9d2 <_svfiprintf_r+0x2e>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	e0d1      	b.n	800bb76 <_svfiprintf_r+0x1d2>
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	616b      	str	r3, [r5, #20]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9da:	2320      	movs	r3, #32
 800b9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e4:	2330      	movs	r3, #48	; 0x30
 800b9e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb90 <_svfiprintf_r+0x1ec>
 800b9ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ee:	f04f 0901 	mov.w	r9, #1
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	469a      	mov	sl, r3
 800b9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fa:	b10a      	cbz	r2, 800ba00 <_svfiprintf_r+0x5c>
 800b9fc:	2a25      	cmp	r2, #37	; 0x25
 800b9fe:	d1f9      	bne.n	800b9f4 <_svfiprintf_r+0x50>
 800ba00:	ebba 0b04 	subs.w	fp, sl, r4
 800ba04:	d00b      	beq.n	800ba1e <_svfiprintf_r+0x7a>
 800ba06:	465b      	mov	r3, fp
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff ff6d 	bl	800b8ec <__ssputs_r>
 800ba12:	3001      	adds	r0, #1
 800ba14:	f000 80aa 	beq.w	800bb6c <_svfiprintf_r+0x1c8>
 800ba18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1a:	445a      	add	r2, fp
 800ba1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 80a2 	beq.w	800bb6c <_svfiprintf_r+0x1c8>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba32:	f10a 0a01 	add.w	sl, sl, #1
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	9307      	str	r3, [sp, #28]
 800ba3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba40:	4654      	mov	r4, sl
 800ba42:	2205      	movs	r2, #5
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	4851      	ldr	r0, [pc, #324]	; (800bb90 <_svfiprintf_r+0x1ec>)
 800ba4a:	f7f4 fbc9 	bl	80001e0 <memchr>
 800ba4e:	9a04      	ldr	r2, [sp, #16]
 800ba50:	b9d8      	cbnz	r0, 800ba8a <_svfiprintf_r+0xe6>
 800ba52:	06d0      	lsls	r0, r2, #27
 800ba54:	bf44      	itt	mi
 800ba56:	2320      	movmi	r3, #32
 800ba58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5c:	0711      	lsls	r1, r2, #28
 800ba5e:	bf44      	itt	mi
 800ba60:	232b      	movmi	r3, #43	; 0x2b
 800ba62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba66:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6c:	d015      	beq.n	800ba9a <_svfiprintf_r+0xf6>
 800ba6e:	9a07      	ldr	r2, [sp, #28]
 800ba70:	4654      	mov	r4, sl
 800ba72:	2000      	movs	r0, #0
 800ba74:	f04f 0c0a 	mov.w	ip, #10
 800ba78:	4621      	mov	r1, r4
 800ba7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba7e:	3b30      	subs	r3, #48	; 0x30
 800ba80:	2b09      	cmp	r3, #9
 800ba82:	d94e      	bls.n	800bb22 <_svfiprintf_r+0x17e>
 800ba84:	b1b0      	cbz	r0, 800bab4 <_svfiprintf_r+0x110>
 800ba86:	9207      	str	r2, [sp, #28]
 800ba88:	e014      	b.n	800bab4 <_svfiprintf_r+0x110>
 800ba8a:	eba0 0308 	sub.w	r3, r0, r8
 800ba8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba92:	4313      	orrs	r3, r2
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	46a2      	mov	sl, r4
 800ba98:	e7d2      	b.n	800ba40 <_svfiprintf_r+0x9c>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	1d19      	adds	r1, r3, #4
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	9103      	str	r1, [sp, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	bfbb      	ittet	lt
 800baa6:	425b      	neglt	r3, r3
 800baa8:	f042 0202 	orrlt.w	r2, r2, #2
 800baac:	9307      	strge	r3, [sp, #28]
 800baae:	9307      	strlt	r3, [sp, #28]
 800bab0:	bfb8      	it	lt
 800bab2:	9204      	strlt	r2, [sp, #16]
 800bab4:	7823      	ldrb	r3, [r4, #0]
 800bab6:	2b2e      	cmp	r3, #46	; 0x2e
 800bab8:	d10c      	bne.n	800bad4 <_svfiprintf_r+0x130>
 800baba:	7863      	ldrb	r3, [r4, #1]
 800babc:	2b2a      	cmp	r3, #42	; 0x2a
 800babe:	d135      	bne.n	800bb2c <_svfiprintf_r+0x188>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	1d1a      	adds	r2, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	9203      	str	r2, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfb8      	it	lt
 800bacc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad0:	3402      	adds	r4, #2
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bba0 <_svfiprintf_r+0x1fc>
 800bad8:	7821      	ldrb	r1, [r4, #0]
 800bada:	2203      	movs	r2, #3
 800badc:	4650      	mov	r0, sl
 800bade:	f7f4 fb7f 	bl	80001e0 <memchr>
 800bae2:	b140      	cbz	r0, 800baf6 <_svfiprintf_r+0x152>
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	eba0 000a 	sub.w	r0, r0, sl
 800baea:	fa03 f000 	lsl.w	r0, r3, r0
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	4303      	orrs	r3, r0
 800baf2:	3401      	adds	r4, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4826      	ldr	r0, [pc, #152]	; (800bb94 <_svfiprintf_r+0x1f0>)
 800bafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb00:	2206      	movs	r2, #6
 800bb02:	f7f4 fb6d 	bl	80001e0 <memchr>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d038      	beq.n	800bb7c <_svfiprintf_r+0x1d8>
 800bb0a:	4b23      	ldr	r3, [pc, #140]	; (800bb98 <_svfiprintf_r+0x1f4>)
 800bb0c:	bb1b      	cbnz	r3, 800bb56 <_svfiprintf_r+0x1b2>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	f023 0307 	bic.w	r3, r3, #7
 800bb16:	3308      	adds	r3, #8
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1c:	4433      	add	r3, r6
 800bb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb20:	e767      	b.n	800b9f2 <_svfiprintf_r+0x4e>
 800bb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb26:	460c      	mov	r4, r1
 800bb28:	2001      	movs	r0, #1
 800bb2a:	e7a5      	b.n	800ba78 <_svfiprintf_r+0xd4>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	3401      	adds	r4, #1
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	4619      	mov	r1, r3
 800bb34:	f04f 0c0a 	mov.w	ip, #10
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb3e:	3a30      	subs	r2, #48	; 0x30
 800bb40:	2a09      	cmp	r2, #9
 800bb42:	d903      	bls.n	800bb4c <_svfiprintf_r+0x1a8>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0c5      	beq.n	800bad4 <_svfiprintf_r+0x130>
 800bb48:	9105      	str	r1, [sp, #20]
 800bb4a:	e7c3      	b.n	800bad4 <_svfiprintf_r+0x130>
 800bb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb50:	4604      	mov	r4, r0
 800bb52:	2301      	movs	r3, #1
 800bb54:	e7f0      	b.n	800bb38 <_svfiprintf_r+0x194>
 800bb56:	ab03      	add	r3, sp, #12
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	462a      	mov	r2, r5
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <_svfiprintf_r+0x1f8>)
 800bb5e:	a904      	add	r1, sp, #16
 800bb60:	4638      	mov	r0, r7
 800bb62:	f7fb ffbf 	bl	8007ae4 <_printf_float>
 800bb66:	1c42      	adds	r2, r0, #1
 800bb68:	4606      	mov	r6, r0
 800bb6a:	d1d6      	bne.n	800bb1a <_svfiprintf_r+0x176>
 800bb6c:	89ab      	ldrh	r3, [r5, #12]
 800bb6e:	065b      	lsls	r3, r3, #25
 800bb70:	f53f af2c 	bmi.w	800b9cc <_svfiprintf_r+0x28>
 800bb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb76:	b01d      	add	sp, #116	; 0x74
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	ab03      	add	r3, sp, #12
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <_svfiprintf_r+0x1f8>)
 800bb84:	a904      	add	r1, sp, #16
 800bb86:	4638      	mov	r0, r7
 800bb88:	f7fc fa50 	bl	800802c <_printf_i>
 800bb8c:	e7eb      	b.n	800bb66 <_svfiprintf_r+0x1c2>
 800bb8e:	bf00      	nop
 800bb90:	0800cf14 	.word	0x0800cf14
 800bb94:	0800cf1e 	.word	0x0800cf1e
 800bb98:	08007ae5 	.word	0x08007ae5
 800bb9c:	0800b8ed 	.word	0x0800b8ed
 800bba0:	0800cf1a 	.word	0x0800cf1a

0800bba4 <__sfputc_r>:
 800bba4:	6893      	ldr	r3, [r2, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	b410      	push	{r4}
 800bbac:	6093      	str	r3, [r2, #8]
 800bbae:	da08      	bge.n	800bbc2 <__sfputc_r+0x1e>
 800bbb0:	6994      	ldr	r4, [r2, #24]
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	db01      	blt.n	800bbba <__sfputc_r+0x16>
 800bbb6:	290a      	cmp	r1, #10
 800bbb8:	d103      	bne.n	800bbc2 <__sfputc_r+0x1e>
 800bbba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbbe:	f7fd bce1 	b.w	8009584 <__swbuf_r>
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	1c58      	adds	r0, r3, #1
 800bbc6:	6010      	str	r0, [r2, #0]
 800bbc8:	7019      	strb	r1, [r3, #0]
 800bbca:	4608      	mov	r0, r1
 800bbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <__sfputs_r>:
 800bbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	4614      	mov	r4, r2
 800bbda:	18d5      	adds	r5, r2, r3
 800bbdc:	42ac      	cmp	r4, r5
 800bbde:	d101      	bne.n	800bbe4 <__sfputs_r+0x12>
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e007      	b.n	800bbf4 <__sfputs_r+0x22>
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	463a      	mov	r2, r7
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ffda 	bl	800bba4 <__sfputc_r>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d1f3      	bne.n	800bbdc <__sfputs_r+0xa>
 800bbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbf8 <_vfiprintf_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	b09d      	sub	sp, #116	; 0x74
 800bc00:	4614      	mov	r4, r2
 800bc02:	4698      	mov	r8, r3
 800bc04:	4606      	mov	r6, r0
 800bc06:	b118      	cbz	r0, 800bc10 <_vfiprintf_r+0x18>
 800bc08:	6983      	ldr	r3, [r0, #24]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_vfiprintf_r+0x18>
 800bc0c:	f7fe fd0e 	bl	800a62c <__sinit>
 800bc10:	4b89      	ldr	r3, [pc, #548]	; (800be38 <_vfiprintf_r+0x240>)
 800bc12:	429d      	cmp	r5, r3
 800bc14:	d11b      	bne.n	800bc4e <_vfiprintf_r+0x56>
 800bc16:	6875      	ldr	r5, [r6, #4]
 800bc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc1a:	07d9      	lsls	r1, r3, #31
 800bc1c:	d405      	bmi.n	800bc2a <_vfiprintf_r+0x32>
 800bc1e:	89ab      	ldrh	r3, [r5, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d402      	bmi.n	800bc2a <_vfiprintf_r+0x32>
 800bc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc26:	f7ff f912 	bl	800ae4e <__retarget_lock_acquire_recursive>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	071b      	lsls	r3, r3, #28
 800bc2e:	d501      	bpl.n	800bc34 <_vfiprintf_r+0x3c>
 800bc30:	692b      	ldr	r3, [r5, #16]
 800bc32:	b9eb      	cbnz	r3, 800bc70 <_vfiprintf_r+0x78>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4630      	mov	r0, r6
 800bc38:	f7fd fcf6 	bl	8009628 <__swsetup_r>
 800bc3c:	b1c0      	cbz	r0, 800bc70 <_vfiprintf_r+0x78>
 800bc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc40:	07dc      	lsls	r4, r3, #31
 800bc42:	d50e      	bpl.n	800bc62 <_vfiprintf_r+0x6a>
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	b01d      	add	sp, #116	; 0x74
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4b7b      	ldr	r3, [pc, #492]	; (800be3c <_vfiprintf_r+0x244>)
 800bc50:	429d      	cmp	r5, r3
 800bc52:	d101      	bne.n	800bc58 <_vfiprintf_r+0x60>
 800bc54:	68b5      	ldr	r5, [r6, #8]
 800bc56:	e7df      	b.n	800bc18 <_vfiprintf_r+0x20>
 800bc58:	4b79      	ldr	r3, [pc, #484]	; (800be40 <_vfiprintf_r+0x248>)
 800bc5a:	429d      	cmp	r5, r3
 800bc5c:	bf08      	it	eq
 800bc5e:	68f5      	ldreq	r5, [r6, #12]
 800bc60:	e7da      	b.n	800bc18 <_vfiprintf_r+0x20>
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	0598      	lsls	r0, r3, #22
 800bc66:	d4ed      	bmi.n	800bc44 <_vfiprintf_r+0x4c>
 800bc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc6a:	f7ff f8f1 	bl	800ae50 <__retarget_lock_release_recursive>
 800bc6e:	e7e9      	b.n	800bc44 <_vfiprintf_r+0x4c>
 800bc70:	2300      	movs	r3, #0
 800bc72:	9309      	str	r3, [sp, #36]	; 0x24
 800bc74:	2320      	movs	r3, #32
 800bc76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7e:	2330      	movs	r3, #48	; 0x30
 800bc80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be44 <_vfiprintf_r+0x24c>
 800bc84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc88:	f04f 0901 	mov.w	r9, #1
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	469a      	mov	sl, r3
 800bc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc94:	b10a      	cbz	r2, 800bc9a <_vfiprintf_r+0xa2>
 800bc96:	2a25      	cmp	r2, #37	; 0x25
 800bc98:	d1f9      	bne.n	800bc8e <_vfiprintf_r+0x96>
 800bc9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9e:	d00b      	beq.n	800bcb8 <_vfiprintf_r+0xc0>
 800bca0:	465b      	mov	r3, fp
 800bca2:	4622      	mov	r2, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7ff ff93 	bl	800bbd2 <__sfputs_r>
 800bcac:	3001      	adds	r0, #1
 800bcae:	f000 80aa 	beq.w	800be06 <_vfiprintf_r+0x20e>
 800bcb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcb4:	445a      	add	r2, fp
 800bcb6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 80a2 	beq.w	800be06 <_vfiprintf_r+0x20e>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bccc:	f10a 0a01 	add.w	sl, sl, #1
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd8:	931a      	str	r3, [sp, #104]	; 0x68
 800bcda:	4654      	mov	r4, sl
 800bcdc:	2205      	movs	r2, #5
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	4858      	ldr	r0, [pc, #352]	; (800be44 <_vfiprintf_r+0x24c>)
 800bce4:	f7f4 fa7c 	bl	80001e0 <memchr>
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	b9d8      	cbnz	r0, 800bd24 <_vfiprintf_r+0x12c>
 800bcec:	06d1      	lsls	r1, r2, #27
 800bcee:	bf44      	itt	mi
 800bcf0:	2320      	movmi	r3, #32
 800bcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcf6:	0713      	lsls	r3, r2, #28
 800bcf8:	bf44      	itt	mi
 800bcfa:	232b      	movmi	r3, #43	; 0x2b
 800bcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd00:	f89a 3000 	ldrb.w	r3, [sl]
 800bd04:	2b2a      	cmp	r3, #42	; 0x2a
 800bd06:	d015      	beq.n	800bd34 <_vfiprintf_r+0x13c>
 800bd08:	9a07      	ldr	r2, [sp, #28]
 800bd0a:	4654      	mov	r4, sl
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	f04f 0c0a 	mov.w	ip, #10
 800bd12:	4621      	mov	r1, r4
 800bd14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd18:	3b30      	subs	r3, #48	; 0x30
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d94e      	bls.n	800bdbc <_vfiprintf_r+0x1c4>
 800bd1e:	b1b0      	cbz	r0, 800bd4e <_vfiprintf_r+0x156>
 800bd20:	9207      	str	r2, [sp, #28]
 800bd22:	e014      	b.n	800bd4e <_vfiprintf_r+0x156>
 800bd24:	eba0 0308 	sub.w	r3, r0, r8
 800bd28:	fa09 f303 	lsl.w	r3, r9, r3
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	9304      	str	r3, [sp, #16]
 800bd30:	46a2      	mov	sl, r4
 800bd32:	e7d2      	b.n	800bcda <_vfiprintf_r+0xe2>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	1d19      	adds	r1, r3, #4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	9103      	str	r1, [sp, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	bfbb      	ittet	lt
 800bd40:	425b      	neglt	r3, r3
 800bd42:	f042 0202 	orrlt.w	r2, r2, #2
 800bd46:	9307      	strge	r3, [sp, #28]
 800bd48:	9307      	strlt	r3, [sp, #28]
 800bd4a:	bfb8      	it	lt
 800bd4c:	9204      	strlt	r2, [sp, #16]
 800bd4e:	7823      	ldrb	r3, [r4, #0]
 800bd50:	2b2e      	cmp	r3, #46	; 0x2e
 800bd52:	d10c      	bne.n	800bd6e <_vfiprintf_r+0x176>
 800bd54:	7863      	ldrb	r3, [r4, #1]
 800bd56:	2b2a      	cmp	r3, #42	; 0x2a
 800bd58:	d135      	bne.n	800bdc6 <_vfiprintf_r+0x1ce>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9203      	str	r2, [sp, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfb8      	it	lt
 800bd66:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd6a:	3402      	adds	r4, #2
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be54 <_vfiprintf_r+0x25c>
 800bd72:	7821      	ldrb	r1, [r4, #0]
 800bd74:	2203      	movs	r2, #3
 800bd76:	4650      	mov	r0, sl
 800bd78:	f7f4 fa32 	bl	80001e0 <memchr>
 800bd7c:	b140      	cbz	r0, 800bd90 <_vfiprintf_r+0x198>
 800bd7e:	2340      	movs	r3, #64	; 0x40
 800bd80:	eba0 000a 	sub.w	r0, r0, sl
 800bd84:	fa03 f000 	lsl.w	r0, r3, r0
 800bd88:	9b04      	ldr	r3, [sp, #16]
 800bd8a:	4303      	orrs	r3, r0
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd94:	482c      	ldr	r0, [pc, #176]	; (800be48 <_vfiprintf_r+0x250>)
 800bd96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd9a:	2206      	movs	r2, #6
 800bd9c:	f7f4 fa20 	bl	80001e0 <memchr>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d03f      	beq.n	800be24 <_vfiprintf_r+0x22c>
 800bda4:	4b29      	ldr	r3, [pc, #164]	; (800be4c <_vfiprintf_r+0x254>)
 800bda6:	bb1b      	cbnz	r3, 800bdf0 <_vfiprintf_r+0x1f8>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	3307      	adds	r3, #7
 800bdac:	f023 0307 	bic.w	r3, r3, #7
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	9303      	str	r3, [sp, #12]
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	443b      	add	r3, r7
 800bdb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdba:	e767      	b.n	800bc8c <_vfiprintf_r+0x94>
 800bdbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	e7a5      	b.n	800bd12 <_vfiprintf_r+0x11a>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	3401      	adds	r4, #1
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f04f 0c0a 	mov.w	ip, #10
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd8:	3a30      	subs	r2, #48	; 0x30
 800bdda:	2a09      	cmp	r2, #9
 800bddc:	d903      	bls.n	800bde6 <_vfiprintf_r+0x1ee>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0c5      	beq.n	800bd6e <_vfiprintf_r+0x176>
 800bde2:	9105      	str	r1, [sp, #20]
 800bde4:	e7c3      	b.n	800bd6e <_vfiprintf_r+0x176>
 800bde6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdea:	4604      	mov	r4, r0
 800bdec:	2301      	movs	r3, #1
 800bdee:	e7f0      	b.n	800bdd2 <_vfiprintf_r+0x1da>
 800bdf0:	ab03      	add	r3, sp, #12
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4b16      	ldr	r3, [pc, #88]	; (800be50 <_vfiprintf_r+0x258>)
 800bdf8:	a904      	add	r1, sp, #16
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7fb fe72 	bl	8007ae4 <_printf_float>
 800be00:	4607      	mov	r7, r0
 800be02:	1c78      	adds	r0, r7, #1
 800be04:	d1d6      	bne.n	800bdb4 <_vfiprintf_r+0x1bc>
 800be06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be08:	07d9      	lsls	r1, r3, #31
 800be0a:	d405      	bmi.n	800be18 <_vfiprintf_r+0x220>
 800be0c:	89ab      	ldrh	r3, [r5, #12]
 800be0e:	059a      	lsls	r2, r3, #22
 800be10:	d402      	bmi.n	800be18 <_vfiprintf_r+0x220>
 800be12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be14:	f7ff f81c 	bl	800ae50 <__retarget_lock_release_recursive>
 800be18:	89ab      	ldrh	r3, [r5, #12]
 800be1a:	065b      	lsls	r3, r3, #25
 800be1c:	f53f af12 	bmi.w	800bc44 <_vfiprintf_r+0x4c>
 800be20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be22:	e711      	b.n	800bc48 <_vfiprintf_r+0x50>
 800be24:	ab03      	add	r3, sp, #12
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	462a      	mov	r2, r5
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <_vfiprintf_r+0x258>)
 800be2c:	a904      	add	r1, sp, #16
 800be2e:	4630      	mov	r0, r6
 800be30:	f7fc f8fc 	bl	800802c <_printf_i>
 800be34:	e7e4      	b.n	800be00 <_vfiprintf_r+0x208>
 800be36:	bf00      	nop
 800be38:	0800ccf8 	.word	0x0800ccf8
 800be3c:	0800cd18 	.word	0x0800cd18
 800be40:	0800ccd8 	.word	0x0800ccd8
 800be44:	0800cf14 	.word	0x0800cf14
 800be48:	0800cf1e 	.word	0x0800cf1e
 800be4c:	08007ae5 	.word	0x08007ae5
 800be50:	0800bbd3 	.word	0x0800bbd3
 800be54:	0800cf1a 	.word	0x0800cf1a

0800be58 <nan>:
 800be58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be60 <nan+0x8>
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	00000000 	.word	0x00000000
 800be64:	7ff80000 	.word	0x7ff80000

0800be68 <__sread>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	460c      	mov	r4, r1
 800be6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be70:	f000 f922 	bl	800c0b8 <_read_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	bfab      	itete	ge
 800be78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be7a:	89a3      	ldrhlt	r3, [r4, #12]
 800be7c:	181b      	addge	r3, r3, r0
 800be7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be82:	bfac      	ite	ge
 800be84:	6563      	strge	r3, [r4, #84]	; 0x54
 800be86:	81a3      	strhlt	r3, [r4, #12]
 800be88:	bd10      	pop	{r4, pc}

0800be8a <__swrite>:
 800be8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8e:	461f      	mov	r7, r3
 800be90:	898b      	ldrh	r3, [r1, #12]
 800be92:	05db      	lsls	r3, r3, #23
 800be94:	4605      	mov	r5, r0
 800be96:	460c      	mov	r4, r1
 800be98:	4616      	mov	r6, r2
 800be9a:	d505      	bpl.n	800bea8 <__swrite+0x1e>
 800be9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea0:	2302      	movs	r3, #2
 800bea2:	2200      	movs	r2, #0
 800bea4:	f000 f8b6 	bl	800c014 <_lseek_r>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	4628      	mov	r0, r5
 800beba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bebe:	f000 b835 	b.w	800bf2c <_write_r>

0800bec2 <__sseek>:
 800bec2:	b510      	push	{r4, lr}
 800bec4:	460c      	mov	r4, r1
 800bec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beca:	f000 f8a3 	bl	800c014 <_lseek_r>
 800bece:	1c43      	adds	r3, r0, #1
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	bf15      	itete	ne
 800bed4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bede:	81a3      	strheq	r3, [r4, #12]
 800bee0:	bf18      	it	ne
 800bee2:	81a3      	strhne	r3, [r4, #12]
 800bee4:	bd10      	pop	{r4, pc}

0800bee6 <__sclose>:
 800bee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beea:	f000 b84f 	b.w	800bf8c <_close_r>

0800beee <strncmp>:
 800beee:	b510      	push	{r4, lr}
 800bef0:	b16a      	cbz	r2, 800bf0e <strncmp+0x20>
 800bef2:	3901      	subs	r1, #1
 800bef4:	1884      	adds	r4, r0, r2
 800bef6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800befa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800befe:	4293      	cmp	r3, r2
 800bf00:	d103      	bne.n	800bf0a <strncmp+0x1c>
 800bf02:	42a0      	cmp	r0, r4
 800bf04:	d001      	beq.n	800bf0a <strncmp+0x1c>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1f5      	bne.n	800bef6 <strncmp+0x8>
 800bf0a:	1a98      	subs	r0, r3, r2
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	4610      	mov	r0, r2
 800bf10:	e7fc      	b.n	800bf0c <strncmp+0x1e>

0800bf12 <__ascii_wctomb>:
 800bf12:	b149      	cbz	r1, 800bf28 <__ascii_wctomb+0x16>
 800bf14:	2aff      	cmp	r2, #255	; 0xff
 800bf16:	bf85      	ittet	hi
 800bf18:	238a      	movhi	r3, #138	; 0x8a
 800bf1a:	6003      	strhi	r3, [r0, #0]
 800bf1c:	700a      	strbls	r2, [r1, #0]
 800bf1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf22:	bf98      	it	ls
 800bf24:	2001      	movls	r0, #1
 800bf26:	4770      	bx	lr
 800bf28:	4608      	mov	r0, r1
 800bf2a:	4770      	bx	lr

0800bf2c <_write_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_write_r+0x20>)
 800bf30:	4604      	mov	r4, r0
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f6 fe63 	bl	8002c06 <_write>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_write_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_write_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20003490 	.word	0x20003490

0800bf50 <__assert_func>:
 800bf50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf52:	4614      	mov	r4, r2
 800bf54:	461a      	mov	r2, r3
 800bf56:	4b09      	ldr	r3, [pc, #36]	; (800bf7c <__assert_func+0x2c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	68d8      	ldr	r0, [r3, #12]
 800bf5e:	b14c      	cbz	r4, 800bf74 <__assert_func+0x24>
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <__assert_func+0x30>)
 800bf62:	9100      	str	r1, [sp, #0]
 800bf64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf68:	4906      	ldr	r1, [pc, #24]	; (800bf84 <__assert_func+0x34>)
 800bf6a:	462b      	mov	r3, r5
 800bf6c:	f000 f81e 	bl	800bfac <fiprintf>
 800bf70:	f000 f8b4 	bl	800c0dc <abort>
 800bf74:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <__assert_func+0x38>)
 800bf76:	461c      	mov	r4, r3
 800bf78:	e7f3      	b.n	800bf62 <__assert_func+0x12>
 800bf7a:	bf00      	nop
 800bf7c:	20000024 	.word	0x20000024
 800bf80:	0800cf25 	.word	0x0800cf25
 800bf84:	0800cf32 	.word	0x0800cf32
 800bf88:	0800cf60 	.word	0x0800cf60

0800bf8c <_close_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4d06      	ldr	r5, [pc, #24]	; (800bfa8 <_close_r+0x1c>)
 800bf90:	2300      	movs	r3, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	f7f6 fe51 	bl	8002c3e <_close>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_close_r+0x1a>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_close_r+0x1a>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	20003490 	.word	0x20003490

0800bfac <fiprintf>:
 800bfac:	b40e      	push	{r1, r2, r3}
 800bfae:	b503      	push	{r0, r1, lr}
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	4805      	ldr	r0, [pc, #20]	; (800bfcc <fiprintf+0x20>)
 800bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	f7ff fe1b 	bl	800bbf8 <_vfiprintf_r>
 800bfc2:	b002      	add	sp, #8
 800bfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc8:	b003      	add	sp, #12
 800bfca:	4770      	bx	lr
 800bfcc:	20000024 	.word	0x20000024

0800bfd0 <_fstat_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d07      	ldr	r5, [pc, #28]	; (800bff0 <_fstat_r+0x20>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	4611      	mov	r1, r2
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	f7f6 fe3a 	bl	8002c56 <_fstat>
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	d102      	bne.n	800bfec <_fstat_r+0x1c>
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	b103      	cbz	r3, 800bfec <_fstat_r+0x1c>
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	bf00      	nop
 800bff0:	20003490 	.word	0x20003490

0800bff4 <_isatty_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d06      	ldr	r5, [pc, #24]	; (800c010 <_isatty_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 fe39 	bl	8002c76 <_isatty>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_isatty_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_isatty_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20003490 	.word	0x20003490

0800c014 <_lseek_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	; (800c034 <_lseek_r+0x20>)
 800c018:	4604      	mov	r4, r0
 800c01a:	4608      	mov	r0, r1
 800c01c:	4611      	mov	r1, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	602a      	str	r2, [r5, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	f7f6 fe32 	bl	8002c8c <_lseek>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_lseek_r+0x1e>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_lseek_r+0x1e>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	20003490 	.word	0x20003490

0800c038 <memmove>:
 800c038:	4288      	cmp	r0, r1
 800c03a:	b510      	push	{r4, lr}
 800c03c:	eb01 0402 	add.w	r4, r1, r2
 800c040:	d902      	bls.n	800c048 <memmove+0x10>
 800c042:	4284      	cmp	r4, r0
 800c044:	4623      	mov	r3, r4
 800c046:	d807      	bhi.n	800c058 <memmove+0x20>
 800c048:	1e43      	subs	r3, r0, #1
 800c04a:	42a1      	cmp	r1, r4
 800c04c:	d008      	beq.n	800c060 <memmove+0x28>
 800c04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c056:	e7f8      	b.n	800c04a <memmove+0x12>
 800c058:	4402      	add	r2, r0
 800c05a:	4601      	mov	r1, r0
 800c05c:	428a      	cmp	r2, r1
 800c05e:	d100      	bne.n	800c062 <memmove+0x2a>
 800c060:	bd10      	pop	{r4, pc}
 800c062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c06a:	e7f7      	b.n	800c05c <memmove+0x24>

0800c06c <_realloc_r>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	4607      	mov	r7, r0
 800c070:	4614      	mov	r4, r2
 800c072:	460e      	mov	r6, r1
 800c074:	b921      	cbnz	r1, 800c080 <_realloc_r+0x14>
 800c076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c07a:	4611      	mov	r1, r2
 800c07c:	f7fb bc38 	b.w	80078f0 <_malloc_r>
 800c080:	b922      	cbnz	r2, 800c08c <_realloc_r+0x20>
 800c082:	f7fb fbe5 	bl	8007850 <_free_r>
 800c086:	4625      	mov	r5, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c08c:	f000 f82d 	bl	800c0ea <_malloc_usable_size_r>
 800c090:	42a0      	cmp	r0, r4
 800c092:	d20f      	bcs.n	800c0b4 <_realloc_r+0x48>
 800c094:	4621      	mov	r1, r4
 800c096:	4638      	mov	r0, r7
 800c098:	f7fb fc2a 	bl	80078f0 <_malloc_r>
 800c09c:	4605      	mov	r5, r0
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d0f2      	beq.n	800c088 <_realloc_r+0x1c>
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	f7fb fbbd 	bl	8007824 <memcpy>
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	f7fb fbcf 	bl	8007850 <_free_r>
 800c0b2:	e7e9      	b.n	800c088 <_realloc_r+0x1c>
 800c0b4:	4635      	mov	r5, r6
 800c0b6:	e7e7      	b.n	800c088 <_realloc_r+0x1c>

0800c0b8 <_read_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d07      	ldr	r5, [pc, #28]	; (800c0d8 <_read_r+0x20>)
 800c0bc:	4604      	mov	r4, r0
 800c0be:	4608      	mov	r0, r1
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	602a      	str	r2, [r5, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f7f6 fd80 	bl	8002bcc <_read>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_read_r+0x1e>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_read_r+0x1e>
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	20003490 	.word	0x20003490

0800c0dc <abort>:
 800c0dc:	b508      	push	{r3, lr}
 800c0de:	2006      	movs	r0, #6
 800c0e0:	f000 f834 	bl	800c14c <raise>
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	f7f6 fd67 	bl	8002bb8 <_exit>

0800c0ea <_malloc_usable_size_r>:
 800c0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ee:	1f18      	subs	r0, r3, #4
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bfbc      	itt	lt
 800c0f4:	580b      	ldrlt	r3, [r1, r0]
 800c0f6:	18c0      	addlt	r0, r0, r3
 800c0f8:	4770      	bx	lr

0800c0fa <_raise_r>:
 800c0fa:	291f      	cmp	r1, #31
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	d904      	bls.n	800c10e <_raise_r+0x14>
 800c104:	2316      	movs	r3, #22
 800c106:	6003      	str	r3, [r0, #0]
 800c108:	f04f 30ff 	mov.w	r0, #4294967295
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c110:	b112      	cbz	r2, 800c118 <_raise_r+0x1e>
 800c112:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c116:	b94b      	cbnz	r3, 800c12c <_raise_r+0x32>
 800c118:	4620      	mov	r0, r4
 800c11a:	f000 f831 	bl	800c180 <_getpid_r>
 800c11e:	462a      	mov	r2, r5
 800c120:	4601      	mov	r1, r0
 800c122:	4620      	mov	r0, r4
 800c124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c128:	f000 b818 	b.w	800c15c <_kill_r>
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d00a      	beq.n	800c146 <_raise_r+0x4c>
 800c130:	1c59      	adds	r1, r3, #1
 800c132:	d103      	bne.n	800c13c <_raise_r+0x42>
 800c134:	2316      	movs	r3, #22
 800c136:	6003      	str	r3, [r0, #0]
 800c138:	2001      	movs	r0, #1
 800c13a:	e7e7      	b.n	800c10c <_raise_r+0x12>
 800c13c:	2400      	movs	r4, #0
 800c13e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c142:	4628      	mov	r0, r5
 800c144:	4798      	blx	r3
 800c146:	2000      	movs	r0, #0
 800c148:	e7e0      	b.n	800c10c <_raise_r+0x12>
	...

0800c14c <raise>:
 800c14c:	4b02      	ldr	r3, [pc, #8]	; (800c158 <raise+0xc>)
 800c14e:	4601      	mov	r1, r0
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	f7ff bfd2 	b.w	800c0fa <_raise_r>
 800c156:	bf00      	nop
 800c158:	20000024 	.word	0x20000024

0800c15c <_kill_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d07      	ldr	r5, [pc, #28]	; (800c17c <_kill_r+0x20>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	4611      	mov	r1, r2
 800c168:	602b      	str	r3, [r5, #0]
 800c16a:	f7f6 fd15 	bl	8002b98 <_kill>
 800c16e:	1c43      	adds	r3, r0, #1
 800c170:	d102      	bne.n	800c178 <_kill_r+0x1c>
 800c172:	682b      	ldr	r3, [r5, #0]
 800c174:	b103      	cbz	r3, 800c178 <_kill_r+0x1c>
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	bd38      	pop	{r3, r4, r5, pc}
 800c17a:	bf00      	nop
 800c17c:	20003490 	.word	0x20003490

0800c180 <_getpid_r>:
 800c180:	f7f6 bd02 	b.w	8002b88 <_getpid>

0800c184 <sqrtf>:
 800c184:	b508      	push	{r3, lr}
 800c186:	ed2d 8b02 	vpush	{d8}
 800c18a:	eeb0 8a40 	vmov.f32	s16, s0
 800c18e:	f000 f81f 	bl	800c1d0 <__ieee754_sqrtf>
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <sqrtf+0x44>)
 800c194:	f993 3000 	ldrsb.w	r3, [r3]
 800c198:	3301      	adds	r3, #1
 800c19a:	d011      	beq.n	800c1c0 <sqrtf+0x3c>
 800c19c:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	d60c      	bvs.n	800c1c0 <sqrtf+0x3c>
 800c1a6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c1cc <sqrtf+0x48>
 800c1aa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	d505      	bpl.n	800c1c0 <sqrtf+0x3c>
 800c1b4:	f7fb fb04 	bl	80077c0 <__errno>
 800c1b8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c1bc:	2321      	movs	r3, #33	; 0x21
 800c1be:	6003      	str	r3, [r0, #0]
 800c1c0:	ecbd 8b02 	vpop	{d8}
 800c1c4:	bd08      	pop	{r3, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200001f8 	.word	0x200001f8
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <__ieee754_sqrtf>:
 800c1d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1d4:	4770      	bx	lr
	...

0800c1d8 <_init>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr

0800c1e4 <_fini>:
 800c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e6:	bf00      	nop
 800c1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ea:	bc08      	pop	{r3}
 800c1ec:	469e      	mov	lr, r3
 800c1ee:	4770      	bx	lr
>>>>>>> parent of 9e7a168 (最终版本)
