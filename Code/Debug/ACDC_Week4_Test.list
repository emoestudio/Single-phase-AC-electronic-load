
ACDC_Week4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e8c  0800d018  0800d018  0001d018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea4  0800dea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deac  0800deac  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800deb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020220  2**0
                  CONTENTS
 10 .bss          00002338  20000220  20000220  00020220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002558  20002558  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019df8  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040bc  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0003e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f98  00000000  00000000  0003f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f54  00000000  00000000  00040280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecfa  00000000  00000000  000691d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc6eb  00000000  00000000  00087ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  001645b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa0  00000000  00000000  00164680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  0016a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d000 	.word	0x0800d000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800d000 	.word	0x0800d000

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <MX_ADC1_Init+0x15c>)
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <MX_ADC1_Init+0x160>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <MX_ADC1_Init+0x15c>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <MX_ADC1_Init+0x15c>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <MX_ADC1_Init+0x15c>)
 800103a:	4a48      	ldr	r2, [pc, #288]	; (800115c <MX_ADC1_Init+0x164>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001046:	2208      	movs	r2, #8
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <MX_ADC1_Init+0x15c>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	483e      	ldr	r0, [pc, #248]	; (8001154 <MX_ADC1_Init+0x15c>)
 800105a:	f002 ff2f 	bl	8003ebc <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f002 f9e4 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001068:	2302      	movs	r3, #2
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4836      	ldr	r0, [pc, #216]	; (8001154 <MX_ADC1_Init+0x15c>)
 800107a:	f003 f891 	bl	80041a0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f002 f9d4 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001088:	2303      	movs	r3, #3
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	482f      	ldr	r0, [pc, #188]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001096:	f003 f883 	bl	80041a0 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f002 f9c6 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a4:	2306      	movs	r3, #6
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010b2:	f003 f875 	bl	80041a0 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010bc:	f002 f9b8 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010ce:	f003 f867 	bl	80041a0 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010d8:	f002 f9aa 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010dc:	2308      	movs	r3, #8
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010e0:	2305      	movs	r3, #5
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_ADC1_Init+0x15c>)
 80010ea:	f003 f859 	bl	80041a0 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010f4:	f002 f99c 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f8:	2309      	movs	r3, #9
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010fc:	2306      	movs	r3, #6
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001106:	f003 f84b 	bl	80041a0 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001110:	f002 f98e 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001114:	230e      	movs	r3, #14
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001118:	2307      	movs	r3, #7
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_ADC1_Init+0x15c>)
 8001122:	f003 f83d 	bl	80041a0 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800112c:	f002 f980 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001130:	230f      	movs	r3, #15
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x15c>)
 800113e:	f003 f82f 	bl	80041a0 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001148:	f002 f972 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000023c 	.word	0x2000023c
 8001158:	40012000 	.word	0x40012000
 800115c:	0f000001 	.word	0x0f000001

08001160 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_ADC_MspInit+0x144>)
 800117e:	4293      	cmp	r3, r2
 8001180:	f040 808c 	bne.w	800129c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6453      	str	r3, [r2, #68]	; 0x44
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_ADC_MspInit+0x148>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23cc      	movs	r3, #204	; 0xcc
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4829      	ldr	r0, [pc, #164]	; (80012ac <HAL_ADC_MspInit+0x14c>)
 8001208:	f004 f866 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800120c:	2330      	movs	r3, #48	; 0x30
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4824      	ldr	r0, [pc, #144]	; (80012b0 <HAL_ADC_MspInit+0x150>)
 8001220:	f004 f85a 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	481f      	ldr	r0, [pc, #124]	; (80012b4 <HAL_ADC_MspInit+0x154>)
 8001238:	f004 f84e 	bl	80052d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_ADC_MspInit+0x15c>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001282:	f003 fc27 	bl	8004ad4 <HAL_DMA_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800128c:	f002 f8d0 	bl	8003430 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_ADC_MspInit+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40012000 	.word	0x40012000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	20000284 	.word	0x20000284
 80012bc:	40026410 	.word	0x40026410

080012c0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_DAC_Init+0x4c>)
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_DAC_Init+0x50>)
 80012d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_DAC_Init+0x4c>)
 80012d6:	f003 fb14 	bl	8004902 <HAL_DAC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012e0:	f002 f8a6 	bl	8003430 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_DAC_Init+0x4c>)
 80012f4:	f003 fb9e 	bl	8004a34 <HAL_DAC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012fe:	f002 f897 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200002e4 	.word	0x200002e4
 8001310:	40007400 	.word	0x40007400

08001314 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_DAC_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d127      	bne.n	8001386 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_DAC_MspInit+0x80>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_DAC_MspInit+0x80>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_DAC_MspInit+0x80>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_DAC_MspInit+0x84>)
 8001382:	f003 ffa9 	bl	80052d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40007400 	.word	0x40007400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2101      	movs	r1, #1
 80013c2:	2038      	movs	r0, #56	; 0x38
 80013c4:	f003 fa67 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013c8:	2038      	movs	r0, #56	; 0x38
 80013ca:	f003 fa80 	bl	80048ce <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <PI_Control>:
pid_p pid_Udc,pid_I1d,pid_I1q;
/*控制设计*/
float ref_Udc=48,ref_I1d=2.824,ref_Isqrms=0,ref_I1q=0.02;


void PI_Control(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	//逆变电压环
	DdI=1-PID_realize(&pid_Udc,ref_Udc,Udc);
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <PI_Control+0xe4>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <PI_Control+0xe8>)
 80013e8:	ed93 7a00 	vldr	s14, [r3]
 80013ec:	eef0 0a47 	vmov.f32	s1, s14
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	4834      	ldr	r0, [pc, #208]	; (80014c8 <PI_Control+0xec>)
 80013f6:	f000 ff68 	bl	80022ca <PID_realize>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
 80013fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <PI_Control+0xf0>)
 8001408:	edc3 7a00 	vstr	s15, [r3]



	UId=PID_realize(&pid_I1d,ref_I1d,I1d);
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <PI_Control+0xf4>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <PI_Control+0xf8>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	eef0 0a47 	vmov.f32	s1, s14
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	482d      	ldr	r0, [pc, #180]	; (80014d8 <PI_Control+0xfc>)
 8001422:	f000 ff52 	bl	80022ca <PID_realize>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <PI_Control+0x100>)
 800142c:	edc3 7a00 	vstr	s15, [r3]
	UIq=PID_realize(&pid_I1q,ref_I1q,I1q);
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <PI_Control+0x104>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <PI_Control+0x108>)
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	eef0 0a47 	vmov.f32	s1, s14
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	4828      	ldr	r0, [pc, #160]	; (80014e8 <PI_Control+0x10c>)
 8001446:	f000 ff40 	bl	80022ca <PID_realize>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <PI_Control+0x110>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
	//前馈和限制
	DdR=(U1d+I1q*Xs-UId)/Udc;
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <PI_Control+0x108>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <PI_Control+0x114>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <PI_Control+0x118>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <PI_Control+0x100>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <PI_Control+0xe8>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <PI_Control+0x11c>)
 8001484:	edc3 7a00 	vstr	s15, [r3]
	DqR=(U1q-I1d*Xs-UIq)/Udc;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <PI_Control+0x120>)
 800148a:	ed93 7a00 	vldr	s14, [r3]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <PI_Control+0xf8>)
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <PI_Control+0x114>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <PI_Control+0x110>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <PI_Control+0xe8>)
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <PI_Control+0x124>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
//	    	if(Dq>0.8)Dq=0.8;
//	    	else if (Dq<-0.8) Dq=-0.8;

//    	开环测试
//    	D3d=0.5;D3q=0;
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000408 	.word	0x20000408
 80014c8:	200002f8 	.word	0x200002f8
 80014cc:	200023a0 	.word	0x200023a0
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20002370 	.word	0x20002370
 80014d8:	20000330 	.word	0x20000330
 80014dc:	20002380 	.word	0x20002380
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20002374 	.word	0x20002374
 80014e8:	20000368 	.word	0x20000368
 80014ec:	20002384 	.word	0x20002384
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	20002368 	.word	0x20002368
 80014f8:	20002388 	.word	0x20002388
 80014fc:	2000236c 	.word	0x2000236c
 8001500:	2000238c 	.word	0x2000238c

08001504 <ADC_DAC_get_and_show>:
/*ADC采样后真实的电路参数*/
//float Isd_temp,Isq_temp;
float I1d_screen,I1q_screen;

void ADC_DAC_get_and_show()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	ADC_To_adx();
 8001508:	f000 f82a 	bl	8001560 <ADC_To_adx>
	ADC_ad5_avg_Get();
 800150c:	f000 f904 	bl	8001718 <ADC_ad5_avg_Get>
	ADC_Real_Value_Get();
 8001510:	f000 f94e 	bl	80017b0 <ADC_Real_Value_Get>
	ADC_Queue_Save();
 8001514:	f000 f9d6 	bl	80018c4 <ADC_Queue_Save>
	ADC_Sine_Calculate();
 8001518:	f000 f9f4 	bl	8001904 <ADC_Sine_Calculate>
	ADC_Park_Transform();
 800151c:	f000 fa14 	bl	8001948 <ADC_Park_Transform>
	ADC_Paremeters_Calc();
 8001520:	f000 fac8 	bl	8001ab4 <ADC_Paremeters_Calc>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048+100*I1);
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <ADC_DAC_get_and_show+0x4c>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001554 <ADC_DAC_get_and_show+0x50>
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001532:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001558 <ADC_DAC_get_and_show+0x54>
 8001536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153e:	ee17 3a90 	vmov	r3, s15
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <ADC_DAC_get_and_show+0x58>)
 8001548:	f003 fa4f 	bl	80049ea <HAL_DAC_SetValue>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000040c 	.word	0x2000040c
 8001554:	42c80000 	.word	0x42c80000
 8001558:	45000000 	.word	0x45000000
 800155c:	200002e4 	.word	0x200002e4

08001560 <ADC_To_adx>:

void ADC_To_adx(){
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 8001564:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <ADC_To_adx+0x190>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <ADC_To_adx+0x194>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <ADC_To_adx+0x198>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b61      	ldr	r3, [pc, #388]	; (80016fc <ADC_To_adx+0x19c>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <ADC_To_adx+0x1a0>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	4b60      	ldr	r3, [pc, #384]	; (8001704 <ADC_To_adx+0x1a4>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <ADC_To_adx+0x1a8>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <ADC_To_adx+0x1ac>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <ADC_To_adx+0x1b0>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e07f      	b.n	800169c <ADC_To_adx+0x13c>
	{
			ad1 += ADC_Value[i++];
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <ADC_To_adx+0x190>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <ADC_To_adx+0x190>)
 80015a6:	7011      	strb	r1, [r2, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <ADC_To_adx+0x1b4>)
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <ADC_To_adx+0x194>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <ADC_To_adx+0x194>)
 80015ba:	601a      	str	r2, [r3, #0]
			ad2 += ADC_Value[i++];
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <ADC_To_adx+0x190>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <ADC_To_adx+0x190>)
 80015c6:	7011      	strb	r1, [r2, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b52      	ldr	r3, [pc, #328]	; (8001714 <ADC_To_adx+0x1b4>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <ADC_To_adx+0x198>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <ADC_To_adx+0x198>)
 80015da:	601a      	str	r2, [r3, #0]
			ad3 += ADC_Value[i++];
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <ADC_To_adx+0x190>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	b2d1      	uxtb	r1, r2
 80015e4:	4a42      	ldr	r2, [pc, #264]	; (80016f0 <ADC_To_adx+0x190>)
 80015e6:	7011      	strb	r1, [r2, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <ADC_To_adx+0x1b4>)
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	4a42      	ldr	r2, [pc, #264]	; (80016fc <ADC_To_adx+0x19c>)
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b40      	ldr	r3, [pc, #256]	; (80016fc <ADC_To_adx+0x19c>)
 80015fa:	601a      	str	r2, [r3, #0]
			ad4 += ADC_Value[i++];
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <ADC_To_adx+0x190>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	b2d1      	uxtb	r1, r2
 8001604:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <ADC_To_adx+0x190>)
 8001606:	7011      	strb	r1, [r2, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b42      	ldr	r3, [pc, #264]	; (8001714 <ADC_To_adx+0x1b4>)
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <ADC_To_adx+0x1a0>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	4413      	add	r3, r2
 8001616:	461a      	mov	r2, r3
 8001618:	4b39      	ldr	r3, [pc, #228]	; (8001700 <ADC_To_adx+0x1a0>)
 800161a:	601a      	str	r2, [r3, #0]
			ad5 += ADC_Value[i++];
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <ADC_To_adx+0x190>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	b2d1      	uxtb	r1, r2
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <ADC_To_adx+0x190>)
 8001626:	7011      	strb	r1, [r2, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <ADC_To_adx+0x1b4>)
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	4a34      	ldr	r2, [pc, #208]	; (8001704 <ADC_To_adx+0x1a4>)
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	4413      	add	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <ADC_To_adx+0x1a4>)
 800163a:	601a      	str	r2, [r3, #0]
			ad6 += ADC_Value[i++];
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <ADC_To_adx+0x190>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a2a      	ldr	r2, [pc, #168]	; (80016f0 <ADC_To_adx+0x190>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <ADC_To_adx+0x1b4>)
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <ADC_To_adx+0x1a8>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4413      	add	r3, r2
 8001656:	461a      	mov	r2, r3
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <ADC_To_adx+0x1a8>)
 800165a:	601a      	str	r2, [r3, #0]
			ad7 += ADC_Value[i++];
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <ADC_To_adx+0x190>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <ADC_To_adx+0x190>)
 8001666:	7011      	strb	r1, [r2, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <ADC_To_adx+0x1b4>)
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <ADC_To_adx+0x1ac>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4413      	add	r3, r2
 8001676:	461a      	mov	r2, r3
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <ADC_To_adx+0x1ac>)
 800167a:	601a      	str	r2, [r3, #0]
			ad8 += ADC_Value[i++];
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <ADC_To_adx+0x190>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	b2d1      	uxtb	r1, r2
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <ADC_To_adx+0x190>)
 8001686:	7011      	strb	r1, [r2, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <ADC_To_adx+0x1b4>)
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <ADC_To_adx+0x1b0>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	4413      	add	r3, r2
 8001696:	461a      	mov	r2, r3
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <ADC_To_adx+0x1b0>)
 800169a:	601a      	str	r2, [r3, #0]
	for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5=0,ad6=0,ad7=0,ad8=0; i< ADC_num;)
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <ADC_To_adx+0x190>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	f67f af7b 	bls.w	800159c <ADC_To_adx+0x3c>
	}
	ad1/=(ADC_num/8);
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <ADC_To_adx+0x194>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <ADC_To_adx+0x194>)
 80016ac:	6013      	str	r3, [r2, #0]
	ad2/=(ADC_num/8);
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <ADC_To_adx+0x198>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <ADC_To_adx+0x198>)
 80016b4:	6013      	str	r3, [r2, #0]
	ad3/=(ADC_num/8);
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <ADC_To_adx+0x19c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <ADC_To_adx+0x19c>)
 80016bc:	6013      	str	r3, [r2, #0]
	ad4/=(ADC_num/8);
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <ADC_To_adx+0x1a0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <ADC_To_adx+0x1a0>)
 80016c4:	6013      	str	r3, [r2, #0]
	ad5/=(ADC_num/8);
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <ADC_To_adx+0x1a4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <ADC_To_adx+0x1a4>)
 80016cc:	6013      	str	r3, [r2, #0]
	ad6/=(ADC_num/8);
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <ADC_To_adx+0x1a8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <ADC_To_adx+0x1a8>)
 80016d4:	6013      	str	r3, [r2, #0]
	ad7/=(ADC_num/8);
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <ADC_To_adx+0x1ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <ADC_To_adx+0x1ac>)
 80016dc:	6013      	str	r3, [r2, #0]
	ad8/=(ADC_num/8);
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <ADC_To_adx+0x1b0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <ADC_To_adx+0x1b0>)
 80016e4:	6013      	str	r3, [r2, #0]

}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	200003c4 	.word	0x200003c4
 80016f4:	200003c8 	.word	0x200003c8
 80016f8:	200003cc 	.word	0x200003cc
 80016fc:	200003d0 	.word	0x200003d0
 8001700:	200003d4 	.word	0x200003d4
 8001704:	200003d8 	.word	0x200003d8
 8001708:	200003dc 	.word	0x200003dc
 800170c:	200003e0 	.word	0x200003e0
 8001710:	200003e4 	.word	0x200003e4
 8001714:	200003a4 	.word	0x200003a4

08001718 <ADC_ad5_avg_Get>:
const float ADC5_AVG_Weight = 50e-5;//=1/2000
float ad5_sum=0;
int ad5_avg=0;
int time=0;
int ad5_avg_flag=0;
void ADC_ad5_avg_Get(){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	if(ad5_avg_flag==0){
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <ADC_ad5_avg_Get+0x7c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d132      	bne.n	800178a <ADC_ad5_avg_Get+0x72>
		time++;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <ADC_ad5_avg_Get+0x80>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <ADC_ad5_avg_Get+0x80>)
 800172c:	6013      	str	r3, [r2, #0]
		ad5_sum+=(ad5-ad6)*ADC5_AVG_Weight;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <ADC_ad5_avg_Get+0x84>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <ADC_ad5_avg_Get+0x88>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017a4 <ADC_ad5_avg_Get+0x8c>
 8001744:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <ADC_ad5_avg_Get+0x90>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <ADC_ad5_avg_Get+0x90>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		if(time>=ADC5_AVG_NUM){
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <ADC_ad5_avg_Get+0x80>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001760:	4293      	cmp	r3, r2
 8001762:	db12      	blt.n	800178a <ADC_ad5_avg_Get+0x72>
			ad5_avg_flag=1;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <ADC_ad5_avg_Get+0x7c>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
			ad5_avg=ad5_sum;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <ADC_ad5_avg_Get+0x90>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 2a90 	vmov	r2, s15
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <ADC_ad5_avg_Get+0x94>)
 800177a:	601a      	str	r2, [r3, #0]
			time=0;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <ADC_ad5_avg_Get+0x80>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
			ad5_sum=0;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <ADC_ad5_avg_Get+0x90>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		}
	}
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	200003fc 	.word	0x200003fc
 8001798:	200003f8 	.word	0x200003f8
 800179c:	200003d8 	.word	0x200003d8
 80017a0:	200003dc 	.word	0x200003dc
 80017a4:	3a03126f 	.word	0x3a03126f
 80017a8:	200003f0 	.word	0x200003f0
 80017ac:	200003f4 	.word	0x200003f4

080017b0 <ADC_Real_Value_Get>:
void ADC_Real_Value_Get(){
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	//	Us ad1-ad2 10kHz滤波器滤�??
	//	Us=0.8f*Us+0.2f*(ad1-ad2)/4096.0f*3.3f*18.292f*修正
		U1=0.8f*U1+0.2f*(ad1-ad2)*0.015032f;
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <ADC_Real_Value_Get+0xcc>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001880 <ADC_Real_Value_Get+0xd0>
 80017be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <ADC_Real_Value_Get+0xd4>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b30      	ldr	r3, [pc, #192]	; (8001888 <ADC_Real_Value_Get+0xd8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800188c <ADC_Real_Value_Get+0xdc>
 80017d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017dc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001890 <ADC_Real_Value_Get+0xe0>
 80017e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <ADC_Real_Value_Get+0xcc>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
//		Is=0.8f*Is+0.2f*(ad3-ad4)*0.001614f;


	//	IoIV ad5-ad6 10kHz滤波 注意是负的！！！这个地方的符号要细致的看
	//	IoIV=0.8f*Is+0.2f*((ad5-ad6)/4096.0f*3.3f)*3.7037f*1.26;
		I1=0.8f*I1+0.2f*(ad5-ad6-ad5_avg)*-0.00343f;
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <ADC_Real_Value_Get+0xe4>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001880 <ADC_Real_Value_Get+0xd0>
 80017f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <ADC_Real_Value_Get+0xe8>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <ADC_Real_Value_Get+0xec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1ad2      	subs	r2, r2, r3
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <ADC_Real_Value_Get+0xf0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800188c <ADC_Real_Value_Get+0xdc>
 8001818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800181c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80018a4 <ADC_Real_Value_Get+0xf4>
 8001820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <ADC_Real_Value_Get+0xe4>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
	//	Udc ad7-ad8
		//对母线直流电压用4kHz的低通滤波器进行滤波，对�????50Hz幅�?�差0.9999，角�????1°不到，应该可用，如果不行就用8kHz
	//	Udc=0.95f*Udc+0.05f*(ad4-ad5)/4096.0f*3.3f*26.49989f;
		Udc=0.95f*Udc+0.05f*(ad7-ad8)*0.021350f-0.01f;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <ADC_Real_Value_Get+0xf8>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80018ac <ADC_Real_Value_Get+0xfc>
 8001838:	ee27 7a87 	vmul.f32	s14, s15, s14
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <ADC_Real_Value_Get+0x100>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <ADC_Real_Value_Get+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80018b8 <ADC_Real_Value_Get+0x108>
 8001852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001856:	eddf 6a19 	vldr	s13, [pc, #100]	; 80018bc <ADC_Real_Value_Get+0x10c>
 800185a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018c0 <ADC_Real_Value_Get+0x110>
 8001866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <ADC_Real_Value_Get+0xf8>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000404 	.word	0x20000404
 8001880:	3f4ccccd 	.word	0x3f4ccccd
 8001884:	200003c8 	.word	0x200003c8
 8001888:	200003cc 	.word	0x200003cc
 800188c:	3e4ccccd 	.word	0x3e4ccccd
 8001890:	3c7648c7 	.word	0x3c7648c7
 8001894:	2000040c 	.word	0x2000040c
 8001898:	200003d8 	.word	0x200003d8
 800189c:	200003dc 	.word	0x200003dc
 80018a0:	200003f4 	.word	0x200003f4
 80018a4:	bb60c9da 	.word	0xbb60c9da
 80018a8:	20000408 	.word	0x20000408
 80018ac:	3f733333 	.word	0x3f733333
 80018b0:	200003e0 	.word	0x200003e0
 80018b4:	200003e4 	.word	0x200003e4
 80018b8:	3d4ccccd 	.word	0x3d4ccccd
 80018bc:	3caee632 	.word	0x3caee632
 80018c0:	3c23d70a 	.word	0x3c23d70a

080018c4 <ADC_Queue_Save>:
void ADC_Queue_Save(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	enQueue(&U1_queue,U1);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <ADC_Queue_Save+0x30>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d2:	ee17 1a90 	vmov	r1, s15
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <ADC_Queue_Save+0x34>)
 80018d8:	f000 ff92 	bl	8002800 <enQueue>
//	enQueue(&Is_queue,Is);
	enQueue(&I1_queue,I1);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <ADC_Queue_Save+0x38>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e6:	ee17 1a90 	vmov	r1, s15
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <ADC_Queue_Save+0x3c>)
 80018ec:	f000 ff88 	bl	8002800 <enQueue>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000404 	.word	0x20000404
 80018f8:	20000410 	.word	0x20000410
 80018fc:	2000040c 	.word	0x2000040c
 8001900:	200013b8 	.word	0x200013b8

08001904 <ADC_Sine_Calculate>:
void ADC_Sine_Calculate(){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	//进行正弦运算 注意角度是弧度制 1.8us

	sin_thetas=arm_sin_f32(thetas);
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <ADC_Sine_Calculate+0x38>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	f006 fd95 	bl	8008440 <arm_sin_f32>
 8001916:	eef0 7a40 	vmov.f32	s15, s0
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <ADC_Sine_Calculate+0x3c>)
 800191c:	edc3 7a00 	vstr	s15, [r3]
	cos_thetas=arm_cos_f32(thetas);
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <ADC_Sine_Calculate+0x38>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	f006 fdcf 	bl	80084cc <arm_cos_f32>
 800192e:	eef0 7a40 	vmov.f32	s15, s0
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <ADC_Sine_Calculate+0x40>)
 8001934:	edc3 7a00 	vstr	s15, [r3]
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200023bc 	.word	0x200023bc
 8001940:	20002378 	.word	0x20002378
 8001944:	2000237c 	.word	0x2000237c

08001948 <ADC_Park_Transform>:
void ADC_Park_Transform(){
 8001948:	b480      	push	{r7}
 800194a:	b08d      	sub	sp, #52	; 0x34
 800194c:	af00      	add	r7, sp, #0
	//对输入电压�?�输入电流�?�Io电流进行Park运算，这�??100后续要变 1us

	arm_park_f32(U1,U1_queue.data[(U1_queue.rear-100+maxsize)%maxsize],
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <ADC_Park_Transform+0x140>)
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	4b4e      	ldr	r3, [pc, #312]	; (8001a8c <ADC_Park_Transform+0x144>)
 8001954:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8001958:	f503 7261 	add.w	r2, r3, #900	; 0x384
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <ADC_Park_Transform+0x148>)
 800195e:	fb83 0302 	smull	r0, r3, r3, r2
 8001962:	1198      	asrs	r0, r3, #6
 8001964:	17d3      	asrs	r3, r2, #31
 8001966:	1ac3      	subs	r3, r0, r3
 8001968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196c:	fb00 f303 	mul.w	r3, r0, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <ADC_Park_Transform+0x144>)
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <ADC_Park_Transform+0x14c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <ADC_Park_Transform+0x150>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6179      	str	r1, [r7, #20]
 800198a:	edc7 7a04 	vstr	s15, [r7, #16]
 800198e:	4943      	ldr	r1, [pc, #268]	; (8001a9c <ADC_Park_Transform+0x154>)
 8001990:	60f9      	str	r1, [r7, #12]
 8001992:	4943      	ldr	r1, [pc, #268]	; (8001aa0 <ADC_Park_Transform+0x158>)
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800199a:	ed97 7a05 	vldr	s14, [r7, #20]
 800199e:	edd7 7a00 	vldr	s15, [r7]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 6a04 	vldr	s13, [r7, #16]
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	eeb1 7a67 	vneg.f32	s14, s15
 80019c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019cc:	edd7 6a04 	vldr	s13, [r7, #16]
 80019d0:	edd7 7a00 	vldr	s15, [r7]
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	edc3 7a00 	vstr	s15, [r3]
  }
 80019e2:	bf00      	nop

	//Isd、Isq过滤波器



	arm_park_f32(I1,I1_queue.data[(I1_queue.rear-100+maxsize)%maxsize],
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <ADC_Park_Transform+0x15c>)
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <ADC_Park_Transform+0x160>)
 80019ea:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 80019ee:	f503 7261 	add.w	r2, r3, #900	; 0x384
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <ADC_Park_Transform+0x148>)
 80019f4:	fb83 0302 	smull	r0, r3, r3, r2
 80019f8:	1198      	asrs	r0, r3, #6
 80019fa:	17d3      	asrs	r3, r2, #31
 80019fc:	1ac3      	subs	r3, r0, r3
 80019fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a02:	fb00 f303 	mul.w	r3, r0, r3
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <ADC_Park_Transform+0x160>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <ADC_Park_Transform+0x14c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <ADC_Park_Transform+0x150>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001a24:	4921      	ldr	r1, [pc, #132]	; (8001aac <ADC_Park_Transform+0x164>)
 8001a26:	6279      	str	r1, [r7, #36]	; 0x24
 8001a28:	4921      	ldr	r1, [pc, #132]	; (8001ab0 <ADC_Park_Transform+0x168>)
 8001a2a:	6239      	str	r1, [r7, #32]
 8001a2c:	61fa      	str	r2, [r7, #28]
 8001a2e:	61bb      	str	r3, [r7, #24]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001a30:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001a40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001a52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a56:	eeb1 7a67 	vneg.f32	s14, s15
 8001a5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001a66:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	edc3 7a00 	vstr	s15, [r3]
  }
 8001a78:	bf00      	nop
			&I1d,&I1q,sin_thetas,cos_thetas);
}
 8001a7a:	bf00      	nop
 8001a7c:	3734      	adds	r7, #52	; 0x34
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000404 	.word	0x20000404
 8001a8c:	20000410 	.word	0x20000410
 8001a90:	10624dd3 	.word	0x10624dd3
 8001a94:	20002378 	.word	0x20002378
 8001a98:	2000237c 	.word	0x2000237c
 8001a9c:	20002368 	.word	0x20002368
 8001aa0:	2000236c 	.word	0x2000236c
 8001aa4:	2000040c 	.word	0x2000040c
 8001aa8:	200013b8 	.word	0x200013b8
 8001aac:	20002370 	.word	0x20002370
 8001ab0:	20002374 	.word	0x20002374

08001ab4 <ADC_Paremeters_Calc>:

void ADC_Paremeters_Calc(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	U1rms_screen=0.999f*U1rms_screen+0.001f*U1d*0.7071f;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <ADC_Paremeters_Calc+0xf4>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001bac <ADC_Paremeters_Calc+0xf8>
 8001ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <ADC_Paremeters_Calc+0xfc>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001bb4 <ADC_Paremeters_Calc+0x100>
 8001ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ad6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001bb8 <ADC_Paremeters_Calc+0x104>
 8001ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <ADC_Paremeters_Calc+0xf4>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
	I1d_screen=0.999f*I1d_screen+0.001f*I1d;
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <ADC_Paremeters_Calc+0x108>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001bac <ADC_Paremeters_Calc+0xf8>
 8001af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af6:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <ADC_Paremeters_Calc+0x10c>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001bb4 <ADC_Paremeters_Calc+0x100>
 8001b00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <ADC_Paremeters_Calc+0x108>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
	I1q_screen=0.999f*I1q_screen+0.001f*I1q;
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <ADC_Paremeters_Calc+0x110>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001bac <ADC_Paremeters_Calc+0xf8>
 8001b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <ADC_Paremeters_Calc+0x114>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001bb4 <ADC_Paremeters_Calc+0x100>
 8001b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <ADC_Paremeters_Calc+0x110>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32(I1d_screen*I1d_screen+I1q_screen*I1q_screen,&I1rms_screen);
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <ADC_Paremeters_Calc+0x108>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <ADC_Paremeters_Calc+0x108>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <ADC_Paremeters_Calc+0x110>)
 8001b46:	edd3 6a00 	vldr	s13, [r3]
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <ADC_Paremeters_Calc+0x110>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <ADC_Paremeters_Calc+0x118>)
 8001b5e:	603b      	str	r3, [r7, #0]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	db09      	blt.n	8001b82 <ADC_Paremeters_Calc+0xce>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001b6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b72:	f00b fa23 	bl	800cfbc <sqrtf>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001b80:	e004      	b.n	8001b8c <ADC_Paremeters_Calc+0xd8>
    }
    else
    {
      *pOut = 0.0f;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001b8a:	bf00      	nop
//	PF=I1d_screen/I1rms;
	I1rms_screen=I1rms_screen*0.7071f;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <ADC_Paremeters_Calc+0x118>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001bb8 <ADC_Paremeters_Calc+0x104>
 8001b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <ADC_Paremeters_Calc+0x118>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
//	I1rms_screen=I1rms_screen*0.7071f*0.8931f+0.2386f;
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20002360 	.word	0x20002360
 8001bac:	3f7fbe77 	.word	0x3f7fbe77
 8001bb0:	20002368 	.word	0x20002368
 8001bb4:	3a83126f 	.word	0x3a83126f
 8001bb8:	3f350481 	.word	0x3f350481
 8001bbc:	200003e8 	.word	0x200003e8
 8001bc0:	20002370 	.word	0x20002370
 8001bc4:	200003ec 	.word	0x200003ec
 8001bc8:	20002374 	.word	0x20002374
 8001bcc:	20002364 	.word	0x20002364

08001bd0 <Clock_Timer>:
 *      Author: EVA
 */
#include "main.h"

int time_Tim1=0;
void Clock_Timer(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	time_Tim1++;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <Clock_Timer+0x50>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <Clock_Timer+0x50>)
 8001bdc:	6013      	str	r3, [r2, #0]
	if(time_Tim1>Control_Frequency){
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <Clock_Timer+0x50>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001be6:	4293      	cmp	r3, r2
 8001be8:	dd12      	ble.n	8001c10 <Clock_Timer+0x40>
		time_Tim1-=Control_Frequency;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Clock_Timer+0x50>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc98 	bl	8000524 <__aeabi_i2d>
 8001bf4:	a308      	add	r3, pc, #32	; (adr r3, 8001c18 <Clock_Timer+0x48>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fb45 	bl	8000288 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ffa7 	bl	8000b58 <__aeabi_d2iz>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <Clock_Timer+0x50>)
 8001c0e:	6013      	str	r3, [r2, #0]
	}
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40d38800 	.word	0x40d38800
 8001c20:	20000400 	.word	0x20000400

08001c24 <PWM_Output>:
 *  Created on: Jul 25, 2022
 *      Author: EVA
 */
#include "main.h"

void PWM_Output(){
 8001c24:	b480      	push	{r7}
 8001c26:	b08d      	sub	sp, #52	; 0x34
 8001c28:	af00      	add	r7, sp, #0
	//    	开环测试
//	    	DdR=0.5,DqR=0;
//	DdI=0.5;DqI=0;
	//占空比Park逆变换
	arm_inv_park_f32(DdR,DqR,&DalphaR,&DbetaR,sin_thetas,cos_thetas);
 8001c2a:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <PWM_Output+0x1b8>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <PWM_Output+0x1bc>)
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <PWM_Output+0x1c0>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <PWM_Output+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6178      	str	r0, [r7, #20]
 8001c3c:	6139      	str	r1, [r7, #16]
 8001c3e:	496b      	ldr	r1, [pc, #428]	; (8001dec <PWM_Output+0x1c8>)
 8001c40:	60f9      	str	r1, [r7, #12]
 8001c42:	496b      	ldr	r1, [pc, #428]	; (8001df0 <PWM_Output+0x1cc>)
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4e:	edd7 7a00 	vldr	s15, [r7]
 8001c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c56:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001c6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c78:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c7c:	edd7 7a00 	vldr	s15, [r7]
 8001c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
  }
 8001c8e:	bf00      	nop
	//单极性倍频输出
	D1R=(1+DalphaR)*0.5f;
 8001c90:	4b56      	ldr	r3, [pc, #344]	; (8001dec <PWM_Output+0x1c8>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <PWM_Output+0x1d0>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
	D2R=(1-DalphaR)*0.5f;
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <PWM_Output+0x1c8>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <PWM_Output+0x1d4>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
	TIM1->CCR1=Tim1_ARR*D1R;
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <PWM_Output+0x1d0>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001dfc <PWM_Output+0x1d8>
 8001cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <PWM_Output+0x1dc>)
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 2a90 	vmov	r2, s15
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=Tim1_ARR*D2R;
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <PWM_Output+0x1d4>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001dfc <PWM_Output+0x1d8>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <PWM_Output+0x1dc>)
 8001cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf6:	ee17 2a90 	vmov	r2, s15
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
	//占空比Park逆变换
	arm_inv_park_f32(DdI,DqI,&DalphaI,&DbetaI,sin_thetas,cos_thetas);
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <PWM_Output+0x1e0>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <PWM_Output+0x1e4>)
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <PWM_Output+0x1c0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <PWM_Output+0x1c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d10:	493e      	ldr	r1, [pc, #248]	; (8001e0c <PWM_Output+0x1e8>)
 8001d12:	6279      	str	r1, [r7, #36]	; 0x24
 8001d14:	493e      	ldr	r1, [pc, #248]	; (8001e10 <PWM_Output+0x1ec>)
 8001d16:	6239      	str	r1, [r7, #32]
 8001d18:	61fa      	str	r2, [r7, #28]
 8001d1a:	61bb      	str	r3, [r7, #24]
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001d1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001d3e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d42:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
  }
 8001d60:	bf00      	nop
	//单极性倍频输出
	D3I=(1+DalphaI)*0.5f;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <PWM_Output+0x1e8>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <PWM_Output+0x1f0>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
	D4I=(1-DalphaI)*0.5f;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <PWM_Output+0x1e8>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <PWM_Output+0x1f4>)
 8001d96:	edc3 7a00 	vstr	s15, [r3]
	TIM8->CCR1=Tim8_ARR*D3I;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <PWM_Output+0x1f0>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001e1c <PWM_Output+0x1f8>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <PWM_Output+0x1fc>)
 8001daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dae:	ee17 2a90 	vmov	r2, s15
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR2=Tim8_ARR*D4I;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <PWM_Output+0x1f4>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001e1c <PWM_Output+0x1f8>
 8001dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <PWM_Output+0x1fc>)
 8001dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dce:	bf00      	nop
 8001dd0:	3734      	adds	r7, #52	; 0x34
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20002388 	.word	0x20002388
 8001de0:	2000238c 	.word	0x2000238c
 8001de4:	20002378 	.word	0x20002378
 8001de8:	2000237c 	.word	0x2000237c
 8001dec:	20002390 	.word	0x20002390
 8001df0:	20002394 	.word	0x20002394
 8001df4:	20002398 	.word	0x20002398
 8001df8:	2000239c 	.word	0x2000239c
 8001dfc:	43c80000 	.word	0x43c80000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	200023a0 	.word	0x200023a0
 8001e08:	200023a4 	.word	0x200023a4
 8001e0c:	200023a8 	.word	0x200023a8
 8001e10:	200023ac 	.word	0x200023ac
 8001e14:	200023b0 	.word	0x200023b0
 8001e18:	200023b4 	.word	0x200023b4
 8001e1c:	44480000 	.word	0x44480000
 8001e20:	40010400 	.word	0x40010400

08001e24 <Key_Clock>:
 *  Created on: Jul 25, 2022
 *      Author: EVA
 */
#include "main.h"

void Key_Clock(){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	if(time_Tim1%(4000)==0){
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <Key_Clock+0x2c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <Key_Clock+0x30>)
 8001e2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e32:	1219      	asrs	r1, r3, #8
 8001e34:	17d3      	asrs	r3, r2, #31
 8001e36:	1acb      	subs	r3, r1, r3
 8001e38:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <Key_Clock+0x26>
		Key_Detect();
 8001e46:	f000 f807 	bl	8001e58 <Key_Detect>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000400 	.word	0x20000400
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <Key_Detect>:
 * PD1 K2Left 一键归为额定工况
 * PD0 K2Right
 * */
extern int flag_power_start;
extern int flag_screen_dark;
void Key_Detect(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	488c      	ldr	r0, [pc, #560]	; (8002090 <Key_Detect+0x238>)
 8001e60:	f003 fbd6 	bl	8005610 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <Key_Detect+0x26>
		PF_set+=0.01f;
 8001e6a:	4b8a      	ldr	r3, [pc, #552]	; (8002094 <Key_Detect+0x23c>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002098 <Key_Detect+0x240>
 8001e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e78:	4b86      	ldr	r3, [pc, #536]	; (8002094 <Key_Detect+0x23c>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4883      	ldr	r0, [pc, #524]	; (8002090 <Key_Detect+0x238>)
 8001e82:	f003 fbc5 	bl	8005610 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <Key_Detect+0x48>
		PF_set-=0.01f;
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <Key_Detect+0x23c>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002098 <Key_Detect+0x240>
 8001e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e9a:	4b7e      	ldr	r3, [pc, #504]	; (8002094 <Key_Detect+0x23c>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)== GPIO_PIN_RESET){
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	487b      	ldr	r0, [pc, #492]	; (8002090 <Key_Detect+0x238>)
 8001ea4:	f003 fbb4 	bl	8005610 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <Key_Detect+0x62>
		choose_inductance_capacity=1;
 8001eae:	4b7b      	ldr	r3, [pc, #492]	; (800209c <Key_Detect+0x244>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
		flag_fresh_screen=1;
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <Key_Detect+0x248>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_4)== GPIO_PIN_RESET){
 8001eba:	2110      	movs	r1, #16
 8001ebc:	4874      	ldr	r0, [pc, #464]	; (8002090 <Key_Detect+0x238>)
 8001ebe:	f003 fba7 	bl	8005610 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <Key_Detect+0x7e>
		choose_inductance_capacity=-1;
 8001ec8:	4b74      	ldr	r3, [pc, #464]	; (800209c <Key_Detect+0x244>)
 8001eca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ece:	601a      	str	r2, [r3, #0]
		flag_fresh_screen=1;
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <Key_Detect+0x248>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
	}
	if(Mode==2){
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <Key_Detect+0x24c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d123      	bne.n	8001f26 <Key_Detect+0xce>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001ede:	2108      	movs	r1, #8
 8001ee0:	4871      	ldr	r0, [pc, #452]	; (80020a8 <Key_Detect+0x250>)
 8001ee2:	f003 fb95 	bl	8005610 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <Key_Detect+0xa8>
			Rin_set+=0.5;
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <Key_Detect+0x254>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001efa:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <Key_Detect+0x254>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]
		}
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001f00:	2104      	movs	r1, #4
 8001f02:	4869      	ldr	r0, [pc, #420]	; (80020a8 <Key_Detect+0x250>)
 8001f04:	f003 fb84 	bl	8005610 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 808d 	bne.w	800202a <Key_Detect+0x1d2>
			Rin_set-=0.5;
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <Key_Detect+0x254>)
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <Key_Detect+0x254>)
 8001f20:	edc3 7a00 	vstr	s15, [r3]
 8001f24:	e081      	b.n	800202a <Key_Detect+0x1d2>
		}
	}else if(Mode==3){
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <Key_Detect+0x24c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d122      	bne.n	8001f74 <Key_Detect+0x11c>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001f2e:	2108      	movs	r1, #8
 8001f30:	485d      	ldr	r0, [pc, #372]	; (80020a8 <Key_Detect+0x250>)
 8001f32:	f003 fb6d 	bl	8005610 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <Key_Detect+0xf8>
			Power_set+=0.5;
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <Key_Detect+0x258>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4a:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <Key_Detect+0x258>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
		}
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001f50:	2104      	movs	r1, #4
 8001f52:	4855      	ldr	r0, [pc, #340]	; (80020a8 <Key_Detect+0x250>)
 8001f54:	f003 fb5c 	bl	8005610 <HAL_GPIO_ReadPin>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d165      	bne.n	800202a <Key_Detect+0x1d2>
			Power_set-=0.5;
 8001f5e:	4b54      	ldr	r3, [pc, #336]	; (80020b0 <Key_Detect+0x258>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <Key_Detect+0x258>)
 8001f6e:	edc3 7a00 	vstr	s15, [r3]
 8001f72:	e05a      	b.n	800202a <Key_Detect+0x1d2>
		}
	}else if(Mode==4){
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <Key_Detect+0x24c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d122      	bne.n	8001fc2 <Key_Detect+0x16a>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	484a      	ldr	r0, [pc, #296]	; (80020a8 <Key_Detect+0x250>)
 8001f80:	f003 fb46 	bl	8005610 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <Key_Detect+0x146>
			Spower_set+=0.5;
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <Key_Detect+0x25c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <Key_Detect+0x25c>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
		}
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	4841      	ldr	r0, [pc, #260]	; (80020a8 <Key_Detect+0x250>)
 8001fa2:	f003 fb35 	bl	8005610 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d13e      	bne.n	800202a <Key_Detect+0x1d2>
			Spower_set-=0.5;
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <Key_Detect+0x25c>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <Key_Detect+0x25c>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
 8001fc0:	e033      	b.n	800202a <Key_Detect+0x1d2>
		}
	}else{
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3)== GPIO_PIN_RESET){
 8001fc2:	2108      	movs	r1, #8
 8001fc4:	4838      	ldr	r0, [pc, #224]	; (80020a8 <Key_Detect+0x250>)
 8001fc6:	f003 fb23 	bl	8005610 <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d112      	bne.n	8001ff6 <Key_Detect+0x19e>
			I1rms_set+=0.1;
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <Key_Detect+0x260>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fab7 	bl	8000548 <__aeabi_f2d>
 8001fda:	a32b      	add	r3, pc, #172	; (adr r3, 8002088 <Key_Detect+0x230>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe f954 	bl	800028c <__adddf3>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fdfc 	bl	8000be8 <__aeabi_d2f>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <Key_Detect+0x260>)
 8001ff4:	6013      	str	r3, [r2, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)== GPIO_PIN_RESET){
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	482b      	ldr	r0, [pc, #172]	; (80020a8 <Key_Detect+0x250>)
 8001ffa:	f003 fb09 	bl	8005610 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d112      	bne.n	800202a <Key_Detect+0x1d2>
			I1rms_set-=0.1;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <Key_Detect+0x260>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa9d 	bl	8000548 <__aeabi_f2d>
 800200e:	a31e      	add	r3, pc, #120	; (adr r3, 8002088 <Key_Detect+0x230>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f938 	bl	8000288 <__aeabi_dsub>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fde2 	bl	8000be8 <__aeabi_d2f>
 8002024:	4603      	mov	r3, r0
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <Key_Detect+0x260>)
 8002028:	6013      	str	r3, [r2, #0]
		}
	}

	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1)== GPIO_PIN_RESET){
 800202a:	2102      	movs	r1, #2
 800202c:	481e      	ldr	r0, [pc, #120]	; (80020a8 <Key_Detect+0x250>)
 800202e:	f003 faef 	bl	8005610 <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <Key_Detect+0x1f6>
		I1rms_set=2.0;PF_set=1;Mode=1;
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <Key_Detect+0x260>)
 800203a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <Key_Detect+0x23c>)
 8002042:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <Key_Detect+0x24c>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)== GPIO_PIN_RESET){
 800204e:	2101      	movs	r1, #1
 8002050:	4815      	ldr	r0, [pc, #84]	; (80020a8 <Key_Detect+0x250>)
 8002052:	f003 fadd 	bl	8005610 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <Key_Detect+0x210>
		flag_screen_dark=1-flag_screen_dark;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <Key_Detect+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1c3 0301 	rsb	r3, r3, #1
 8002064:	4a15      	ldr	r2, [pc, #84]	; (80020bc <Key_Detect+0x264>)
 8002066:	6013      	str	r3, [r2, #0]
	}
	flag_power_start=1-HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	4814      	ldr	r0, [pc, #80]	; (80020c0 <Key_Detect+0x268>)
 800206e:	f003 facf 	bl	8005610 <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	f1c3 0301 	rsb	r3, r3, #1
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <Key_Detect+0x26c>)
 800207a:	6013      	str	r3, [r2, #0]

	Mode_Detect();
 800207c:	f000 f824 	bl	80020c8 <Mode_Detect>
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	9999999a 	.word	0x9999999a
 800208c:	3fb99999 	.word	0x3fb99999
 8002090:	40021000 	.word	0x40021000
 8002094:	20000010 	.word	0x20000010
 8002098:	3c23d70a 	.word	0x3c23d70a
 800209c:	20000024 	.word	0x20000024
 80020a0:	2000001c 	.word	0x2000001c
 80020a4:	2000002c 	.word	0x2000002c
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	20000034 	.word	0x20000034
 80020b0:	20000038 	.word	0x20000038
 80020b4:	2000003c 	.word	0x2000003c
 80020b8:	20000030 	.word	0x20000030
 80020bc:	20000020 	.word	0x20000020
 80020c0:	40020000 	.word	0x40020000
 80020c4:	20002400 	.word	0x20002400

080020c8 <Mode_Detect>:

//Mode 为1或其他 则是CC，Mode为2，CR，为3，CP,为4，则为CS
extern int Mode;
void Mode_Detect(){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)== GPIO_PIN_RESET){
 80020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d0:	4812      	ldr	r0, [pc, #72]	; (800211c <Mode_Detect+0x54>)
 80020d2:	f003 fa9d 	bl	8005610 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10e      	bne.n	80020fa <Mode_Detect+0x32>
		Mode=2;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <Mode_Detect+0x58>)
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)== GPIO_PIN_RESET){
 80020e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <Mode_Detect+0x54>)
 80020e8:	f003 fa92 	bl	8005610 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d112      	bne.n	8002118 <Mode_Detect+0x50>
			Mode=4;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <Mode_Detect+0x58>)
 80020f4:	2204      	movs	r2, #4
 80020f6:	601a      	str	r2, [r3, #0]
		}
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)== GPIO_PIN_RESET){
		Mode=3;
	}else Mode=1;
}
 80020f8:	e00e      	b.n	8002118 <Mode_Detect+0x50>
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)== GPIO_PIN_RESET){
 80020fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <Mode_Detect+0x54>)
 8002100:	f003 fa86 	bl	8005610 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <Mode_Detect+0x4a>
		Mode=3;
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <Mode_Detect+0x58>)
 800210c:	2203      	movs	r2, #3
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	e002      	b.n	8002118 <Mode_Detect+0x50>
	}else Mode=1;
 8002112:	4b03      	ldr	r3, [pc, #12]	; (8002120 <Mode_Detect+0x58>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020400 	.word	0x40020400
 8002120:	2000002c 	.word	0x2000002c

08002124 <PID_Limit>:
#include <eva_pid.h>
#include "main.h"


void PID_Limit(pid_p *pid)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	if(pid->result > pid->max_output)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	dd14      	ble.n	800216c <PID_Limit+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002148:	481a      	ldr	r0, [pc, #104]	; (80021b4 <PID_Limit+0x90>)
 800214a:	f003 fa79 	bl	8005640 <HAL_GPIO_WritePin>
		pid->integral=pid->max_output_integral;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	621a      	str	r2, [r3, #32]
		pid->result =pid->max_output;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <PID_Limit+0x90>)
 8002166:	f003 fa6b 	bl	8005640 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
		pid->integral=pid->min_out_integral;
		pid->result=pid->min_output;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
	}
}
 800216a:	e01f      	b.n	80021ac <PID_Limit+0x88>
	else if(pid->result < pid->min_output){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002180:	d400      	bmi.n	8002184 <PID_Limit+0x60>
}
 8002182:	e013      	b.n	80021ac <PID_Limit+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218a:	480a      	ldr	r0, [pc, #40]	; (80021b4 <PID_Limit+0x90>)
 800218c:	f003 fa58 	bl	8005640 <HAL_GPIO_WritePin>
		pid->integral=pid->min_out_integral;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	621a      	str	r2, [r3, #32]
		pid->result=pid->min_output;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	61da      	str	r2, [r3, #28]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <PID_Limit+0x90>)
 80021a8:	f003 fa4a 	bl	8005640 <HAL_GPIO_WritePin>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40020800 	.word	0x40020800

080021b8 <PID_init>:

void PID_init(pid_p *pid,float kp,float ki, float kd,float max_output,float min_output, float initial_result,float Ts)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	61f8      	str	r0, [r7, #28]
 80021c0:	ed87 0a06 	vstr	s0, [r7, #24]
 80021c4:	edc7 0a05 	vstr	s1, [r7, #20]
 80021c8:	ed87 1a04 	vstr	s2, [r7, #16]
 80021cc:	edc7 1a03 	vstr	s3, [r7, #12]
 80021d0:	ed87 2a02 	vstr	s4, [r7, #8]
 80021d4:	edc7 2a01 	vstr	s5, [r7, #4]
 80021d8:	ed87 3a00 	vstr	s6, [r7]
    //printf("PID_init begin \n");
    pid->REF= 0.0f;		  	// ????????
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    pid->ACTUAL= 0.0f;			// adc?????
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
    pid->err= 0.0f;				    // ???????????
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    pid->err_last=0.0f;			    // ??????
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    pid->integral= 0.0f;			  	// ???
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
    pid->Kp= kp;				    // ????
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	611a      	str	r2, [r3, #16]
    pid->Ki= ki*Ts;				    // ????
 800220a:	ed97 7a05 	vldr	s14, [r7, #20]
 800220e:	edd7 7a00 	vldr	s15, [r7]
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	edc3 7a05 	vstr	s15, [r3, #20]
    pid->Kd= kd;				    // ????
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	619a      	str	r2, [r3, #24]
    pid->result=0;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
    //printf("PID_init end \n");
    pid->max_output=max_output;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24
    pid->min_output=min_output;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	629a      	str	r2, [r3, #40]	; 0x28
    pid->max_output_integral=pid->max_output/pid->Ki;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pid->min_out_integral=pid->min_output/pid->Ki;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	ed93 7a05 	vldr	s14, [r3, #20]
 8002258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pid->integral=initial_result/ki;
 8002262:	edd7 6a01 	vldr	s13, [r7, #4]
 8002266:	ed97 7a05 	vldr	s14, [r7, #20]
 800226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	ed93 7a04 	vldr	s14, [r3, #16]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	edd3 6a05 	vldr	s13, [r3, #20]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	edd3 6a06 	vldr	s13, [r3, #24]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	ed93 6a02 	vldr	s12, [r3, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	edc3 7a07 	vstr	s15, [r3, #28]
    PID_Limit(pid);
 80022bc:	69f8      	ldr	r0, [r7, #28]
 80022be:	f7ff ff31 	bl	8002124 <PID_Limit>
}
 80022c2:	bf00      	nop
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <PID_realize>:

float PID_realize(pid_p *pid, float vref, float v_now)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80022d6:	edc7 0a01 	vstr	s1, [r7, #4]

    pid->REF = vref;			// ???????
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	601a      	str	r2, [r3, #0]
    pid->ACTUAL = v_now;	// ?????? = ADC_Value * 3.3f/ 4096
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]
    pid->err =   pid->REF - pid->ACTUAL;	//????
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	ed93 7a00 	vldr	s14, [r3]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	edc3 7a02 	vstr	s15, [r3, #8]
    pid->result = pid->Kp * pid->err + pid->Ki * pid->integral + pid->Kd * ( pid->err - pid->err_last);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edd3 7a02 	vldr	s15, [r3, #8]
 8002308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 7a08 	vldr	s15, [r3, #32]
 8002318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	edd3 6a06 	vldr	s13, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	ed93 6a02 	vldr	s12, [r3, #8]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002332:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edc3 7a07 	vstr	s15, [r3, #28]
    pid->integral += pid->err;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	ed93 7a08 	vldr	s14, [r3, #32]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->err_last = pid->err;				//???????
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	60da      	str	r2, [r3, #12]
    PID_Limit(pid);
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fede 	bl	8002124 <PID_Limit>
    return pid->result;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	ee07 3a90 	vmov	s15, r3
}
 8002370:	eeb0 0a67 	vmov.f32	s0, s15
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	0000      	movs	r0, r0
 800237c:	0000      	movs	r0, r0
	...

08002380 <PLL_Realize>:
int flag_PLL=0;
int flag_Start_Running=0;



void PLL_Realize(){
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	ed2d 8b02 	vpush	{d8}
 8002386:	af00      	add	r7, sp, #0
	//    	PLL锁相，先得角速度再积分，角度大于2pi则减
	//    	ws加一个滤波器，滤出高频分量，用2kHz滤波器 4us
	    	ws=0.9f*ws+0.1f*PID_realize(&PLL,0,-U1q);
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <PLL_Realize+0xc8>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800244c <PLL_Realize+0xcc>
 8002392:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <PLL_Realize+0xd0>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eef1 7a67 	vneg.f32	s15, s15
 80023a0:	eef0 0a67 	vmov.f32	s1, s15
 80023a4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8002454 <PLL_Realize+0xd4>
 80023a8:	482b      	ldr	r0, [pc, #172]	; (8002458 <PLL_Realize+0xd8>)
 80023aa:	f7ff ff8e 	bl	80022ca <PID_realize>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800245c <PLL_Realize+0xdc>
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <PLL_Realize+0xc8>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
	    	thetas+=ws*Control_Time;
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <PLL_Realize+0xe0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8bd 	bl	8000548 <__aeabi_f2d>
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <PLL_Realize+0xc8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f8b6 	bl	8000548 <__aeabi_f2d>
 80023dc:	a318      	add	r3, pc, #96	; (adr r3, 8002440 <PLL_Realize+0xc0>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe f909 	bl	80005f8 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4620      	mov	r0, r4
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7fd ff4d 	bl	800028c <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbf5 	bl	8000be8 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <PLL_Realize+0xe0>)
 8002402:	6013      	str	r3, [r2, #0]
	    	if(thetas>=2*PI){thetas-=2*PI;}
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <PLL_Realize+0xe0>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002464 <PLL_Realize+0xe4>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	db09      	blt.n	800242c <PLL_Realize+0xac>
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <PLL_Realize+0xe0>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002464 <PLL_Realize+0xe4>
 8002422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <PLL_Realize+0xe0>)
 8002428:	edc3 7a00 	vstr	s15, [r3]
	//    	判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
	//    	如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
	    	PLL_Success_Detect();
 800242c:	f000 f81c 	bl	8002468 <PLL_Success_Detect>
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	ecbd 8b02 	vpop	{d8}
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	eb1c432d 	.word	0xeb1c432d
 8002444:	3f0a36e2 	.word	0x3f0a36e2
 8002448:	200023b8 	.word	0x200023b8
 800244c:	3f666666 	.word	0x3f666666
 8002450:	2000236c 	.word	0x2000236c
 8002454:	00000000 	.word	0x00000000
 8002458:	200023c0 	.word	0x200023c0
 800245c:	3dcccccd 	.word	0x3dcccccd
 8002460:	200023bc 	.word	0x200023bc
 8002464:	40c90fdb 	.word	0x40c90fdb

08002468 <PLL_Success_Detect>:

void PLL_Success_Detect(void){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	//判断PLL锁相锁成功没有，每1/50s检测一次，设定裕度为0.5，检测10次，如果都通过就锁相成功
	//如果锁相成功，则初始化电压电流环，并且打开开关。要在过零点打开开关
	if(time_Point_PLL>=Control_Frequency)
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <PLL_Success_Detect+0x108>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002474:	4293      	cmp	r3, r2
 8002476:	dd12      	ble.n	800249e <PLL_Success_Detect+0x36>
		time_Point_PLL-=Control_Frequency;
 8002478:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <PLL_Success_Detect+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f851 	bl	8000524 <__aeabi_i2d>
 8002482:	a335      	add	r3, pc, #212	; (adr r3, 8002558 <PLL_Success_Detect+0xf0>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fd fefe 	bl	8000288 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fb60 	bl	8000b58 <__aeabi_d2iz>
 8002498:	4603      	mov	r3, r0
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <PLL_Success_Detect+0x108>)
 800249c:	6013      	str	r3, [r2, #0]
	if(flag_Start_Running==0){
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <PLL_Success_Detect+0x10c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d153      	bne.n	800254e <PLL_Success_Detect+0xe6>
		if(flag_PLL<10){
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <PLL_Success_Detect+0x110>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	dc4c      	bgt.n	8002548 <PLL_Success_Detect+0xe0>
			if(time_Tim1==time_Point_PLL){
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <PLL_Success_Detect+0x114>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <PLL_Success_Detect+0x108>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d149      	bne.n	800254e <PLL_Success_Detect+0xe6>
				if((U1q<0.2||U1q>-0.2)&&(U1d>5||U1d<-5)){
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <PLL_Success_Detect+0x118>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f842 	bl	8000548 <__aeabi_f2d>
 80024c4:	a326      	add	r3, pc, #152	; (adr r3, 8002560 <PLL_Success_Detect+0xf8>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe fb07 	bl	8000adc <__aeabi_dcmplt>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <PLL_Success_Detect+0x86>
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <PLL_Success_Detect+0x118>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f835 	bl	8000548 <__aeabi_f2d>
 80024de:	a322      	add	r3, pc, #136	; (adr r3, 8002568 <PLL_Success_Detect+0x100>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01f      	beq.n	800252e <PLL_Success_Detect+0xc6>
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <PLL_Success_Detect+0x11c>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80024f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	dc09      	bgt.n	8002516 <PLL_Success_Detect+0xae>
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <PLL_Success_Detect+0x11c>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d50b      	bpl.n	800252e <PLL_Success_Detect+0xc6>
					time_Point_PLL+=400;
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <PLL_Success_Detect+0x108>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <PLL_Success_Detect+0x108>)
 8002520:	6013      	str	r3, [r2, #0]
					flag_PLL+=1;
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <PLL_Success_Detect+0x110>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <PLL_Success_Detect+0x110>)
 800252a:	6013      	str	r3, [r2, #0]
			flag_Start_Running=1;
		}
	}


}
 800252c:	e00f      	b.n	800254e <PLL_Success_Detect+0xe6>
					flag_PLL-=5;
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <PLL_Success_Detect+0x110>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3b05      	subs	r3, #5
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <PLL_Success_Detect+0x110>)
 8002536:	6013      	str	r3, [r2, #0]
					if(flag_PLL<0)
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <PLL_Success_Detect+0x110>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da06      	bge.n	800254e <PLL_Success_Detect+0xe6>
						flag_PLL=0;
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <PLL_Success_Detect+0x110>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	e002      	b.n	800254e <PLL_Success_Detect+0xe6>
			flag_Start_Running=1;
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <PLL_Success_Detect+0x10c>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	00000000 	.word	0x00000000
 800255c:	40d38800 	.word	0x40d38800
 8002560:	9999999a 	.word	0x9999999a
 8002564:	3fc99999 	.word	0x3fc99999
 8002568:	9999999a 	.word	0x9999999a
 800256c:	bfc99999 	.word	0xbfc99999
 8002570:	20000014 	.word	0x20000014
 8002574:	200023fc 	.word	0x200023fc
 8002578:	200023f8 	.word	0x200023f8
 800257c:	20000400 	.word	0x20000400
 8002580:	2000236c 	.word	0x2000236c
 8002584:	20002368 	.word	0x20002368

08002588 <System_Protect>:

int flag_power_start=0;

int flag_Protect=0;
int time_U1rms_over = 0;
void System_Protect(void){
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	if(flag_Start_Running==1&&ad5_avg_flag==1&&flag_Protect==0&&flag_power_start==1){
 800258c:	4b81      	ldr	r3, [pc, #516]	; (8002794 <System_Protect+0x20c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d17a      	bne.n	800268a <System_Protect+0x102>
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <System_Protect+0x210>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d176      	bne.n	800268a <System_Protect+0x102>
 800259c:	4b7f      	ldr	r3, [pc, #508]	; (800279c <System_Protect+0x214>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d172      	bne.n	800268a <System_Protect+0x102>
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <System_Protect+0x218>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d16e      	bne.n	800268a <System_Protect+0x102>
			if(thetas<0.03f+PI/2&&thetas>-0.03f+PI/2){
 80025ac:	4b7d      	ldr	r3, [pc, #500]	; (80027a4 <System_Protect+0x21c>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80027a8 <System_Protect+0x220>
 80025b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d564      	bpl.n	800268a <System_Protect+0x102>
 80025c0:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <System_Protect+0x21c>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80027ac <System_Protect+0x224>
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	dd5a      	ble.n	800268a <System_Protect+0x102>
				PID_init(&pid_Udc,0.016f, 0.25f,0,0.95,-0.95,0.4,Control_Time);
 80025d4:	ed9f 3a76 	vldr	s6, [pc, #472]	; 80027b0 <System_Protect+0x228>
 80025d8:	eddf 2a76 	vldr	s5, [pc, #472]	; 80027b4 <System_Protect+0x22c>
 80025dc:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80027b8 <System_Protect+0x230>
 80025e0:	eddf 1a76 	vldr	s3, [pc, #472]	; 80027bc <System_Protect+0x234>
 80025e4:	ed9f 1a76 	vldr	s2, [pc, #472]	; 80027c0 <System_Protect+0x238>
 80025e8:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 80025ec:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80027c4 <System_Protect+0x23c>
 80025f0:	4875      	ldr	r0, [pc, #468]	; (80027c8 <System_Protect+0x240>)
 80025f2:	f7ff fde1 	bl	80021b8 <PID_init>
				PID_init(&pid_I1d,8,950,0,15,-15,0,Control_Time);
 80025f6:	ed9f 3a6e 	vldr	s6, [pc, #440]	; 80027b0 <System_Protect+0x228>
 80025fa:	eddf 2a71 	vldr	s5, [pc, #452]	; 80027c0 <System_Protect+0x238>
 80025fe:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 8002602:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 8002606:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80027c0 <System_Protect+0x238>
 800260a:	eddf 0a70 	vldr	s1, [pc, #448]	; 80027cc <System_Protect+0x244>
 800260e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8002612:	486f      	ldr	r0, [pc, #444]	; (80027d0 <System_Protect+0x248>)
 8002614:	f7ff fdd0 	bl	80021b8 <PID_init>
				PID_init(&pid_I1q,8,950,0,15,-15,0,Control_Time);
 8002618:	ed9f 3a65 	vldr	s6, [pc, #404]	; 80027b0 <System_Protect+0x228>
 800261c:	eddf 2a68 	vldr	s5, [pc, #416]	; 80027c0 <System_Protect+0x238>
 8002620:	eeba 2a0e 	vmov.f32	s4, #174	; 0xc1700000 -15.0
 8002624:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 8002628:	ed9f 1a65 	vldr	s2, [pc, #404]	; 80027c0 <System_Protect+0x238>
 800262c:	eddf 0a67 	vldr	s1, [pc, #412]	; 80027cc <System_Protect+0x244>
 8002630:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8002634:	4867      	ldr	r0, [pc, #412]	; (80027d4 <System_Protect+0x24c>)
 8002636:	f7ff fdbf 	bl	80021b8 <PID_init>
				//整流开关打开
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800263a:	2100      	movs	r1, #0
 800263c:	4866      	ldr	r0, [pc, #408]	; (80027d8 <System_Protect+0x250>)
 800263e:	f003 fdcb 	bl	80061d8 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002642:	2104      	movs	r1, #4
 8002644:	4864      	ldr	r0, [pc, #400]	; (80027d8 <System_Protect+0x250>)
 8002646:	f003 fdc7 	bl	80061d8 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800264a:	2100      	movs	r1, #0
 800264c:	4862      	ldr	r0, [pc, #392]	; (80027d8 <System_Protect+0x250>)
 800264e:	f004 fcc5 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8002652:	2104      	movs	r1, #4
 8002654:	4860      	ldr	r0, [pc, #384]	; (80027d8 <System_Protect+0x250>)
 8002656:	f004 fcc1 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
				//逆变器打开
				HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800265a:	2100      	movs	r1, #0
 800265c:	485f      	ldr	r0, [pc, #380]	; (80027dc <System_Protect+0x254>)
 800265e:	f003 fdbb 	bl	80061d8 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002662:	2104      	movs	r1, #4
 8002664:	485d      	ldr	r0, [pc, #372]	; (80027dc <System_Protect+0x254>)
 8002666:	f003 fdb7 	bl	80061d8 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_1);
 800266a:	2100      	movs	r1, #0
 800266c:	485b      	ldr	r0, [pc, #364]	; (80027dc <System_Protect+0x254>)
 800266e:	f004 fcb5 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_2);
 8002672:	2104      	movs	r1, #4
 8002674:	4859      	ldr	r0, [pc, #356]	; (80027dc <System_Protect+0x254>)
 8002676:	f004 fcb1 	bl	8006fdc <HAL_TIMEx_PWMN_Start>

				flag_Start_Running=2;
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <System_Protect+0x20c>)
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	2102      	movs	r1, #2
 8002684:	4856      	ldr	r0, [pc, #344]	; (80027e0 <System_Protect+0x258>)
 8002686:	f002 ffdb 	bl	8005640 <HAL_GPIO_WritePin>
			}
		  }
	if(flag_power_start==0){
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <System_Protect+0x218>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11c      	bne.n	80026cc <System_Protect+0x144>
		  flag_Protect=0;
 8002692:	4b42      	ldr	r3, [pc, #264]	; (800279c <System_Protect+0x214>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
		  flag_Start_Running=0;
 8002698:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <System_Protect+0x20c>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
		  flag_PLL=0;
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <System_Protect+0x25c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
		  thetas=0;
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <System_Protect+0x21c>)
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80026ac:	2100      	movs	r1, #0
 80026ae:	484a      	ldr	r0, [pc, #296]	; (80027d8 <System_Protect+0x250>)
 80026b0:	f003 fe5a 	bl	8006368 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80026b4:	2104      	movs	r1, #4
 80026b6:	4848      	ldr	r0, [pc, #288]	; (80027d8 <System_Protect+0x250>)
 80026b8:	f003 fe56 	bl	8006368 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80026bc:	2100      	movs	r1, #0
 80026be:	4846      	ldr	r0, [pc, #280]	; (80027d8 <System_Protect+0x250>)
 80026c0:	f004 fd46 	bl	8007150 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 80026c4:	2104      	movs	r1, #4
 80026c6:	4844      	ldr	r0, [pc, #272]	; (80027d8 <System_Protect+0x250>)
 80026c8:	f004 fd42 	bl	8007150 <HAL_TIMEx_PWMN_Stop>

	}
	if(U1rms_screen>35||Udc>60){
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <System_Protect+0x260>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80027ec <System_Protect+0x264>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	dc09      	bgt.n	80026f4 <System_Protect+0x16c>
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <System_Protect+0x268>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80027f4 <System_Protect+0x26c>
 80026ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f2:	dd2a      	ble.n	800274a <System_Protect+0x1c2>
		if(U1rms_screen>35){
 80026f4:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <System_Protect+0x260>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80027ec <System_Protect+0x264>
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd03      	ble.n	8002710 <System_Protect+0x188>
			  flag_Protect=1;
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <System_Protect+0x214>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e00c      	b.n	800272a <System_Protect+0x1a2>
		}
		else if(Udc>60){
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <System_Protect+0x268>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80027f4 <System_Protect+0x26c>
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	dd02      	ble.n	800272a <System_Protect+0x1a2>
			  flag_Protect=2;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <System_Protect+0x214>)
 8002726:	2202      	movs	r2, #2
 8002728:	601a      	str	r2, [r3, #0]
		}
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800272a:	2100      	movs	r1, #0
 800272c:	482a      	ldr	r0, [pc, #168]	; (80027d8 <System_Protect+0x250>)
 800272e:	f003 fe1b 	bl	8006368 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002732:	2104      	movs	r1, #4
 8002734:	4828      	ldr	r0, [pc, #160]	; (80027d8 <System_Protect+0x250>)
 8002736:	f003 fe17 	bl	8006368 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 800273a:	2100      	movs	r1, #0
 800273c:	4826      	ldr	r0, [pc, #152]	; (80027d8 <System_Protect+0x250>)
 800273e:	f004 fd07 	bl	8007150 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 8002742:	2104      	movs	r1, #4
 8002744:	4824      	ldr	r0, [pc, #144]	; (80027d8 <System_Protect+0x250>)
 8002746:	f004 fd03 	bl	8007150 <HAL_TIMEx_PWMN_Stop>
//		  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
//		  HAL_TIMEx_PWMN_Stop(&htim8,TIM_CHANNEL_1);
//		  HAL_TIMEx_PWMN_Stop(&htim8,TIM_CHANNEL_2);

	}
	if(U1rms_screen<32&&Udc<45&&flag_Protect!=0){
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <System_Protect+0x260>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80027f8 <System_Protect+0x270>
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	d400      	bmi.n	8002760 <System_Protect+0x1d8>
		  flag_Protect=0;
		  flag_Start_Running=0;
		  flag_PLL=0;
	}
}
 800275e:	e017      	b.n	8002790 <System_Protect+0x208>
	if(U1rms_screen<32&&Udc<45&&flag_Protect!=0){
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <System_Protect+0x268>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027fc <System_Protect+0x274>
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d400      	bmi.n	8002776 <System_Protect+0x1ee>
}
 8002774:	e00c      	b.n	8002790 <System_Protect+0x208>
	if(U1rms_screen<32&&Udc<45&&flag_Protect!=0){
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <System_Protect+0x214>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <System_Protect+0x208>
		  flag_Protect=0;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <System_Protect+0x214>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
		  flag_Start_Running=0;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <System_Protect+0x20c>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
		  flag_PLL=0;
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <System_Protect+0x25c>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200023fc 	.word	0x200023fc
 8002798:	200003fc 	.word	0x200003fc
 800279c:	20002404 	.word	0x20002404
 80027a0:	20002400 	.word	0x20002400
 80027a4:	200023bc 	.word	0x200023bc
 80027a8:	3fcce6e5 	.word	0x3fcce6e5
 80027ac:	3fc538d1 	.word	0x3fc538d1
 80027b0:	3851b717 	.word	0x3851b717
 80027b4:	3ecccccd 	.word	0x3ecccccd
 80027b8:	bf733333 	.word	0xbf733333
 80027bc:	3f733333 	.word	0x3f733333
 80027c0:	00000000 	.word	0x00000000
 80027c4:	3c83126f 	.word	0x3c83126f
 80027c8:	200002f8 	.word	0x200002f8
 80027cc:	446d8000 	.word	0x446d8000
 80027d0:	20000330 	.word	0x20000330
 80027d4:	20000368 	.word	0x20000368
 80027d8:	20002428 	.word	0x20002428
 80027dc:	200024b8 	.word	0x200024b8
 80027e0:	40020000 	.word	0x40020000
 80027e4:	200023f8 	.word	0x200023f8
 80027e8:	20002360 	.word	0x20002360
 80027ec:	420c0000 	.word	0x420c0000
 80027f0:	20000408 	.word	0x20000408
 80027f4:	42700000 	.word	0x42700000
 80027f8:	42000000 	.word	0x42000000
 80027fc:	42340000 	.word	0x42340000

08002800 <enQueue>:
//判断循环队列是否为空
int isEmpty(SqQueue qu){
	return (qu.front ==qu.rear?1:0);
}
//元素进循环队列
int enQueue(SqQueue *qu,int x){
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
	if((qu->rear+1)%maxsize ==qu->front){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <enQueue+0x74>)
 8002814:	fb83 1302 	smull	r1, r3, r3, r2
 8002818:	1199      	asrs	r1, r3, #6
 800281a:	17d3      	asrs	r3, r2, #31
 800281c:	1acb      	subs	r3, r1, r3
 800281e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	f8d2 2fa0 	ldr.w	r2, [r2, #4000]	; 0xfa0
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <enQueue+0x38>
		deQueue(qu);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f820 	bl	8002878 <deQueue>
	}
	qu->data[qu->rear]=x;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6839      	ldr	r1, [r7, #0]
 8002842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	qu->rear=(qu->rear+1)%maxsize;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <enQueue+0x74>)
 8002850:	fb83 1302 	smull	r1, r3, r3, r2
 8002854:	1199      	asrs	r1, r3, #6
 8002856:	17d3      	asrs	r3, r2, #31
 8002858:	1acb      	subs	r3, r1, r3
 800285a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
	return 1;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <deQueue>:
//元素出循环队列
int deQueue(SqQueue *qu){
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	if(qu->rear ==qu->front){
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 800288c:	429a      	cmp	r2, r3
 800288e:	d101      	bne.n	8002894 <deQueue+0x1c>
		return 0;
 8002890:	2300      	movs	r3, #0
 8002892:	e012      	b.n	80028ba <deQueue+0x42>
	}
//	*y=qu->data[qu->front];
	qu->front=(qu->front+1)%maxsize;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <deQueue+0x50>)
 800289e:	fb83 1302 	smull	r1, r3, r3, r2
 80028a2:	1199      	asrs	r1, r3, #6
 80028a4:	17d3      	asrs	r3, r2, #31
 80028a6:	1acb      	subs	r3, r1, r3
 80028a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	f8c2 3fa0 	str.w	r3, [r2, #4000]	; 0xfa0
	return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	10624dd3 	.word	0x10624dd3

080028cc <Screen_Print>:
int flag_fresh_screen=1;
float ref_Isq_last,Usrms_last,I1drms_last,PF_last;
extern int flag_power_start;
extern float sinphi;
int flag_screen_dark=1;
void Screen_Print(){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	Screen_Fresh_Detect();
 80028d0:	f000 f93a 	bl	8002b48 <Screen_Fresh_Detect>
	if(flag_screen==1){
 80028d4:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <Screen_Print+0x204>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 80f7 	bne.w	8002acc <Screen_Print+0x200>
		while(time_Tim1>5*20);
 80028de:	bf00      	nop
 80028e0:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <Screen_Print+0x208>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b64      	cmp	r3, #100	; 0x64
 80028e6:	dcfb      	bgt.n	80028e0 <Screen_Print+0x14>

			printf("CLR(0);\r\n");
 80028e8:	487b      	ldr	r0, [pc, #492]	; (8002ad8 <Screen_Print+0x20c>)
 80028ea:	f006 fe61 	bl	80095b0 <puts>

		while(time_Tim1<45*20);//40ms
 80028ee:	bf00      	nop
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <Screen_Print+0x208>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80028f8:	dbfa      	blt.n	80028f0 <Screen_Print+0x24>
		//Mode
		if(Mode==2){
 80028fa:	4b78      	ldr	r3, [pc, #480]	; (8002adc <Screen_Print+0x210>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d10a      	bne.n	8002918 <Screen_Print+0x4c>
			printf("DC16(15,10,'Mode:CR%.3f',16);\r\n",Rin_set);
 8002902:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <Screen_Print+0x214>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe1e 	bl	8000548 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4874      	ldr	r0, [pc, #464]	; (8002ae4 <Screen_Print+0x218>)
 8002912:	f006 fdc7 	bl	80094a4 <iprintf>
 8002916:	e027      	b.n	8002968 <Screen_Print+0x9c>
		}else if(Mode==3){
 8002918:	4b70      	ldr	r3, [pc, #448]	; (8002adc <Screen_Print+0x210>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d10a      	bne.n	8002936 <Screen_Print+0x6a>
			printf("DC16(15,10,'Mode:CP%.2fW',16);\r\n",Power_set);
 8002920:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <Screen_Print+0x21c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe0f 	bl	8000548 <__aeabi_f2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	486f      	ldr	r0, [pc, #444]	; (8002aec <Screen_Print+0x220>)
 8002930:	f006 fdb8 	bl	80094a4 <iprintf>
 8002934:	e018      	b.n	8002968 <Screen_Print+0x9c>
		}else if(Mode==4){
 8002936:	4b69      	ldr	r3, [pc, #420]	; (8002adc <Screen_Print+0x210>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d10a      	bne.n	8002954 <Screen_Print+0x88>
			printf("DC16(15,10,'Mode:CS%.2fVA',16);\r\n",Spower_set);
 800293e:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <Screen_Print+0x224>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fe00 	bl	8000548 <__aeabi_f2d>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4869      	ldr	r0, [pc, #420]	; (8002af4 <Screen_Print+0x228>)
 800294e:	f006 fda9 	bl	80094a4 <iprintf>
 8002952:	e009      	b.n	8002968 <Screen_Print+0x9c>
		}else{
			printf("DC16(15,10,'Mode:CC%.3fA',16);\r\n",I1rms_set);
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <Screen_Print+0x22c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fdf5 	bl	8000548 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4866      	ldr	r0, [pc, #408]	; (8002afc <Screen_Print+0x230>)
 8002964:	f006 fd9e 	bl	80094a4 <iprintf>
		}
		while(time_Tim1<85*20);//40ms
 8002968:	bf00      	nop
 800296a:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <Screen_Print+0x208>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002972:	4293      	cmp	r3, r2
 8002974:	ddf9      	ble.n	800296a <Screen_Print+0x9e>
		//PF
		if(choose_inductance_capacity==-1)
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <Screen_Print+0x234>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d10a      	bne.n	8002996 <Screen_Print+0xca>
			printf("DC16(15,30,'PF: %.3f C',16);\r\n",PF_set);
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <Screen_Print+0x238>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fddf 	bl	8000548 <__aeabi_f2d>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	485e      	ldr	r0, [pc, #376]	; (8002b08 <Screen_Print+0x23c>)
 8002990:	f006 fd88 	bl	80094a4 <iprintf>
 8002994:	e009      	b.n	80029aa <Screen_Print+0xde>
		else {
			printf("DC16(15,30,'PF: %.3f L',16);\r\n",PF_set);
 8002996:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <Screen_Print+0x238>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdd4 	bl	8000548 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4859      	ldr	r0, [pc, #356]	; (8002b0c <Screen_Print+0x240>)
 80029a6:	f006 fd7d 	bl	80094a4 <iprintf>
		}
		while(time_Tim1<125*20);//40ms
 80029aa:	bf00      	nop
 80029ac:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <Screen_Print+0x208>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80029b4:	4293      	cmp	r3, r2
 80029b6:	ddf9      	ble.n	80029ac <Screen_Print+0xe0>
//		Show U1I1
		printf("DC16(15,60,'U1: %.2fV',16);\r\n",U1rms_screen);
 80029b8:	4b55      	ldr	r3, [pc, #340]	; (8002b10 <Screen_Print+0x244>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fdc3 	bl	8000548 <__aeabi_f2d>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4853      	ldr	r0, [pc, #332]	; (8002b14 <Screen_Print+0x248>)
 80029c8:	f006 fd6c 	bl	80094a4 <iprintf>
		while(time_Tim1<165*20);//40ms
 80029cc:	bf00      	nop
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <Screen_Print+0x208>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f640 42e3 	movw	r2, #3299	; 0xce3
 80029d6:	4293      	cmp	r3, r2
 80029d8:	ddf9      	ble.n	80029ce <Screen_Print+0x102>
		printf("DC16(15,80,'I1: %.3fA',16);\r\n",I1rms_screen);
 80029da:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <Screen_Print+0x24c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fdb2 	bl	8000548 <__aeabi_f2d>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	484c      	ldr	r0, [pc, #304]	; (8002b1c <Screen_Print+0x250>)
 80029ea:	f006 fd5b 	bl	80094a4 <iprintf>
		while(time_Tim1<205*20);//40ms
 80029ee:	bf00      	nop
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <Screen_Print+0x208>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80029f8:	4293      	cmp	r3, r2
 80029fa:	ddf9      	ble.n	80029f0 <Screen_Print+0x124>
//		Power
		printf("DC16(15,100,'P:%.2fW',16);\r\n",U1rms_screen*I1rms_screen*PF_set);
 80029fc:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <Screen_Print+0x244>)
 80029fe:	ed93 7a00 	vldr	s14, [r3]
 8002a02:	4b45      	ldr	r3, [pc, #276]	; (8002b18 <Screen_Print+0x24c>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <Screen_Print+0x238>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	ee17 0a90 	vmov	r0, s15
 8002a1a:	f7fd fd95 	bl	8000548 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	483f      	ldr	r0, [pc, #252]	; (8002b20 <Screen_Print+0x254>)
 8002a24:	f006 fd3e 	bl	80094a4 <iprintf>
		while(time_Tim1<245*20);//40ms
 8002a28:	bf00      	nop
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <Screen_Print+0x208>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f241 3223 	movw	r2, #4899	; 0x1323
 8002a32:	4293      	cmp	r3, r2
 8002a34:	ddf9      	ble.n	8002a2a <Screen_Print+0x15e>
		printf("DC16(15,120,'Q:%.2fvar',16);\r\n",U1rms_screen*I1rms_screen*sinphi);
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <Screen_Print+0x244>)
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <Screen_Print+0x24c>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <Screen_Print+0x258>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	ee17 0a90 	vmov	r0, s15
 8002a54:	f7fd fd78 	bl	8000548 <__aeabi_f2d>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4832      	ldr	r0, [pc, #200]	; (8002b28 <Screen_Print+0x25c>)
 8002a5e:	f006 fd21 	bl	80094a4 <iprintf>
		while(time_Tim1<285*20);//40ms
 8002a62:	bf00      	nop
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <Screen_Print+0x208>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f241 6243 	movw	r2, #5699	; 0x1643
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	ddf9      	ble.n	8002a64 <Screen_Print+0x198>

		if(flag_Protect==1){
 8002a70:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <Screen_Print+0x260>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d103      	bne.n	8002a80 <Screen_Print+0x1b4>

			printf("DCV16(5,140,'U1 Overvoltage',1);\r\n");
 8002a78:	482d      	ldr	r0, [pc, #180]	; (8002b30 <Screen_Print+0x264>)
 8002a7a:	f006 fd99 	bl	80095b0 <puts>
 8002a7e:	e006      	b.n	8002a8e <Screen_Print+0x1c2>
		}else if(flag_Protect==2){
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <Screen_Print+0x260>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d102      	bne.n	8002a8e <Screen_Print+0x1c2>

			printf("DCV16(5,140,'Loss Resistance',1);\r\n");
 8002a88:	482a      	ldr	r0, [pc, #168]	; (8002b34 <Screen_Print+0x268>)
 8002a8a:	f006 fd91 	bl	80095b0 <puts>
		}
		while(time_Tim1<365*20);//40ms
 8002a8e:	bf00      	nop
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <Screen_Print+0x208>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f641 4283 	movw	r2, #7299	; 0x1c83
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	ddf9      	ble.n	8002a90 <Screen_Print+0x1c4>

		if(flag_screen_dark==1){
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <Screen_Print+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d103      	bne.n	8002aac <Screen_Print+0x1e0>
			printf("BL(200);\r\n");
 8002aa4:	4825      	ldr	r0, [pc, #148]	; (8002b3c <Screen_Print+0x270>)
 8002aa6:	f006 fd83 	bl	80095b0 <puts>
 8002aaa:	e002      	b.n	8002ab2 <Screen_Print+0x1e6>
		}else {
			printf("BL(0);\r\n");
 8002aac:	4824      	ldr	r0, [pc, #144]	; (8002b40 <Screen_Print+0x274>)
 8002aae:	f006 fd7f 	bl	80095b0 <puts>
		}
		while(time_Tim1<405*20);//40ms
 8002ab2:	bf00      	nop
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <Screen_Print+0x208>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f641 72a3 	movw	r2, #8099	; 0x1fa3
 8002abc:	4293      	cmp	r3, r2
 8002abe:	ddf9      	ble.n	8002ab4 <Screen_Print+0x1e8>
		flag_screen=0;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <Screen_Print+0x204>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
		flag_fresh_screen=0;
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <Screen_Print+0x278>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
	}
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000018 	.word	0x20000018
 8002ad4:	20000400 	.word	0x20000400
 8002ad8:	0800d018 	.word	0x0800d018
 8002adc:	2000002c 	.word	0x2000002c
 8002ae0:	20000034 	.word	0x20000034
 8002ae4:	0800d024 	.word	0x0800d024
 8002ae8:	20000038 	.word	0x20000038
 8002aec:	0800d044 	.word	0x0800d044
 8002af0:	2000003c 	.word	0x2000003c
 8002af4:	0800d068 	.word	0x0800d068
 8002af8:	20000030 	.word	0x20000030
 8002afc:	0800d08c 	.word	0x0800d08c
 8002b00:	20000024 	.word	0x20000024
 8002b04:	20000010 	.word	0x20000010
 8002b08:	0800d0b0 	.word	0x0800d0b0
 8002b0c:	0800d0d0 	.word	0x0800d0d0
 8002b10:	20002360 	.word	0x20002360
 8002b14:	0800d0f0 	.word	0x0800d0f0
 8002b18:	20002364 	.word	0x20002364
 8002b1c:	0800d110 	.word	0x0800d110
 8002b20:	0800d130 	.word	0x0800d130
 8002b24:	20002418 	.word	0x20002418
 8002b28:	0800d150 	.word	0x0800d150
 8002b2c:	20002404 	.word	0x20002404
 8002b30:	0800d170 	.word	0x0800d170
 8002b34:	0800d194 	.word	0x0800d194
 8002b38:	20000020 	.word	0x20000020
 8002b3c:	0800d1b8 	.word	0x0800d1b8
 8002b40:	0800d1c4 	.word	0x0800d1c4
 8002b44:	2000001c 	.word	0x2000001c

08002b48 <Screen_Fresh_Detect>:
void Screen_Fresh_Detect(){
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
	if(ref_Isqrms-ref_Isq_last>0.005f||ref_Isqrms-ref_Isq_last<-0.005f){
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <Screen_Fresh_Detect+0x138>)
 8002b4e:	ed93 7a00 	vldr	s14, [r3]
 8002b52:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <Screen_Fresh_Detect+0x13c>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002c88 <Screen_Fresh_Detect+0x140>
 8002b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	dc0e      	bgt.n	8002b88 <Screen_Fresh_Detect+0x40>
 8002b6a:	4b45      	ldr	r3, [pc, #276]	; (8002c80 <Screen_Fresh_Detect+0x138>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <Screen_Fresh_Detect+0x13c>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002c8c <Screen_Fresh_Detect+0x144>
 8002b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	d506      	bpl.n	8002b96 <Screen_Fresh_Detect+0x4e>
		flag_fresh_screen=1;
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <Screen_Fresh_Detect+0x148>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
		ref_Isq_last=ref_Isqrms;
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <Screen_Fresh_Detect+0x138>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <Screen_Fresh_Detect+0x13c>)
 8002b94:	6013      	str	r3, [r2, #0]
	}
	if(U1rms_screen-Usrms_last>0.5f||U1rms_screen-Usrms_last<-0.5f){
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <Screen_Fresh_Detect+0x14c>)
 8002b98:	ed93 7a00 	vldr	s14, [r3]
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <Screen_Fresh_Detect+0x150>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	dc0e      	bgt.n	8002bd2 <Screen_Fresh_Detect+0x8a>
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <Screen_Fresh_Detect+0x14c>)
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <Screen_Fresh_Detect+0x150>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d506      	bpl.n	8002be0 <Screen_Fresh_Detect+0x98>
		flag_fresh_screen=1;
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <Screen_Fresh_Detect+0x148>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
		Usrms_last=U1rms_screen;
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <Screen_Fresh_Detect+0x14c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <Screen_Fresh_Detect+0x150>)
 8002bde:	6013      	str	r3, [r2, #0]
	}
	if(I1rms_screen-I1drms_last>0.02f||I1rms_screen-I1drms_last<-0.02f){
 8002be0:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <Screen_Fresh_Detect+0x154>)
 8002be2:	ed93 7a00 	vldr	s14, [r3]
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <Screen_Fresh_Detect+0x158>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002ca4 <Screen_Fresh_Detect+0x15c>
 8002bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	dc0e      	bgt.n	8002c1c <Screen_Fresh_Detect+0xd4>
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <Screen_Fresh_Detect+0x154>)
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <Screen_Fresh_Detect+0x158>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c0e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ca8 <Screen_Fresh_Detect+0x160>
 8002c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d506      	bpl.n	8002c2a <Screen_Fresh_Detect+0xe2>
		flag_fresh_screen=1;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <Screen_Fresh_Detect+0x148>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
		I1drms_last=I1rms_screen;
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <Screen_Fresh_Detect+0x154>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <Screen_Fresh_Detect+0x158>)
 8002c28:	6013      	str	r3, [r2, #0]
	}
	if(PF_set-PF_last>0.005f||PF_set-PF_last<-0.005f){
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <Screen_Fresh_Detect+0x164>)
 8002c2c:	ed93 7a00 	vldr	s14, [r3]
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <Screen_Fresh_Detect+0x168>)
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002c88 <Screen_Fresh_Detect+0x140>
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	dc0f      	bgt.n	8002c68 <Screen_Fresh_Detect+0x120>
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <Screen_Fresh_Detect+0x164>)
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <Screen_Fresh_Detect+0x168>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002c8c <Screen_Fresh_Detect+0x144>
 8002c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	d400      	bmi.n	8002c68 <Screen_Fresh_Detect+0x120>
		flag_fresh_screen=1;
		PF_last=PF_set;
	}
}
 8002c66:	e006      	b.n	8002c76 <Screen_Fresh_Detect+0x12e>
		flag_fresh_screen=1;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <Screen_Fresh_Detect+0x148>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
		PF_last=PF_set;
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <Screen_Fresh_Detect+0x164>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <Screen_Fresh_Detect+0x168>)
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	200003a0 	.word	0x200003a0
 8002c84:	20002408 	.word	0x20002408
 8002c88:	3ba3d70a 	.word	0x3ba3d70a
 8002c8c:	bba3d70a 	.word	0xbba3d70a
 8002c90:	2000001c 	.word	0x2000001c
 8002c94:	20002360 	.word	0x20002360
 8002c98:	2000240c 	.word	0x2000240c
 8002c9c:	20002364 	.word	0x20002364
 8002ca0:	20002410 	.word	0x20002410
 8002ca4:	3ca3d70a 	.word	0x3ca3d70a
 8002ca8:	bca3d70a 	.word	0xbca3d70a
 8002cac:	20000010 	.word	0x20000010
 8002cb0:	20002414 	.word	0x20002414

08002cb4 <Screen_Clock>:
//extern int time_Tim1;
void Screen_Clock(){
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
	if(time_Tim1==1){
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <Screen_Clock+0x1c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <Screen_Clock+0x12>
		flag_screen=1;
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <Screen_Clock+0x20>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000400 	.word	0x20000400
 8002cd4:	20000018 	.word	0x20000018

08002cd8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
//    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
    	//记录一个定时器time,用两次time值相减可以得到对应的任意事件的两项
    	Clock_Timer();
 8002cec:	f7fe ff70 	bl	8001bd0 <Clock_Timer>
    	Screen_Clock();
 8002cf0:	f7ff ffe0 	bl	8002cb4 <Screen_Clock>
    	Key_Clock();
 8002cf4:	f7ff f896 	bl	8001e24 <Key_Clock>
//    	进行ADC(3us)和进行数据的存储(2.2us)
//    	进行正弦运算注意角度是弧度制 1.8us
//    	对输入电压、输入电流、Io电流进行Park运算，这个100后续要变 1us
    	ADC_DAC_get_and_show();
 8002cf8:	f7fe fc04 	bl	8001504 <ADC_DAC_get_and_show>
    	PLL_Realize();
 8002cfc:	f7ff fb40 	bl	8002380 <PLL_Realize>
    	Control_Value_Set();
 8002d00:	f000 f80e 	bl	8002d20 <Control_Value_Set>
    	PI_Control();
 8002d04:	f7fe fb6a 	bl	80013dc <PI_Control>

    	//进行系统保护
    	System_Protect();
 8002d08:	f7ff fc3e 	bl	8002588 <System_Protect>
    	PWM_Output();
 8002d0c:	f7fe ff8a 	bl	8001c24 <PWM_Output>
    }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20002470 	.word	0x20002470
 8002d1c:	00000000 	.word	0x00000000

08002d20 <Control_Value_Set>:
float sinphi=0,cosphi=0;
float I1_ref = 2.0f;
int Mode=1;//Mode 为1或其他 则是CC，Mode为2，CR，为3，CP
float I1rms_set=2, Rin_set=15,Power_set=60,I1rms_set_fix,Spower_set=60;

void Control_Value_Set(){
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	//感性容性校正不一样
	if(choose_inductance_capacity==1){
 8002d26:	4bb0      	ldr	r3, [pc, #704]	; (8002fe8 <Control_Value_Set+0x2c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d140      	bne.n	8002db0 <Control_Value_Set+0x90>
		if(PF_set<0.5f){
 8002d2e:	4baf      	ldr	r3, [pc, #700]	; (8002fec <Control_Value_Set+0x2cc>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d50e      	bpl.n	8002d60 <Control_Value_Set+0x40>
			cosphi=PF_set*1.01776f-0.01942f;
 8002d42:	4baa      	ldr	r3, [pc, #680]	; (8002fec <Control_Value_Set+0x2cc>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002ff0 <Control_Value_Set+0x2d0>
 8002d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d50:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002ff4 <Control_Value_Set+0x2d4>
 8002d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d58:	4ba7      	ldr	r3, [pc, #668]	; (8002ff8 <Control_Value_Set+0x2d8>)
 8002d5a:	edc3 7a00 	vstr	s15, [r3]
 8002d5e:	e067      	b.n	8002e30 <Control_Value_Set+0x110>
		}else if(PF_set<0.9f){
 8002d60:	4ba2      	ldr	r3, [pc, #648]	; (8002fec <Control_Value_Set+0x2cc>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002ffc <Control_Value_Set+0x2dc>
 8002d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	d50e      	bpl.n	8002d92 <Control_Value_Set+0x72>
			cosphi=PF_set*1.027f-0.0261f;
 8002d74:	4b9d      	ldr	r3, [pc, #628]	; (8002fec <Control_Value_Set+0x2cc>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003000 <Control_Value_Set+0x2e0>
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003004 <Control_Value_Set+0x2e4>
 8002d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d8a:	4b9b      	ldr	r3, [pc, #620]	; (8002ff8 <Control_Value_Set+0x2d8>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]
 8002d90:	e04e      	b.n	8002e30 <Control_Value_Set+0x110>
		}
		else {
			cosphi=PF_set*1.0191f-0.0173f;
 8002d92:	4b96      	ldr	r3, [pc, #600]	; (8002fec <Control_Value_Set+0x2cc>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003008 <Control_Value_Set+0x2e8>
 8002d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800300c <Control_Value_Set+0x2ec>
 8002da4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002da8:	4b93      	ldr	r3, [pc, #588]	; (8002ff8 <Control_Value_Set+0x2d8>)
 8002daa:	edc3 7a00 	vstr	s15, [r3]
 8002dae:	e03f      	b.n	8002e30 <Control_Value_Set+0x110>
		}
	}else {
		//容性
		cosphi=0.0516*PF_set*PF_set+0.9808f*PF_set-0.0322;
 8002db0:	4b8e      	ldr	r3, [pc, #568]	; (8002fec <Control_Value_Set+0x2cc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	a381      	add	r3, pc, #516	; (adr r3, 8002fc0 <Control_Value_Set+0x2a0>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fc1a 	bl	80005f8 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	461d      	mov	r5, r3
 8002dcc:	4b87      	ldr	r3, [pc, #540]	; (8002fec <Control_Value_Set+0x2cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fbb9 	bl	8000548 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fc0b 	bl	80005f8 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	461d      	mov	r5, r3
 8002dea:	4b80      	ldr	r3, [pc, #512]	; (8002fec <Control_Value_Set+0x2cc>)
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003010 <Control_Value_Set+0x2f0>
 8002df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df8:	ee17 0a90 	vmov	r0, s15
 8002dfc:	f7fd fba4 	bl	8000548 <__aeabi_f2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fa40 	bl	800028c <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	a36c      	add	r3, pc, #432	; (adr r3, 8002fc8 <Control_Value_Set+0x2a8>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fa35 	bl	8000288 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd fedf 	bl	8000be8 <__aeabi_d2f>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a72      	ldr	r2, [pc, #456]	; (8002ff8 <Control_Value_Set+0x2d8>)
 8002e2e:	6013      	str	r3, [r2, #0]
	}
	//拟合关系
//	cosphi=PF_set;
	//不同模式电流参考值不一样
	if(Mode==2){
 8002e30:	4b78      	ldr	r3, [pc, #480]	; (8003014 <Control_Value_Set+0x2f4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d10b      	bne.n	8002e50 <Control_Value_Set+0x130>
		I1rms_set_fix = U1rms_screen/Rin_set;
 8002e38:	4b77      	ldr	r3, [pc, #476]	; (8003018 <Control_Value_Set+0x2f8>)
 8002e3a:	edd3 6a00 	vldr	s13, [r3]
 8002e3e:	4b77      	ldr	r3, [pc, #476]	; (800301c <Control_Value_Set+0x2fc>)
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e48:	4b75      	ldr	r3, [pc, #468]	; (8003020 <Control_Value_Set+0x300>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
 8002e4e:	e036      	b.n	8002ebe <Control_Value_Set+0x19e>
	}else if(Mode==3){
 8002e50:	4b70      	ldr	r3, [pc, #448]	; (8003014 <Control_Value_Set+0x2f4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d110      	bne.n	8002e7a <Control_Value_Set+0x15a>
		I1rms_set_fix =Power_set/U1rms_screen/PF_set;
 8002e58:	4b72      	ldr	r3, [pc, #456]	; (8003024 <Control_Value_Set+0x304>)
 8002e5a:	ed93 7a00 	vldr	s14, [r3]
 8002e5e:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <Control_Value_Set+0x2f8>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <Control_Value_Set+0x2cc>)
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e72:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <Control_Value_Set+0x300>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
 8002e78:	e021      	b.n	8002ebe <Control_Value_Set+0x19e>
	}else if(Mode==4){
 8002e7a:	4b66      	ldr	r3, [pc, #408]	; (8003014 <Control_Value_Set+0x2f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d10b      	bne.n	8002e9a <Control_Value_Set+0x17a>
		I1rms_set_fix =Spower_set/U1rms_screen;
 8002e82:	4b69      	ldr	r3, [pc, #420]	; (8003028 <Control_Value_Set+0x308>)
 8002e84:	edd3 6a00 	vldr	s13, [r3]
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <Control_Value_Set+0x2f8>)
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <Control_Value_Set+0x300>)
 8002e94:	edc3 7a00 	vstr	s15, [r3]
 8002e98:	e011      	b.n	8002ebe <Control_Value_Set+0x19e>
	}else{
		I1rms_set_fix=(I1rms_set-2)*1.15f+2;
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <Control_Value_Set+0x30c>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ea8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003030 <Control_Value_Set+0x310>
 8002eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002eb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <Control_Value_Set+0x300>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
	}

	if(choose_inductance_capacity==1){
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <Control_Value_Set+0x2c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d15b      	bne.n	8002f7e <Control_Value_Set+0x25e>
		if(PF_set<0.5){
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <Control_Value_Set+0x2cc>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d513      	bpl.n	8002f02 <Control_Value_Set+0x1e2>
			I1_ref = I1rms_set_fix+0.03545f-0.05f*PF_set;
 8002eda:	4b51      	ldr	r3, [pc, #324]	; (8003020 <Control_Value_Set+0x300>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003034 <Control_Value_Set+0x314>
 8002ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ee8:	4b40      	ldr	r3, [pc, #256]	; (8002fec <Control_Value_Set+0x2cc>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003038 <Control_Value_Set+0x318>
 8002ef2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efa:	4b50      	ldr	r3, [pc, #320]	; (800303c <Control_Value_Set+0x31c>)
 8002efc:	edc3 7a00 	vstr	s15, [r3]
 8002f00:	e0bb      	b.n	800307a <Control_Value_Set+0x35a>
		}else if(PF_set<0.62){
 8002f02:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <Control_Value_Set+0x2cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb1e 	bl	8000548 <__aeabi_f2d>
 8002f0c:	a330      	add	r3, pc, #192	; (adr r3, 8002fd0 <Control_Value_Set+0x2b0>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fde3 	bl	8000adc <__aeabi_dcmplt>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <Control_Value_Set+0x212>
			I1_ref = I1rms_set_fix+0.016f;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <Control_Value_Set+0x300>)
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003040 <Control_Value_Set+0x320>
 8002f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <Control_Value_Set+0x31c>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
 8002f30:	e0a3      	b.n	800307a <Control_Value_Set+0x35a>
		}else if(PF_set<0.82){
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <Control_Value_Set+0x2cc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	a326      	add	r3, pc, #152	; (adr r3, 8002fd8 <Control_Value_Set+0x2b8>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fdcb 	bl	8000adc <__aeabi_dcmplt>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <Control_Value_Set+0x254>
			I1_ref = I1rms_set_fix+0.0702f-0.0858f*PF_set;
 8002f4c:	4b34      	ldr	r3, [pc, #208]	; (8003020 <Control_Value_Set+0x300>)
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003044 <Control_Value_Set+0x324>
 8002f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <Control_Value_Set+0x2cc>)
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003048 <Control_Value_Set+0x328>
 8002f64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <Control_Value_Set+0x31c>)
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
 8002f72:	e082      	b.n	800307a <Control_Value_Set+0x35a>
		}else{
			I1_ref = I1rms_set_fix;
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <Control_Value_Set+0x300>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <Control_Value_Set+0x31c>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e07d      	b.n	800307a <Control_Value_Set+0x35a>
		}
	}else {
		//Mode1容性
		if(PF_set<0.64){
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <Control_Value_Set+0x2cc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fae0 	bl	8000548 <__aeabi_f2d>
 8002f88:	a315      	add	r3, pc, #84	; (adr r3, 8002fe0 <Control_Value_Set+0x2c0>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd fda5 	bl	8000adc <__aeabi_dcmplt>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05d      	beq.n	8003054 <Control_Value_Set+0x334>
			I1_ref = I1rms_set_fix+0.0816f-0.10592f*PF_set;
 8002f98:	4b21      	ldr	r3, [pc, #132]	; (8003020 <Control_Value_Set+0x300>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800304c <Control_Value_Set+0x32c>
 8002fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <Control_Value_Set+0x2cc>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003050 <Control_Value_Set+0x330>
 8002fb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <Control_Value_Set+0x31c>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
 8002fbe:	e05c      	b.n	800307a <Control_Value_Set+0x35a>
 8002fc0:	b0f27bb3 	.word	0xb0f27bb3
 8002fc4:	3faa6b50 	.word	0x3faa6b50
 8002fc8:	b5dcc63f 	.word	0xb5dcc63f
 8002fcc:	3fa07c84 	.word	0x3fa07c84
 8002fd0:	3d70a3d7 	.word	0x3d70a3d7
 8002fd4:	3fe3d70a 	.word	0x3fe3d70a
 8002fd8:	a3d70a3d 	.word	0xa3d70a3d
 8002fdc:	3fea3d70 	.word	0x3fea3d70
 8002fe0:	47ae147b 	.word	0x47ae147b
 8002fe4:	3fe47ae1 	.word	0x3fe47ae1
 8002fe8:	20000024 	.word	0x20000024
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	3f8245f6 	.word	0x3f8245f6
 8002ff4:	3c9f16b1 	.word	0x3c9f16b1
 8002ff8:	2000241c 	.word	0x2000241c
 8002ffc:	3f666666 	.word	0x3f666666
 8003000:	3f8374bc 	.word	0x3f8374bc
 8003004:	3cd5cfab 	.word	0x3cd5cfab
 8003008:	3f8271de 	.word	0x3f8271de
 800300c:	3c8db8bb 	.word	0x3c8db8bb
 8003010:	3f7b15b5 	.word	0x3f7b15b5
 8003014:	2000002c 	.word	0x2000002c
 8003018:	20002360 	.word	0x20002360
 800301c:	20000034 	.word	0x20000034
 8003020:	20002420 	.word	0x20002420
 8003024:	20000038 	.word	0x20000038
 8003028:	2000003c 	.word	0x2000003c
 800302c:	20000030 	.word	0x20000030
 8003030:	3f933333 	.word	0x3f933333
 8003034:	3d113405 	.word	0x3d113405
 8003038:	3d4ccccd 	.word	0x3d4ccccd
 800303c:	20000028 	.word	0x20000028
 8003040:	3c83126f 	.word	0x3c83126f
 8003044:	3d8fc505 	.word	0x3d8fc505
 8003048:	3dafb7e9 	.word	0x3dafb7e9
 800304c:	3da71de7 	.word	0x3da71de7
 8003050:	3dd8ec96 	.word	0x3dd8ec96
		}else{
			I1_ref = I1rms_set_fix+0.0338f-0.03748f*PF_set;
 8003054:	4b31      	ldr	r3, [pc, #196]	; (800311c <Control_Value_Set+0x3fc>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003120 <Control_Value_Set+0x400>
 800305e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <Control_Value_Set+0x404>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003128 <Control_Value_Set+0x408>
 800306c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <Control_Value_Set+0x40c>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
		}

	}
		ref_I1d=I1_ref*Sqrt2*cosphi;
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <Control_Value_Set+0x40c>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003130 <Control_Value_Set+0x410>
 8003084:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <Control_Value_Set+0x414>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <Control_Value_Set+0x418>)
 8003094:	edc3 7a00 	vstr	s15, [r3]
		arm_sqrt_f32(1-cosphi*cosphi, &sinphi);
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <Control_Value_Set+0x414>)
 800309a:	ed93 7a00 	vldr	s14, [r3]
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <Control_Value_Set+0x414>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <Control_Value_Set+0x41c>)
 80030b6:	603b      	str	r3, [r7, #0]
    if (in >= 0.0f)
 80030b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	db09      	blt.n	80030da <Control_Value_Set+0x3ba>
      *pOut = __builtin_sqrtf(in);
 80030c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80030ca:	f009 ff77 	bl	800cfbc <sqrtf>
 80030ce:	eef0 7a40 	vmov.f32	s15, s0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80030d8:	e004      	b.n	80030e4 <Control_Value_Set+0x3c4>
      *pOut = 0.0f;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80030e2:	bf00      	nop
		ref_I1q=I1_ref*Sqrt2*sinphi*choose_inductance_capacity;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <Control_Value_Set+0x40c>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003130 <Control_Value_Set+0x410>
 80030ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <Control_Value_Set+0x41c>)
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <Control_Value_Set+0x420>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <Control_Value_Set+0x424>)
 800310e:	edc3 7a00 	vstr	s15, [r3]

}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	bf00      	nop
 800311c:	20002420 	.word	0x20002420
 8003120:	3d0a71de 	.word	0x3d0a71de
 8003124:	20000010 	.word	0x20000010
 8003128:	3d1984a1 	.word	0x3d1984a1
 800312c:	20000028 	.word	0x20000028
 8003130:	3fb50481 	.word	0x3fb50481
 8003134:	2000241c 	.word	0x2000241c
 8003138:	20000004 	.word	0x20000004
 800313c:	20002418 	.word	0x20002418
 8003140:	20000024 	.word	0x20000024
 8003144:	20000008 	.word	0x20000008

08003148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <MX_GPIO_Init+0x150>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <MX_GPIO_Init+0x150>)
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <MX_GPIO_Init+0x150>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <MX_GPIO_Init+0x150>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <MX_GPIO_Init+0x150>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <MX_GPIO_Init+0x150>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <MX_GPIO_Init+0x150>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a3e      	ldr	r2, [pc, #248]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <MX_GPIO_Init+0x150>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <MX_GPIO_Init+0x150>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a37      	ldr	r2, [pc, #220]	; (8003298 <MX_GPIO_Init+0x150>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <MX_GPIO_Init+0x150>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <MX_GPIO_Init+0x150>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a30      	ldr	r2, [pc, #192]	; (8003298 <MX_GPIO_Init+0x150>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <MX_GPIO_Init+0x150>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <MX_GPIO_Init+0x150>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a29      	ldr	r2, [pc, #164]	; (8003298 <MX_GPIO_Init+0x150>)
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <MX_GPIO_Init+0x150>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003206:	2200      	movs	r2, #0
 8003208:	2102      	movs	r1, #2
 800320a:	4824      	ldr	r0, [pc, #144]	; (800329c <MX_GPIO_Init+0x154>)
 800320c:	f002 fa18 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003210:	233c      	movs	r3, #60	; 0x3c
 8003212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003214:	2300      	movs	r3, #0
 8003216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	481f      	ldr	r0, [pc, #124]	; (80032a0 <MX_GPIO_Init+0x158>)
 8003224:	f002 f858 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003228:	2302      	movs	r3, #2
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322c:	2301      	movs	r3, #1
 800322e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	4619      	mov	r1, r3
 800323e:	4817      	ldr	r0, [pc, #92]	; (800329c <MX_GPIO_Init+0x154>)
 8003240:	f002 f84a 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003244:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800324e:	2301      	movs	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4812      	ldr	r0, [pc, #72]	; (80032a4 <MX_GPIO_Init+0x15c>)
 800325a:	f002 f83d 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003264:	2300      	movs	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	4619      	mov	r1, r3
 8003272:	480a      	ldr	r0, [pc, #40]	; (800329c <MX_GPIO_Init+0x154>)
 8003274:	f002 f830 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003278:	230f      	movs	r3, #15
 800327a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	4807      	ldr	r0, [pc, #28]	; (80032a8 <MX_GPIO_Init+0x160>)
 800328c:	f002 f824 	bl	80052d8 <HAL_GPIO_Init>

}
 8003290:	bf00      	nop
 8003292:	3730      	adds	r7, #48	; 0x30
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40020400 	.word	0x40020400
 80032a8:	40020c00 	.word	0x40020c00

080032ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032b0:	f000 fd6e 	bl	8003d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b4:	f000 f852 	bl	800335c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032b8:	f7ff ff46 	bl	8003148 <MX_GPIO_Init>
  MX_DMA_Init();
 80032bc:	f7fe f86e 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 80032c0:	f7fd fe9a 	bl	8000ff8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80032c4:	f000 fa0c 	bl	80036e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80032c8:	f000 fab6 	bl	8003838 <MX_TIM2_Init>
  MX_DAC_Init();
 80032cc:	f7fd fff8 	bl	80012c0 <MX_DAC_Init>
  MX_USART1_UART_Init();
 80032d0:	f000 fca8 	bl	8003c24 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 80032d4:	f000 fafc 	bl	80038d0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80032d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032dc:	f000 fdca 	bl	8003e74 <HAL_Delay>
	printf("BL(0);\r\n");
 80032e0:	4812      	ldr	r0, [pc, #72]	; (800332c <main+0x80>)
 80032e2:	f006 f965 	bl	80095b0 <puts>
	HAL_Delay(40);
 80032e6:	2028      	movs	r0, #40	; 0x28
 80032e8:	f000 fdc4 	bl	8003e74 <HAL_Delay>

//  Keyboard_Init();


  //TIM中断控制程序打开
  HAL_TIM_Base_Start_IT(&htim2);
 80032ec:	4810      	ldr	r0, [pc, #64]	; (8003330 <main+0x84>)
 80032ee:	f002 fea9 	bl	8006044 <HAL_TIM_Base_Start_IT>
  //ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, ADC_num);
 80032f2:	2208      	movs	r2, #8
 80032f4:	490f      	ldr	r1, [pc, #60]	; (8003334 <main+0x88>)
 80032f6:	4810      	ldr	r0, [pc, #64]	; (8003338 <main+0x8c>)
 80032f8:	f000 fe24 	bl	8003f44 <HAL_ADC_Start_DMA>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80032fc:	2100      	movs	r1, #0
 80032fe:	480f      	ldr	r0, [pc, #60]	; (800333c <main+0x90>)
 8003300:	f001 fb21 	bl	8004946 <HAL_DAC_Start>

  //注意KPKI 在幅值为1时根据Simulink得到对应的是314 1725，可以根据此来定
  //20Vp Vs 20 100, Reset 才能正常使用10V时，就做了延�????????
  PID_init(&PLL,20,180,0,500,100,314,Control_Time);
 8003304:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8003340 <main+0x94>
 8003308:	eddf 2a0e 	vldr	s5, [pc, #56]	; 8003344 <main+0x98>
 800330c:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8003348 <main+0x9c>
 8003310:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800334c <main+0xa0>
 8003314:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8003350 <main+0xa4>
 8003318:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8003354 <main+0xa8>
 800331c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <main+0xac>)
 8003322:	f7fe ff49 	bl	80021b8 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Screen_Print();
 8003326:	f7ff fad1 	bl	80028cc <Screen_Print>
 800332a:	e7fc      	b.n	8003326 <main+0x7a>
 800332c:	0800d1cc 	.word	0x0800d1cc
 8003330:	20002470 	.word	0x20002470
 8003334:	200003a4 	.word	0x200003a4
 8003338:	2000023c 	.word	0x2000023c
 800333c:	200002e4 	.word	0x200002e4
 8003340:	3851b717 	.word	0x3851b717
 8003344:	439d0000 	.word	0x439d0000
 8003348:	42c80000 	.word	0x42c80000
 800334c:	43fa0000 	.word	0x43fa0000
 8003350:	00000000 	.word	0x00000000
 8003354:	43340000 	.word	0x43340000
 8003358:	200023c0 	.word	0x200023c0

0800335c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b094      	sub	sp, #80	; 0x50
 8003360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003362:	f107 0320 	add.w	r3, r7, #32
 8003366:	2230      	movs	r2, #48	; 0x30
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f005 f938 	bl	80085e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	4b28      	ldr	r3, [pc, #160]	; (8003428 <SystemClock_Config+0xcc>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <SystemClock_Config+0xcc>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <SystemClock_Config+0xcc>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <SystemClock_Config+0xd0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a21      	ldr	r2, [pc, #132]	; (800342c <SystemClock_Config+0xd0>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <SystemClock_Config+0xd0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c2:	2302      	movs	r3, #2
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033cc:	2308      	movs	r3, #8
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 80033d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033d6:	2302      	movs	r3, #2
 80033d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033da:	2304      	movs	r3, #4
 80033dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 f946 	bl	8005674 <HAL_RCC_OscConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80033ee:	f000 f81f 	bl	8003430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f2:	230f      	movs	r3, #15
 80033f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f6:	2302      	movs	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003402:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	2105      	movs	r1, #5
 8003410:	4618      	mov	r0, r3
 8003412:	f002 fba7 	bl	8005b64 <HAL_RCC_ClockConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800341c:	f000 f808 	bl	8003430 <Error_Handler>
  }
}
 8003420:	bf00      	nop
 8003422:	3750      	adds	r7, #80	; 0x50
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	40007000 	.word	0x40007000

08003430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003434:	b672      	cpsid	i
}
 8003436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003438:	e7fe      	b.n	8003438 <Error_Handler+0x8>
	...

0800343c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_MspInit+0x4c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <HAL_MspInit+0x4c>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_MspInit+0x4c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_MspInit+0x4c>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a08      	ldr	r2, [pc, #32]	; (8003488 <HAL_MspInit+0x4c>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_MspInit+0x4c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800347a:	2004      	movs	r0, #4
 800347c:	f001 fa00 	bl	8004880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <NMI_Handler+0x4>

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <MemManage_Handler+0x4>

0800349e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <UsageFault_Handler+0x4>

080034aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f000 fcac 	bl	8003e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034e6:	f002 ffaf 	bl	8006448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20002428 	.word	0x20002428

080034f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM2_IRQHandler+0x10>)
 80034fa:	f002 ffa5 	bl	8006448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20002470 	.word	0x20002470

08003508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <USART1_IRQHandler+0x10>)
 800350e:	f004 f863 	bl	80075d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20002500 	.word	0x20002500

0800351c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA2_Stream0_IRQHandler+0x10>)
 8003522:	f001 fc6f 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000284 	.word	0x20000284

08003530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	return 1;
 8003534:	2301      	movs	r3, #1
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <_kill>:

int _kill(int pid, int sig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800354a:	f005 f809 	bl	8008560 <__errno>
 800354e:	4603      	mov	r3, r0
 8003550:	2216      	movs	r2, #22
 8003552:	601a      	str	r2, [r3, #0]
	return -1;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_exit>:

void _exit (int status)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ffe7 	bl	8003540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003572:	e7fe      	b.n	8003572 <_exit+0x12>

08003574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e00a      	b.n	800359c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003586:	f3af 8000 	nop.w
 800358a:	4601      	mov	r1, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	60ba      	str	r2, [r7, #8]
 8003592:	b2ca      	uxtb	r2, r1
 8003594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3301      	adds	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	dbf0      	blt.n	8003586 <_read+0x12>
	}

return len;
 80035a4:	687b      	ldr	r3, [r7, #4]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e009      	b.n	80035d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	60ba      	str	r2, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fba5 	bl	8003d18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	3301      	adds	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	dbf1      	blt.n	80035c0 <_write+0x12>
	}
	return len;
 80035dc:	687b      	ldr	r3, [r7, #4]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_close>:

int _close(int file)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
	return -1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360e:	605a      	str	r2, [r3, #4]
	return 0;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <_isatty>:

int _isatty(int file)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
	return 1;
 8003626:	2301      	movs	r3, #1
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
	return 0;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <_sbrk+0x5c>)
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <_sbrk+0x60>)
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <_sbrk+0x64>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <_sbrk+0x68>)
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d207      	bcs.n	8003690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003680:	f004 ff6e 	bl	8008560 <__errno>
 8003684:	4603      	mov	r3, r0
 8003686:	220c      	movs	r2, #12
 8003688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e009      	b.n	80036a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <_sbrk+0x64>)
 80036a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20020000 	.word	0x20020000
 80036b0:	00000400 	.word	0x00000400
 80036b4:	20002424 	.word	0x20002424
 80036b8:	20002558 	.word	0x20002558

080036bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <SystemInit+0x20>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <SystemInit+0x20>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b096      	sub	sp, #88	; 0x58
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2220      	movs	r2, #32
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f004 ff61 	bl	80085e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800371e:	4b44      	ldr	r3, [pc, #272]	; (8003830 <MX_TIM1_Init+0x150>)
 8003720:	4a44      	ldr	r2, [pc, #272]	; (8003834 <MX_TIM1_Init+0x154>)
 8003722:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8003724:	4b42      	ldr	r3, [pc, #264]	; (8003830 <MX_TIM1_Init+0x150>)
 8003726:	2209      	movs	r2, #9
 8003728:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800372a:	4b41      	ldr	r3, [pc, #260]	; (8003830 <MX_TIM1_Init+0x150>)
 800372c:	2220      	movs	r2, #32
 800372e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <MX_TIM1_Init+0x150>)
 8003732:	f240 128f 	movw	r2, #399	; 0x18f
 8003736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003738:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <MX_TIM1_Init+0x150>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <MX_TIM1_Init+0x150>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <MX_TIM1_Init+0x150>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800374a:	4839      	ldr	r0, [pc, #228]	; (8003830 <MX_TIM1_Init+0x150>)
 800374c:	f002 fc2a 	bl	8005fa4 <HAL_TIM_Base_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003756:	f7ff fe6b 	bl	8003430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800375a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003764:	4619      	mov	r1, r3
 8003766:	4832      	ldr	r0, [pc, #200]	; (8003830 <MX_TIM1_Init+0x150>)
 8003768:	f003 f838 	bl	80067dc <HAL_TIM_ConfigClockSource>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003772:	f7ff fe5d 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003776:	482e      	ldr	r0, [pc, #184]	; (8003830 <MX_TIM1_Init+0x150>)
 8003778:	f002 fcd4 	bl	8006124 <HAL_TIM_PWM_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003782:	f7ff fe55 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800378e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003792:	4619      	mov	r1, r3
 8003794:	4826      	ldr	r0, [pc, #152]	; (8003830 <MX_TIM1_Init+0x150>)
 8003796:	f003 fd39 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80037a0:	f7ff fe46 	bl	8003430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a4:	2360      	movs	r3, #96	; 0x60
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037b0:	2300      	movs	r3, #0
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037bc:	2300      	movs	r3, #0
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c4:	2200      	movs	r2, #0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4819      	ldr	r0, [pc, #100]	; (8003830 <MX_TIM1_Init+0x150>)
 80037ca:	f002 ff45 	bl	8006658 <HAL_TIM_PWM_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80037d4:	f7ff fe2c 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037dc:	2204      	movs	r2, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4813      	ldr	r0, [pc, #76]	; (8003830 <MX_TIM1_Init+0x150>)
 80037e2:	f002 ff39 	bl	8006658 <HAL_TIM_PWM_ConfigChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80037ec:	f7ff fe20 	bl	8003430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80037fc:	230a      	movs	r3, #10
 80037fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003808:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4807      	ldr	r0, [pc, #28]	; (8003830 <MX_TIM1_Init+0x150>)
 8003814:	f003 fd76 	bl	8007304 <HAL_TIMEx_ConfigBreakDeadTime>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800381e:	f7ff fe07 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003822:	4803      	ldr	r0, [pc, #12]	; (8003830 <MX_TIM1_Init+0x150>)
 8003824:	f000 f95a 	bl	8003adc <HAL_TIM_MspPostInit>

}
 8003828:	bf00      	nop
 800382a:	3758      	adds	r7, #88	; 0x58
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20002428 	.word	0x20002428
 8003834:	40010000 	.word	0x40010000

08003838 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0308 	add.w	r3, r7, #8
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <MX_TIM2_Init+0x94>)
 8003856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <MX_TIM2_Init+0x94>)
 800385e:	2209      	movs	r2, #9
 8003860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <MX_TIM2_Init+0x94>)
 8003864:	2220      	movs	r2, #32
 8003866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <MX_TIM2_Init+0x94>)
 800386a:	f240 128f 	movw	r2, #399	; 0x18f
 800386e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_TIM2_Init+0x94>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <MX_TIM2_Init+0x94>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800387c:	4813      	ldr	r0, [pc, #76]	; (80038cc <MX_TIM2_Init+0x94>)
 800387e:	f002 fb91 	bl	8005fa4 <HAL_TIM_Base_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003888:	f7ff fdd2 	bl	8003430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4619      	mov	r1, r3
 8003898:	480c      	ldr	r0, [pc, #48]	; (80038cc <MX_TIM2_Init+0x94>)
 800389a:	f002 ff9f 	bl	80067dc <HAL_TIM_ConfigClockSource>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038a4:	f7ff fdc4 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	4619      	mov	r1, r3
 80038b4:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_TIM2_Init+0x94>)
 80038b6:	f003 fca9 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038c0:	f7ff fdb6 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20002470 	.word	0x20002470

080038d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b096      	sub	sp, #88	; 0x58
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	611a      	str	r2, [r3, #16]
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	2220      	movs	r2, #32
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f004 fe69 	bl	80085e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800390e:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003910:	4a44      	ldr	r2, [pc, #272]	; (8003a24 <MX_TIM8_Init+0x154>)
 8003912:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003916:	2209      	movs	r2, #9
 8003918:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <MX_TIM8_Init+0x150>)
 800391c:	2220      	movs	r2, #32
 800391e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 800-1;
 8003920:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003922:	f240 321f 	movw	r2, #799	; 0x31f
 8003926:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003928:	4b3d      	ldr	r3, [pc, #244]	; (8003a20 <MX_TIM8_Init+0x150>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800393a:	4839      	ldr	r0, [pc, #228]	; (8003a20 <MX_TIM8_Init+0x150>)
 800393c:	f002 fb32 	bl	8005fa4 <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003946:	f7ff fd73 	bl	8003430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003954:	4619      	mov	r1, r3
 8003956:	4832      	ldr	r0, [pc, #200]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003958:	f002 ff40 	bl	80067dc <HAL_TIM_ConfigClockSource>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003962:	f7ff fd65 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003966:	482e      	ldr	r0, [pc, #184]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003968:	f002 fbdc 	bl	8006124 <HAL_TIM_PWM_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003972:	f7ff fd5d 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800397e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003982:	4619      	mov	r1, r3
 8003984:	4826      	ldr	r0, [pc, #152]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003986:	f003 fc41 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003990:	f7ff fd4e 	bl	8003430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003994:	2360      	movs	r3, #96	; 0x60
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a0:	2300      	movs	r3, #0
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039a8:	2300      	movs	r3, #0
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b4:	2200      	movs	r2, #0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4819      	ldr	r0, [pc, #100]	; (8003a20 <MX_TIM8_Init+0x150>)
 80039ba:	f002 fe4d 	bl	8006658 <HAL_TIM_PWM_ConfigChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80039c4:	f7ff fd34 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039cc:	2204      	movs	r2, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4813      	ldr	r0, [pc, #76]	; (8003a20 <MX_TIM8_Init+0x150>)
 80039d2:	f002 fe41 	bl	8006658 <HAL_TIM_PWM_ConfigChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80039dc:	f7ff fd28 	bl	8003430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80039ec:	230a      	movs	r3, #10
 80039ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4807      	ldr	r0, [pc, #28]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003a04:	f003 fc7e 	bl	8007304 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8003a0e:	f7ff fd0f 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <MX_TIM8_Init+0x150>)
 8003a14:	f000 f862 	bl	8003adc <HAL_TIM_MspPostInit>

}
 8003a18:	bf00      	nop
 8003a1a:	3758      	adds	r7, #88	; 0x58
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200024b8 	.word	0x200024b8
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <HAL_TIM_Base_MspInit+0xa8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d116      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2019      	movs	r0, #25
 8003a5c:	f000 ff1b 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a60:	2019      	movs	r0, #25
 8003a62:	f000 ff34 	bl	80048ce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a66:	e02e      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d116      	bne.n	8003aa0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2100      	movs	r1, #0
 8003a92:	201c      	movs	r0, #28
 8003a94:	f000 feff 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a98:	201c      	movs	r0, #28
 8003a9a:	f000 ff18 	bl	80048ce <HAL_NVIC_EnableIRQ>
}
 8003a9e:	e012      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM8)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_TIM_Base_MspInit+0xb0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_TIM_Base_MspInit+0xac>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a43      	ldr	r2, [pc, #268]	; (8003c08 <HAL_TIM_MspPostInit+0x12c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d11f      	bne.n	8003b3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a41      	ldr	r2, [pc, #260]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b08:	f043 0310 	orr.w	r3, r3, #16
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	69bb      	ldr	r3, [r7, #24]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003b1a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4836      	ldr	r0, [pc, #216]	; (8003c10 <HAL_TIM_MspPostInit+0x134>)
 8003b38:	f001 fbce 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b3c:	e05f      	b.n	8003bfe <HAL_TIM_MspPostInit+0x122>
  else if(timHandle->Instance==TIM8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_TIM_MspPostInit+0x138>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d15a      	bne.n	8003bfe <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6313      	str	r3, [r2, #48]	; 0x30
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	6313      	str	r3, [r2, #48]	; 0x30
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_TIM_MspPostInit+0x130>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bac:	2303      	movs	r3, #3
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4818      	ldr	r0, [pc, #96]	; (8003c18 <HAL_TIM_MspPostInit+0x13c>)
 8003bb8:	f001 fb8e 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4810      	ldr	r0, [pc, #64]	; (8003c1c <HAL_TIM_MspPostInit+0x140>)
 8003bda:	f001 fb7d 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bde:	23c0      	movs	r3, #192	; 0xc0
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4809      	ldr	r0, [pc, #36]	; (8003c20 <HAL_TIM_MspPostInit+0x144>)
 8003bfa:	f001 fb6d 	bl	80052d8 <HAL_GPIO_Init>
}
 8003bfe:	bf00      	nop
 8003c00:	3730      	adds	r7, #48	; 0x30
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40010400 	.word	0x40010400
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800

08003c24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <MX_USART1_UART_Init+0x50>)
 8003c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c5a:	4805      	ldr	r0, [pc, #20]	; (8003c70 <MX_USART1_UART_Init+0x4c>)
 8003c5c:	f003 fbdd 	bl	800741a <HAL_UART_Init>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c66:	f7ff fbe3 	bl	8003430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20002500 	.word	0x20002500
 8003c74:	40011000 	.word	0x40011000

08003c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_UART_MspInit+0x94>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d134      	bne.n	8003d04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003ca4:	f043 0310 	orr.w	r3, r3, #16
 8003ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_UART_MspInit+0x98>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4619      	mov	r1, r3
 8003cee:	4809      	ldr	r0, [pc, #36]	; (8003d14 <HAL_UART_MspInit+0x9c>)
 8003cf0:	f001 faf2 	bl	80052d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	2025      	movs	r0, #37	; 0x25
 8003cfa:	f000 fdcc 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cfe:	2025      	movs	r0, #37	; 0x25
 8003d00:	f000 fde5 	bl	80048ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020000 	.word	0x40020000

08003d18 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003d20:	1d39      	adds	r1, r7, #4
 8003d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d26:	2201      	movs	r2, #1
 8003d28:	4803      	ldr	r0, [pc, #12]	; (8003d38 <__io_putchar+0x20>)
 8003d2a:	f003 fbc3 	bl	80074b4 <HAL_UART_Transmit>

  return ch;
 8003d2e:	687b      	ldr	r3, [r7, #4]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20002500 	.word	0x20002500

08003d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d40:	480d      	ldr	r0, [pc, #52]	; (8003d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d42:	490e      	ldr	r1, [pc, #56]	; (8003d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d48:	e002      	b.n	8003d50 <LoopCopyDataInit>

08003d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d4e:	3304      	adds	r3, #4

08003d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d54:	d3f9      	bcc.n	8003d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d56:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d58:	4c0b      	ldr	r4, [pc, #44]	; (8003d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d5c:	e001      	b.n	8003d62 <LoopFillZerobss>

08003d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d60:	3204      	adds	r2, #4

08003d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d64:	d3fb      	bcc.n	8003d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d66:	f7ff fca9 	bl	80036bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d6a:	f004 fbff 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6e:	f7ff fa9d 	bl	80032ac <main>
  bx  lr    
 8003d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d7c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003d80:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 8003d84:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003d88:	20002558 	.word	0x20002558

08003d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d8c:	e7fe      	b.n	8003d8c <ADC_IRQHandler>
	...

08003d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_Init+0x40>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <HAL_Init+0x40>)
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_Init+0x40>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_Init+0x40>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_Init+0x40>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_Init+0x40>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db8:	2003      	movs	r0, #3
 8003dba:	f000 fd61 	bl	8004880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f000 f808 	bl	8003dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc4:	f7ff fb3a 	bl	800343c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x54>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_InitTick+0x58>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd79 	bl	80048ea <HAL_SYSTICK_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00e      	b.n	8003e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d80a      	bhi.n	8003e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f000 fd41 	bl	8004896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e14:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <HAL_InitTick+0x5c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000040 	.word	0x20000040
 8003e2c:	20000048 	.word	0x20000048
 8003e30:	20000044 	.word	0x20000044

08003e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_IncTick+0x20>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_IncTick+0x24>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <HAL_IncTick+0x24>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000048 	.word	0x20000048
 8003e58:	20002544 	.word	0x20002544

08003e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_GetTick+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20002544 	.word	0x20002544

08003e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e7c:	f7ff ffee 	bl	8003e5c <HAL_GetTick>
 8003e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d005      	beq.n	8003e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_Delay+0x44>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e9a:	bf00      	nop
 8003e9c:	f7ff ffde 	bl	8003e5c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d8f7      	bhi.n	8003e9c <HAL_Delay+0x28>
  {
  }
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000048 	.word	0x20000048

08003ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e033      	b.n	8003f3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd f940 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f02:	f023 0302 	bic.w	r3, r3, #2
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa68 	bl	80043e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
 8003f2a:	e001      	b.n	8003f30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_Start_DMA+0x1e>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0e9      	b.n	8004136 <HAL_ADC_Start_DMA+0x1f2>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d018      	beq.n	8003faa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f88:	4b6d      	ldr	r3, [pc, #436]	; (8004140 <HAL_ADC_Start_DMA+0x1fc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6d      	ldr	r2, [pc, #436]	; (8004144 <HAL_ADC_Start_DMA+0x200>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0c9a      	lsrs	r2, r3, #18
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f9c:	e002      	b.n	8003fa4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f9      	bne.n	8003f9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d107      	bne.n	8003fca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 80a1 	bne.w	800411c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004004:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d106      	bne.n	8004028 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f023 0206 	bic.w	r2, r3, #6
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
 8004026:	e002      	b.n	800402e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_ADC_Start_DMA+0x204>)
 8004038:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4a43      	ldr	r2, [pc, #268]	; (800414c <HAL_ADC_Start_DMA+0x208>)
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	4a42      	ldr	r2, [pc, #264]	; (8004150 <HAL_ADC_Start_DMA+0x20c>)
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_ADC_Start_DMA+0x210>)
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800405a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800406a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	334c      	adds	r3, #76	; 0x4c
 8004086:	4619      	mov	r1, r3
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f000 fdd0 	bl	8004c30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2b00      	cmp	r3, #0
 800409a:	d12a      	bne.n	80040f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <HAL_ADC_Start_DMA+0x214>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d015      	beq.n	80040d2 <HAL_ADC_Start_DMA+0x18e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2c      	ldr	r2, [pc, #176]	; (800415c <HAL_ADC_Start_DMA+0x218>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_Start_DMA+0x178>
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_ADC_Start_DMA+0x204>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_ADC_Start_DMA+0x21c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d136      	bne.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_ADC_Start_DMA+0x204>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d130      	bne.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d129      	bne.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	e020      	b.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_ADC_Start_DMA+0x214>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d11b      	bne.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d114      	bne.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	e00b      	b.n	8004134 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0210 	orr.w	r2, r3, #16
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000040 	.word	0x20000040
 8004144:	431bde83 	.word	0x431bde83
 8004148:	40012300 	.word	0x40012300
 800414c:	080045dd 	.word	0x080045dd
 8004150:	08004697 	.word	0x08004697
 8004154:	080046b3 	.word	0x080046b3
 8004158:	40012000 	.word	0x40012000
 800415c:	40012100 	.word	0x40012100
 8004160:	40012200 	.word	0x40012200

08004164 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x1c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e105      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x228>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d925      	bls.n	8004218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	3b1e      	subs	r3, #30
 80041e2:	2207      	movs	r2, #7
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43da      	mvns	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	400a      	ands	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68d9      	ldr	r1, [r3, #12]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	4618      	mov	r0, r3
 8004204:	4603      	mov	r3, r0
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4403      	add	r3, r0
 800420a:	3b1e      	subs	r3, #30
 800420c:	409a      	lsls	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	e022      	b.n	800425e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	4613      	mov	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	2207      	movs	r2, #7
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	400a      	ands	r2, r1
 800423a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6919      	ldr	r1, [r3, #16]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	4618      	mov	r0, r3
 800424e:	4603      	mov	r3, r0
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4403      	add	r3, r0
 8004254:	409a      	lsls	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b06      	cmp	r3, #6
 8004264:	d824      	bhi.n	80042b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3b05      	subs	r3, #5
 8004278:	221f      	movs	r2, #31
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	400a      	ands	r2, r1
 8004286:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	3b05      	subs	r3, #5
 80042a2:	fa00 f203 	lsl.w	r2, r0, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34
 80042ae:	e04c      	b.n	800434a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d824      	bhi.n	8004302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	3b23      	subs	r3, #35	; 0x23
 80042ca:	221f      	movs	r2, #31
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43da      	mvns	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	400a      	ands	r2, r1
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	3b23      	subs	r3, #35	; 0x23
 80042f4:	fa00 f203 	lsl.w	r2, r0, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004300:	e023      	b.n	800434a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	3b41      	subs	r3, #65	; 0x41
 8004314:	221f      	movs	r2, #31
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43da      	mvns	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	400a      	ands	r2, r1
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4618      	mov	r0, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	3b41      	subs	r3, #65	; 0x41
 800433e:	fa00 f203 	lsl.w	r2, r0, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <HAL_ADC_ConfigChannel+0x234>)
 800434c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <HAL_ADC_ConfigChannel+0x238>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d109      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1cc>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b12      	cmp	r3, #18
 800435e:	d105      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_ADC_ConfigChannel+0x238>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d123      	bne.n	80043be <HAL_ADC_ConfigChannel+0x21e>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b10      	cmp	r3, #16
 800437c:	d003      	beq.n	8004386 <HAL_ADC_ConfigChannel+0x1e6>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b11      	cmp	r3, #17
 8004384:	d11b      	bne.n	80043be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b10      	cmp	r3, #16
 8004398:	d111      	bne.n	80043be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_ADC_ConfigChannel+0x23c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <HAL_ADC_ConfigChannel+0x240>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	0c9a      	lsrs	r2, r3, #18
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043b0:	e002      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f9      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40012300 	.word	0x40012300
 80043d8:	40012000 	.word	0x40012000
 80043dc:	20000040 	.word	0x20000040
 80043e0:	431bde83 	.word	0x431bde83

080043e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ec:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <ADC_Init+0x1f0>)
 80043ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	021a      	lsls	r2, r3, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800443c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6899      	ldr	r1, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <ADC_Init+0x1f4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800448a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	e00f      	b.n	80044e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0202 	bic.w	r2, r2, #2
 80044f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	7e1b      	ldrb	r3, [r3, #24]
 80044fc:	005a      	lsls	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800452e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	3b01      	subs	r3, #1
 800453c:	035a      	lsls	r2, r3, #13
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e007      	b.n	8004558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	3b01      	subs	r3, #1
 8004574:	051a      	lsls	r2, r3, #20
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800458c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800459a:	025a      	lsls	r2, r3, #9
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	029a      	lsls	r2, r3, #10
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40012300 	.word	0x40012300
 80045d8:	0f000001 	.word	0x0f000001

080045dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d13c      	bne.n	8004670 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d12b      	bne.n	8004668 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004614:	2b00      	cmp	r3, #0
 8004616:	d127      	bne.n	8004668 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004630:	2b00      	cmp	r3, #0
 8004632:	d119      	bne.n	8004668 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0220 	bic.w	r2, r2, #32
 8004642:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff fd7b 	bl	8004164 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800466e:	e00e      	b.n	800468e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fd85 	bl	800418c <HAL_ADC_ErrorCallback>
}
 8004682:	e004      	b.n	800468e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fd67 	bl	8004178 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fd5a 	bl	800418c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046fc:	4013      	ands	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004712:	4a04      	ldr	r2, [pc, #16]	; (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60d3      	str	r3, [r2, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <__NVIC_GetPriorityGrouping+0x18>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 0307 	and.w	r3, r3, #7
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db0b      	blt.n	800476e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	4907      	ldr	r1, [pc, #28]	; (800477c <__NVIC_EnableIRQ+0x38>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2001      	movs	r0, #1
 8004766:	fa00 f202 	lsl.w	r2, r0, r2
 800476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e100 	.word	0xe000e100

08004780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004790:	2b00      	cmp	r3, #0
 8004792:	db0a      	blt.n	80047aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	490c      	ldr	r1, [pc, #48]	; (80047cc <__NVIC_SetPriority+0x4c>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	0112      	lsls	r2, r2, #4
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a8:	e00a      	b.n	80047c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4908      	ldr	r1, [pc, #32]	; (80047d0 <__NVIC_SetPriority+0x50>)
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	3b04      	subs	r3, #4
 80047b8:	0112      	lsls	r2, r2, #4
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	440b      	add	r3, r1
 80047be:	761a      	strb	r2, [r3, #24]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000e100 	.word	0xe000e100
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f1c3 0307 	rsb	r3, r3, #7
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	bf28      	it	cs
 80047f2:	2304      	movcs	r3, #4
 80047f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d902      	bls.n	8004804 <NVIC_EncodePriority+0x30>
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3b03      	subs	r3, #3
 8004802:	e000      	b.n	8004806 <NVIC_EncodePriority+0x32>
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	401a      	ands	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800481c:	f04f 31ff 	mov.w	r1, #4294967295
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	43d9      	mvns	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	4313      	orrs	r3, r2
         );
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800484c:	d301      	bcc.n	8004852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800484e:	2301      	movs	r3, #1
 8004850:	e00f      	b.n	8004872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <SysTick_Config+0x40>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485a:	210f      	movs	r1, #15
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	f7ff ff8e 	bl	8004780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <SysTick_Config+0x40>)
 8004866:	2200      	movs	r2, #0
 8004868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <SysTick_Config+0x40>)
 800486c:	2207      	movs	r2, #7
 800486e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	e000e010 	.word	0xe000e010

08004880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff29 	bl	80046e0 <__NVIC_SetPriorityGrouping>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a8:	f7ff ff3e 	bl	8004728 <__NVIC_GetPriorityGrouping>
 80048ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f7ff ff8e 	bl	80047d4 <NVIC_EncodePriority>
 80048b8:	4602      	mov	r2, r0
 80048ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ff5d 	bl	8004780 <__NVIC_SetPriority>
}
 80048c6:	bf00      	nop
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff31 	bl	8004744 <__NVIC_EnableIRQ>
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffa2 	bl	800483c <SysTick_Config>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e014      	b.n	800493e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	791b      	ldrb	r3, [r3, #4]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fc fcf5 	bl	8001314 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	795b      	ldrb	r3, [r3, #5]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_DAC_Start+0x16>
 8004958:	2302      	movs	r3, #2
 800495a:	e040      	b.n	80049de <HAL_DAC_Start+0x98>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004990:	2b3c      	cmp	r3, #60	; 0x3c
 8004992:	d11d      	bne.n	80049d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	e014      	b.n	80049d0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	213c      	movs	r1, #60	; 0x3c
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0202 	orr.w	r2, r2, #2
 80049ce:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3308      	adds	r3, #8
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e004      	b.n	8004a1e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	795b      	ldrb	r3, [r3, #5]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_DAC_ConfigChannel+0x18>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e03c      	b.n	8004ac6 <HAL_DAC_ConfigChannel+0x92>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2202      	movs	r2, #2
 8004a56:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4013      	ands	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	22c0      	movs	r2, #192	; 0xc0
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ae0:	f7ff f9bc 	bl	8003e5c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e099      	b.n	8004c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b10:	e00f      	b.n	8004b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b12:	f7ff f9a3 	bl	8003e5c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d908      	bls.n	8004b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e078      	b.n	8004c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e8      	bne.n	8004b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4b38      	ldr	r3, [pc, #224]	; (8004c2c <HAL_DMA_Init+0x158>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d107      	bne.n	8004b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4313      	orrs	r3, r2
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0307 	bic.w	r3, r3, #7
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d117      	bne.n	8004bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb01 	bl	80051e0 <DMA_CheckFifoParam>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e016      	b.n	8004c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fab8 	bl	8005174 <DMA_CalcBaseAndBitshift>
 8004c04:	4603      	mov	r3, r0
 8004c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	223f      	movs	r2, #63	; 0x3f
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	f010803f 	.word	0xf010803f

08004c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_DMA_Start_IT+0x26>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e040      	b.n	8004cd8 <HAL_DMA_Start_IT+0xa8>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d12f      	bne.n	8004cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa4a 	bl	8005118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c88:	223f      	movs	r2, #63	; 0x3f
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0216 	orr.w	r2, r2, #22
 8004c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e005      	b.n	8004cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cee:	f7ff f8b5 	bl	8003e5c <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d008      	beq.n	8004d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e052      	b.n	8004db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0216 	bic.w	r2, r2, #22
 8004d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_DMA_Abort+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d62:	e013      	b.n	8004d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d64:	f7ff f87a 	bl	8003e5c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d90c      	bls.n	8004d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e015      	b.n	8004db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e4      	bne.n	8004d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	223f      	movs	r2, #63	; 0x3f
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d004      	beq.n	8004dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00c      	b.n	8004df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e10:	4b8e      	ldr	r3, [pc, #568]	; (800504c <HAL_DMA_IRQHandler+0x248>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a8e      	ldr	r2, [pc, #568]	; (8005050 <HAL_DMA_IRQHandler+0x24c>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2e:	2208      	movs	r2, #8
 8004e30:	409a      	lsls	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01a      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f043 0201 	orr.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	2201      	movs	r2, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d012      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	2204      	movs	r2, #4
 8004eac:	409a      	lsls	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2204      	movs	r2, #4
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d043      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03c      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	2210      	movs	r2, #16
 8004f00:	409a      	lsls	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d024      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
 8004f32:	e01f      	b.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e016      	b.n	8004f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0208 	bic.w	r2, r2, #8
 8004f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	2220      	movs	r2, #32
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 808f 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8087 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d136      	bne.n	800501c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0216 	bic.w	r2, r2, #22
 8004fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_DMA_IRQHandler+0x1da>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0208 	bic.w	r2, r2, #8
 8004fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	223f      	movs	r2, #63	; 0x3f
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d07e      	beq.n	8005110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
        }
        return;
 800501a:	e079      	b.n	8005110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	2b00      	cmp	r3, #0
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
 8005048:	e02c      	b.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
 800504a:	bf00      	nop
 800504c:	20000040 	.word	0x20000040
 8005050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d023      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
 8005064:	e01e      	b.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10f      	bne.n	8005094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0210 	bic.w	r2, r2, #16
 8005082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d032      	beq.n	8005112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2205      	movs	r2, #5
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d307      	bcc.n	80050ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f2      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x2cc>
 80050ea:	e000      	b.n	80050ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
 800510e:	e000      	b.n	8005112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005110:	bf00      	nop
    }
  }
}
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d108      	bne.n	8005158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005156:	e007      	b.n	8005168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3b10      	subs	r3, #16
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <DMA_CalcBaseAndBitshift+0x68>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d909      	bls.n	80051b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	659a      	str	r2, [r3, #88]	; 0x58
 80051b4:	e007      	b.n	80051c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	aaaaaaab 	.word	0xaaaaaaab
 80051dc:	0800d1ec 	.word	0x0800d1ec

080051e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11f      	bne.n	800523a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d856      	bhi.n	80052ae <DMA_CheckFifoParam+0xce>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <DMA_CheckFifoParam+0x28>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	0800522b 	.word	0x0800522b
 8005210:	08005219 	.word	0x08005219
 8005214:	080052af 	.word	0x080052af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d046      	beq.n	80052b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005228:	e043      	b.n	80052b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005232:	d140      	bne.n	80052b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005238:	e03d      	b.n	80052b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	d121      	bne.n	8005288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d837      	bhi.n	80052ba <DMA_CheckFifoParam+0xda>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <DMA_CheckFifoParam+0x70>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005261 	.word	0x08005261
 8005254:	08005267 	.word	0x08005267
 8005258:	08005261 	.word	0x08005261
 800525c:	08005279 	.word	0x08005279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e030      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d025      	beq.n	80052be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005276:	e022      	b.n	80052be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005280:	d11f      	bne.n	80052c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005286:	e01c      	b.n	80052c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d903      	bls.n	8005296 <DMA_CheckFifoParam+0xb6>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d003      	beq.n	800529c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005294:	e018      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      break;
 800529a:	e015      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      break;
 80052ac:	e00b      	b.n	80052c6 <DMA_CheckFifoParam+0xe6>
      break;
 80052ae:	bf00      	nop
 80052b0:	e00a      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b2:	bf00      	nop
 80052b4:	e008      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b6:	bf00      	nop
 80052b8:	e006      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ba:	bf00      	nop
 80052bc:	e004      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c6:	bf00      	nop
    }
  } 
  
  return status; 
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e16b      	b.n	80055cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052f4:	2201      	movs	r2, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	f040 815a 	bne.w	80055c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d005      	beq.n	800532a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005326:	2b02      	cmp	r3, #2
 8005328:	d130      	bne.n	800538c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	2203      	movs	r2, #3
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005360:	2201      	movs	r2, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 0201 	and.w	r2, r3, #1
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b03      	cmp	r3, #3
 8005396:	d017      	beq.n	80053c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	2203      	movs	r2, #3
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d123      	bne.n	800541c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	08da      	lsrs	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3208      	adds	r2, #8
 80053dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	220f      	movs	r2, #15
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	08da      	lsrs	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3208      	adds	r2, #8
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2203      	movs	r2, #3
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0203 	and.w	r2, r3, #3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80b4 	beq.w	80055c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <HAL_GPIO_Init+0x30c>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a5f      	ldr	r2, [pc, #380]	; (80055e4 <HAL_GPIO_Init+0x30c>)
 8005468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_GPIO_Init+0x30c>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547a:	4a5b      	ldr	r2, [pc, #364]	; (80055e8 <HAL_GPIO_Init+0x310>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	220f      	movs	r2, #15
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_GPIO_Init+0x314>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02b      	beq.n	80054fe <HAL_GPIO_Init+0x226>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a51      	ldr	r2, [pc, #324]	; (80055f0 <HAL_GPIO_Init+0x318>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d025      	beq.n	80054fa <HAL_GPIO_Init+0x222>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a50      	ldr	r2, [pc, #320]	; (80055f4 <HAL_GPIO_Init+0x31c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <HAL_GPIO_Init+0x21e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a4f      	ldr	r2, [pc, #316]	; (80055f8 <HAL_GPIO_Init+0x320>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d019      	beq.n	80054f2 <HAL_GPIO_Init+0x21a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4e      	ldr	r2, [pc, #312]	; (80055fc <HAL_GPIO_Init+0x324>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_GPIO_Init+0x216>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4d      	ldr	r2, [pc, #308]	; (8005600 <HAL_GPIO_Init+0x328>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00d      	beq.n	80054ea <HAL_GPIO_Init+0x212>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a4c      	ldr	r2, [pc, #304]	; (8005604 <HAL_GPIO_Init+0x32c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <HAL_GPIO_Init+0x20e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a4b      	ldr	r2, [pc, #300]	; (8005608 <HAL_GPIO_Init+0x330>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_GPIO_Init+0x20a>
 80054de:	2307      	movs	r3, #7
 80054e0:	e00e      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054e2:	2308      	movs	r3, #8
 80054e4:	e00c      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054e6:	2306      	movs	r3, #6
 80054e8:	e00a      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054ea:	2305      	movs	r3, #5
 80054ec:	e008      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054ee:	2304      	movs	r3, #4
 80054f0:	e006      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e004      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e002      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_GPIO_Init+0x228>
 80054fe:	2300      	movs	r3, #0
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	f002 0203 	and.w	r2, r2, #3
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	4093      	lsls	r3, r2
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005510:	4935      	ldr	r1, [pc, #212]	; (80055e8 <HAL_GPIO_Init+0x310>)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	3302      	adds	r3, #2
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800551e:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_GPIO_Init+0x334>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005542:	4a32      	ldr	r2, [pc, #200]	; (800560c <HAL_GPIO_Init+0x334>)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_GPIO_Init+0x334>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <HAL_GPIO_Init+0x334>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005572:	4b26      	ldr	r3, [pc, #152]	; (800560c <HAL_GPIO_Init+0x334>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_GPIO_Init+0x334>)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_GPIO_Init+0x334>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055c0:	4a12      	ldr	r2, [pc, #72]	; (800560c <HAL_GPIO_Init+0x334>)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3301      	adds	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	f67f ae90 	bls.w	80052f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3724      	adds	r7, #36	; 0x24
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40020400 	.word	0x40020400
 80055f4:	40020800 	.word	0x40020800
 80055f8:	40020c00 	.word	0x40020c00
 80055fc:	40021000 	.word	0x40021000
 8005600:	40021400 	.word	0x40021400
 8005604:	40021800 	.word	0x40021800
 8005608:	40021c00 	.word	0x40021c00
 800560c:	40013c00 	.word	0x40013c00

08005610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	887b      	ldrh	r3, [r7, #2]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e001      	b.n	8005632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
 800564c:	4613      	mov	r3, r2
 800564e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005650:	787b      	ldrb	r3, [r7, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800565c:	e003      	b.n	8005666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e267      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d075      	beq.n	800577e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005692:	4b88      	ldr	r3, [pc, #544]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
 800569a:	2b04      	cmp	r3, #4
 800569c:	d00c      	beq.n	80056b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569e:	4b85      	ldr	r3, [pc, #532]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d112      	bne.n	80056d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056aa:	4b82      	ldr	r3, [pc, #520]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b6:	d10b      	bne.n	80056d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	4b7e      	ldr	r3, [pc, #504]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d05b      	beq.n	800577c <HAL_RCC_OscConfig+0x108>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d157      	bne.n	800577c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e242      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d8:	d106      	bne.n	80056e8 <HAL_RCC_OscConfig+0x74>
 80056da:	4b76      	ldr	r3, [pc, #472]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a75      	ldr	r2, [pc, #468]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e01d      	b.n	8005724 <HAL_RCC_OscConfig+0xb0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0x98>
 80056f2:	4b70      	ldr	r3, [pc, #448]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a6f      	ldr	r2, [pc, #444]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80056f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4b6d      	ldr	r3, [pc, #436]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a6c      	ldr	r2, [pc, #432]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e00b      	b.n	8005724 <HAL_RCC_OscConfig+0xb0>
 800570c:	4b69      	ldr	r3, [pc, #420]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a68      	ldr	r2, [pc, #416]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b66      	ldr	r3, [pc, #408]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 800571e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d013      	beq.n	8005754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fe fb96 	bl	8003e5c <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005734:	f7fe fb92 	bl	8003e5c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e207      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005746:	4b5b      	ldr	r3, [pc, #364]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0xc0>
 8005752:	e014      	b.n	800577e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fe fb82 	bl	8003e5c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fe fb7e 	bl	8003e5c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e1f3      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576e:	4b51      	ldr	r3, [pc, #324]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0xe8>
 800577a:	e000      	b.n	800577e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d063      	beq.n	8005852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800578a:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005796:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d11c      	bne.n	80057dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057a2:	4b44      	ldr	r3, [pc, #272]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d116      	bne.n	80057dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_RCC_OscConfig+0x152>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d001      	beq.n	80057c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e1c7      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c6:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4937      	ldr	r1, [pc, #220]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057da:	e03a      	b.n	8005852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057e4:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCC_OscConfig+0x244>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fe fb37 	bl	8003e5c <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f2:	f7fe fb33 	bl	8003e5c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e1a8      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005804:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4925      	ldr	r1, [pc, #148]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005820:	4313      	orrs	r3, r2
 8005822:	600b      	str	r3, [r1, #0]
 8005824:	e015      	b.n	8005852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_RCC_OscConfig+0x244>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fe fb16 	bl	8003e5c <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005834:	f7fe fb12 	bl	8003e5c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e187      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <HAL_RCC_OscConfig+0x248>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fe faf6 	bl	8003e5c <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005874:	f7fe faf2 	bl	8003e5c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e167      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCC_OscConfig+0x240>)
 8005888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x200>
 8005892:	e01b      	b.n	80058cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_OscConfig+0x248>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589a:	f7fe fadf 	bl	8003e5c <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a0:	e00e      	b.n	80058c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a2:	f7fe fadb 	bl	8003e5c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d907      	bls.n	80058c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e150      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
 80058b4:	40023800 	.word	0x40023800
 80058b8:	42470000 	.word	0x42470000
 80058bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c0:	4b88      	ldr	r3, [pc, #544]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80058c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1ea      	bne.n	80058a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8097 	beq.w	8005a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058de:	4b81      	ldr	r3, [pc, #516]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	4b7d      	ldr	r3, [pc, #500]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	4a7c      	ldr	r2, [pc, #496]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6413      	str	r3, [r2, #64]	; 0x40
 80058fa:	4b7a      	ldr	r3, [pc, #488]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590a:	4b77      	ldr	r3, [pc, #476]	; (8005ae8 <HAL_RCC_OscConfig+0x474>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d118      	bne.n	8005948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005916:	4b74      	ldr	r3, [pc, #464]	; (8005ae8 <HAL_RCC_OscConfig+0x474>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a73      	ldr	r2, [pc, #460]	; (8005ae8 <HAL_RCC_OscConfig+0x474>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005922:	f7fe fa9b 	bl	8003e5c <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592a:	f7fe fa97 	bl	8003e5c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e10c      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <HAL_RCC_OscConfig+0x474>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x2ea>
 8005950:	4b64      	ldr	r3, [pc, #400]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a63      	ldr	r2, [pc, #396]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e01c      	b.n	8005998 <HAL_RCC_OscConfig+0x324>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b05      	cmp	r3, #5
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x30c>
 8005966:	4b5f      	ldr	r3, [pc, #380]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a5e      	ldr	r2, [pc, #376]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
 8005972:	4b5c      	ldr	r3, [pc, #368]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	4a5b      	ldr	r2, [pc, #364]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0x324>
 8005980:	4b58      	ldr	r3, [pc, #352]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	4a57      	ldr	r2, [pc, #348]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	6713      	str	r3, [r2, #112]	; 0x70
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a54      	ldr	r2, [pc, #336]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005992:	f023 0304 	bic.w	r3, r3, #4
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d015      	beq.n	80059cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a0:	f7fe fa5c 	bl	8003e5c <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a6:	e00a      	b.n	80059be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a8:	f7fe fa58 	bl	8003e5c <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0cb      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059be:	4b49      	ldr	r3, [pc, #292]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0ee      	beq.n	80059a8 <HAL_RCC_OscConfig+0x334>
 80059ca:	e014      	b.n	80059f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059cc:	f7fe fa46 	bl	8003e5c <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d2:	e00a      	b.n	80059ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d4:	f7fe fa42 	bl	8003e5c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0b5      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ea:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ee      	bne.n	80059d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fc:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	4a38      	ldr	r2, [pc, #224]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80a1 	beq.w	8005b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a12:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d05c      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d141      	bne.n	8005aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0x478>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe fa16 	bl	8003e5c <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe fa12 	bl	8003e5c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e087      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	061b      	lsls	r3, r3, #24
 8005a76:	491b      	ldr	r1, [pc, #108]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7c:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <HAL_RCC_OscConfig+0x478>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fe f9eb 	bl	8003e5c <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fe f9e7 	bl	8003e5c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e05c      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x416>
 8005aa8:	e054      	b.n	8005b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aaa:	4b10      	ldr	r3, [pc, #64]	; (8005aec <HAL_RCC_OscConfig+0x478>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fe f9d4 	bl	8003e5c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fe f9d0 	bl	8003e5c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e045      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_RCC_OscConfig+0x470>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x444>
 8005ad6:	e03d      	b.n	8005b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e038      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40007000 	.word	0x40007000
 8005aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005af0:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_RCC_OscConfig+0x4ec>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d028      	beq.n	8005b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d121      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d11a      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b20:	4013      	ands	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d111      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d001      	beq.n	8005b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40023800 	.word	0x40023800

08005b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0cc      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b78:	4b68      	ldr	r3, [pc, #416]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d90c      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b8      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a58      	ldr	r2, [pc, #352]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd0:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	494d      	ldr	r1, [pc, #308]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d044      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d119      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d003      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d107      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c22:	4b3f      	ldr	r3, [pc, #252]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e06f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c32:	4b3b      	ldr	r3, [pc, #236]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e067      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c42:	4b37      	ldr	r3, [pc, #220]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 0203 	bic.w	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4934      	ldr	r1, [pc, #208]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c54:	f7fe f902 	bl	8003e5c <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5c:	f7fe f8fe 	bl	8003e5c <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e04f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 020c 	and.w	r2, r3, #12
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d1eb      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d20c      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e032      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4916      	ldr	r1, [pc, #88]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	490e      	ldr	r1, [pc, #56]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cea:	f000 f821 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490a      	ldr	r1, [pc, #40]	; (8005d24 <HAL_RCC_ClockConfig+0x1c0>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe f862 	bl	8003dd4 <HAL_InitTick>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40023c00 	.word	0x40023c00
 8005d20:	40023800 	.word	0x40023800
 8005d24:	0800d1d4 	.word	0x0800d1d4
 8005d28:	20000040 	.word	0x20000040
 8005d2c:	20000044 	.word	0x20000044

08005d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b094      	sub	sp, #80	; 0x50
 8005d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d40:	2300      	movs	r3, #0
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d48:	4b79      	ldr	r3, [pc, #484]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d00d      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0x40>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	f200 80e1 	bhi.w	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x34>
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d62:	e0db      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d64:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d68:	e0db      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d6a:	4b73      	ldr	r3, [pc, #460]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6e:	e0d8      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d70:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d063      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d86:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f04f 0000 	mov.w	r0, #0
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	0159      	lsls	r1, r3, #5
 8005db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db4:	0150      	lsls	r0, r2, #5
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4621      	mov	r1, r4
 8005dbc:	1a51      	subs	r1, r2, r1
 8005dbe:	6139      	str	r1, [r7, #16]
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	018b      	lsls	r3, r1, #6
 8005dd8:	4651      	mov	r1, sl
 8005dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dde:	4651      	mov	r1, sl
 8005de0:	018a      	lsls	r2, r1, #6
 8005de2:	4651      	mov	r1, sl
 8005de4:	ebb2 0801 	subs.w	r8, r2, r1
 8005de8:	4659      	mov	r1, fp
 8005dea:	eb63 0901 	sbc.w	r9, r3, r1
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e02:	4690      	mov	r8, r2
 8005e04:	4699      	mov	r9, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	eb18 0303 	adds.w	r3, r8, r3
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	eb49 0303 	adc.w	r3, r9, r3
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e22:	4629      	mov	r1, r5
 8005e24:	024b      	lsls	r3, r1, #9
 8005e26:	4621      	mov	r1, r4
 8005e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	024a      	lsls	r2, r1, #9
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	2200      	movs	r2, #0
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e40:	f7fa ff22 	bl	8000c88 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	e058      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	2200      	movs	r2, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	4611      	mov	r1, r2
 8005e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e5e:	623b      	str	r3, [r7, #32]
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	f04f 0000 	mov.w	r0, #0
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	0159      	lsls	r1, r3, #5
 8005e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e7a:	0150      	lsls	r0, r2, #5
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4641      	mov	r1, r8
 8005e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	00eb      	lsls	r3, r5, #3
 8005eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb6:	00e2      	lsls	r2, r4, #3
 8005eb8:	4614      	mov	r4, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	4643      	mov	r3, r8
 8005ebe:	18e3      	adds	r3, r4, r3
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	eb45 0303 	adc.w	r3, r5, r3
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	028b      	lsls	r3, r1, #10
 8005eda:	4621      	mov	r1, r4
 8005edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	028a      	lsls	r2, r1, #10
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eea:	2200      	movs	r2, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	61fa      	str	r2, [r7, #28]
 8005ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef4:	f7fa fec8 	bl	8000c88 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3750      	adds	r7, #80	; 0x50
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	007a1200 	.word	0x007a1200

08005f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000040 	.word	0x20000040

08005f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f58:	f7ff fff0 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	0a9b      	lsrs	r3, r3, #10
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4903      	ldr	r1, [pc, #12]	; (8005f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40023800 	.word	0x40023800
 8005f78:	0800d1e4 	.word	0x0800d1e4

08005f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f80:	f7ff ffdc 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	0b5b      	lsrs	r3, r3, #13
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	4903      	ldr	r1, [pc, #12]	; (8005fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f92:	5ccb      	ldrb	r3, [r1, r3]
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	0800d1e4 	.word	0x0800d1e4

08005fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e041      	b.n	800603a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fd fd2c 	bl	8003a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f000 fcea 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e04e      	b.n	80060fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a23      	ldr	r2, [pc, #140]	; (8006108 <HAL_TIM_Base_Start_IT+0xc4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d01d      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_TIM_Base_Start_IT+0xc8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <HAL_TIM_Base_Start_IT+0xcc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_TIM_Base_Start_IT+0xd0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_TIM_Base_Start_IT+0xd4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_TIM_Base_Start_IT+0xd8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x80>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d111      	bne.n	80060e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d010      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e6:	e007      	b.n	80060f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40001800 	.word	0x40001800

08006124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e041      	b.n	80061ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f839 	bl	80061c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fc2a 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <HAL_TIM_PWM_Start+0x24>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf14      	ite	ne
 80061f4:	2301      	movne	r3, #1
 80061f6:	2300      	moveq	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e022      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d109      	bne.n	8006216 <HAL_TIM_PWM_Start+0x3e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e015      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d109      	bne.n	8006230 <HAL_TIM_PWM_Start+0x58>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e008      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e07c      	b.n	8006344 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0x82>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	e013      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0x92>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006268:	e00b      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	e003      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fe80 	bl	8006f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2d      	ldr	r2, [pc, #180]	; (800634c <HAL_TIM_PWM_Start+0x174>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_PWM_Start+0xcc>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_TIM_PWM_Start+0x178>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_PWM_Start+0xd0>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <HAL_TIM_PWM_Start+0xd2>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <HAL_TIM_PWM_Start+0x174>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d022      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d0:	d01d      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <HAL_TIM_PWM_Start+0x17c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_TIM_PWM_Start+0x180>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <HAL_TIM_PWM_Start+0x184>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_TIM_PWM_Start+0x178>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_TIM_PWM_Start+0x188>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a16      	ldr	r2, [pc, #88]	; (8006364 <HAL_TIM_PWM_Start+0x18c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b06      	cmp	r3, #6
 800631e:	d010      	beq.n	8006342 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	e007      	b.n	8006342 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fe08 	bl	8006f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2e      	ldr	r2, [pc, #184]	; (8006440 <HAL_TIM_PWM_Stop+0xd8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIM_PWM_Stop+0x2c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <HAL_TIM_PWM_Stop+0xdc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <HAL_TIM_PWM_Stop+0x30>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <HAL_TIM_PWM_Stop+0x32>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d017      	beq.n	80063ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <HAL_TIM_PWM_Stop+0x66>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	f240 4344 	movw	r3, #1092	; 0x444
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <HAL_TIM_PWM_Stop+0x66>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <HAL_TIM_PWM_Stop+0x96>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a1a      	ldr	r2, [r3, #32]
 80063e4:	f240 4344 	movw	r3, #1092	; 0x444
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <HAL_TIM_PWM_Stop+0x96>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0201 	bic.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Stop+0xa6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800640c:	e013      	b.n	8006436 <HAL_TIM_PWM_Stop+0xce>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Stop+0xb6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641c:	e00b      	b.n	8006436 <HAL_TIM_PWM_Stop+0xce>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Stop+0xc6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642c:	e003      	b.n	8006436 <HAL_TIM_PWM_Stop+0xce>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400

08006448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b02      	cmp	r3, #2
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0202 	mvn.w	r2, #2
 8006474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa77 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa69 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fa7a 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0204 	mvn.w	r2, #4
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa4d 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa3f 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa50 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b08      	cmp	r3, #8
 8006504:	d122      	bne.n	800654c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b08      	cmp	r3, #8
 8006512:	d11b      	bne.n	800654c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0208 	mvn.w	r2, #8
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2204      	movs	r2, #4
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa23 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa15 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa26 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b10      	cmp	r3, #16
 8006558:	d122      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b10      	cmp	r3, #16
 8006566:	d11b      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0210 	mvn.w	r2, #16
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2208      	movs	r2, #8
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9f9 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9eb 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f9fc 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d10e      	bne.n	80065cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d107      	bne.n	80065cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0201 	mvn.w	r2, #1
 80065c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fc fb86 	bl	8002cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d10e      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	2b80      	cmp	r3, #128	; 0x80
 80065e6:	d107      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fee2 	bl	80073bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d10e      	bne.n	8006624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d107      	bne.n	8006624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9c1 	bl	80069a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b20      	cmp	r3, #32
 8006630:	d10e      	bne.n	8006650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b20      	cmp	r3, #32
 800663e:	d107      	bne.n	8006650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0220 	mvn.w	r2, #32
 8006648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 feac 	bl	80073a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006672:	2302      	movs	r3, #2
 8006674:	e0ae      	b.n	80067d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b0c      	cmp	r3, #12
 8006682:	f200 809f 	bhi.w	80067c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066c1 	.word	0x080066c1
 8006690:	080067c5 	.word	0x080067c5
 8006694:	080067c5 	.word	0x080067c5
 8006698:	080067c5 	.word	0x080067c5
 800669c:	08006701 	.word	0x08006701
 80066a0:	080067c5 	.word	0x080067c5
 80066a4:	080067c5 	.word	0x080067c5
 80066a8:	080067c5 	.word	0x080067c5
 80066ac:	08006743 	.word	0x08006743
 80066b0:	080067c5 	.word	0x080067c5
 80066b4:	080067c5 	.word	0x080067c5
 80066b8:	080067c5 	.word	0x080067c5
 80066bc:	08006783 	.word	0x08006783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fa18 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0208 	orr.w	r2, r2, #8
 80066da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0204 	bic.w	r2, r2, #4
 80066ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6999      	ldr	r1, [r3, #24]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	619a      	str	r2, [r3, #24]
      break;
 80066fe:	e064      	b.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fa68 	bl	8006bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800671a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6999      	ldr	r1, [r3, #24]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	021a      	lsls	r2, r3, #8
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	619a      	str	r2, [r3, #24]
      break;
 8006740:	e043      	b.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fabd 	bl	8006cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0208 	orr.w	r2, r2, #8
 800675c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0204 	bic.w	r2, r2, #4
 800676c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69d9      	ldr	r1, [r3, #28]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	61da      	str	r2, [r3, #28]
      break;
 8006780:	e023      	b.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fb11 	bl	8006db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69d9      	ldr	r1, [r3, #28]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	021a      	lsls	r2, r3, #8
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	61da      	str	r2, [r3, #28]
      break;
 80067c2:	e002      	b.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75fb      	strb	r3, [r7, #23]
      break;
 80067c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_TIM_ConfigClockSource+0x1c>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e0b4      	b.n	8006962 <HAL_TIM_ConfigClockSource+0x186>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800681e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006830:	d03e      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006836:	f200 8087 	bhi.w	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 800683a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683e:	f000 8086 	beq.w	800694e <HAL_TIM_ConfigClockSource+0x172>
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d87f      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006848:	2b70      	cmp	r3, #112	; 0x70
 800684a:	d01a      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0xa6>
 800684c:	2b70      	cmp	r3, #112	; 0x70
 800684e:	d87b      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b60      	cmp	r3, #96	; 0x60
 8006852:	d050      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006854:	2b60      	cmp	r3, #96	; 0x60
 8006856:	d877      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006858:	2b50      	cmp	r3, #80	; 0x50
 800685a:	d03c      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0xfa>
 800685c:	2b50      	cmp	r3, #80	; 0x50
 800685e:	d873      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d058      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x13a>
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d86f      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d064      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x15a>
 800686c:	2b30      	cmp	r3, #48	; 0x30
 800686e:	d86b      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d060      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x15a>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d867      	bhi.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d05c      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	2b10      	cmp	r3, #16
 800687e:	d05a      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x15a>
 8006880:	e062      	b.n	8006948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6899      	ldr	r1, [r3, #8]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f000 fb5d 	bl	8006f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	609a      	str	r2, [r3, #8]
      break;
 80068ae:	e04f      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6899      	ldr	r1, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f000 fb46 	bl	8006f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068d2:	609a      	str	r2, [r3, #8]
      break;
 80068d4:	e03c      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	461a      	mov	r2, r3
 80068e4:	f000 faba 	bl	8006e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2150      	movs	r1, #80	; 0x50
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fb13 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 80068f4:	e02c      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6859      	ldr	r1, [r3, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	461a      	mov	r2, r3
 8006904:	f000 fad9 	bl	8006eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2160      	movs	r1, #96	; 0x60
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fb03 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 8006914:	e01c      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6859      	ldr	r1, [r3, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	461a      	mov	r2, r3
 8006924:	f000 fa9a 	bl	8006e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2140      	movs	r1, #64	; 0x40
 800692e:	4618      	mov	r0, r3
 8006930:	f000 faf3 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 8006934:	e00c      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f000 faea 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 8006946:	e003      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e000      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800694e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a40      	ldr	r2, [pc, #256]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a3d      	ldr	r2, [pc, #244]	; (8006ad4 <TIM_Base_SetConfig+0x118>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3c      	ldr	r2, [pc, #240]	; (8006ad8 <TIM_Base_SetConfig+0x11c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3b      	ldr	r2, [pc, #236]	; (8006adc <TIM_Base_SetConfig+0x120>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2f      	ldr	r2, [pc, #188]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d027      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <TIM_Base_SetConfig+0x118>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d023      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2b      	ldr	r2, [pc, #172]	; (8006ad8 <TIM_Base_SetConfig+0x11c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01f      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <TIM_Base_SetConfig+0x120>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a29      	ldr	r2, [pc, #164]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d017      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <TIM_Base_SetConfig+0x128>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <TIM_Base_SetConfig+0x130>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a23      	ldr	r2, [pc, #140]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800
 8006af0:	40001800 	.word	0x40001800
 8006af4:	40001c00 	.word	0x40001c00
 8006af8:	40002000 	.word	0x40002000

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <TIM_OC1_SetConfig+0xd8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC1_SetConfig+0x64>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10c      	bne.n	8006b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0308 	bic.w	r3, r3, #8
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a15      	ldr	r2, [pc, #84]	; (8006bd4 <TIM_OC1_SetConfig+0xd8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC1_SetConfig+0x8e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a14      	ldr	r2, [pc, #80]	; (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d111      	bne.n	8006bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40010400 	.word	0x40010400

08006bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0210 	bic.w	r2, r3, #16
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0320 	bic.w	r3, r3, #32
 8006c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a22      	ldr	r2, [pc, #136]	; (8006cc0 <TIM_OC2_SetConfig+0xe4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_OC2_SetConfig+0x68>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <TIM_OC2_SetConfig+0xe8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10d      	bne.n	8006c60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <TIM_OC2_SetConfig+0xe4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_OC2_SetConfig+0x94>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <TIM_OC2_SetConfig+0xe8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d113      	bne.n	8006c98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400

08006cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <TIM_OC3_SetConfig+0xe0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d003      	beq.n	8006d2e <TIM_OC3_SetConfig+0x66>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a20      	ldr	r2, [pc, #128]	; (8006dac <TIM_OC3_SetConfig+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10d      	bne.n	8006d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a16      	ldr	r2, [pc, #88]	; (8006da8 <TIM_OC3_SetConfig+0xe0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_OC3_SetConfig+0x92>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <TIM_OC3_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d113      	bne.n	8006d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40010400 	.word	0x40010400

08006db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	031b      	lsls	r3, r3, #12
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <TIM_OC4_SetConfig+0xa4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC4_SetConfig+0x68>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <TIM_OC4_SetConfig+0xa8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d109      	bne.n	8006e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	019b      	lsls	r3, r3, #6
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40010400 	.word	0x40010400

08006e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f023 030a 	bic.w	r3, r3, #10
 8006e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b087      	sub	sp, #28
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f023 0210 	bic.w	r2, r3, #16
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f043 0307 	orr.w	r3, r3, #7
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	609a      	str	r2, [r3, #8]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1a      	ldr	r2, [r3, #32]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a1a      	ldr	r2, [r3, #32]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <HAL_TIMEx_PWMN_Start+0x24>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	e022      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0x6a>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d109      	bne.n	800701a <HAL_TIMEx_PWMN_Start+0x3e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	bf14      	ite	ne
 8007012:	2301      	movne	r3, #1
 8007014:	2300      	moveq	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e015      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0x6a>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d109      	bne.n	8007034 <HAL_TIMEx_PWMN_Start+0x58>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	e008      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0x6a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e06d      	b.n	800712a <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_TIMEx_PWMN_Start+0x82>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800705c:	e013      	b.n	8007086 <HAL_TIMEx_PWMN_Start+0xaa>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d104      	bne.n	800706e <HAL_TIMEx_PWMN_Start+0x92>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800706c:	e00b      	b.n	8007086 <HAL_TIMEx_PWMN_Start+0xaa>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d104      	bne.n	800707e <HAL_TIMEx_PWMN_Start+0xa2>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707c:	e003      	b.n	8007086 <HAL_TIMEx_PWMN_Start+0xaa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2204      	movs	r2, #4
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f99e 	bl	80073d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a22      	ldr	r2, [pc, #136]	; (8007134 <HAL_TIMEx_PWMN_Start+0x158>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d01d      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <HAL_TIMEx_PWMN_Start+0x15c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1d      	ldr	r2, [pc, #116]	; (800713c <HAL_TIMEx_PWMN_Start+0x160>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <HAL_TIMEx_PWMN_Start+0x164>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <HAL_TIMEx_PWMN_Start+0x168>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <HAL_TIMEx_PWMN_Start+0x16c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIMEx_PWMN_Start+0x118>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_TIMEx_PWMN_Start+0x170>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d111      	bne.n	8007118 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d010      	beq.n	8007128 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	e007      	b.n	8007128 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000
 8007138:	40000400 	.word	0x40000400
 800713c:	40000800 	.word	0x40000800
 8007140:	40000c00 	.word	0x40000c00
 8007144:	40010400 	.word	0x40010400
 8007148:	40014000 	.word	0x40014000
 800714c:	40001800 	.word	0x40001800

08007150 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f934 	bl	80073d0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10f      	bne.n	8007198 <HAL_TIMEx_PWMN_Stop+0x48>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	f240 4344 	movw	r3, #1092	; 0x444
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d107      	bne.n	8007198 <HAL_TIMEx_PWMN_Stop+0x48>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6a1a      	ldr	r2, [r3, #32]
 800719e:	f241 1311 	movw	r3, #4369	; 0x1111
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10f      	bne.n	80071c8 <HAL_TIMEx_PWMN_Stop+0x78>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	f240 4344 	movw	r3, #1092	; 0x444
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <HAL_TIMEx_PWMN_Stop+0x78>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <HAL_TIMEx_PWMN_Stop+0x88>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d6:	e013      	b.n	8007200 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d104      	bne.n	80071e8 <HAL_TIMEx_PWMN_Stop+0x98>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071e6:	e00b      	b.n	8007200 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d104      	bne.n	80071f8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f6:	e003      	b.n	8007200 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e05a      	b.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a21      	ldr	r2, [pc, #132]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d01d      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1b      	ldr	r2, [pc, #108]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a18      	ldr	r2, [pc, #96]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a15      	ldr	r2, [pc, #84]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d10c      	bne.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800

08007304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800731c:	2302      	movs	r3, #2
 800731e:	e03d      	b.n	800739c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2204      	movs	r2, #4
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a1a      	ldr	r2, [r3, #32]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	431a      	orrs	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e03f      	b.n	80074ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fc fc19 	bl	8003c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2224      	movs	r2, #36	; 0x24
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fd7a 	bl	8007f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007472:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695a      	ldr	r2, [r3, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007482:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007492:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d17c      	bne.n	80075ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_UART_Transmit+0x2c>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e075      	b.n	80075d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Transmit+0x3e>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e06e      	b.n	80075d0 <HAL_UART_Transmit+0x11c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2221      	movs	r2, #33	; 0x21
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007508:	f7fc fca8 	bl	8003e5c <HAL_GetTick>
 800750c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88fa      	ldrh	r2, [r7, #6]
 8007518:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007522:	d108      	bne.n	8007536 <HAL_UART_Transmit+0x82>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e003      	b.n	800753e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007546:	e02a      	b.n	800759e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 faf8 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e036      	b.n	80075d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007576:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	3302      	adds	r3, #2
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	e007      	b.n	8007590 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	3301      	adds	r3, #1
 800758e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1cf      	bne.n	8007548 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2140      	movs	r1, #64	; 0x40
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fac8 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e006      	b.n	80075d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e000      	b.n	80075d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
  }
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0ba      	sub	sp, #232	; 0xe8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fbd3 	bl	8007de2 <UART_Receive_IT>
      return;
 800763c:	e256      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800763e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80de 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007658:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80d1 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
 800766e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0204 	orr.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81ed 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb5e 	bl	8007de2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_UART_IRQHandler+0x17a>
 800774a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa66 	bl	8007c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4a7d      	ldr	r2, [pc, #500]	; (80079b4 <HAL_UART_IRQHandler+0x3dc>)
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd fafa 	bl	8004dc0 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00e      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f99a 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00a      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f996 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e006      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f992 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077fe:	e170      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	bf00      	nop
    return;
 8007802:	e16e      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	2b01      	cmp	r3, #1
 800780a:	f040 814a 	bne.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8143 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 813c 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	f040 80b4 	bne.w	80079b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8140 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 8139 	bcs.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	f000 8088 	beq.w	800799a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1d9      	bne.n	800788a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800797c:	65ba      	str	r2, [r7, #88]	; 0x58
 800797e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e3      	bne.n	8007958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	4618      	mov	r0, r3
 8007996:	f7fd f9a3 	bl	8004ce0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8c0 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079b0:	e099      	b.n	8007ae6 <HAL_UART_IRQHandler+0x50e>
 80079b2:	bf00      	nop
 80079b4:	08007ceb 	.word	0x08007ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 808b 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8086 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a02:	647a      	str	r2, [r7, #68]	; 0x44
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	623b      	str	r3, [r7, #32]
   return(result);
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3314      	adds	r3, #20
 8007a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
 8007a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a80:	61fa      	str	r2, [r7, #28]
 8007a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e3      	bne.n	8007a5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f848 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa0:	e023      	b.n	8007aea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f929 	bl	8007d12 <UART_Transmit_IT>
    return;
 8007ac0:	e014      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f969 	bl	8007db2 <UART_EndTransmit_IT>
    return;
 8007ae0:	e004      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    return;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	37e8      	adds	r7, #232	; 0xe8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b090      	sub	sp, #64	; 0x40
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b58:	e050      	b.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d04c      	beq.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b68:	f7fc f978 	bl	8003e5c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d241      	bcs.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b98:	637a      	str	r2, [r7, #52]	; 0x34
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bcc:	623a      	str	r2, [r7, #32]
 8007bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e00f      	b.n	8007c1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4013      	ands	r3, r2
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d09f      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3740      	adds	r7, #64	; 0x40
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b095      	sub	sp, #84	; 0x54
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	330c      	adds	r3, #12
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c4c:	643a      	str	r2, [r7, #64]	; 0x40
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e5      	bne.n	8007c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e5      	bne.n	8007c60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d119      	bne.n	8007cd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f023 0310 	bic.w	r3, r3, #16
 8007cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cbc:	61ba      	str	r2, [r7, #24]
 8007cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6979      	ldr	r1, [r7, #20]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e5      	bne.n	8007c9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cde:	bf00      	nop
 8007ce0:	3754      	adds	r7, #84	; 0x54
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff ff09 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b21      	cmp	r3, #33	; 0x21
 8007d24:	d13e      	bne.n	8007da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d114      	bne.n	8007d5a <UART_Transmit_IT+0x48>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d110      	bne.n	8007d5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	621a      	str	r2, [r3, #32]
 8007d58:	e008      	b.n	8007d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	1c59      	adds	r1, r3, #1
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6211      	str	r1, [r2, #32]
 8007d64:	781a      	ldrb	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10f      	bne.n	8007da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff fe8e 	bl	8007af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b08c      	sub	sp, #48	; 0x30
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b22      	cmp	r3, #34	; 0x22
 8007df4:	f040 80ab 	bne.w	8007f4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e00:	d117      	bne.n	8007e32 <UART_Receive_IT+0x50>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d113      	bne.n	8007e32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	1c9a      	adds	r2, r3, #2
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e30:	e026      	b.n	8007e80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d007      	beq.n	8007e56 <UART_Receive_IT+0x74>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <UART_Receive_IT+0x82>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e008      	b.n	8007e76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d15a      	bne.n	8007f4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0220 	bic.w	r2, r2, #32
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d135      	bne.n	8007f40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f023 0310 	bic.w	r3, r3, #16
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	330c      	adds	r3, #12
 8007ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efa:	623a      	str	r2, [r7, #32]
 8007efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	69f9      	ldr	r1, [r7, #28]
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d10a      	bne.n	8007f32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fdf9 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
 8007f3e:	e002      	b.n	8007f46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fde1 	bl	8007b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e002      	b.n	8007f50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e000      	b.n	8007f50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f4e:	2302      	movs	r3, #2
  }
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3730      	adds	r7, #48	; 0x30
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f5c:	b0c0      	sub	sp, #256	; 0x100
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	68d9      	ldr	r1, [r3, #12]
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	ea40 0301 	orr.w	r3, r0, r1
 8007f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fb0:	f021 010c 	bic.w	r1, r1, #12
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd2:	6999      	ldr	r1, [r3, #24]
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	ea40 0301 	orr.w	r3, r0, r1
 8007fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b8f      	ldr	r3, [pc, #572]	; (8008224 <UART_SetConfig+0x2cc>)
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d005      	beq.n	8007ff8 <UART_SetConfig+0xa0>
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b8d      	ldr	r3, [pc, #564]	; (8008228 <UART_SetConfig+0x2d0>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d104      	bne.n	8008002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ff8:	f7fd ffc0 	bl	8005f7c <HAL_RCC_GetPCLK2Freq>
 8007ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008000:	e003      	b.n	800800a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008002:	f7fd ffa7 	bl	8005f54 <HAL_RCC_GetPCLK1Freq>
 8008006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008014:	f040 810c 	bne.w	8008230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801c:	2200      	movs	r2, #0
 800801e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800802a:	4622      	mov	r2, r4
 800802c:	462b      	mov	r3, r5
 800802e:	1891      	adds	r1, r2, r2
 8008030:	65b9      	str	r1, [r7, #88]	; 0x58
 8008032:	415b      	adcs	r3, r3
 8008034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800803a:	4621      	mov	r1, r4
 800803c:	eb12 0801 	adds.w	r8, r2, r1
 8008040:	4629      	mov	r1, r5
 8008042:	eb43 0901 	adc.w	r9, r3, r1
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800805a:	4690      	mov	r8, r2
 800805c:	4699      	mov	r9, r3
 800805e:	4623      	mov	r3, r4
 8008060:	eb18 0303 	adds.w	r3, r8, r3
 8008064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008068:	462b      	mov	r3, r5
 800806a:	eb49 0303 	adc.w	r3, r9, r3
 800806e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800807e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008086:	460b      	mov	r3, r1
 8008088:	18db      	adds	r3, r3, r3
 800808a:	653b      	str	r3, [r7, #80]	; 0x50
 800808c:	4613      	mov	r3, r2
 800808e:	eb42 0303 	adc.w	r3, r2, r3
 8008092:	657b      	str	r3, [r7, #84]	; 0x54
 8008094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800809c:	f7f8 fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4b61      	ldr	r3, [pc, #388]	; (800822c <UART_SetConfig+0x2d4>)
 80080a6:	fba3 2302 	umull	r2, r3, r3, r2
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	011c      	lsls	r4, r3, #4
 80080ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080c0:	4642      	mov	r2, r8
 80080c2:	464b      	mov	r3, r9
 80080c4:	1891      	adds	r1, r2, r2
 80080c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80080c8:	415b      	adcs	r3, r3
 80080ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080d0:	4641      	mov	r1, r8
 80080d2:	eb12 0a01 	adds.w	sl, r2, r1
 80080d6:	4649      	mov	r1, r9
 80080d8:	eb43 0b01 	adc.w	fp, r3, r1
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080f0:	4692      	mov	sl, r2
 80080f2:	469b      	mov	fp, r3
 80080f4:	4643      	mov	r3, r8
 80080f6:	eb1a 0303 	adds.w	r3, sl, r3
 80080fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080fe:	464b      	mov	r3, r9
 8008100:	eb4b 0303 	adc.w	r3, fp, r3
 8008104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800811c:	460b      	mov	r3, r1
 800811e:	18db      	adds	r3, r3, r3
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
 8008122:	4613      	mov	r3, r2
 8008124:	eb42 0303 	adc.w	r3, r2, r3
 8008128:	647b      	str	r3, [r7, #68]	; 0x44
 800812a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800812e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008132:	f7f8 fda9 	bl	8000c88 <__aeabi_uldivmod>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4611      	mov	r1, r2
 800813c:	4b3b      	ldr	r3, [pc, #236]	; (800822c <UART_SetConfig+0x2d4>)
 800813e:	fba3 2301 	umull	r2, r3, r3, r1
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	2264      	movs	r2, #100	; 0x64
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	1acb      	subs	r3, r1, r3
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008152:	4b36      	ldr	r3, [pc, #216]	; (800822c <UART_SetConfig+0x2d4>)
 8008154:	fba3 2302 	umull	r2, r3, r3, r2
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008160:	441c      	add	r4, r3
 8008162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008166:	2200      	movs	r2, #0
 8008168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800816c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008174:	4642      	mov	r2, r8
 8008176:	464b      	mov	r3, r9
 8008178:	1891      	adds	r1, r2, r2
 800817a:	63b9      	str	r1, [r7, #56]	; 0x38
 800817c:	415b      	adcs	r3, r3
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008184:	4641      	mov	r1, r8
 8008186:	1851      	adds	r1, r2, r1
 8008188:	6339      	str	r1, [r7, #48]	; 0x30
 800818a:	4649      	mov	r1, r9
 800818c:	414b      	adcs	r3, r1
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800819c:	4659      	mov	r1, fp
 800819e:	00cb      	lsls	r3, r1, #3
 80081a0:	4651      	mov	r1, sl
 80081a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081a6:	4651      	mov	r1, sl
 80081a8:	00ca      	lsls	r2, r1, #3
 80081aa:	4610      	mov	r0, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	4642      	mov	r2, r8
 80081b2:	189b      	adds	r3, r3, r2
 80081b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b8:	464b      	mov	r3, r9
 80081ba:	460a      	mov	r2, r1
 80081bc:	eb42 0303 	adc.w	r3, r2, r3
 80081c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081d8:	460b      	mov	r3, r1
 80081da:	18db      	adds	r3, r3, r3
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081de:	4613      	mov	r3, r2
 80081e0:	eb42 0303 	adc.w	r3, r2, r3
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081ee:	f7f8 fd4b 	bl	8000c88 <__aeabi_uldivmod>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <UART_SetConfig+0x2d4>)
 80081f8:	fba3 1302 	umull	r1, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	2164      	movs	r1, #100	; 0x64
 8008200:	fb01 f303 	mul.w	r3, r1, r3
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	3332      	adds	r3, #50	; 0x32
 800820a:	4a08      	ldr	r2, [pc, #32]	; (800822c <UART_SetConfig+0x2d4>)
 800820c:	fba2 2303 	umull	r2, r3, r2, r3
 8008210:	095b      	lsrs	r3, r3, #5
 8008212:	f003 0207 	and.w	r2, r3, #7
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4422      	add	r2, r4
 800821e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008220:	e105      	b.n	800842e <UART_SetConfig+0x4d6>
 8008222:	bf00      	nop
 8008224:	40011000 	.word	0x40011000
 8008228:	40011400 	.word	0x40011400
 800822c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008234:	2200      	movs	r2, #0
 8008236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800823a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800823e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008242:	4642      	mov	r2, r8
 8008244:	464b      	mov	r3, r9
 8008246:	1891      	adds	r1, r2, r2
 8008248:	6239      	str	r1, [r7, #32]
 800824a:	415b      	adcs	r3, r3
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
 800824e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008252:	4641      	mov	r1, r8
 8008254:	1854      	adds	r4, r2, r1
 8008256:	4649      	mov	r1, r9
 8008258:	eb43 0501 	adc.w	r5, r3, r1
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	00eb      	lsls	r3, r5, #3
 8008266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800826a:	00e2      	lsls	r2, r4, #3
 800826c:	4614      	mov	r4, r2
 800826e:	461d      	mov	r5, r3
 8008270:	4643      	mov	r3, r8
 8008272:	18e3      	adds	r3, r4, r3
 8008274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008278:	464b      	mov	r3, r9
 800827a:	eb45 0303 	adc.w	r3, r5, r3
 800827e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800828e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800829e:	4629      	mov	r1, r5
 80082a0:	008b      	lsls	r3, r1, #2
 80082a2:	4621      	mov	r1, r4
 80082a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082a8:	4621      	mov	r1, r4
 80082aa:	008a      	lsls	r2, r1, #2
 80082ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082b0:	f7f8 fcea 	bl	8000c88 <__aeabi_uldivmod>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4b60      	ldr	r3, [pc, #384]	; (800843c <UART_SetConfig+0x4e4>)
 80082ba:	fba3 2302 	umull	r2, r3, r3, r2
 80082be:	095b      	lsrs	r3, r3, #5
 80082c0:	011c      	lsls	r4, r3, #4
 80082c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	1891      	adds	r1, r2, r2
 80082da:	61b9      	str	r1, [r7, #24]
 80082dc:	415b      	adcs	r3, r3
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082e4:	4641      	mov	r1, r8
 80082e6:	1851      	adds	r1, r2, r1
 80082e8:	6139      	str	r1, [r7, #16]
 80082ea:	4649      	mov	r1, r9
 80082ec:	414b      	adcs	r3, r1
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082fc:	4659      	mov	r1, fp
 80082fe:	00cb      	lsls	r3, r1, #3
 8008300:	4651      	mov	r1, sl
 8008302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008306:	4651      	mov	r1, sl
 8008308:	00ca      	lsls	r2, r1, #3
 800830a:	4610      	mov	r0, r2
 800830c:	4619      	mov	r1, r3
 800830e:	4603      	mov	r3, r0
 8008310:	4642      	mov	r2, r8
 8008312:	189b      	adds	r3, r3, r2
 8008314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008318:	464b      	mov	r3, r9
 800831a:	460a      	mov	r2, r1
 800831c:	eb42 0303 	adc.w	r3, r2, r3
 8008320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	67bb      	str	r3, [r7, #120]	; 0x78
 800832e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800833c:	4649      	mov	r1, r9
 800833e:	008b      	lsls	r3, r1, #2
 8008340:	4641      	mov	r1, r8
 8008342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008346:	4641      	mov	r1, r8
 8008348:	008a      	lsls	r2, r1, #2
 800834a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800834e:	f7f8 fc9b 	bl	8000c88 <__aeabi_uldivmod>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4b39      	ldr	r3, [pc, #228]	; (800843c <UART_SetConfig+0x4e4>)
 8008358:	fba3 1302 	umull	r1, r3, r3, r2
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	2164      	movs	r1, #100	; 0x64
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	3332      	adds	r3, #50	; 0x32
 800836a:	4a34      	ldr	r2, [pc, #208]	; (800843c <UART_SetConfig+0x4e4>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008376:	441c      	add	r4, r3
 8008378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837c:	2200      	movs	r2, #0
 800837e:	673b      	str	r3, [r7, #112]	; 0x70
 8008380:	677a      	str	r2, [r7, #116]	; 0x74
 8008382:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008386:	4642      	mov	r2, r8
 8008388:	464b      	mov	r3, r9
 800838a:	1891      	adds	r1, r2, r2
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	415b      	adcs	r3, r3
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008396:	4641      	mov	r1, r8
 8008398:	1851      	adds	r1, r2, r1
 800839a:	6039      	str	r1, [r7, #0]
 800839c:	4649      	mov	r1, r9
 800839e:	414b      	adcs	r3, r1
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083ae:	4659      	mov	r1, fp
 80083b0:	00cb      	lsls	r3, r1, #3
 80083b2:	4651      	mov	r1, sl
 80083b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b8:	4651      	mov	r1, sl
 80083ba:	00ca      	lsls	r2, r1, #3
 80083bc:	4610      	mov	r0, r2
 80083be:	4619      	mov	r1, r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	4642      	mov	r2, r8
 80083c4:	189b      	adds	r3, r3, r2
 80083c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c8:	464b      	mov	r3, r9
 80083ca:	460a      	mov	r2, r1
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	663b      	str	r3, [r7, #96]	; 0x60
 80083dc:	667a      	str	r2, [r7, #100]	; 0x64
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083ea:	4649      	mov	r1, r9
 80083ec:	008b      	lsls	r3, r1, #2
 80083ee:	4641      	mov	r1, r8
 80083f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083f4:	4641      	mov	r1, r8
 80083f6:	008a      	lsls	r2, r1, #2
 80083f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083fc:	f7f8 fc44 	bl	8000c88 <__aeabi_uldivmod>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4b0d      	ldr	r3, [pc, #52]	; (800843c <UART_SetConfig+0x4e4>)
 8008406:	fba3 1302 	umull	r1, r3, r3, r2
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	2164      	movs	r1, #100	; 0x64
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	3332      	adds	r3, #50	; 0x32
 8008418:	4a08      	ldr	r2, [pc, #32]	; (800843c <UART_SetConfig+0x4e4>)
 800841a:	fba2 2303 	umull	r2, r3, r2, r3
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4422      	add	r2, r4
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008434:	46bd      	mov	sp, r7
 8008436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800843a:	bf00      	nop
 800843c:	51eb851f 	.word	0x51eb851f

08008440 <arm_sin_f32>:
 8008440:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80084c0 <arm_sin_f32+0x80>
 8008444:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008448:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008454:	d504      	bpl.n	8008460 <arm_sin_f32+0x20>
 8008456:	ee17 3a90 	vmov	r3, s15
 800845a:	3b01      	subs	r3, #1
 800845c:	ee07 3a90 	vmov	s15, r3
 8008460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008464:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80084c4 <arm_sin_f32+0x84>
 8008468:	ee30 0a67 	vsub.f32	s0, s0, s15
 800846c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008470:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008474:	ee17 3a90 	vmov	r3, s15
 8008478:	b29b      	uxth	r3, r3
 800847a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847e:	d21a      	bcs.n	80084b6 <arm_sin_f32+0x76>
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	1c59      	adds	r1, r3, #1
 800848a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800848e:	4a0e      	ldr	r2, [pc, #56]	; (80084c8 <arm_sin_f32+0x88>)
 8008490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008498:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800849c:	ed93 7a00 	vldr	s14, [r3]
 80084a0:	edd2 6a00 	vldr	s13, [r2]
 80084a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80084a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80084ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80084b4:	4770      	bx	lr
 80084b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80084ba:	2101      	movs	r1, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	e7e6      	b.n	800848e <arm_sin_f32+0x4e>
 80084c0:	3e22f983 	.word	0x3e22f983
 80084c4:	44000000 	.word	0x44000000
 80084c8:	0800d1f4 	.word	0x0800d1f4

080084cc <arm_cos_f32>:
 80084cc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008554 <arm_cos_f32+0x88>
 80084d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80084d4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80084d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80084e8:	d504      	bpl.n	80084f4 <arm_cos_f32+0x28>
 80084ea:	ee17 3a90 	vmov	r3, s15
 80084ee:	3b01      	subs	r3, #1
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008558 <arm_cos_f32+0x8c>
 80084fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008500:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008504:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008508:	ee17 3a90 	vmov	r3, s15
 800850c:	b29b      	uxth	r3, r3
 800850e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008512:	d21a      	bcs.n	800854a <arm_cos_f32+0x7e>
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851c:	1c59      	adds	r1, r3, #1
 800851e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008522:	4a0e      	ldr	r2, [pc, #56]	; (800855c <arm_cos_f32+0x90>)
 8008524:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800852c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008530:	ed93 7a00 	vldr	s14, [r3]
 8008534:	edd2 6a00 	vldr	s13, [r2]
 8008538:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800853c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008544:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008548:	4770      	bx	lr
 800854a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800854e:	2101      	movs	r1, #1
 8008550:	2300      	movs	r3, #0
 8008552:	e7e6      	b.n	8008522 <arm_cos_f32+0x56>
 8008554:	3e22f983 	.word	0x3e22f983
 8008558:	44000000 	.word	0x44000000
 800855c:	0800d1f4 	.word	0x0800d1f4

08008560 <__errno>:
 8008560:	4b01      	ldr	r3, [pc, #4]	; (8008568 <__errno+0x8>)
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	2000004c 	.word	0x2000004c

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	; (80085a4 <__libc_init_array+0x38>)
 8008570:	4c0d      	ldr	r4, [pc, #52]	; (80085a8 <__libc_init_array+0x3c>)
 8008572:	1b64      	subs	r4, r4, r5
 8008574:	10a4      	asrs	r4, r4, #2
 8008576:	2600      	movs	r6, #0
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	; (80085ac <__libc_init_array+0x40>)
 800857e:	4c0c      	ldr	r4, [pc, #48]	; (80085b0 <__libc_init_array+0x44>)
 8008580:	f004 fd3e 	bl	800d000 <_init>
 8008584:	1b64      	subs	r4, r4, r5
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	2600      	movs	r6, #0
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	0800deac 	.word	0x0800deac
 80085a8:	0800deac 	.word	0x0800deac
 80085ac:	0800deac 	.word	0x0800deac
 80085b0:	0800deb0 	.word	0x0800deb0

080085b4 <malloc>:
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <malloc+0xc>)
 80085b6:	4601      	mov	r1, r0
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	f000 b885 	b.w	80086c8 <_malloc_r>
 80085be:	bf00      	nop
 80085c0:	2000004c 	.word	0x2000004c

080085c4 <memcpy>:
 80085c4:	440a      	add	r2, r1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085cc:	d100      	bne.n	80085d0 <memcpy+0xc>
 80085ce:	4770      	bx	lr
 80085d0:	b510      	push	{r4, lr}
 80085d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085da:	4291      	cmp	r1, r2
 80085dc:	d1f9      	bne.n	80085d2 <memcpy+0xe>
 80085de:	bd10      	pop	{r4, pc}

080085e0 <memset>:
 80085e0:	4402      	add	r2, r0
 80085e2:	4603      	mov	r3, r0
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d100      	bne.n	80085ea <memset+0xa>
 80085e8:	4770      	bx	lr
 80085ea:	f803 1b01 	strb.w	r1, [r3], #1
 80085ee:	e7f9      	b.n	80085e4 <memset+0x4>

080085f0 <_free_r>:
 80085f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d044      	beq.n	8008680 <_free_r+0x90>
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008602:	bfb8      	it	lt
 8008604:	18e4      	addlt	r4, r4, r3
 8008606:	f003 fb9d 	bl	800bd44 <__malloc_lock>
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <_free_r+0x94>)
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	b933      	cbnz	r3, 8008620 <_free_r+0x30>
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	b003      	add	sp, #12
 8008618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861c:	f003 bb98 	b.w	800bd50 <__malloc_unlock>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d908      	bls.n	8008636 <_free_r+0x46>
 8008624:	6825      	ldr	r5, [r4, #0]
 8008626:	1961      	adds	r1, r4, r5
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1949      	addeq	r1, r1, r5
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	e7ed      	b.n	8008612 <_free_r+0x22>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x50>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x46>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1855      	adds	r5, r2, r1
 8008644:	42a5      	cmp	r5, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x70>
 8008648:	6824      	ldr	r4, [r4, #0]
 800864a:	4421      	add	r1, r4
 800864c:	1854      	adds	r4, r2, r1
 800864e:	42a3      	cmp	r3, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1e0      	bne.n	8008616 <_free_r+0x26>
 8008654:	681c      	ldr	r4, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	4421      	add	r1, r4
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	e7da      	b.n	8008616 <_free_r+0x26>
 8008660:	d902      	bls.n	8008668 <_free_r+0x78>
 8008662:	230c      	movs	r3, #12
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e7d6      	b.n	8008616 <_free_r+0x26>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1949      	addeq	r1, r1, r5
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7ca      	b.n	8008616 <_free_r+0x26>
 8008680:	b003      	add	sp, #12
 8008682:	bd30      	pop	{r4, r5, pc}
 8008684:	20002548 	.word	0x20002548

08008688 <sbrk_aligned>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4e0e      	ldr	r6, [pc, #56]	; (80086c4 <sbrk_aligned+0x3c>)
 800868c:	460c      	mov	r4, r1
 800868e:	6831      	ldr	r1, [r6, #0]
 8008690:	4605      	mov	r5, r0
 8008692:	b911      	cbnz	r1, 800869a <sbrk_aligned+0x12>
 8008694:	f000 ff94 	bl	80095c0 <_sbrk_r>
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 ff8f 	bl	80095c0 <_sbrk_r>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d00a      	beq.n	80086bc <sbrk_aligned+0x34>
 80086a6:	1cc4      	adds	r4, r0, #3
 80086a8:	f024 0403 	bic.w	r4, r4, #3
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d007      	beq.n	80086c0 <sbrk_aligned+0x38>
 80086b0:	1a21      	subs	r1, r4, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 ff84 	bl	80095c0 <_sbrk_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d101      	bne.n	80086c0 <sbrk_aligned+0x38>
 80086bc:	f04f 34ff 	mov.w	r4, #4294967295
 80086c0:	4620      	mov	r0, r4
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	2000254c 	.word	0x2000254c

080086c8 <_malloc_r>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	1ccd      	adds	r5, r1, #3
 80086ce:	f025 0503 	bic.w	r5, r5, #3
 80086d2:	3508      	adds	r5, #8
 80086d4:	2d0c      	cmp	r5, #12
 80086d6:	bf38      	it	cc
 80086d8:	250c      	movcc	r5, #12
 80086da:	2d00      	cmp	r5, #0
 80086dc:	4607      	mov	r7, r0
 80086de:	db01      	blt.n	80086e4 <_malloc_r+0x1c>
 80086e0:	42a9      	cmp	r1, r5
 80086e2:	d905      	bls.n	80086f0 <_malloc_r+0x28>
 80086e4:	230c      	movs	r3, #12
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	2600      	movs	r6, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	4e2e      	ldr	r6, [pc, #184]	; (80087ac <_malloc_r+0xe4>)
 80086f2:	f003 fb27 	bl	800bd44 <__malloc_lock>
 80086f6:	6833      	ldr	r3, [r6, #0]
 80086f8:	461c      	mov	r4, r3
 80086fa:	bb34      	cbnz	r4, 800874a <_malloc_r+0x82>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4638      	mov	r0, r7
 8008700:	f7ff ffc2 	bl	8008688 <sbrk_aligned>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	4604      	mov	r4, r0
 8008708:	d14d      	bne.n	80087a6 <_malloc_r+0xde>
 800870a:	6834      	ldr	r4, [r6, #0]
 800870c:	4626      	mov	r6, r4
 800870e:	2e00      	cmp	r6, #0
 8008710:	d140      	bne.n	8008794 <_malloc_r+0xcc>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	4631      	mov	r1, r6
 8008716:	4638      	mov	r0, r7
 8008718:	eb04 0803 	add.w	r8, r4, r3
 800871c:	f000 ff50 	bl	80095c0 <_sbrk_r>
 8008720:	4580      	cmp	r8, r0
 8008722:	d13a      	bne.n	800879a <_malloc_r+0xd2>
 8008724:	6821      	ldr	r1, [r4, #0]
 8008726:	3503      	adds	r5, #3
 8008728:	1a6d      	subs	r5, r5, r1
 800872a:	f025 0503 	bic.w	r5, r5, #3
 800872e:	3508      	adds	r5, #8
 8008730:	2d0c      	cmp	r5, #12
 8008732:	bf38      	it	cc
 8008734:	250c      	movcc	r5, #12
 8008736:	4629      	mov	r1, r5
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa5 	bl	8008688 <sbrk_aligned>
 800873e:	3001      	adds	r0, #1
 8008740:	d02b      	beq.n	800879a <_malloc_r+0xd2>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	442b      	add	r3, r5
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	e00e      	b.n	8008768 <_malloc_r+0xa0>
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	1b52      	subs	r2, r2, r5
 800874e:	d41e      	bmi.n	800878e <_malloc_r+0xc6>
 8008750:	2a0b      	cmp	r2, #11
 8008752:	d916      	bls.n	8008782 <_malloc_r+0xba>
 8008754:	1961      	adds	r1, r4, r5
 8008756:	42a3      	cmp	r3, r4
 8008758:	6025      	str	r5, [r4, #0]
 800875a:	bf18      	it	ne
 800875c:	6059      	strne	r1, [r3, #4]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	bf08      	it	eq
 8008762:	6031      	streq	r1, [r6, #0]
 8008764:	5162      	str	r2, [r4, r5]
 8008766:	604b      	str	r3, [r1, #4]
 8008768:	4638      	mov	r0, r7
 800876a:	f104 060b 	add.w	r6, r4, #11
 800876e:	f003 faef 	bl	800bd50 <__malloc_unlock>
 8008772:	f026 0607 	bic.w	r6, r6, #7
 8008776:	1d23      	adds	r3, r4, #4
 8008778:	1af2      	subs	r2, r6, r3
 800877a:	d0b6      	beq.n	80086ea <_malloc_r+0x22>
 800877c:	1b9b      	subs	r3, r3, r6
 800877e:	50a3      	str	r3, [r4, r2]
 8008780:	e7b3      	b.n	80086ea <_malloc_r+0x22>
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	42a3      	cmp	r3, r4
 8008786:	bf0c      	ite	eq
 8008788:	6032      	streq	r2, [r6, #0]
 800878a:	605a      	strne	r2, [r3, #4]
 800878c:	e7ec      	b.n	8008768 <_malloc_r+0xa0>
 800878e:	4623      	mov	r3, r4
 8008790:	6864      	ldr	r4, [r4, #4]
 8008792:	e7b2      	b.n	80086fa <_malloc_r+0x32>
 8008794:	4634      	mov	r4, r6
 8008796:	6876      	ldr	r6, [r6, #4]
 8008798:	e7b9      	b.n	800870e <_malloc_r+0x46>
 800879a:	230c      	movs	r3, #12
 800879c:	603b      	str	r3, [r7, #0]
 800879e:	4638      	mov	r0, r7
 80087a0:	f003 fad6 	bl	800bd50 <__malloc_unlock>
 80087a4:	e7a1      	b.n	80086ea <_malloc_r+0x22>
 80087a6:	6025      	str	r5, [r4, #0]
 80087a8:	e7de      	b.n	8008768 <_malloc_r+0xa0>
 80087aa:	bf00      	nop
 80087ac:	20002548 	.word	0x20002548

080087b0 <__cvt>:
 80087b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	ec55 4b10 	vmov	r4, r5, d0
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	460e      	mov	r6, r1
 80087bc:	4619      	mov	r1, r3
 80087be:	462b      	mov	r3, r5
 80087c0:	bfbb      	ittet	lt
 80087c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087c6:	461d      	movlt	r5, r3
 80087c8:	2300      	movge	r3, #0
 80087ca:	232d      	movlt	r3, #45	; 0x2d
 80087cc:	700b      	strb	r3, [r1, #0]
 80087ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087d4:	4691      	mov	r9, r2
 80087d6:	f023 0820 	bic.w	r8, r3, #32
 80087da:	bfbc      	itt	lt
 80087dc:	4622      	movlt	r2, r4
 80087de:	4614      	movlt	r4, r2
 80087e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087e4:	d005      	beq.n	80087f2 <__cvt+0x42>
 80087e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087ea:	d100      	bne.n	80087ee <__cvt+0x3e>
 80087ec:	3601      	adds	r6, #1
 80087ee:	2102      	movs	r1, #2
 80087f0:	e000      	b.n	80087f4 <__cvt+0x44>
 80087f2:	2103      	movs	r1, #3
 80087f4:	ab03      	add	r3, sp, #12
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	ab02      	add	r3, sp, #8
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	ec45 4b10 	vmov	d0, r4, r5
 8008800:	4653      	mov	r3, sl
 8008802:	4632      	mov	r2, r6
 8008804:	f001 ff0c 	bl	800a620 <_dtoa_r>
 8008808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800880c:	4607      	mov	r7, r0
 800880e:	d102      	bne.n	8008816 <__cvt+0x66>
 8008810:	f019 0f01 	tst.w	r9, #1
 8008814:	d022      	beq.n	800885c <__cvt+0xac>
 8008816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800881a:	eb07 0906 	add.w	r9, r7, r6
 800881e:	d110      	bne.n	8008842 <__cvt+0x92>
 8008820:	783b      	ldrb	r3, [r7, #0]
 8008822:	2b30      	cmp	r3, #48	; 0x30
 8008824:	d10a      	bne.n	800883c <__cvt+0x8c>
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f8 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008832:	b918      	cbnz	r0, 800883c <__cvt+0x8c>
 8008834:	f1c6 0601 	rsb	r6, r6, #1
 8008838:	f8ca 6000 	str.w	r6, [sl]
 800883c:	f8da 3000 	ldr.w	r3, [sl]
 8008840:	4499      	add	r9, r3
 8008842:	2200      	movs	r2, #0
 8008844:	2300      	movs	r3, #0
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f8 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800884e:	b108      	cbz	r0, 8008854 <__cvt+0xa4>
 8008850:	f8cd 900c 	str.w	r9, [sp, #12]
 8008854:	2230      	movs	r2, #48	; 0x30
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	454b      	cmp	r3, r9
 800885a:	d307      	bcc.n	800886c <__cvt+0xbc>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008860:	1bdb      	subs	r3, r3, r7
 8008862:	4638      	mov	r0, r7
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	b004      	add	sp, #16
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	1c59      	adds	r1, r3, #1
 800886e:	9103      	str	r1, [sp, #12]
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e7f0      	b.n	8008856 <__cvt+0xa6>

08008874 <__exponent>:
 8008874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008876:	4603      	mov	r3, r0
 8008878:	2900      	cmp	r1, #0
 800887a:	bfb8      	it	lt
 800887c:	4249      	neglt	r1, r1
 800887e:	f803 2b02 	strb.w	r2, [r3], #2
 8008882:	bfb4      	ite	lt
 8008884:	222d      	movlt	r2, #45	; 0x2d
 8008886:	222b      	movge	r2, #43	; 0x2b
 8008888:	2909      	cmp	r1, #9
 800888a:	7042      	strb	r2, [r0, #1]
 800888c:	dd2a      	ble.n	80088e4 <__exponent+0x70>
 800888e:	f10d 0407 	add.w	r4, sp, #7
 8008892:	46a4      	mov	ip, r4
 8008894:	270a      	movs	r7, #10
 8008896:	46a6      	mov	lr, r4
 8008898:	460a      	mov	r2, r1
 800889a:	fb91 f6f7 	sdiv	r6, r1, r7
 800889e:	fb07 1516 	mls	r5, r7, r6, r1
 80088a2:	3530      	adds	r5, #48	; 0x30
 80088a4:	2a63      	cmp	r2, #99	; 0x63
 80088a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80088aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088ae:	4631      	mov	r1, r6
 80088b0:	dcf1      	bgt.n	8008896 <__exponent+0x22>
 80088b2:	3130      	adds	r1, #48	; 0x30
 80088b4:	f1ae 0502 	sub.w	r5, lr, #2
 80088b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088bc:	1c44      	adds	r4, r0, #1
 80088be:	4629      	mov	r1, r5
 80088c0:	4561      	cmp	r1, ip
 80088c2:	d30a      	bcc.n	80088da <__exponent+0x66>
 80088c4:	f10d 0209 	add.w	r2, sp, #9
 80088c8:	eba2 020e 	sub.w	r2, r2, lr
 80088cc:	4565      	cmp	r5, ip
 80088ce:	bf88      	it	hi
 80088d0:	2200      	movhi	r2, #0
 80088d2:	4413      	add	r3, r2
 80088d4:	1a18      	subs	r0, r3, r0
 80088d6:	b003      	add	sp, #12
 80088d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088e2:	e7ed      	b.n	80088c0 <__exponent+0x4c>
 80088e4:	2330      	movs	r3, #48	; 0x30
 80088e6:	3130      	adds	r1, #48	; 0x30
 80088e8:	7083      	strb	r3, [r0, #2]
 80088ea:	70c1      	strb	r1, [r0, #3]
 80088ec:	1d03      	adds	r3, r0, #4
 80088ee:	e7f1      	b.n	80088d4 <__exponent+0x60>

080088f0 <_printf_float>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	ed2d 8b02 	vpush	{d8}
 80088f8:	b08d      	sub	sp, #52	; 0x34
 80088fa:	460c      	mov	r4, r1
 80088fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008900:	4616      	mov	r6, r2
 8008902:	461f      	mov	r7, r3
 8008904:	4605      	mov	r5, r0
 8008906:	f003 f99f 	bl	800bc48 <_localeconv_r>
 800890a:	f8d0 a000 	ldr.w	sl, [r0]
 800890e:	4650      	mov	r0, sl
 8008910:	f7f7 fc5e 	bl	80001d0 <strlen>
 8008914:	2300      	movs	r3, #0
 8008916:	930a      	str	r3, [sp, #40]	; 0x28
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	9305      	str	r3, [sp, #20]
 800891c:	f8d8 3000 	ldr.w	r3, [r8]
 8008920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008924:	3307      	adds	r3, #7
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	f103 0208 	add.w	r2, r3, #8
 800892e:	f8c8 2000 	str.w	r2, [r8]
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800893a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800893e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008942:	9307      	str	r3, [sp, #28]
 8008944:	f8cd 8018 	str.w	r8, [sp, #24]
 8008948:	ee08 0a10 	vmov	s16, r0
 800894c:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <_printf_float+0x2dc>)
 800894e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	f7f8 f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800895a:	bb88      	cbnz	r0, 80089c0 <_printf_float+0xd0>
 800895c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008960:	4b9a      	ldr	r3, [pc, #616]	; (8008bcc <_printf_float+0x2dc>)
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	f7f8 f8c3 	bl	8000af0 <__aeabi_dcmple>
 800896a:	bb48      	cbnz	r0, 80089c0 <_printf_float+0xd0>
 800896c:	2200      	movs	r2, #0
 800896e:	2300      	movs	r3, #0
 8008970:	4640      	mov	r0, r8
 8008972:	4649      	mov	r1, r9
 8008974:	f7f8 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8008978:	b110      	cbz	r0, 8008980 <_printf_float+0x90>
 800897a:	232d      	movs	r3, #45	; 0x2d
 800897c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008980:	4b93      	ldr	r3, [pc, #588]	; (8008bd0 <_printf_float+0x2e0>)
 8008982:	4894      	ldr	r0, [pc, #592]	; (8008bd4 <_printf_float+0x2e4>)
 8008984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008988:	bf94      	ite	ls
 800898a:	4698      	movls	r8, r3
 800898c:	4680      	movhi	r8, r0
 800898e:	2303      	movs	r3, #3
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	9b05      	ldr	r3, [sp, #20]
 8008994:	f023 0204 	bic.w	r2, r3, #4
 8008998:	6022      	str	r2, [r4, #0]
 800899a:	f04f 0900 	mov.w	r9, #0
 800899e:	9700      	str	r7, [sp, #0]
 80089a0:	4633      	mov	r3, r6
 80089a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f9d8 	bl	8008d5c <_printf_common>
 80089ac:	3001      	adds	r0, #1
 80089ae:	f040 8090 	bne.w	8008ad2 <_printf_float+0x1e2>
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295
 80089b6:	b00d      	add	sp, #52	; 0x34
 80089b8:	ecbd 8b02 	vpop	{d8}
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f8 f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80089cc:	b140      	cbz	r0, 80089e0 <_printf_float+0xf0>
 80089ce:	464b      	mov	r3, r9
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbc      	itt	lt
 80089d4:	232d      	movlt	r3, #45	; 0x2d
 80089d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089da:	487f      	ldr	r0, [pc, #508]	; (8008bd8 <_printf_float+0x2e8>)
 80089dc:	4b7f      	ldr	r3, [pc, #508]	; (8008bdc <_printf_float+0x2ec>)
 80089de:	e7d1      	b.n	8008984 <_printf_float+0x94>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089e6:	9206      	str	r2, [sp, #24]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	d13f      	bne.n	8008a6c <_printf_float+0x17c>
 80089ec:	2306      	movs	r3, #6
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	6861      	ldr	r1, [r4, #4]
 80089f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089f8:	2300      	movs	r3, #0
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	ab0a      	add	r3, sp, #40	; 0x28
 80089fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a02:	ab09      	add	r3, sp, #36	; 0x24
 8008a04:	ec49 8b10 	vmov	d0, r8, r9
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	6022      	str	r2, [r4, #0]
 8008a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a10:	4628      	mov	r0, r5
 8008a12:	f7ff fecd 	bl	80087b0 <__cvt>
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a1a:	2b47      	cmp	r3, #71	; 0x47
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	d108      	bne.n	8008a32 <_printf_float+0x142>
 8008a20:	1cc8      	adds	r0, r1, #3
 8008a22:	db02      	blt.n	8008a2a <_printf_float+0x13a>
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	4299      	cmp	r1, r3
 8008a28:	dd41      	ble.n	8008aae <_printf_float+0x1be>
 8008a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8008a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a36:	d820      	bhi.n	8008a7a <_printf_float+0x18a>
 8008a38:	3901      	subs	r1, #1
 8008a3a:	465a      	mov	r2, fp
 8008a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a40:	9109      	str	r1, [sp, #36]	; 0x24
 8008a42:	f7ff ff17 	bl	8008874 <__exponent>
 8008a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a48:	1813      	adds	r3, r2, r0
 8008a4a:	2a01      	cmp	r2, #1
 8008a4c:	4681      	mov	r9, r0
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	dc02      	bgt.n	8008a58 <_printf_float+0x168>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	07d2      	lsls	r2, r2, #31
 8008a56:	d501      	bpl.n	8008a5c <_printf_float+0x16c>
 8008a58:	3301      	adds	r3, #1
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d09c      	beq.n	800899e <_printf_float+0xae>
 8008a64:	232d      	movs	r3, #45	; 0x2d
 8008a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a6a:	e798      	b.n	800899e <_printf_float+0xae>
 8008a6c:	9a06      	ldr	r2, [sp, #24]
 8008a6e:	2a47      	cmp	r2, #71	; 0x47
 8008a70:	d1be      	bne.n	80089f0 <_printf_float+0x100>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1bc      	bne.n	80089f0 <_printf_float+0x100>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7b9      	b.n	80089ee <_printf_float+0xfe>
 8008a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a7e:	d118      	bne.n	8008ab2 <_printf_float+0x1c2>
 8008a80:	2900      	cmp	r1, #0
 8008a82:	6863      	ldr	r3, [r4, #4]
 8008a84:	dd0b      	ble.n	8008a9e <_printf_float+0x1ae>
 8008a86:	6121      	str	r1, [r4, #16]
 8008a88:	b913      	cbnz	r3, 8008a90 <_printf_float+0x1a0>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	07d0      	lsls	r0, r2, #31
 8008a8e:	d502      	bpl.n	8008a96 <_printf_float+0x1a6>
 8008a90:	3301      	adds	r3, #1
 8008a92:	440b      	add	r3, r1
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	e7de      	b.n	8008a5c <_printf_float+0x16c>
 8008a9e:	b913      	cbnz	r3, 8008aa6 <_printf_float+0x1b6>
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	07d2      	lsls	r2, r2, #31
 8008aa4:	d501      	bpl.n	8008aaa <_printf_float+0x1ba>
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	e7f4      	b.n	8008a94 <_printf_float+0x1a4>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7f2      	b.n	8008a94 <_printf_float+0x1a4>
 8008aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	db05      	blt.n	8008ac4 <_printf_float+0x1d4>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	6121      	str	r1, [r4, #16]
 8008abc:	07d8      	lsls	r0, r3, #31
 8008abe:	d5ea      	bpl.n	8008a96 <_printf_float+0x1a6>
 8008ac0:	1c4b      	adds	r3, r1, #1
 8008ac2:	e7e7      	b.n	8008a94 <_printf_float+0x1a4>
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	bfd4      	ite	le
 8008ac8:	f1c1 0202 	rsble	r2, r1, #2
 8008acc:	2201      	movgt	r2, #1
 8008ace:	4413      	add	r3, r2
 8008ad0:	e7e0      	b.n	8008a94 <_printf_float+0x1a4>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	055a      	lsls	r2, r3, #21
 8008ad6:	d407      	bmi.n	8008ae8 <_printf_float+0x1f8>
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	4642      	mov	r2, r8
 8008adc:	4631      	mov	r1, r6
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d12c      	bne.n	8008b40 <_printf_float+0x250>
 8008ae6:	e764      	b.n	80089b2 <_printf_float+0xc2>
 8008ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008aec:	f240 80e0 	bls.w	8008cb0 <_printf_float+0x3c0>
 8008af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008af4:	2200      	movs	r2, #0
 8008af6:	2300      	movs	r3, #0
 8008af8:	f7f7 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d034      	beq.n	8008b6a <_printf_float+0x27a>
 8008b00:	4a37      	ldr	r2, [pc, #220]	; (8008be0 <_printf_float+0x2f0>)
 8008b02:	2301      	movs	r3, #1
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f af51 	beq.w	80089b2 <_printf_float+0xc2>
 8008b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b14:	429a      	cmp	r2, r3
 8008b16:	db02      	blt.n	8008b1e <_printf_float+0x22e>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	07d8      	lsls	r0, r3, #31
 8008b1c:	d510      	bpl.n	8008b40 <_printf_float+0x250>
 8008b1e:	ee18 3a10 	vmov	r3, s16
 8008b22:	4652      	mov	r2, sl
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af41 	beq.w	80089b2 <_printf_float+0xc2>
 8008b30:	f04f 0800 	mov.w	r8, #0
 8008b34:	f104 091a 	add.w	r9, r4, #26
 8008b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	4543      	cmp	r3, r8
 8008b3e:	dc09      	bgt.n	8008b54 <_printf_float+0x264>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	079b      	lsls	r3, r3, #30
 8008b44:	f100 8105 	bmi.w	8008d52 <_printf_float+0x462>
 8008b48:	68e0      	ldr	r0, [r4, #12]
 8008b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	bfb8      	it	lt
 8008b50:	4618      	movlt	r0, r3
 8008b52:	e730      	b.n	80089b6 <_printf_float+0xc6>
 8008b54:	2301      	movs	r3, #1
 8008b56:	464a      	mov	r2, r9
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f af27 	beq.w	80089b2 <_printf_float+0xc2>
 8008b64:	f108 0801 	add.w	r8, r8, #1
 8008b68:	e7e6      	b.n	8008b38 <_printf_float+0x248>
 8008b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dc39      	bgt.n	8008be4 <_printf_float+0x2f4>
 8008b70:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <_printf_float+0x2f0>)
 8008b72:	2301      	movs	r3, #1
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af19 	beq.w	80089b2 <_printf_float+0xc2>
 8008b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d102      	bne.n	8008b8e <_printf_float+0x29e>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d5d8      	bpl.n	8008b40 <_printf_float+0x250>
 8008b8e:	ee18 3a10 	vmov	r3, s16
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af09 	beq.w	80089b2 <_printf_float+0xc2>
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	f104 0a1a 	add.w	sl, r4, #26
 8008ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008baa:	425b      	negs	r3, r3
 8008bac:	454b      	cmp	r3, r9
 8008bae:	dc01      	bgt.n	8008bb4 <_printf_float+0x2c4>
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb2:	e792      	b.n	8008ada <_printf_float+0x1ea>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4652      	mov	r2, sl
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f43f aef7 	beq.w	80089b2 <_printf_float+0xc2>
 8008bc4:	f109 0901 	add.w	r9, r9, #1
 8008bc8:	e7ee      	b.n	8008ba8 <_printf_float+0x2b8>
 8008bca:	bf00      	nop
 8008bcc:	7fefffff 	.word	0x7fefffff
 8008bd0:	0800d9fc 	.word	0x0800d9fc
 8008bd4:	0800da00 	.word	0x0800da00
 8008bd8:	0800da08 	.word	0x0800da08
 8008bdc:	0800da04 	.word	0x0800da04
 8008be0:	0800da0c 	.word	0x0800da0c
 8008be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008be8:	429a      	cmp	r2, r3
 8008bea:	bfa8      	it	ge
 8008bec:	461a      	movge	r2, r3
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	4691      	mov	r9, r2
 8008bf2:	dc37      	bgt.n	8008c64 <_printf_float+0x374>
 8008bf4:	f04f 0b00 	mov.w	fp, #0
 8008bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bfc:	f104 021a 	add.w	r2, r4, #26
 8008c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c02:	9305      	str	r3, [sp, #20]
 8008c04:	eba3 0309 	sub.w	r3, r3, r9
 8008c08:	455b      	cmp	r3, fp
 8008c0a:	dc33      	bgt.n	8008c74 <_printf_float+0x384>
 8008c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c10:	429a      	cmp	r2, r3
 8008c12:	db3b      	blt.n	8008c8c <_printf_float+0x39c>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07da      	lsls	r2, r3, #31
 8008c18:	d438      	bmi.n	8008c8c <_printf_float+0x39c>
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c20:	1a9a      	subs	r2, r3, r2
 8008c22:	eba3 0901 	sub.w	r9, r3, r1
 8008c26:	4591      	cmp	r9, r2
 8008c28:	bfa8      	it	ge
 8008c2a:	4691      	movge	r9, r2
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	dc35      	bgt.n	8008c9e <_printf_float+0x3ae>
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c3a:	f104 0a1a 	add.w	sl, r4, #26
 8008c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	eba3 0309 	sub.w	r3, r3, r9
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	f77f af79 	ble.w	8008b40 <_printf_float+0x250>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4652      	mov	r2, sl
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f aeaa 	beq.w	80089b2 <_printf_float+0xc2>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	e7ec      	b.n	8008c3e <_printf_float+0x34e>
 8008c64:	4613      	mov	r3, r2
 8008c66:	4631      	mov	r1, r6
 8008c68:	4642      	mov	r2, r8
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d1c0      	bne.n	8008bf4 <_printf_float+0x304>
 8008c72:	e69e      	b.n	80089b2 <_printf_float+0xc2>
 8008c74:	2301      	movs	r3, #1
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	9205      	str	r2, [sp, #20]
 8008c7c:	47b8      	blx	r7
 8008c7e:	3001      	adds	r0, #1
 8008c80:	f43f ae97 	beq.w	80089b2 <_printf_float+0xc2>
 8008c84:	9a05      	ldr	r2, [sp, #20]
 8008c86:	f10b 0b01 	add.w	fp, fp, #1
 8008c8a:	e7b9      	b.n	8008c00 <_printf_float+0x310>
 8008c8c:	ee18 3a10 	vmov	r3, s16
 8008c90:	4652      	mov	r2, sl
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d1be      	bne.n	8008c1a <_printf_float+0x32a>
 8008c9c:	e689      	b.n	80089b2 <_printf_float+0xc2>
 8008c9e:	9a05      	ldr	r2, [sp, #20]
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4442      	add	r2, r8
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	47b8      	blx	r7
 8008caa:	3001      	adds	r0, #1
 8008cac:	d1c1      	bne.n	8008c32 <_printf_float+0x342>
 8008cae:	e680      	b.n	80089b2 <_printf_float+0xc2>
 8008cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb2:	2a01      	cmp	r2, #1
 8008cb4:	dc01      	bgt.n	8008cba <_printf_float+0x3ca>
 8008cb6:	07db      	lsls	r3, r3, #31
 8008cb8:	d538      	bpl.n	8008d2c <_printf_float+0x43c>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b8      	blx	r7
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f43f ae74 	beq.w	80089b2 <_printf_float+0xc2>
 8008cca:	ee18 3a10 	vmov	r3, s16
 8008cce:	4652      	mov	r2, sl
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	47b8      	blx	r7
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	f43f ae6b 	beq.w	80089b2 <_printf_float+0xc2>
 8008cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f7f7 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce8:	b9d8      	cbnz	r0, 8008d22 <_printf_float+0x432>
 8008cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cec:	f108 0201 	add.w	r2, r8, #1
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d10e      	bne.n	8008d1a <_printf_float+0x42a>
 8008cfc:	e659      	b.n	80089b2 <_printf_float+0xc2>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4652      	mov	r2, sl
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f43f ae52 	beq.w	80089b2 <_printf_float+0xc2>
 8008d0e:	f108 0801 	add.w	r8, r8, #1
 8008d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d14:	3b01      	subs	r3, #1
 8008d16:	4543      	cmp	r3, r8
 8008d18:	dcf1      	bgt.n	8008cfe <_printf_float+0x40e>
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d20:	e6dc      	b.n	8008adc <_printf_float+0x1ec>
 8008d22:	f04f 0800 	mov.w	r8, #0
 8008d26:	f104 0a1a 	add.w	sl, r4, #26
 8008d2a:	e7f2      	b.n	8008d12 <_printf_float+0x422>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4642      	mov	r2, r8
 8008d30:	e7df      	b.n	8008cf2 <_printf_float+0x402>
 8008d32:	2301      	movs	r3, #1
 8008d34:	464a      	mov	r2, r9
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae38 	beq.w	80089b2 <_printf_float+0xc2>
 8008d42:	f108 0801 	add.w	r8, r8, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	dcf0      	bgt.n	8008d32 <_printf_float+0x442>
 8008d50:	e6fa      	b.n	8008b48 <_printf_float+0x258>
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	f104 0919 	add.w	r9, r4, #25
 8008d5a:	e7f4      	b.n	8008d46 <_printf_float+0x456>

08008d5c <_printf_common>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	4616      	mov	r6, r2
 8008d62:	4699      	mov	r9, r3
 8008d64:	688a      	ldr	r2, [r1, #8]
 8008d66:	690b      	ldr	r3, [r1, #16]
 8008d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	bfb8      	it	lt
 8008d70:	4613      	movlt	r3, r2
 8008d72:	6033      	str	r3, [r6, #0]
 8008d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d78:	4607      	mov	r7, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	b10a      	cbz	r2, 8008d82 <_printf_common+0x26>
 8008d7e:	3301      	adds	r3, #1
 8008d80:	6033      	str	r3, [r6, #0]
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	0699      	lsls	r1, r3, #26
 8008d86:	bf42      	ittt	mi
 8008d88:	6833      	ldrmi	r3, [r6, #0]
 8008d8a:	3302      	addmi	r3, #2
 8008d8c:	6033      	strmi	r3, [r6, #0]
 8008d8e:	6825      	ldr	r5, [r4, #0]
 8008d90:	f015 0506 	ands.w	r5, r5, #6
 8008d94:	d106      	bne.n	8008da4 <_printf_common+0x48>
 8008d96:	f104 0a19 	add.w	sl, r4, #25
 8008d9a:	68e3      	ldr	r3, [r4, #12]
 8008d9c:	6832      	ldr	r2, [r6, #0]
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	dc26      	bgt.n	8008df2 <_printf_common+0x96>
 8008da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008da8:	1e13      	subs	r3, r2, #0
 8008daa:	6822      	ldr	r2, [r4, #0]
 8008dac:	bf18      	it	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	0692      	lsls	r2, r2, #26
 8008db2:	d42b      	bmi.n	8008e0c <_printf_common+0xb0>
 8008db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008db8:	4649      	mov	r1, r9
 8008dba:	4638      	mov	r0, r7
 8008dbc:	47c0      	blx	r8
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d01e      	beq.n	8008e00 <_printf_common+0xa4>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	68e5      	ldr	r5, [r4, #12]
 8008dc6:	6832      	ldr	r2, [r6, #0]
 8008dc8:	f003 0306 	and.w	r3, r3, #6
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	bf08      	it	eq
 8008dd0:	1aad      	subeq	r5, r5, r2
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	bf0c      	ite	eq
 8008dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ddc:	2500      	movne	r5, #0
 8008dde:	4293      	cmp	r3, r2
 8008de0:	bfc4      	itt	gt
 8008de2:	1a9b      	subgt	r3, r3, r2
 8008de4:	18ed      	addgt	r5, r5, r3
 8008de6:	2600      	movs	r6, #0
 8008de8:	341a      	adds	r4, #26
 8008dea:	42b5      	cmp	r5, r6
 8008dec:	d11a      	bne.n	8008e24 <_printf_common+0xc8>
 8008dee:	2000      	movs	r0, #0
 8008df0:	e008      	b.n	8008e04 <_printf_common+0xa8>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4652      	mov	r2, sl
 8008df6:	4649      	mov	r1, r9
 8008df8:	4638      	mov	r0, r7
 8008dfa:	47c0      	blx	r8
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d103      	bne.n	8008e08 <_printf_common+0xac>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	3501      	adds	r5, #1
 8008e0a:	e7c6      	b.n	8008d9a <_printf_common+0x3e>
 8008e0c:	18e1      	adds	r1, r4, r3
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	2030      	movs	r0, #48	; 0x30
 8008e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e16:	4422      	add	r2, r4
 8008e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e20:	3302      	adds	r3, #2
 8008e22:	e7c7      	b.n	8008db4 <_printf_common+0x58>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4622      	mov	r2, r4
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d0e6      	beq.n	8008e00 <_printf_common+0xa4>
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7d9      	b.n	8008dea <_printf_common+0x8e>
	...

08008e38 <_printf_i>:
 8008e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	7e0f      	ldrb	r7, [r1, #24]
 8008e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e40:	2f78      	cmp	r7, #120	; 0x78
 8008e42:	4691      	mov	r9, r2
 8008e44:	4680      	mov	r8, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	469a      	mov	sl, r3
 8008e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e4e:	d807      	bhi.n	8008e60 <_printf_i+0x28>
 8008e50:	2f62      	cmp	r7, #98	; 0x62
 8008e52:	d80a      	bhi.n	8008e6a <_printf_i+0x32>
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	f000 80d8 	beq.w	800900a <_printf_i+0x1d2>
 8008e5a:	2f58      	cmp	r7, #88	; 0x58
 8008e5c:	f000 80a3 	beq.w	8008fa6 <_printf_i+0x16e>
 8008e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e68:	e03a      	b.n	8008ee0 <_printf_i+0xa8>
 8008e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e6e:	2b15      	cmp	r3, #21
 8008e70:	d8f6      	bhi.n	8008e60 <_printf_i+0x28>
 8008e72:	a101      	add	r1, pc, #4	; (adr r1, 8008e78 <_printf_i+0x40>)
 8008e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ee5 	.word	0x08008ee5
 8008e80:	08008e61 	.word	0x08008e61
 8008e84:	08008e61 	.word	0x08008e61
 8008e88:	08008e61 	.word	0x08008e61
 8008e8c:	08008e61 	.word	0x08008e61
 8008e90:	08008ee5 	.word	0x08008ee5
 8008e94:	08008e61 	.word	0x08008e61
 8008e98:	08008e61 	.word	0x08008e61
 8008e9c:	08008e61 	.word	0x08008e61
 8008ea0:	08008e61 	.word	0x08008e61
 8008ea4:	08008ff1 	.word	0x08008ff1
 8008ea8:	08008f15 	.word	0x08008f15
 8008eac:	08008fd3 	.word	0x08008fd3
 8008eb0:	08008e61 	.word	0x08008e61
 8008eb4:	08008e61 	.word	0x08008e61
 8008eb8:	08009013 	.word	0x08009013
 8008ebc:	08008e61 	.word	0x08008e61
 8008ec0:	08008f15 	.word	0x08008f15
 8008ec4:	08008e61 	.word	0x08008e61
 8008ec8:	08008e61 	.word	0x08008e61
 8008ecc:	08008fdb 	.word	0x08008fdb
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	602a      	str	r2, [r5, #0]
 8008ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0a3      	b.n	800902c <_printf_i+0x1f4>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	6829      	ldr	r1, [r5, #0]
 8008ee8:	0606      	lsls	r6, r0, #24
 8008eea:	f101 0304 	add.w	r3, r1, #4
 8008eee:	d50a      	bpl.n	8008f06 <_printf_i+0xce>
 8008ef0:	680e      	ldr	r6, [r1, #0]
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	2e00      	cmp	r6, #0
 8008ef6:	da03      	bge.n	8008f00 <_printf_i+0xc8>
 8008ef8:	232d      	movs	r3, #45	; 0x2d
 8008efa:	4276      	negs	r6, r6
 8008efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f00:	485e      	ldr	r0, [pc, #376]	; (800907c <_printf_i+0x244>)
 8008f02:	230a      	movs	r3, #10
 8008f04:	e019      	b.n	8008f3a <_printf_i+0x102>
 8008f06:	680e      	ldr	r6, [r1, #0]
 8008f08:	602b      	str	r3, [r5, #0]
 8008f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f0e:	bf18      	it	ne
 8008f10:	b236      	sxthne	r6, r6
 8008f12:	e7ef      	b.n	8008ef4 <_printf_i+0xbc>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	1d19      	adds	r1, r3, #4
 8008f1a:	6029      	str	r1, [r5, #0]
 8008f1c:	0601      	lsls	r1, r0, #24
 8008f1e:	d501      	bpl.n	8008f24 <_printf_i+0xec>
 8008f20:	681e      	ldr	r6, [r3, #0]
 8008f22:	e002      	b.n	8008f2a <_printf_i+0xf2>
 8008f24:	0646      	lsls	r6, r0, #25
 8008f26:	d5fb      	bpl.n	8008f20 <_printf_i+0xe8>
 8008f28:	881e      	ldrh	r6, [r3, #0]
 8008f2a:	4854      	ldr	r0, [pc, #336]	; (800907c <_printf_i+0x244>)
 8008f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f2e:	bf0c      	ite	eq
 8008f30:	2308      	moveq	r3, #8
 8008f32:	230a      	movne	r3, #10
 8008f34:	2100      	movs	r1, #0
 8008f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f3a:	6865      	ldr	r5, [r4, #4]
 8008f3c:	60a5      	str	r5, [r4, #8]
 8008f3e:	2d00      	cmp	r5, #0
 8008f40:	bfa2      	ittt	ge
 8008f42:	6821      	ldrge	r1, [r4, #0]
 8008f44:	f021 0104 	bicge.w	r1, r1, #4
 8008f48:	6021      	strge	r1, [r4, #0]
 8008f4a:	b90e      	cbnz	r6, 8008f50 <_printf_i+0x118>
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	d04d      	beq.n	8008fec <_printf_i+0x1b4>
 8008f50:	4615      	mov	r5, r2
 8008f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f56:	fb03 6711 	mls	r7, r3, r1, r6
 8008f5a:	5dc7      	ldrb	r7, [r0, r7]
 8008f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f60:	4637      	mov	r7, r6
 8008f62:	42bb      	cmp	r3, r7
 8008f64:	460e      	mov	r6, r1
 8008f66:	d9f4      	bls.n	8008f52 <_printf_i+0x11a>
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d10b      	bne.n	8008f84 <_printf_i+0x14c>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	07de      	lsls	r6, r3, #31
 8008f70:	d508      	bpl.n	8008f84 <_printf_i+0x14c>
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	6861      	ldr	r1, [r4, #4]
 8008f76:	4299      	cmp	r1, r3
 8008f78:	bfde      	ittt	le
 8008f7a:	2330      	movle	r3, #48	; 0x30
 8008f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f84:	1b52      	subs	r2, r2, r5
 8008f86:	6122      	str	r2, [r4, #16]
 8008f88:	f8cd a000 	str.w	sl, [sp]
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	aa03      	add	r2, sp, #12
 8008f90:	4621      	mov	r1, r4
 8008f92:	4640      	mov	r0, r8
 8008f94:	f7ff fee2 	bl	8008d5c <_printf_common>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d14c      	bne.n	8009036 <_printf_i+0x1fe>
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	b004      	add	sp, #16
 8008fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa6:	4835      	ldr	r0, [pc, #212]	; (800907c <_printf_i+0x244>)
 8008fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fac:	6829      	ldr	r1, [r5, #0]
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fb4:	6029      	str	r1, [r5, #0]
 8008fb6:	061d      	lsls	r5, r3, #24
 8008fb8:	d514      	bpl.n	8008fe4 <_printf_i+0x1ac>
 8008fba:	07df      	lsls	r7, r3, #31
 8008fbc:	bf44      	itt	mi
 8008fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc2:	6023      	strmi	r3, [r4, #0]
 8008fc4:	b91e      	cbnz	r6, 8008fce <_printf_i+0x196>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	f023 0320 	bic.w	r3, r3, #32
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	2310      	movs	r3, #16
 8008fd0:	e7b0      	b.n	8008f34 <_printf_i+0xfc>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	f043 0320 	orr.w	r3, r3, #32
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	2378      	movs	r3, #120	; 0x78
 8008fdc:	4828      	ldr	r0, [pc, #160]	; (8009080 <_printf_i+0x248>)
 8008fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fe2:	e7e3      	b.n	8008fac <_printf_i+0x174>
 8008fe4:	0659      	lsls	r1, r3, #25
 8008fe6:	bf48      	it	mi
 8008fe8:	b2b6      	uxthmi	r6, r6
 8008fea:	e7e6      	b.n	8008fba <_printf_i+0x182>
 8008fec:	4615      	mov	r5, r2
 8008fee:	e7bb      	b.n	8008f68 <_printf_i+0x130>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	6826      	ldr	r6, [r4, #0]
 8008ff4:	6961      	ldr	r1, [r4, #20]
 8008ff6:	1d18      	adds	r0, r3, #4
 8008ff8:	6028      	str	r0, [r5, #0]
 8008ffa:	0635      	lsls	r5, r6, #24
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	d501      	bpl.n	8009004 <_printf_i+0x1cc>
 8009000:	6019      	str	r1, [r3, #0]
 8009002:	e002      	b.n	800900a <_printf_i+0x1d2>
 8009004:	0670      	lsls	r0, r6, #25
 8009006:	d5fb      	bpl.n	8009000 <_printf_i+0x1c8>
 8009008:	8019      	strh	r1, [r3, #0]
 800900a:	2300      	movs	r3, #0
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	4615      	mov	r5, r2
 8009010:	e7ba      	b.n	8008f88 <_printf_i+0x150>
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	1d1a      	adds	r2, r3, #4
 8009016:	602a      	str	r2, [r5, #0]
 8009018:	681d      	ldr	r5, [r3, #0]
 800901a:	6862      	ldr	r2, [r4, #4]
 800901c:	2100      	movs	r1, #0
 800901e:	4628      	mov	r0, r5
 8009020:	f7f7 f8de 	bl	80001e0 <memchr>
 8009024:	b108      	cbz	r0, 800902a <_printf_i+0x1f2>
 8009026:	1b40      	subs	r0, r0, r5
 8009028:	6060      	str	r0, [r4, #4]
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	6123      	str	r3, [r4, #16]
 800902e:	2300      	movs	r3, #0
 8009030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009034:	e7a8      	b.n	8008f88 <_printf_i+0x150>
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	462a      	mov	r2, r5
 800903a:	4649      	mov	r1, r9
 800903c:	4640      	mov	r0, r8
 800903e:	47d0      	blx	sl
 8009040:	3001      	adds	r0, #1
 8009042:	d0ab      	beq.n	8008f9c <_printf_i+0x164>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	079b      	lsls	r3, r3, #30
 8009048:	d413      	bmi.n	8009072 <_printf_i+0x23a>
 800904a:	68e0      	ldr	r0, [r4, #12]
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	4298      	cmp	r0, r3
 8009050:	bfb8      	it	lt
 8009052:	4618      	movlt	r0, r3
 8009054:	e7a4      	b.n	8008fa0 <_printf_i+0x168>
 8009056:	2301      	movs	r3, #1
 8009058:	4632      	mov	r2, r6
 800905a:	4649      	mov	r1, r9
 800905c:	4640      	mov	r0, r8
 800905e:	47d0      	blx	sl
 8009060:	3001      	adds	r0, #1
 8009062:	d09b      	beq.n	8008f9c <_printf_i+0x164>
 8009064:	3501      	adds	r5, #1
 8009066:	68e3      	ldr	r3, [r4, #12]
 8009068:	9903      	ldr	r1, [sp, #12]
 800906a:	1a5b      	subs	r3, r3, r1
 800906c:	42ab      	cmp	r3, r5
 800906e:	dcf2      	bgt.n	8009056 <_printf_i+0x21e>
 8009070:	e7eb      	b.n	800904a <_printf_i+0x212>
 8009072:	2500      	movs	r5, #0
 8009074:	f104 0619 	add.w	r6, r4, #25
 8009078:	e7f5      	b.n	8009066 <_printf_i+0x22e>
 800907a:	bf00      	nop
 800907c:	0800da0e 	.word	0x0800da0e
 8009080:	0800da1f 	.word	0x0800da1f

08009084 <_scanf_float>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	b087      	sub	sp, #28
 800908a:	4617      	mov	r7, r2
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	688b      	ldr	r3, [r1, #8]
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009096:	bf83      	ittte	hi
 8009098:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800909c:	195b      	addhi	r3, r3, r5
 800909e:	9302      	strhi	r3, [sp, #8]
 80090a0:	2300      	movls	r3, #0
 80090a2:	bf86      	itte	hi
 80090a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090a8:	608b      	strhi	r3, [r1, #8]
 80090aa:	9302      	strls	r3, [sp, #8]
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	468b      	mov	fp, r1
 80090b0:	2500      	movs	r5, #0
 80090b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80090ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090be:	4680      	mov	r8, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	465e      	mov	r6, fp
 80090c4:	46aa      	mov	sl, r5
 80090c6:	46a9      	mov	r9, r5
 80090c8:	9501      	str	r5, [sp, #4]
 80090ca:	68a2      	ldr	r2, [r4, #8]
 80090cc:	b152      	cbz	r2, 80090e4 <_scanf_float+0x60>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b4e      	cmp	r3, #78	; 0x4e
 80090d4:	d864      	bhi.n	80091a0 <_scanf_float+0x11c>
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d83c      	bhi.n	8009154 <_scanf_float+0xd0>
 80090da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80090de:	b2c8      	uxtb	r0, r1
 80090e0:	280e      	cmp	r0, #14
 80090e2:	d93a      	bls.n	800915a <_scanf_float+0xd6>
 80090e4:	f1b9 0f00 	cmp.w	r9, #0
 80090e8:	d003      	beq.n	80090f2 <_scanf_float+0x6e>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090f6:	f1ba 0f01 	cmp.w	sl, #1
 80090fa:	f200 8113 	bhi.w	8009324 <_scanf_float+0x2a0>
 80090fe:	455e      	cmp	r6, fp
 8009100:	f200 8105 	bhi.w	800930e <_scanf_float+0x28a>
 8009104:	2501      	movs	r5, #1
 8009106:	4628      	mov	r0, r5
 8009108:	b007      	add	sp, #28
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009112:	2a0d      	cmp	r2, #13
 8009114:	d8e6      	bhi.n	80090e4 <_scanf_float+0x60>
 8009116:	a101      	add	r1, pc, #4	; (adr r1, 800911c <_scanf_float+0x98>)
 8009118:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800911c:	0800925b 	.word	0x0800925b
 8009120:	080090e5 	.word	0x080090e5
 8009124:	080090e5 	.word	0x080090e5
 8009128:	080090e5 	.word	0x080090e5
 800912c:	080092bb 	.word	0x080092bb
 8009130:	08009293 	.word	0x08009293
 8009134:	080090e5 	.word	0x080090e5
 8009138:	080090e5 	.word	0x080090e5
 800913c:	08009269 	.word	0x08009269
 8009140:	080090e5 	.word	0x080090e5
 8009144:	080090e5 	.word	0x080090e5
 8009148:	080090e5 	.word	0x080090e5
 800914c:	080090e5 	.word	0x080090e5
 8009150:	08009221 	.word	0x08009221
 8009154:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009158:	e7db      	b.n	8009112 <_scanf_float+0x8e>
 800915a:	290e      	cmp	r1, #14
 800915c:	d8c2      	bhi.n	80090e4 <_scanf_float+0x60>
 800915e:	a001      	add	r0, pc, #4	; (adr r0, 8009164 <_scanf_float+0xe0>)
 8009160:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009164:	08009213 	.word	0x08009213
 8009168:	080090e5 	.word	0x080090e5
 800916c:	08009213 	.word	0x08009213
 8009170:	080092a7 	.word	0x080092a7
 8009174:	080090e5 	.word	0x080090e5
 8009178:	080091c1 	.word	0x080091c1
 800917c:	080091fd 	.word	0x080091fd
 8009180:	080091fd 	.word	0x080091fd
 8009184:	080091fd 	.word	0x080091fd
 8009188:	080091fd 	.word	0x080091fd
 800918c:	080091fd 	.word	0x080091fd
 8009190:	080091fd 	.word	0x080091fd
 8009194:	080091fd 	.word	0x080091fd
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	2b6e      	cmp	r3, #110	; 0x6e
 80091a2:	d809      	bhi.n	80091b8 <_scanf_float+0x134>
 80091a4:	2b60      	cmp	r3, #96	; 0x60
 80091a6:	d8b2      	bhi.n	800910e <_scanf_float+0x8a>
 80091a8:	2b54      	cmp	r3, #84	; 0x54
 80091aa:	d077      	beq.n	800929c <_scanf_float+0x218>
 80091ac:	2b59      	cmp	r3, #89	; 0x59
 80091ae:	d199      	bne.n	80090e4 <_scanf_float+0x60>
 80091b0:	2d07      	cmp	r5, #7
 80091b2:	d197      	bne.n	80090e4 <_scanf_float+0x60>
 80091b4:	2508      	movs	r5, #8
 80091b6:	e029      	b.n	800920c <_scanf_float+0x188>
 80091b8:	2b74      	cmp	r3, #116	; 0x74
 80091ba:	d06f      	beq.n	800929c <_scanf_float+0x218>
 80091bc:	2b79      	cmp	r3, #121	; 0x79
 80091be:	e7f6      	b.n	80091ae <_scanf_float+0x12a>
 80091c0:	6821      	ldr	r1, [r4, #0]
 80091c2:	05c8      	lsls	r0, r1, #23
 80091c4:	d51a      	bpl.n	80091fc <_scanf_float+0x178>
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80091cc:	6021      	str	r1, [r4, #0]
 80091ce:	f109 0901 	add.w	r9, r9, #1
 80091d2:	b11b      	cbz	r3, 80091dc <_scanf_float+0x158>
 80091d4:	3b01      	subs	r3, #1
 80091d6:	3201      	adds	r2, #1
 80091d8:	9302      	str	r3, [sp, #8]
 80091da:	60a2      	str	r2, [r4, #8]
 80091dc:	68a3      	ldr	r3, [r4, #8]
 80091de:	3b01      	subs	r3, #1
 80091e0:	60a3      	str	r3, [r4, #8]
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	3301      	adds	r3, #1
 80091e6:	6123      	str	r3, [r4, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	607b      	str	r3, [r7, #4]
 80091f0:	f340 8084 	ble.w	80092fc <_scanf_float+0x278>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	e766      	b.n	80090ca <_scanf_float+0x46>
 80091fc:	eb1a 0f05 	cmn.w	sl, r5
 8009200:	f47f af70 	bne.w	80090e4 <_scanf_float+0x60>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	f806 3b01 	strb.w	r3, [r6], #1
 8009210:	e7e4      	b.n	80091dc <_scanf_float+0x158>
 8009212:	6822      	ldr	r2, [r4, #0]
 8009214:	0610      	lsls	r0, r2, #24
 8009216:	f57f af65 	bpl.w	80090e4 <_scanf_float+0x60>
 800921a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800921e:	e7f4      	b.n	800920a <_scanf_float+0x186>
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	d10e      	bne.n	8009244 <_scanf_float+0x1c0>
 8009226:	f1b9 0f00 	cmp.w	r9, #0
 800922a:	d10e      	bne.n	800924a <_scanf_float+0x1c6>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009232:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009236:	d108      	bne.n	800924a <_scanf_float+0x1c6>
 8009238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800923c:	6022      	str	r2, [r4, #0]
 800923e:	f04f 0a01 	mov.w	sl, #1
 8009242:	e7e3      	b.n	800920c <_scanf_float+0x188>
 8009244:	f1ba 0f02 	cmp.w	sl, #2
 8009248:	d055      	beq.n	80092f6 <_scanf_float+0x272>
 800924a:	2d01      	cmp	r5, #1
 800924c:	d002      	beq.n	8009254 <_scanf_float+0x1d0>
 800924e:	2d04      	cmp	r5, #4
 8009250:	f47f af48 	bne.w	80090e4 <_scanf_float+0x60>
 8009254:	3501      	adds	r5, #1
 8009256:	b2ed      	uxtb	r5, r5
 8009258:	e7d8      	b.n	800920c <_scanf_float+0x188>
 800925a:	f1ba 0f01 	cmp.w	sl, #1
 800925e:	f47f af41 	bne.w	80090e4 <_scanf_float+0x60>
 8009262:	f04f 0a02 	mov.w	sl, #2
 8009266:	e7d1      	b.n	800920c <_scanf_float+0x188>
 8009268:	b97d      	cbnz	r5, 800928a <_scanf_float+0x206>
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	f47f af3c 	bne.w	80090ea <_scanf_float+0x66>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009278:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800927c:	f47f af39 	bne.w	80090f2 <_scanf_float+0x6e>
 8009280:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	2501      	movs	r5, #1
 8009288:	e7c0      	b.n	800920c <_scanf_float+0x188>
 800928a:	2d03      	cmp	r5, #3
 800928c:	d0e2      	beq.n	8009254 <_scanf_float+0x1d0>
 800928e:	2d05      	cmp	r5, #5
 8009290:	e7de      	b.n	8009250 <_scanf_float+0x1cc>
 8009292:	2d02      	cmp	r5, #2
 8009294:	f47f af26 	bne.w	80090e4 <_scanf_float+0x60>
 8009298:	2503      	movs	r5, #3
 800929a:	e7b7      	b.n	800920c <_scanf_float+0x188>
 800929c:	2d06      	cmp	r5, #6
 800929e:	f47f af21 	bne.w	80090e4 <_scanf_float+0x60>
 80092a2:	2507      	movs	r5, #7
 80092a4:	e7b2      	b.n	800920c <_scanf_float+0x188>
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	0591      	lsls	r1, r2, #22
 80092aa:	f57f af1b 	bpl.w	80090e4 <_scanf_float+0x60>
 80092ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092b2:	6022      	str	r2, [r4, #0]
 80092b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80092b8:	e7a8      	b.n	800920c <_scanf_float+0x188>
 80092ba:	6822      	ldr	r2, [r4, #0]
 80092bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80092c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80092c4:	d006      	beq.n	80092d4 <_scanf_float+0x250>
 80092c6:	0550      	lsls	r0, r2, #21
 80092c8:	f57f af0c 	bpl.w	80090e4 <_scanf_float+0x60>
 80092cc:	f1b9 0f00 	cmp.w	r9, #0
 80092d0:	f43f af0f 	beq.w	80090f2 <_scanf_float+0x6e>
 80092d4:	0591      	lsls	r1, r2, #22
 80092d6:	bf58      	it	pl
 80092d8:	9901      	ldrpl	r1, [sp, #4]
 80092da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092de:	bf58      	it	pl
 80092e0:	eba9 0101 	subpl.w	r1, r9, r1
 80092e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80092e8:	bf58      	it	pl
 80092ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	f04f 0900 	mov.w	r9, #0
 80092f4:	e78a      	b.n	800920c <_scanf_float+0x188>
 80092f6:	f04f 0a03 	mov.w	sl, #3
 80092fa:	e787      	b.n	800920c <_scanf_float+0x188>
 80092fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009300:	4639      	mov	r1, r7
 8009302:	4640      	mov	r0, r8
 8009304:	4798      	blx	r3
 8009306:	2800      	cmp	r0, #0
 8009308:	f43f aedf 	beq.w	80090ca <_scanf_float+0x46>
 800930c:	e6ea      	b.n	80090e4 <_scanf_float+0x60>
 800930e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009316:	463a      	mov	r2, r7
 8009318:	4640      	mov	r0, r8
 800931a:	4798      	blx	r3
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	3b01      	subs	r3, #1
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	e6ec      	b.n	80090fe <_scanf_float+0x7a>
 8009324:	1e6b      	subs	r3, r5, #1
 8009326:	2b06      	cmp	r3, #6
 8009328:	d825      	bhi.n	8009376 <_scanf_float+0x2f2>
 800932a:	2d02      	cmp	r5, #2
 800932c:	d836      	bhi.n	800939c <_scanf_float+0x318>
 800932e:	455e      	cmp	r6, fp
 8009330:	f67f aee8 	bls.w	8009104 <_scanf_float+0x80>
 8009334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009338:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800933c:	463a      	mov	r2, r7
 800933e:	4640      	mov	r0, r8
 8009340:	4798      	blx	r3
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	3b01      	subs	r3, #1
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	e7f1      	b.n	800932e <_scanf_float+0x2aa>
 800934a:	9802      	ldr	r0, [sp, #8]
 800934c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009350:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009354:	9002      	str	r0, [sp, #8]
 8009356:	463a      	mov	r2, r7
 8009358:	4640      	mov	r0, r8
 800935a:	4798      	blx	r3
 800935c:	6923      	ldr	r3, [r4, #16]
 800935e:	3b01      	subs	r3, #1
 8009360:	6123      	str	r3, [r4, #16]
 8009362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009366:	fa5f fa8a 	uxtb.w	sl, sl
 800936a:	f1ba 0f02 	cmp.w	sl, #2
 800936e:	d1ec      	bne.n	800934a <_scanf_float+0x2c6>
 8009370:	3d03      	subs	r5, #3
 8009372:	b2ed      	uxtb	r5, r5
 8009374:	1b76      	subs	r6, r6, r5
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	05da      	lsls	r2, r3, #23
 800937a:	d52f      	bpl.n	80093dc <_scanf_float+0x358>
 800937c:	055b      	lsls	r3, r3, #21
 800937e:	d510      	bpl.n	80093a2 <_scanf_float+0x31e>
 8009380:	455e      	cmp	r6, fp
 8009382:	f67f aebf 	bls.w	8009104 <_scanf_float+0x80>
 8009386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800938a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800938e:	463a      	mov	r2, r7
 8009390:	4640      	mov	r0, r8
 8009392:	4798      	blx	r3
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	3b01      	subs	r3, #1
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	e7f1      	b.n	8009380 <_scanf_float+0x2fc>
 800939c:	46aa      	mov	sl, r5
 800939e:	9602      	str	r6, [sp, #8]
 80093a0:	e7df      	b.n	8009362 <_scanf_float+0x2de>
 80093a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	2965      	cmp	r1, #101	; 0x65
 80093aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	d00c      	beq.n	80093d0 <_scanf_float+0x34c>
 80093b6:	2945      	cmp	r1, #69	; 0x45
 80093b8:	d00a      	beq.n	80093d0 <_scanf_float+0x34c>
 80093ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093be:	463a      	mov	r2, r7
 80093c0:	4640      	mov	r0, r8
 80093c2:	4798      	blx	r3
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	1eb5      	subs	r5, r6, #2
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093d4:	463a      	mov	r2, r7
 80093d6:	4640      	mov	r0, r8
 80093d8:	4798      	blx	r3
 80093da:	462e      	mov	r6, r5
 80093dc:	6825      	ldr	r5, [r4, #0]
 80093de:	f015 0510 	ands.w	r5, r5, #16
 80093e2:	d159      	bne.n	8009498 <_scanf_float+0x414>
 80093e4:	7035      	strb	r5, [r6, #0]
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f0:	d11b      	bne.n	800942a <_scanf_float+0x3a6>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	454b      	cmp	r3, r9
 80093f6:	eba3 0209 	sub.w	r2, r3, r9
 80093fa:	d123      	bne.n	8009444 <_scanf_float+0x3c0>
 80093fc:	2200      	movs	r2, #0
 80093fe:	4659      	mov	r1, fp
 8009400:	4640      	mov	r0, r8
 8009402:	f000 ff37 	bl	800a274 <_strtod_r>
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	f012 0f02 	tst.w	r2, #2
 800940e:	ec57 6b10 	vmov	r6, r7, d0
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	d021      	beq.n	800945a <_scanf_float+0x3d6>
 8009416:	9903      	ldr	r1, [sp, #12]
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	600a      	str	r2, [r1, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	e9c3 6700 	strd	r6, r7, [r3]
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60e3      	str	r3, [r4, #12]
 8009428:	e66d      	b.n	8009106 <_scanf_float+0x82>
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0e5      	beq.n	80093fc <_scanf_float+0x378>
 8009430:	9905      	ldr	r1, [sp, #20]
 8009432:	230a      	movs	r3, #10
 8009434:	462a      	mov	r2, r5
 8009436:	3101      	adds	r1, #1
 8009438:	4640      	mov	r0, r8
 800943a:	f000 ffa3 	bl	800a384 <_strtol_r>
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	9e05      	ldr	r6, [sp, #20]
 8009442:	1ac2      	subs	r2, r0, r3
 8009444:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009448:	429e      	cmp	r6, r3
 800944a:	bf28      	it	cs
 800944c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009450:	4912      	ldr	r1, [pc, #72]	; (800949c <_scanf_float+0x418>)
 8009452:	4630      	mov	r0, r6
 8009454:	f000 f8ca 	bl	80095ec <siprintf>
 8009458:	e7d0      	b.n	80093fc <_scanf_float+0x378>
 800945a:	9903      	ldr	r1, [sp, #12]
 800945c:	f012 0f04 	tst.w	r2, #4
 8009460:	f103 0204 	add.w	r2, r3, #4
 8009464:	600a      	str	r2, [r1, #0]
 8009466:	d1d9      	bne.n	800941c <_scanf_float+0x398>
 8009468:	f8d3 8000 	ldr.w	r8, [r3]
 800946c:	ee10 2a10 	vmov	r2, s0
 8009470:	ee10 0a10 	vmov	r0, s0
 8009474:	463b      	mov	r3, r7
 8009476:	4639      	mov	r1, r7
 8009478:	f7f7 fb58 	bl	8000b2c <__aeabi_dcmpun>
 800947c:	b128      	cbz	r0, 800948a <_scanf_float+0x406>
 800947e:	4808      	ldr	r0, [pc, #32]	; (80094a0 <_scanf_float+0x41c>)
 8009480:	f000 f8ae 	bl	80095e0 <nanf>
 8009484:	ed88 0a00 	vstr	s0, [r8]
 8009488:	e7cb      	b.n	8009422 <_scanf_float+0x39e>
 800948a:	4630      	mov	r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	f7f7 fbab 	bl	8000be8 <__aeabi_d2f>
 8009492:	f8c8 0000 	str.w	r0, [r8]
 8009496:	e7c4      	b.n	8009422 <_scanf_float+0x39e>
 8009498:	2500      	movs	r5, #0
 800949a:	e634      	b.n	8009106 <_scanf_float+0x82>
 800949c:	0800da30 	.word	0x0800da30
 80094a0:	0800dea0 	.word	0x0800dea0

080094a4 <iprintf>:
 80094a4:	b40f      	push	{r0, r1, r2, r3}
 80094a6:	4b0a      	ldr	r3, [pc, #40]	; (80094d0 <iprintf+0x2c>)
 80094a8:	b513      	push	{r0, r1, r4, lr}
 80094aa:	681c      	ldr	r4, [r3, #0]
 80094ac:	b124      	cbz	r4, 80094b8 <iprintf+0x14>
 80094ae:	69a3      	ldr	r3, [r4, #24]
 80094b0:	b913      	cbnz	r3, 80094b8 <iprintf+0x14>
 80094b2:	4620      	mov	r0, r4
 80094b4:	f001 ffbc 	bl	800b430 <__sinit>
 80094b8:	ab05      	add	r3, sp, #20
 80094ba:	9a04      	ldr	r2, [sp, #16]
 80094bc:	68a1      	ldr	r1, [r4, #8]
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	4620      	mov	r0, r4
 80094c2:	f003 faa7 	bl	800ca14 <_vfiprintf_r>
 80094c6:	b002      	add	sp, #8
 80094c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094cc:	b004      	add	sp, #16
 80094ce:	4770      	bx	lr
 80094d0:	2000004c 	.word	0x2000004c

080094d4 <_puts_r>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	460e      	mov	r6, r1
 80094d8:	4605      	mov	r5, r0
 80094da:	b118      	cbz	r0, 80094e4 <_puts_r+0x10>
 80094dc:	6983      	ldr	r3, [r0, #24]
 80094de:	b90b      	cbnz	r3, 80094e4 <_puts_r+0x10>
 80094e0:	f001 ffa6 	bl	800b430 <__sinit>
 80094e4:	69ab      	ldr	r3, [r5, #24]
 80094e6:	68ac      	ldr	r4, [r5, #8]
 80094e8:	b913      	cbnz	r3, 80094f0 <_puts_r+0x1c>
 80094ea:	4628      	mov	r0, r5
 80094ec:	f001 ffa0 	bl	800b430 <__sinit>
 80094f0:	4b2c      	ldr	r3, [pc, #176]	; (80095a4 <_puts_r+0xd0>)
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d120      	bne.n	8009538 <_puts_r+0x64>
 80094f6:	686c      	ldr	r4, [r5, #4]
 80094f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d405      	bmi.n	800950a <_puts_r+0x36>
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	0598      	lsls	r0, r3, #22
 8009502:	d402      	bmi.n	800950a <_puts_r+0x36>
 8009504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009506:	f002 fba4 	bl	800bc52 <__retarget_lock_acquire_recursive>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	0719      	lsls	r1, r3, #28
 800950e:	d51d      	bpl.n	800954c <_puts_r+0x78>
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	b1db      	cbz	r3, 800954c <_puts_r+0x78>
 8009514:	3e01      	subs	r6, #1
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800951c:	3b01      	subs	r3, #1
 800951e:	60a3      	str	r3, [r4, #8]
 8009520:	bb39      	cbnz	r1, 8009572 <_puts_r+0x9e>
 8009522:	2b00      	cmp	r3, #0
 8009524:	da38      	bge.n	8009598 <_puts_r+0xc4>
 8009526:	4622      	mov	r2, r4
 8009528:	210a      	movs	r1, #10
 800952a:	4628      	mov	r0, r5
 800952c:	f000 ff2c 	bl	800a388 <__swbuf_r>
 8009530:	3001      	adds	r0, #1
 8009532:	d011      	beq.n	8009558 <_puts_r+0x84>
 8009534:	250a      	movs	r5, #10
 8009536:	e011      	b.n	800955c <_puts_r+0x88>
 8009538:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <_puts_r+0xd4>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d101      	bne.n	8009542 <_puts_r+0x6e>
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	e7da      	b.n	80094f8 <_puts_r+0x24>
 8009542:	4b1a      	ldr	r3, [pc, #104]	; (80095ac <_puts_r+0xd8>)
 8009544:	429c      	cmp	r4, r3
 8009546:	bf08      	it	eq
 8009548:	68ec      	ldreq	r4, [r5, #12]
 800954a:	e7d5      	b.n	80094f8 <_puts_r+0x24>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f000 ff6c 	bl	800a42c <__swsetup_r>
 8009554:	2800      	cmp	r0, #0
 8009556:	d0dd      	beq.n	8009514 <_puts_r+0x40>
 8009558:	f04f 35ff 	mov.w	r5, #4294967295
 800955c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800955e:	07da      	lsls	r2, r3, #31
 8009560:	d405      	bmi.n	800956e <_puts_r+0x9a>
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	059b      	lsls	r3, r3, #22
 8009566:	d402      	bmi.n	800956e <_puts_r+0x9a>
 8009568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956a:	f002 fb73 	bl	800bc54 <__retarget_lock_release_recursive>
 800956e:	4628      	mov	r0, r5
 8009570:	bd70      	pop	{r4, r5, r6, pc}
 8009572:	2b00      	cmp	r3, #0
 8009574:	da04      	bge.n	8009580 <_puts_r+0xac>
 8009576:	69a2      	ldr	r2, [r4, #24]
 8009578:	429a      	cmp	r2, r3
 800957a:	dc06      	bgt.n	800958a <_puts_r+0xb6>
 800957c:	290a      	cmp	r1, #10
 800957e:	d004      	beq.n	800958a <_puts_r+0xb6>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	7019      	strb	r1, [r3, #0]
 8009588:	e7c5      	b.n	8009516 <_puts_r+0x42>
 800958a:	4622      	mov	r2, r4
 800958c:	4628      	mov	r0, r5
 800958e:	f000 fefb 	bl	800a388 <__swbuf_r>
 8009592:	3001      	adds	r0, #1
 8009594:	d1bf      	bne.n	8009516 <_puts_r+0x42>
 8009596:	e7df      	b.n	8009558 <_puts_r+0x84>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	250a      	movs	r5, #10
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	6022      	str	r2, [r4, #0]
 80095a0:	701d      	strb	r5, [r3, #0]
 80095a2:	e7db      	b.n	800955c <_puts_r+0x88>
 80095a4:	0800dc3c 	.word	0x0800dc3c
 80095a8:	0800dc5c 	.word	0x0800dc5c
 80095ac:	0800dc1c 	.word	0x0800dc1c

080095b0 <puts>:
 80095b0:	4b02      	ldr	r3, [pc, #8]	; (80095bc <puts+0xc>)
 80095b2:	4601      	mov	r1, r0
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	f7ff bf8d 	b.w	80094d4 <_puts_r>
 80095ba:	bf00      	nop
 80095bc:	2000004c 	.word	0x2000004c

080095c0 <_sbrk_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_sbrk_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7fa f840 	bl	8003650 <_sbrk>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_sbrk_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_sbrk_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	20002554 	.word	0x20002554

080095e0 <nanf>:
 80095e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095e8 <nanf+0x8>
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	7fc00000 	.word	0x7fc00000

080095ec <siprintf>:
 80095ec:	b40e      	push	{r1, r2, r3}
 80095ee:	b500      	push	{lr}
 80095f0:	b09c      	sub	sp, #112	; 0x70
 80095f2:	ab1d      	add	r3, sp, #116	; 0x74
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	9006      	str	r0, [sp, #24]
 80095f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095fc:	4809      	ldr	r0, [pc, #36]	; (8009624 <siprintf+0x38>)
 80095fe:	9107      	str	r1, [sp, #28]
 8009600:	9104      	str	r1, [sp, #16]
 8009602:	4909      	ldr	r1, [pc, #36]	; (8009628 <siprintf+0x3c>)
 8009604:	f853 2b04 	ldr.w	r2, [r3], #4
 8009608:	9105      	str	r1, [sp, #20]
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	a902      	add	r1, sp, #8
 8009610:	f003 f8d6 	bl	800c7c0 <_svfiprintf_r>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	b01c      	add	sp, #112	; 0x70
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	2000004c 	.word	0x2000004c
 8009628:	ffff0208 	.word	0xffff0208

0800962c <sulp>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	ec45 4b10 	vmov	d0, r4, r5
 8009636:	4616      	mov	r6, r2
 8009638:	f002 ff02 	bl	800c440 <__ulp>
 800963c:	ec51 0b10 	vmov	r0, r1, d0
 8009640:	b17e      	cbz	r6, 8009662 <sulp+0x36>
 8009642:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009646:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800964a:	2b00      	cmp	r3, #0
 800964c:	dd09      	ble.n	8009662 <sulp+0x36>
 800964e:	051b      	lsls	r3, r3, #20
 8009650:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009654:	2400      	movs	r4, #0
 8009656:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800965a:	4622      	mov	r2, r4
 800965c:	462b      	mov	r3, r5
 800965e:	f7f6 ffcb 	bl	80005f8 <__aeabi_dmul>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	0000      	movs	r0, r0
	...

08009668 <_strtod_l>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	ed2d 8b02 	vpush	{d8}
 8009670:	b09d      	sub	sp, #116	; 0x74
 8009672:	461f      	mov	r7, r3
 8009674:	2300      	movs	r3, #0
 8009676:	9318      	str	r3, [sp, #96]	; 0x60
 8009678:	4ba2      	ldr	r3, [pc, #648]	; (8009904 <_strtod_l+0x29c>)
 800967a:	9213      	str	r2, [sp, #76]	; 0x4c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	4604      	mov	r4, r0
 8009682:	4618      	mov	r0, r3
 8009684:	4688      	mov	r8, r1
 8009686:	f7f6 fda3 	bl	80001d0 <strlen>
 800968a:	f04f 0a00 	mov.w	sl, #0
 800968e:	4605      	mov	r5, r0
 8009690:	f04f 0b00 	mov.w	fp, #0
 8009694:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969a:	781a      	ldrb	r2, [r3, #0]
 800969c:	2a2b      	cmp	r2, #43	; 0x2b
 800969e:	d04e      	beq.n	800973e <_strtod_l+0xd6>
 80096a0:	d83b      	bhi.n	800971a <_strtod_l+0xb2>
 80096a2:	2a0d      	cmp	r2, #13
 80096a4:	d834      	bhi.n	8009710 <_strtod_l+0xa8>
 80096a6:	2a08      	cmp	r2, #8
 80096a8:	d834      	bhi.n	8009714 <_strtod_l+0xac>
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d03e      	beq.n	800972c <_strtod_l+0xc4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	930a      	str	r3, [sp, #40]	; 0x28
 80096b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80096b4:	7833      	ldrb	r3, [r6, #0]
 80096b6:	2b30      	cmp	r3, #48	; 0x30
 80096b8:	f040 80b0 	bne.w	800981c <_strtod_l+0x1b4>
 80096bc:	7873      	ldrb	r3, [r6, #1]
 80096be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096c2:	2b58      	cmp	r3, #88	; 0x58
 80096c4:	d168      	bne.n	8009798 <_strtod_l+0x130>
 80096c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	ab18      	add	r3, sp, #96	; 0x60
 80096cc:	9702      	str	r7, [sp, #8]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4a8d      	ldr	r2, [pc, #564]	; (8009908 <_strtod_l+0x2a0>)
 80096d2:	ab19      	add	r3, sp, #100	; 0x64
 80096d4:	a917      	add	r1, sp, #92	; 0x5c
 80096d6:	4620      	mov	r0, r4
 80096d8:	f001 ffae 	bl	800b638 <__gethex>
 80096dc:	f010 0707 	ands.w	r7, r0, #7
 80096e0:	4605      	mov	r5, r0
 80096e2:	d005      	beq.n	80096f0 <_strtod_l+0x88>
 80096e4:	2f06      	cmp	r7, #6
 80096e6:	d12c      	bne.n	8009742 <_strtod_l+0xda>
 80096e8:	3601      	adds	r6, #1
 80096ea:	2300      	movs	r3, #0
 80096ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80096ee:	930a      	str	r3, [sp, #40]	; 0x28
 80096f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f040 8590 	bne.w	800a218 <_strtod_l+0xbb0>
 80096f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fa:	b1eb      	cbz	r3, 8009738 <_strtod_l+0xd0>
 80096fc:	4652      	mov	r2, sl
 80096fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009702:	ec43 2b10 	vmov	d0, r2, r3
 8009706:	b01d      	add	sp, #116	; 0x74
 8009708:	ecbd 8b02 	vpop	{d8}
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009710:	2a20      	cmp	r2, #32
 8009712:	d1cc      	bne.n	80096ae <_strtod_l+0x46>
 8009714:	3301      	adds	r3, #1
 8009716:	9317      	str	r3, [sp, #92]	; 0x5c
 8009718:	e7be      	b.n	8009698 <_strtod_l+0x30>
 800971a:	2a2d      	cmp	r2, #45	; 0x2d
 800971c:	d1c7      	bne.n	80096ae <_strtod_l+0x46>
 800971e:	2201      	movs	r2, #1
 8009720:	920a      	str	r2, [sp, #40]	; 0x28
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	9217      	str	r2, [sp, #92]	; 0x5c
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1c2      	bne.n	80096b2 <_strtod_l+0x4a>
 800972c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800972e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009732:	2b00      	cmp	r3, #0
 8009734:	f040 856e 	bne.w	800a214 <_strtod_l+0xbac>
 8009738:	4652      	mov	r2, sl
 800973a:	465b      	mov	r3, fp
 800973c:	e7e1      	b.n	8009702 <_strtod_l+0x9a>
 800973e:	2200      	movs	r2, #0
 8009740:	e7ee      	b.n	8009720 <_strtod_l+0xb8>
 8009742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009744:	b13a      	cbz	r2, 8009756 <_strtod_l+0xee>
 8009746:	2135      	movs	r1, #53	; 0x35
 8009748:	a81a      	add	r0, sp, #104	; 0x68
 800974a:	f002 ff84 	bl	800c656 <__copybits>
 800974e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009750:	4620      	mov	r0, r4
 8009752:	f002 fb43 	bl	800bddc <_Bfree>
 8009756:	3f01      	subs	r7, #1
 8009758:	2f04      	cmp	r7, #4
 800975a:	d806      	bhi.n	800976a <_strtod_l+0x102>
 800975c:	e8df f007 	tbb	[pc, r7]
 8009760:	1714030a 	.word	0x1714030a
 8009764:	0a          	.byte	0x0a
 8009765:	00          	.byte	0x00
 8009766:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800976a:	0728      	lsls	r0, r5, #28
 800976c:	d5c0      	bpl.n	80096f0 <_strtod_l+0x88>
 800976e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009772:	e7bd      	b.n	80096f0 <_strtod_l+0x88>
 8009774:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800977a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800977e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009782:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009786:	e7f0      	b.n	800976a <_strtod_l+0x102>
 8009788:	f8df b180 	ldr.w	fp, [pc, #384]	; 800990c <_strtod_l+0x2a4>
 800978c:	e7ed      	b.n	800976a <_strtod_l+0x102>
 800978e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009792:	f04f 3aff 	mov.w	sl, #4294967295
 8009796:	e7e8      	b.n	800976a <_strtod_l+0x102>
 8009798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	9217      	str	r2, [sp, #92]	; 0x5c
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b30      	cmp	r3, #48	; 0x30
 80097a2:	d0f9      	beq.n	8009798 <_strtod_l+0x130>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0a3      	beq.n	80096f0 <_strtod_l+0x88>
 80097a8:	2301      	movs	r3, #1
 80097aa:	f04f 0900 	mov.w	r9, #0
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097b2:	9308      	str	r3, [sp, #32]
 80097b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80097b8:	464f      	mov	r7, r9
 80097ba:	220a      	movs	r2, #10
 80097bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80097be:	7806      	ldrb	r6, [r0, #0]
 80097c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80097c4:	b2d9      	uxtb	r1, r3
 80097c6:	2909      	cmp	r1, #9
 80097c8:	d92a      	bls.n	8009820 <_strtod_l+0x1b8>
 80097ca:	9905      	ldr	r1, [sp, #20]
 80097cc:	462a      	mov	r2, r5
 80097ce:	f003 fa9e 	bl	800cd0e <strncmp>
 80097d2:	b398      	cbz	r0, 800983c <_strtod_l+0x1d4>
 80097d4:	2000      	movs	r0, #0
 80097d6:	4632      	mov	r2, r6
 80097d8:	463d      	mov	r5, r7
 80097da:	9005      	str	r0, [sp, #20]
 80097dc:	4603      	mov	r3, r0
 80097de:	2a65      	cmp	r2, #101	; 0x65
 80097e0:	d001      	beq.n	80097e6 <_strtod_l+0x17e>
 80097e2:	2a45      	cmp	r2, #69	; 0x45
 80097e4:	d118      	bne.n	8009818 <_strtod_l+0x1b0>
 80097e6:	b91d      	cbnz	r5, 80097f0 <_strtod_l+0x188>
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	4302      	orrs	r2, r0
 80097ec:	d09e      	beq.n	800972c <_strtod_l+0xc4>
 80097ee:	2500      	movs	r5, #0
 80097f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80097f4:	f108 0201 	add.w	r2, r8, #1
 80097f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80097fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80097fe:	2a2b      	cmp	r2, #43	; 0x2b
 8009800:	d075      	beq.n	80098ee <_strtod_l+0x286>
 8009802:	2a2d      	cmp	r2, #45	; 0x2d
 8009804:	d07b      	beq.n	80098fe <_strtod_l+0x296>
 8009806:	f04f 0c00 	mov.w	ip, #0
 800980a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800980e:	2909      	cmp	r1, #9
 8009810:	f240 8082 	bls.w	8009918 <_strtod_l+0x2b0>
 8009814:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009818:	2600      	movs	r6, #0
 800981a:	e09d      	b.n	8009958 <_strtod_l+0x2f0>
 800981c:	2300      	movs	r3, #0
 800981e:	e7c4      	b.n	80097aa <_strtod_l+0x142>
 8009820:	2f08      	cmp	r7, #8
 8009822:	bfd8      	it	le
 8009824:	9907      	ldrle	r1, [sp, #28]
 8009826:	f100 0001 	add.w	r0, r0, #1
 800982a:	bfda      	itte	le
 800982c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009830:	9307      	strle	r3, [sp, #28]
 8009832:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009836:	3701      	adds	r7, #1
 8009838:	9017      	str	r0, [sp, #92]	; 0x5c
 800983a:	e7bf      	b.n	80097bc <_strtod_l+0x154>
 800983c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800983e:	195a      	adds	r2, r3, r5
 8009840:	9217      	str	r2, [sp, #92]	; 0x5c
 8009842:	5d5a      	ldrb	r2, [r3, r5]
 8009844:	2f00      	cmp	r7, #0
 8009846:	d037      	beq.n	80098b8 <_strtod_l+0x250>
 8009848:	9005      	str	r0, [sp, #20]
 800984a:	463d      	mov	r5, r7
 800984c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009850:	2b09      	cmp	r3, #9
 8009852:	d912      	bls.n	800987a <_strtod_l+0x212>
 8009854:	2301      	movs	r3, #1
 8009856:	e7c2      	b.n	80097de <_strtod_l+0x176>
 8009858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	9217      	str	r2, [sp, #92]	; 0x5c
 800985e:	785a      	ldrb	r2, [r3, #1]
 8009860:	3001      	adds	r0, #1
 8009862:	2a30      	cmp	r2, #48	; 0x30
 8009864:	d0f8      	beq.n	8009858 <_strtod_l+0x1f0>
 8009866:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800986a:	2b08      	cmp	r3, #8
 800986c:	f200 84d9 	bhi.w	800a222 <_strtod_l+0xbba>
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	9005      	str	r0, [sp, #20]
 8009874:	2000      	movs	r0, #0
 8009876:	9308      	str	r3, [sp, #32]
 8009878:	4605      	mov	r5, r0
 800987a:	3a30      	subs	r2, #48	; 0x30
 800987c:	f100 0301 	add.w	r3, r0, #1
 8009880:	d014      	beq.n	80098ac <_strtod_l+0x244>
 8009882:	9905      	ldr	r1, [sp, #20]
 8009884:	4419      	add	r1, r3
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	462b      	mov	r3, r5
 800988a:	eb00 0e05 	add.w	lr, r0, r5
 800988e:	210a      	movs	r1, #10
 8009890:	4573      	cmp	r3, lr
 8009892:	d113      	bne.n	80098bc <_strtod_l+0x254>
 8009894:	182b      	adds	r3, r5, r0
 8009896:	2b08      	cmp	r3, #8
 8009898:	f105 0501 	add.w	r5, r5, #1
 800989c:	4405      	add	r5, r0
 800989e:	dc1c      	bgt.n	80098da <_strtod_l+0x272>
 80098a0:	9907      	ldr	r1, [sp, #28]
 80098a2:	230a      	movs	r3, #10
 80098a4:	fb03 2301 	mla	r3, r3, r1, r2
 80098a8:	9307      	str	r3, [sp, #28]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098ae:	1c51      	adds	r1, r2, #1
 80098b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80098b2:	7852      	ldrb	r2, [r2, #1]
 80098b4:	4618      	mov	r0, r3
 80098b6:	e7c9      	b.n	800984c <_strtod_l+0x1e4>
 80098b8:	4638      	mov	r0, r7
 80098ba:	e7d2      	b.n	8009862 <_strtod_l+0x1fa>
 80098bc:	2b08      	cmp	r3, #8
 80098be:	dc04      	bgt.n	80098ca <_strtod_l+0x262>
 80098c0:	9e07      	ldr	r6, [sp, #28]
 80098c2:	434e      	muls	r6, r1
 80098c4:	9607      	str	r6, [sp, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	e7e2      	b.n	8009890 <_strtod_l+0x228>
 80098ca:	f103 0c01 	add.w	ip, r3, #1
 80098ce:	f1bc 0f10 	cmp.w	ip, #16
 80098d2:	bfd8      	it	le
 80098d4:	fb01 f909 	mulle.w	r9, r1, r9
 80098d8:	e7f5      	b.n	80098c6 <_strtod_l+0x25e>
 80098da:	2d10      	cmp	r5, #16
 80098dc:	bfdc      	itt	le
 80098de:	230a      	movle	r3, #10
 80098e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80098e4:	e7e1      	b.n	80098aa <_strtod_l+0x242>
 80098e6:	2300      	movs	r3, #0
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	2301      	movs	r3, #1
 80098ec:	e77c      	b.n	80097e8 <_strtod_l+0x180>
 80098ee:	f04f 0c00 	mov.w	ip, #0
 80098f2:	f108 0202 	add.w	r2, r8, #2
 80098f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80098f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80098fc:	e785      	b.n	800980a <_strtod_l+0x1a2>
 80098fe:	f04f 0c01 	mov.w	ip, #1
 8009902:	e7f6      	b.n	80098f2 <_strtod_l+0x28a>
 8009904:	0800dce4 	.word	0x0800dce4
 8009908:	0800da38 	.word	0x0800da38
 800990c:	7ff00000 	.word	0x7ff00000
 8009910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009912:	1c51      	adds	r1, r2, #1
 8009914:	9117      	str	r1, [sp, #92]	; 0x5c
 8009916:	7852      	ldrb	r2, [r2, #1]
 8009918:	2a30      	cmp	r2, #48	; 0x30
 800991a:	d0f9      	beq.n	8009910 <_strtod_l+0x2a8>
 800991c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009920:	2908      	cmp	r1, #8
 8009922:	f63f af79 	bhi.w	8009818 <_strtod_l+0x1b0>
 8009926:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800992a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800992c:	9206      	str	r2, [sp, #24]
 800992e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009930:	1c51      	adds	r1, r2, #1
 8009932:	9117      	str	r1, [sp, #92]	; 0x5c
 8009934:	7852      	ldrb	r2, [r2, #1]
 8009936:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800993a:	2e09      	cmp	r6, #9
 800993c:	d937      	bls.n	80099ae <_strtod_l+0x346>
 800993e:	9e06      	ldr	r6, [sp, #24]
 8009940:	1b89      	subs	r1, r1, r6
 8009942:	2908      	cmp	r1, #8
 8009944:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009948:	dc02      	bgt.n	8009950 <_strtod_l+0x2e8>
 800994a:	4576      	cmp	r6, lr
 800994c:	bfa8      	it	ge
 800994e:	4676      	movge	r6, lr
 8009950:	f1bc 0f00 	cmp.w	ip, #0
 8009954:	d000      	beq.n	8009958 <_strtod_l+0x2f0>
 8009956:	4276      	negs	r6, r6
 8009958:	2d00      	cmp	r5, #0
 800995a:	d14d      	bne.n	80099f8 <_strtod_l+0x390>
 800995c:	9904      	ldr	r1, [sp, #16]
 800995e:	4301      	orrs	r1, r0
 8009960:	f47f aec6 	bne.w	80096f0 <_strtod_l+0x88>
 8009964:	2b00      	cmp	r3, #0
 8009966:	f47f aee1 	bne.w	800972c <_strtod_l+0xc4>
 800996a:	2a69      	cmp	r2, #105	; 0x69
 800996c:	d027      	beq.n	80099be <_strtod_l+0x356>
 800996e:	dc24      	bgt.n	80099ba <_strtod_l+0x352>
 8009970:	2a49      	cmp	r2, #73	; 0x49
 8009972:	d024      	beq.n	80099be <_strtod_l+0x356>
 8009974:	2a4e      	cmp	r2, #78	; 0x4e
 8009976:	f47f aed9 	bne.w	800972c <_strtod_l+0xc4>
 800997a:	499f      	ldr	r1, [pc, #636]	; (8009bf8 <_strtod_l+0x590>)
 800997c:	a817      	add	r0, sp, #92	; 0x5c
 800997e:	f002 f8b3 	bl	800bae8 <__match>
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f aed2 	beq.w	800972c <_strtod_l+0xc4>
 8009988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b28      	cmp	r3, #40	; 0x28
 800998e:	d12d      	bne.n	80099ec <_strtod_l+0x384>
 8009990:	499a      	ldr	r1, [pc, #616]	; (8009bfc <_strtod_l+0x594>)
 8009992:	aa1a      	add	r2, sp, #104	; 0x68
 8009994:	a817      	add	r0, sp, #92	; 0x5c
 8009996:	f002 f8bb 	bl	800bb10 <__hexnan>
 800999a:	2805      	cmp	r0, #5
 800999c:	d126      	bne.n	80099ec <_strtod_l+0x384>
 800999e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80099a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80099a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80099ac:	e6a0      	b.n	80096f0 <_strtod_l+0x88>
 80099ae:	210a      	movs	r1, #10
 80099b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80099b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80099b8:	e7b9      	b.n	800992e <_strtod_l+0x2c6>
 80099ba:	2a6e      	cmp	r2, #110	; 0x6e
 80099bc:	e7db      	b.n	8009976 <_strtod_l+0x30e>
 80099be:	4990      	ldr	r1, [pc, #576]	; (8009c00 <_strtod_l+0x598>)
 80099c0:	a817      	add	r0, sp, #92	; 0x5c
 80099c2:	f002 f891 	bl	800bae8 <__match>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f43f aeb0 	beq.w	800972c <_strtod_l+0xc4>
 80099cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099ce:	498d      	ldr	r1, [pc, #564]	; (8009c04 <_strtod_l+0x59c>)
 80099d0:	3b01      	subs	r3, #1
 80099d2:	a817      	add	r0, sp, #92	; 0x5c
 80099d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80099d6:	f002 f887 	bl	800bae8 <__match>
 80099da:	b910      	cbnz	r0, 80099e2 <_strtod_l+0x37a>
 80099dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099de:	3301      	adds	r3, #1
 80099e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80099e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009c14 <_strtod_l+0x5ac>
 80099e6:	f04f 0a00 	mov.w	sl, #0
 80099ea:	e681      	b.n	80096f0 <_strtod_l+0x88>
 80099ec:	4886      	ldr	r0, [pc, #536]	; (8009c08 <_strtod_l+0x5a0>)
 80099ee:	f003 f943 	bl	800cc78 <nan>
 80099f2:	ec5b ab10 	vmov	sl, fp, d0
 80099f6:	e67b      	b.n	80096f0 <_strtod_l+0x88>
 80099f8:	9b05      	ldr	r3, [sp, #20]
 80099fa:	9807      	ldr	r0, [sp, #28]
 80099fc:	1af3      	subs	r3, r6, r3
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	bf08      	it	eq
 8009a02:	462f      	moveq	r7, r5
 8009a04:	2d10      	cmp	r5, #16
 8009a06:	9306      	str	r3, [sp, #24]
 8009a08:	46a8      	mov	r8, r5
 8009a0a:	bfa8      	it	ge
 8009a0c:	f04f 0810 	movge.w	r8, #16
 8009a10:	f7f6 fd78 	bl	8000504 <__aeabi_ui2d>
 8009a14:	2d09      	cmp	r5, #9
 8009a16:	4682      	mov	sl, r0
 8009a18:	468b      	mov	fp, r1
 8009a1a:	dd13      	ble.n	8009a44 <_strtod_l+0x3dc>
 8009a1c:	4b7b      	ldr	r3, [pc, #492]	; (8009c0c <_strtod_l+0x5a4>)
 8009a1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	4648      	mov	r0, r9
 8009a2e:	468b      	mov	fp, r1
 8009a30:	f7f6 fd68 	bl	8000504 <__aeabi_ui2d>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	f7f6 fc26 	bl	800028c <__adddf3>
 8009a40:	4682      	mov	sl, r0
 8009a42:	468b      	mov	fp, r1
 8009a44:	2d0f      	cmp	r5, #15
 8009a46:	dc38      	bgt.n	8009aba <_strtod_l+0x452>
 8009a48:	9b06      	ldr	r3, [sp, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f43f ae50 	beq.w	80096f0 <_strtod_l+0x88>
 8009a50:	dd24      	ble.n	8009a9c <_strtod_l+0x434>
 8009a52:	2b16      	cmp	r3, #22
 8009a54:	dc0b      	bgt.n	8009a6e <_strtod_l+0x406>
 8009a56:	496d      	ldr	r1, [pc, #436]	; (8009c0c <_strtod_l+0x5a4>)
 8009a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a60:	4652      	mov	r2, sl
 8009a62:	465b      	mov	r3, fp
 8009a64:	f7f6 fdc8 	bl	80005f8 <__aeabi_dmul>
 8009a68:	4682      	mov	sl, r0
 8009a6a:	468b      	mov	fp, r1
 8009a6c:	e640      	b.n	80096f0 <_strtod_l+0x88>
 8009a6e:	9a06      	ldr	r2, [sp, #24]
 8009a70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009a74:	4293      	cmp	r3, r2
 8009a76:	db20      	blt.n	8009aba <_strtod_l+0x452>
 8009a78:	4c64      	ldr	r4, [pc, #400]	; (8009c0c <_strtod_l+0x5a4>)
 8009a7a:	f1c5 050f 	rsb	r5, r5, #15
 8009a7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a82:	4652      	mov	r2, sl
 8009a84:	465b      	mov	r3, fp
 8009a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a8a:	f7f6 fdb5 	bl	80005f8 <__aeabi_dmul>
 8009a8e:	9b06      	ldr	r3, [sp, #24]
 8009a90:	1b5d      	subs	r5, r3, r5
 8009a92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a9a:	e7e3      	b.n	8009a64 <_strtod_l+0x3fc>
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	3316      	adds	r3, #22
 8009aa0:	db0b      	blt.n	8009aba <_strtod_l+0x452>
 8009aa2:	9b05      	ldr	r3, [sp, #20]
 8009aa4:	1b9e      	subs	r6, r3, r6
 8009aa6:	4b59      	ldr	r3, [pc, #356]	; (8009c0c <_strtod_l+0x5a4>)
 8009aa8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009aac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	f7f6 feca 	bl	800084c <__aeabi_ddiv>
 8009ab8:	e7d6      	b.n	8009a68 <_strtod_l+0x400>
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	eba5 0808 	sub.w	r8, r5, r8
 8009ac0:	4498      	add	r8, r3
 8009ac2:	f1b8 0f00 	cmp.w	r8, #0
 8009ac6:	dd74      	ble.n	8009bb2 <_strtod_l+0x54a>
 8009ac8:	f018 030f 	ands.w	r3, r8, #15
 8009acc:	d00a      	beq.n	8009ae4 <_strtod_l+0x47c>
 8009ace:	494f      	ldr	r1, [pc, #316]	; (8009c0c <_strtod_l+0x5a4>)
 8009ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	4682      	mov	sl, r0
 8009ae2:	468b      	mov	fp, r1
 8009ae4:	f038 080f 	bics.w	r8, r8, #15
 8009ae8:	d04f      	beq.n	8009b8a <_strtod_l+0x522>
 8009aea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009aee:	dd22      	ble.n	8009b36 <_strtod_l+0x4ce>
 8009af0:	2500      	movs	r5, #0
 8009af2:	462e      	mov	r6, r5
 8009af4:	9507      	str	r5, [sp, #28]
 8009af6:	9505      	str	r5, [sp, #20]
 8009af8:	2322      	movs	r3, #34	; 0x22
 8009afa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009c14 <_strtod_l+0x5ac>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	f04f 0a00 	mov.w	sl, #0
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f43f adf2 	beq.w	80096f0 <_strtod_l+0x88>
 8009b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f002 f964 	bl	800bddc <_Bfree>
 8009b14:	9905      	ldr	r1, [sp, #20]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f002 f960 	bl	800bddc <_Bfree>
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f002 f95c 	bl	800bddc <_Bfree>
 8009b24:	9907      	ldr	r1, [sp, #28]
 8009b26:	4620      	mov	r0, r4
 8009b28:	f002 f958 	bl	800bddc <_Bfree>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f002 f954 	bl	800bddc <_Bfree>
 8009b34:	e5dc      	b.n	80096f0 <_strtod_l+0x88>
 8009b36:	4b36      	ldr	r3, [pc, #216]	; (8009c10 <_strtod_l+0x5a8>)
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009b40:	4650      	mov	r0, sl
 8009b42:	4659      	mov	r1, fp
 8009b44:	4699      	mov	r9, r3
 8009b46:	f1b8 0f01 	cmp.w	r8, #1
 8009b4a:	dc21      	bgt.n	8009b90 <_strtod_l+0x528>
 8009b4c:	b10b      	cbz	r3, 8009b52 <_strtod_l+0x4ea>
 8009b4e:	4682      	mov	sl, r0
 8009b50:	468b      	mov	fp, r1
 8009b52:	4b2f      	ldr	r3, [pc, #188]	; (8009c10 <_strtod_l+0x5a8>)
 8009b54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009b58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	465b      	mov	r3, fp
 8009b60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <_strtod_l+0x5ac>)
 8009b6a:	460a      	mov	r2, r1
 8009b6c:	400b      	ands	r3, r1
 8009b6e:	492a      	ldr	r1, [pc, #168]	; (8009c18 <_strtod_l+0x5b0>)
 8009b70:	428b      	cmp	r3, r1
 8009b72:	4682      	mov	sl, r0
 8009b74:	d8bc      	bhi.n	8009af0 <_strtod_l+0x488>
 8009b76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b7a:	428b      	cmp	r3, r1
 8009b7c:	bf86      	itte	hi
 8009b7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009c1c <_strtod_l+0x5b4>
 8009b82:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	e084      	b.n	8009c9a <_strtod_l+0x632>
 8009b90:	f018 0f01 	tst.w	r8, #1
 8009b94:	d005      	beq.n	8009ba2 <_strtod_l+0x53a>
 8009b96:	9b04      	ldr	r3, [sp, #16]
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9a04      	ldr	r2, [sp, #16]
 8009ba4:	3208      	adds	r2, #8
 8009ba6:	f109 0901 	add.w	r9, r9, #1
 8009baa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bae:	9204      	str	r2, [sp, #16]
 8009bb0:	e7c9      	b.n	8009b46 <_strtod_l+0x4de>
 8009bb2:	d0ea      	beq.n	8009b8a <_strtod_l+0x522>
 8009bb4:	f1c8 0800 	rsb	r8, r8, #0
 8009bb8:	f018 020f 	ands.w	r2, r8, #15
 8009bbc:	d00a      	beq.n	8009bd4 <_strtod_l+0x56c>
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <_strtod_l+0x5a4>)
 8009bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 fe3e 	bl	800084c <__aeabi_ddiv>
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	468b      	mov	fp, r1
 8009bd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009bd8:	d0d7      	beq.n	8009b8a <_strtod_l+0x522>
 8009bda:	f1b8 0f1f 	cmp.w	r8, #31
 8009bde:	dd1f      	ble.n	8009c20 <_strtod_l+0x5b8>
 8009be0:	2500      	movs	r5, #0
 8009be2:	462e      	mov	r6, r5
 8009be4:	9507      	str	r5, [sp, #28]
 8009be6:	9505      	str	r5, [sp, #20]
 8009be8:	2322      	movs	r3, #34	; 0x22
 8009bea:	f04f 0a00 	mov.w	sl, #0
 8009bee:	f04f 0b00 	mov.w	fp, #0
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	e786      	b.n	8009b04 <_strtod_l+0x49c>
 8009bf6:	bf00      	nop
 8009bf8:	0800da09 	.word	0x0800da09
 8009bfc:	0800da4c 	.word	0x0800da4c
 8009c00:	0800da01 	.word	0x0800da01
 8009c04:	0800db8c 	.word	0x0800db8c
 8009c08:	0800dea0 	.word	0x0800dea0
 8009c0c:	0800dd80 	.word	0x0800dd80
 8009c10:	0800dd58 	.word	0x0800dd58
 8009c14:	7ff00000 	.word	0x7ff00000
 8009c18:	7ca00000 	.word	0x7ca00000
 8009c1c:	7fefffff 	.word	0x7fefffff
 8009c20:	f018 0310 	ands.w	r3, r8, #16
 8009c24:	bf18      	it	ne
 8009c26:	236a      	movne	r3, #106	; 0x6a
 8009c28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009fd8 <_strtod_l+0x970>
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	4650      	mov	r0, sl
 8009c30:	4659      	mov	r1, fp
 8009c32:	2300      	movs	r3, #0
 8009c34:	f018 0f01 	tst.w	r8, #1
 8009c38:	d004      	beq.n	8009c44 <_strtod_l+0x5dc>
 8009c3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	2301      	movs	r3, #1
 8009c44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009c48:	f109 0908 	add.w	r9, r9, #8
 8009c4c:	d1f2      	bne.n	8009c34 <_strtod_l+0x5cc>
 8009c4e:	b10b      	cbz	r3, 8009c54 <_strtod_l+0x5ec>
 8009c50:	4682      	mov	sl, r0
 8009c52:	468b      	mov	fp, r1
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	b1c3      	cbz	r3, 8009c8a <_strtod_l+0x622>
 8009c58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	4659      	mov	r1, fp
 8009c64:	dd11      	ble.n	8009c8a <_strtod_l+0x622>
 8009c66:	2b1f      	cmp	r3, #31
 8009c68:	f340 8124 	ble.w	8009eb4 <_strtod_l+0x84c>
 8009c6c:	2b34      	cmp	r3, #52	; 0x34
 8009c6e:	bfde      	ittt	le
 8009c70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009c74:	f04f 33ff 	movle.w	r3, #4294967295
 8009c78:	fa03 f202 	lslle.w	r2, r3, r2
 8009c7c:	f04f 0a00 	mov.w	sl, #0
 8009c80:	bfcc      	ite	gt
 8009c82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009c86:	ea02 0b01 	andle.w	fp, r2, r1
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4659      	mov	r1, fp
 8009c92:	f7f6 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d1a2      	bne.n	8009be0 <_strtod_l+0x578>
 8009c9a:	9b07      	ldr	r3, [sp, #28]
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	9908      	ldr	r1, [sp, #32]
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	463a      	mov	r2, r7
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f002 f901 	bl	800beac <__s2b>
 8009caa:	9007      	str	r0, [sp, #28]
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f43f af1f 	beq.w	8009af0 <_strtod_l+0x488>
 8009cb2:	9b05      	ldr	r3, [sp, #20]
 8009cb4:	1b9e      	subs	r6, r3, r6
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bfb4      	ite	lt
 8009cbc:	4633      	movlt	r3, r6
 8009cbe:	2300      	movge	r3, #0
 8009cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	2500      	movs	r5, #0
 8009cc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009cca:	9312      	str	r3, [sp, #72]	; 0x48
 8009ccc:	462e      	mov	r6, r5
 8009cce:	9b07      	ldr	r3, [sp, #28]
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	6859      	ldr	r1, [r3, #4]
 8009cd4:	f002 f842 	bl	800bd5c <_Balloc>
 8009cd8:	9005      	str	r0, [sp, #20]
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f43f af0c 	beq.w	8009af8 <_strtod_l+0x490>
 8009ce0:	9b07      	ldr	r3, [sp, #28]
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	3202      	adds	r2, #2
 8009ce6:	f103 010c 	add.w	r1, r3, #12
 8009cea:	0092      	lsls	r2, r2, #2
 8009cec:	300c      	adds	r0, #12
 8009cee:	f7fe fc69 	bl	80085c4 <memcpy>
 8009cf2:	ec4b ab10 	vmov	d0, sl, fp
 8009cf6:	aa1a      	add	r2, sp, #104	; 0x68
 8009cf8:	a919      	add	r1, sp, #100	; 0x64
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f002 fc1c 	bl	800c538 <__d2b>
 8009d00:	ec4b ab18 	vmov	d8, sl, fp
 8009d04:	9018      	str	r0, [sp, #96]	; 0x60
 8009d06:	2800      	cmp	r0, #0
 8009d08:	f43f aef6 	beq.w	8009af8 <_strtod_l+0x490>
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f002 f966 	bl	800bfe0 <__i2b>
 8009d14:	4606      	mov	r6, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f aeee 	beq.w	8009af8 <_strtod_l+0x490>
 8009d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d1e:	9904      	ldr	r1, [sp, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfab      	itete	ge
 8009d24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009d26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009d28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009d2e:	bfac      	ite	ge
 8009d30:	eb03 0902 	addge.w	r9, r3, r2
 8009d34:	1ad7      	sublt	r7, r2, r3
 8009d36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d38:	eba3 0801 	sub.w	r8, r3, r1
 8009d3c:	4490      	add	r8, r2
 8009d3e:	4ba1      	ldr	r3, [pc, #644]	; (8009fc4 <_strtod_l+0x95c>)
 8009d40:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d44:	4598      	cmp	r8, r3
 8009d46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d4a:	f280 80c7 	bge.w	8009edc <_strtod_l+0x874>
 8009d4e:	eba3 0308 	sub.w	r3, r3, r8
 8009d52:	2b1f      	cmp	r3, #31
 8009d54:	eba2 0203 	sub.w	r2, r2, r3
 8009d58:	f04f 0101 	mov.w	r1, #1
 8009d5c:	f300 80b1 	bgt.w	8009ec2 <_strtod_l+0x85a>
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	930d      	str	r3, [sp, #52]	; 0x34
 8009d66:	2300      	movs	r3, #0
 8009d68:	9308      	str	r3, [sp, #32]
 8009d6a:	eb09 0802 	add.w	r8, r9, r2
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	45c1      	cmp	r9, r8
 8009d72:	4417      	add	r7, r2
 8009d74:	441f      	add	r7, r3
 8009d76:	464b      	mov	r3, r9
 8009d78:	bfa8      	it	ge
 8009d7a:	4643      	movge	r3, r8
 8009d7c:	42bb      	cmp	r3, r7
 8009d7e:	bfa8      	it	ge
 8009d80:	463b      	movge	r3, r7
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfc2      	ittt	gt
 8009d86:	eba8 0803 	subgt.w	r8, r8, r3
 8009d8a:	1aff      	subgt	r7, r7, r3
 8009d8c:	eba9 0903 	subgt.w	r9, r9, r3
 8009d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd17      	ble.n	8009dc6 <_strtod_l+0x75e>
 8009d96:	4631      	mov	r1, r6
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f002 f9e0 	bl	800c160 <__pow5mult>
 8009da0:	4606      	mov	r6, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f43f aea8 	beq.w	8009af8 <_strtod_l+0x490>
 8009da8:	4601      	mov	r1, r0
 8009daa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009dac:	4620      	mov	r0, r4
 8009dae:	f002 f92d 	bl	800c00c <__multiply>
 8009db2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f43f ae9f 	beq.w	8009af8 <_strtod_l+0x490>
 8009dba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f002 f80d 	bl	800bddc <_Bfree>
 8009dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc4:	9318      	str	r3, [sp, #96]	; 0x60
 8009dc6:	f1b8 0f00 	cmp.w	r8, #0
 8009dca:	f300 808c 	bgt.w	8009ee6 <_strtod_l+0x87e>
 8009dce:	9b06      	ldr	r3, [sp, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd08      	ble.n	8009de6 <_strtod_l+0x77e>
 8009dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dd6:	9905      	ldr	r1, [sp, #20]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f002 f9c1 	bl	800c160 <__pow5mult>
 8009dde:	9005      	str	r0, [sp, #20]
 8009de0:	2800      	cmp	r0, #0
 8009de2:	f43f ae89 	beq.w	8009af8 <_strtod_l+0x490>
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	dd08      	ble.n	8009dfc <_strtod_l+0x794>
 8009dea:	9905      	ldr	r1, [sp, #20]
 8009dec:	463a      	mov	r2, r7
 8009dee:	4620      	mov	r0, r4
 8009df0:	f002 fa10 	bl	800c214 <__lshift>
 8009df4:	9005      	str	r0, [sp, #20]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f ae7e 	beq.w	8009af8 <_strtod_l+0x490>
 8009dfc:	f1b9 0f00 	cmp.w	r9, #0
 8009e00:	dd08      	ble.n	8009e14 <_strtod_l+0x7ac>
 8009e02:	4631      	mov	r1, r6
 8009e04:	464a      	mov	r2, r9
 8009e06:	4620      	mov	r0, r4
 8009e08:	f002 fa04 	bl	800c214 <__lshift>
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f ae72 	beq.w	8009af8 <_strtod_l+0x490>
 8009e14:	9a05      	ldr	r2, [sp, #20]
 8009e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f002 fa87 	bl	800c32c <__mdiff>
 8009e1e:	4605      	mov	r5, r0
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f43f ae69 	beq.w	8009af8 <_strtod_l+0x490>
 8009e26:	68c3      	ldr	r3, [r0, #12]
 8009e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60c3      	str	r3, [r0, #12]
 8009e2e:	4631      	mov	r1, r6
 8009e30:	f002 fa60 	bl	800c2f4 <__mcmp>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	da60      	bge.n	8009efa <_strtod_l+0x892>
 8009e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8009e3e:	f040 8082 	bne.w	8009f46 <_strtod_l+0x8de>
 8009e42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d17d      	bne.n	8009f46 <_strtod_l+0x8de>
 8009e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e4e:	0d1b      	lsrs	r3, r3, #20
 8009e50:	051b      	lsls	r3, r3, #20
 8009e52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e56:	d976      	bls.n	8009f46 <_strtod_l+0x8de>
 8009e58:	696b      	ldr	r3, [r5, #20]
 8009e5a:	b913      	cbnz	r3, 8009e62 <_strtod_l+0x7fa>
 8009e5c:	692b      	ldr	r3, [r5, #16]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	dd71      	ble.n	8009f46 <_strtod_l+0x8de>
 8009e62:	4629      	mov	r1, r5
 8009e64:	2201      	movs	r2, #1
 8009e66:	4620      	mov	r0, r4
 8009e68:	f002 f9d4 	bl	800c214 <__lshift>
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4605      	mov	r5, r0
 8009e70:	f002 fa40 	bl	800c2f4 <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	dd66      	ble.n	8009f46 <_strtod_l+0x8de>
 8009e78:	9904      	ldr	r1, [sp, #16]
 8009e7a:	4a53      	ldr	r2, [pc, #332]	; (8009fc8 <_strtod_l+0x960>)
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	f000 8081 	beq.w	8009f86 <_strtod_l+0x91e>
 8009e84:	ea02 010b 	and.w	r1, r2, fp
 8009e88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e8c:	dc7b      	bgt.n	8009f86 <_strtod_l+0x91e>
 8009e8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e92:	f77f aea9 	ble.w	8009be8 <_strtod_l+0x580>
 8009e96:	4b4d      	ldr	r3, [pc, #308]	; (8009fcc <_strtod_l+0x964>)
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f7f6 fbab 	bl	80005f8 <__aeabi_dmul>
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4303      	orrs	r3, r0
 8009ea6:	bf08      	it	eq
 8009ea8:	2322      	moveq	r3, #34	; 0x22
 8009eaa:	4682      	mov	sl, r0
 8009eac:	468b      	mov	fp, r1
 8009eae:	bf08      	it	eq
 8009eb0:	6023      	streq	r3, [r4, #0]
 8009eb2:	e62b      	b.n	8009b0c <_strtod_l+0x4a4>
 8009eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ec0:	e6e3      	b.n	8009c8a <_strtod_l+0x622>
 8009ec2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ec6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009eca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ece:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ed2:	fa01 f308 	lsl.w	r3, r1, r8
 8009ed6:	9308      	str	r3, [sp, #32]
 8009ed8:	910d      	str	r1, [sp, #52]	; 0x34
 8009eda:	e746      	b.n	8009d6a <_strtod_l+0x702>
 8009edc:	2300      	movs	r3, #0
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee4:	e741      	b.n	8009d6a <_strtod_l+0x702>
 8009ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ee8:	4642      	mov	r2, r8
 8009eea:	4620      	mov	r0, r4
 8009eec:	f002 f992 	bl	800c214 <__lshift>
 8009ef0:	9018      	str	r0, [sp, #96]	; 0x60
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f47f af6b 	bne.w	8009dce <_strtod_l+0x766>
 8009ef8:	e5fe      	b.n	8009af8 <_strtod_l+0x490>
 8009efa:	465f      	mov	r7, fp
 8009efc:	d16e      	bne.n	8009fdc <_strtod_l+0x974>
 8009efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f04:	b342      	cbz	r2, 8009f58 <_strtod_l+0x8f0>
 8009f06:	4a32      	ldr	r2, [pc, #200]	; (8009fd0 <_strtod_l+0x968>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d128      	bne.n	8009f5e <_strtod_l+0x8f6>
 8009f0c:	9b04      	ldr	r3, [sp, #16]
 8009f0e:	4651      	mov	r1, sl
 8009f10:	b1eb      	cbz	r3, 8009f4e <_strtod_l+0x8e6>
 8009f12:	4b2d      	ldr	r3, [pc, #180]	; (8009fc8 <_strtod_l+0x960>)
 8009f14:	403b      	ands	r3, r7
 8009f16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1e:	d819      	bhi.n	8009f54 <_strtod_l+0x8ec>
 8009f20:	0d1b      	lsrs	r3, r3, #20
 8009f22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f26:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2a:	4299      	cmp	r1, r3
 8009f2c:	d117      	bne.n	8009f5e <_strtod_l+0x8f6>
 8009f2e:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <_strtod_l+0x96c>)
 8009f30:	429f      	cmp	r7, r3
 8009f32:	d102      	bne.n	8009f3a <_strtod_l+0x8d2>
 8009f34:	3101      	adds	r1, #1
 8009f36:	f43f addf 	beq.w	8009af8 <_strtod_l+0x490>
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <_strtod_l+0x960>)
 8009f3c:	403b      	ands	r3, r7
 8009f3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f42:	f04f 0a00 	mov.w	sl, #0
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1a4      	bne.n	8009e96 <_strtod_l+0x82e>
 8009f4c:	e5de      	b.n	8009b0c <_strtod_l+0x4a4>
 8009f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f52:	e7ea      	b.n	8009f2a <_strtod_l+0x8c2>
 8009f54:	4613      	mov	r3, r2
 8009f56:	e7e8      	b.n	8009f2a <_strtod_l+0x8c2>
 8009f58:	ea53 030a 	orrs.w	r3, r3, sl
 8009f5c:	d08c      	beq.n	8009e78 <_strtod_l+0x810>
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	b1db      	cbz	r3, 8009f9a <_strtod_l+0x932>
 8009f62:	423b      	tst	r3, r7
 8009f64:	d0ef      	beq.n	8009f46 <_strtod_l+0x8de>
 8009f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f68:	9a04      	ldr	r2, [sp, #16]
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	b1c3      	cbz	r3, 8009fa2 <_strtod_l+0x93a>
 8009f70:	f7ff fb5c 	bl	800962c <sulp>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	ec51 0b18 	vmov	r0, r1, d8
 8009f7c:	f7f6 f986 	bl	800028c <__adddf3>
 8009f80:	4682      	mov	sl, r0
 8009f82:	468b      	mov	fp, r1
 8009f84:	e7df      	b.n	8009f46 <_strtod_l+0x8de>
 8009f86:	4013      	ands	r3, r2
 8009f88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f94:	f04f 3aff 	mov.w	sl, #4294967295
 8009f98:	e7d5      	b.n	8009f46 <_strtod_l+0x8de>
 8009f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9c:	ea13 0f0a 	tst.w	r3, sl
 8009fa0:	e7e0      	b.n	8009f64 <_strtod_l+0x8fc>
 8009fa2:	f7ff fb43 	bl	800962c <sulp>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	ec51 0b18 	vmov	r0, r1, d8
 8009fae:	f7f6 f96b 	bl	8000288 <__aeabi_dsub>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	468b      	mov	fp, r1
 8009fba:	f7f6 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d0c1      	beq.n	8009f46 <_strtod_l+0x8de>
 8009fc2:	e611      	b.n	8009be8 <_strtod_l+0x580>
 8009fc4:	fffffc02 	.word	0xfffffc02
 8009fc8:	7ff00000 	.word	0x7ff00000
 8009fcc:	39500000 	.word	0x39500000
 8009fd0:	000fffff 	.word	0x000fffff
 8009fd4:	7fefffff 	.word	0x7fefffff
 8009fd8:	0800da60 	.word	0x0800da60
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f002 fb06 	bl	800c5f0 <__ratio>
 8009fe4:	ec59 8b10 	vmov	r8, r9, d0
 8009fe8:	ee10 0a10 	vmov	r0, s0
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	f7f6 fd7c 	bl	8000af0 <__aeabi_dcmple>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d07a      	beq.n	800a0f2 <_strtod_l+0xa8a>
 8009ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d04a      	beq.n	800a098 <_strtod_l+0xa30>
 800a002:	4b95      	ldr	r3, [pc, #596]	; (800a258 <_strtod_l+0xbf0>)
 800a004:	2200      	movs	r2, #0
 800a006:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a00a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a258 <_strtod_l+0xbf0>
 800a00e:	f04f 0800 	mov.w	r8, #0
 800a012:	4b92      	ldr	r3, [pc, #584]	; (800a25c <_strtod_l+0xbf4>)
 800a014:	403b      	ands	r3, r7
 800a016:	930d      	str	r3, [sp, #52]	; 0x34
 800a018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a01a:	4b91      	ldr	r3, [pc, #580]	; (800a260 <_strtod_l+0xbf8>)
 800a01c:	429a      	cmp	r2, r3
 800a01e:	f040 80b0 	bne.w	800a182 <_strtod_l+0xb1a>
 800a022:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a026:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a02a:	ec4b ab10 	vmov	d0, sl, fp
 800a02e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a032:	f002 fa05 	bl	800c440 <__ulp>
 800a036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a03a:	ec53 2b10 	vmov	r2, r3, d0
 800a03e:	f7f6 fadb 	bl	80005f8 <__aeabi_dmul>
 800a042:	4652      	mov	r2, sl
 800a044:	465b      	mov	r3, fp
 800a046:	f7f6 f921 	bl	800028c <__adddf3>
 800a04a:	460b      	mov	r3, r1
 800a04c:	4983      	ldr	r1, [pc, #524]	; (800a25c <_strtod_l+0xbf4>)
 800a04e:	4a85      	ldr	r2, [pc, #532]	; (800a264 <_strtod_l+0xbfc>)
 800a050:	4019      	ands	r1, r3
 800a052:	4291      	cmp	r1, r2
 800a054:	4682      	mov	sl, r0
 800a056:	d960      	bls.n	800a11a <_strtod_l+0xab2>
 800a058:	ee18 3a90 	vmov	r3, s17
 800a05c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a060:	4293      	cmp	r3, r2
 800a062:	d104      	bne.n	800a06e <_strtod_l+0xa06>
 800a064:	ee18 3a10 	vmov	r3, s16
 800a068:	3301      	adds	r3, #1
 800a06a:	f43f ad45 	beq.w	8009af8 <_strtod_l+0x490>
 800a06e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a270 <_strtod_l+0xc08>
 800a072:	f04f 3aff 	mov.w	sl, #4294967295
 800a076:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a078:	4620      	mov	r0, r4
 800a07a:	f001 feaf 	bl	800bddc <_Bfree>
 800a07e:	9905      	ldr	r1, [sp, #20]
 800a080:	4620      	mov	r0, r4
 800a082:	f001 feab 	bl	800bddc <_Bfree>
 800a086:	4631      	mov	r1, r6
 800a088:	4620      	mov	r0, r4
 800a08a:	f001 fea7 	bl	800bddc <_Bfree>
 800a08e:	4629      	mov	r1, r5
 800a090:	4620      	mov	r0, r4
 800a092:	f001 fea3 	bl	800bddc <_Bfree>
 800a096:	e61a      	b.n	8009cce <_strtod_l+0x666>
 800a098:	f1ba 0f00 	cmp.w	sl, #0
 800a09c:	d11b      	bne.n	800a0d6 <_strtod_l+0xa6e>
 800a09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0a2:	b9f3      	cbnz	r3, 800a0e2 <_strtod_l+0xa7a>
 800a0a4:	4b6c      	ldr	r3, [pc, #432]	; (800a258 <_strtod_l+0xbf0>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	f7f6 fd16 	bl	8000adc <__aeabi_dcmplt>
 800a0b0:	b9d0      	cbnz	r0, 800a0e8 <_strtod_l+0xa80>
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4b6c      	ldr	r3, [pc, #432]	; (800a268 <_strtod_l+0xc00>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	4680      	mov	r8, r0
 800a0c0:	4689      	mov	r9, r1
 800a0c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a0ca:	9315      	str	r3, [sp, #84]	; 0x54
 800a0cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0d4:	e79d      	b.n	800a012 <_strtod_l+0x9aa>
 800a0d6:	f1ba 0f01 	cmp.w	sl, #1
 800a0da:	d102      	bne.n	800a0e2 <_strtod_l+0xa7a>
 800a0dc:	2f00      	cmp	r7, #0
 800a0de:	f43f ad83 	beq.w	8009be8 <_strtod_l+0x580>
 800a0e2:	4b62      	ldr	r3, [pc, #392]	; (800a26c <_strtod_l+0xc04>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	e78e      	b.n	800a006 <_strtod_l+0x99e>
 800a0e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a268 <_strtod_l+0xc00>
 800a0ec:	f04f 0800 	mov.w	r8, #0
 800a0f0:	e7e7      	b.n	800a0c2 <_strtod_l+0xa5a>
 800a0f2:	4b5d      	ldr	r3, [pc, #372]	; (800a268 <_strtod_l+0xc00>)
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f7f6 fa7d 	bl	80005f8 <__aeabi_dmul>
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a100:	4680      	mov	r8, r0
 800a102:	4689      	mov	r9, r1
 800a104:	b933      	cbnz	r3, 800a114 <_strtod_l+0xaac>
 800a106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a10a:	900e      	str	r0, [sp, #56]	; 0x38
 800a10c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a10e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a112:	e7dd      	b.n	800a0d0 <_strtod_l+0xa68>
 800a114:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a118:	e7f9      	b.n	800a10e <_strtod_l+0xaa6>
 800a11a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a11e:	9b04      	ldr	r3, [sp, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1a8      	bne.n	800a076 <_strtod_l+0xa0e>
 800a124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a12a:	0d1b      	lsrs	r3, r3, #20
 800a12c:	051b      	lsls	r3, r3, #20
 800a12e:	429a      	cmp	r2, r3
 800a130:	d1a1      	bne.n	800a076 <_strtod_l+0xa0e>
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	f7f6 fdbf 	bl	8000cb8 <__aeabi_d2lz>
 800a13a:	f7f6 fa2f 	bl	800059c <__aeabi_l2d>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	4640      	mov	r0, r8
 800a144:	4649      	mov	r1, r9
 800a146:	f7f6 f89f 	bl	8000288 <__aeabi_dsub>
 800a14a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a150:	ea43 030a 	orr.w	r3, r3, sl
 800a154:	4313      	orrs	r3, r2
 800a156:	4680      	mov	r8, r0
 800a158:	4689      	mov	r9, r1
 800a15a:	d055      	beq.n	800a208 <_strtod_l+0xba0>
 800a15c:	a336      	add	r3, pc, #216	; (adr r3, 800a238 <_strtod_l+0xbd0>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	f47f acd0 	bne.w	8009b0c <_strtod_l+0x4a4>
 800a16c:	a334      	add	r3, pc, #208	; (adr r3, 800a240 <_strtod_l+0xbd8>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f7f6 fccf 	bl	8000b18 <__aeabi_dcmpgt>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	f43f af7b 	beq.w	800a076 <_strtod_l+0xa0e>
 800a180:	e4c4      	b.n	8009b0c <_strtod_l+0x4a4>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	b333      	cbz	r3, 800a1d4 <_strtod_l+0xb6c>
 800a186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a188:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a18c:	d822      	bhi.n	800a1d4 <_strtod_l+0xb6c>
 800a18e:	a32e      	add	r3, pc, #184	; (adr r3, 800a248 <_strtod_l+0xbe0>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	4640      	mov	r0, r8
 800a196:	4649      	mov	r1, r9
 800a198:	f7f6 fcaa 	bl	8000af0 <__aeabi_dcmple>
 800a19c:	b1a0      	cbz	r0, 800a1c8 <_strtod_l+0xb60>
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	f7f6 fd01 	bl	8000ba8 <__aeabi_d2uiz>
 800a1a6:	2801      	cmp	r0, #1
 800a1a8:	bf38      	it	cc
 800a1aa:	2001      	movcc	r0, #1
 800a1ac:	f7f6 f9aa 	bl	8000504 <__aeabi_ui2d>
 800a1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4689      	mov	r9, r1
 800a1b6:	bb23      	cbnz	r3, 800a202 <_strtod_l+0xb9a>
 800a1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1bc:	9010      	str	r0, [sp, #64]	; 0x40
 800a1be:	9311      	str	r3, [sp, #68]	; 0x44
 800a1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1d8:	eeb0 0a48 	vmov.f32	s0, s16
 800a1dc:	eef0 0a68 	vmov.f32	s1, s17
 800a1e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1e4:	f002 f92c 	bl	800c440 <__ulp>
 800a1e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1ec:	ec53 2b10 	vmov	r2, r3, d0
 800a1f0:	f7f6 fa02 	bl	80005f8 <__aeabi_dmul>
 800a1f4:	ec53 2b18 	vmov	r2, r3, d8
 800a1f8:	f7f6 f848 	bl	800028c <__adddf3>
 800a1fc:	4682      	mov	sl, r0
 800a1fe:	468b      	mov	fp, r1
 800a200:	e78d      	b.n	800a11e <_strtod_l+0xab6>
 800a202:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a206:	e7db      	b.n	800a1c0 <_strtod_l+0xb58>
 800a208:	a311      	add	r3, pc, #68	; (adr r3, 800a250 <_strtod_l+0xbe8>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 fc65 	bl	8000adc <__aeabi_dcmplt>
 800a212:	e7b2      	b.n	800a17a <_strtod_l+0xb12>
 800a214:	2300      	movs	r3, #0
 800a216:	930a      	str	r3, [sp, #40]	; 0x28
 800a218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a21a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	f7ff ba6b 	b.w	80096f8 <_strtod_l+0x90>
 800a222:	2a65      	cmp	r2, #101	; 0x65
 800a224:	f43f ab5f 	beq.w	80098e6 <_strtod_l+0x27e>
 800a228:	2a45      	cmp	r2, #69	; 0x45
 800a22a:	f43f ab5c 	beq.w	80098e6 <_strtod_l+0x27e>
 800a22e:	2301      	movs	r3, #1
 800a230:	f7ff bb94 	b.w	800995c <_strtod_l+0x2f4>
 800a234:	f3af 8000 	nop.w
 800a238:	94a03595 	.word	0x94a03595
 800a23c:	3fdfffff 	.word	0x3fdfffff
 800a240:	35afe535 	.word	0x35afe535
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	ffc00000 	.word	0xffc00000
 800a24c:	41dfffff 	.word	0x41dfffff
 800a250:	94a03595 	.word	0x94a03595
 800a254:	3fcfffff 	.word	0x3fcfffff
 800a258:	3ff00000 	.word	0x3ff00000
 800a25c:	7ff00000 	.word	0x7ff00000
 800a260:	7fe00000 	.word	0x7fe00000
 800a264:	7c9fffff 	.word	0x7c9fffff
 800a268:	3fe00000 	.word	0x3fe00000
 800a26c:	bff00000 	.word	0xbff00000
 800a270:	7fefffff 	.word	0x7fefffff

0800a274 <_strtod_r>:
 800a274:	4b01      	ldr	r3, [pc, #4]	; (800a27c <_strtod_r+0x8>)
 800a276:	f7ff b9f7 	b.w	8009668 <_strtod_l>
 800a27a:	bf00      	nop
 800a27c:	200000b4 	.word	0x200000b4

0800a280 <_strtol_l.constprop.0>:
 800a280:	2b01      	cmp	r3, #1
 800a282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a286:	d001      	beq.n	800a28c <_strtol_l.constprop.0+0xc>
 800a288:	2b24      	cmp	r3, #36	; 0x24
 800a28a:	d906      	bls.n	800a29a <_strtol_l.constprop.0+0x1a>
 800a28c:	f7fe f968 	bl	8008560 <__errno>
 800a290:	2316      	movs	r3, #22
 800a292:	6003      	str	r3, [r0, #0]
 800a294:	2000      	movs	r0, #0
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a380 <_strtol_l.constprop.0+0x100>
 800a29e:	460d      	mov	r5, r1
 800a2a0:	462e      	mov	r6, r5
 800a2a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a2aa:	f017 0708 	ands.w	r7, r7, #8
 800a2ae:	d1f7      	bne.n	800a2a0 <_strtol_l.constprop.0+0x20>
 800a2b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a2b2:	d132      	bne.n	800a31a <_strtol_l.constprop.0+0x9a>
 800a2b4:	782c      	ldrb	r4, [r5, #0]
 800a2b6:	2701      	movs	r7, #1
 800a2b8:	1cb5      	adds	r5, r6, #2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d05b      	beq.n	800a376 <_strtol_l.constprop.0+0xf6>
 800a2be:	2b10      	cmp	r3, #16
 800a2c0:	d109      	bne.n	800a2d6 <_strtol_l.constprop.0+0x56>
 800a2c2:	2c30      	cmp	r4, #48	; 0x30
 800a2c4:	d107      	bne.n	800a2d6 <_strtol_l.constprop.0+0x56>
 800a2c6:	782c      	ldrb	r4, [r5, #0]
 800a2c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2cc:	2c58      	cmp	r4, #88	; 0x58
 800a2ce:	d14d      	bne.n	800a36c <_strtol_l.constprop.0+0xec>
 800a2d0:	786c      	ldrb	r4, [r5, #1]
 800a2d2:	2310      	movs	r3, #16
 800a2d4:	3502      	adds	r5, #2
 800a2d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2de:	f04f 0c00 	mov.w	ip, #0
 800a2e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2e6:	4666      	mov	r6, ip
 800a2e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a2ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a2f0:	f1be 0f09 	cmp.w	lr, #9
 800a2f4:	d816      	bhi.n	800a324 <_strtol_l.constprop.0+0xa4>
 800a2f6:	4674      	mov	r4, lr
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	dd24      	ble.n	800a346 <_strtol_l.constprop.0+0xc6>
 800a2fc:	f1bc 0f00 	cmp.w	ip, #0
 800a300:	db1e      	blt.n	800a340 <_strtol_l.constprop.0+0xc0>
 800a302:	45b1      	cmp	r9, r6
 800a304:	d31c      	bcc.n	800a340 <_strtol_l.constprop.0+0xc0>
 800a306:	d101      	bne.n	800a30c <_strtol_l.constprop.0+0x8c>
 800a308:	45a2      	cmp	sl, r4
 800a30a:	db19      	blt.n	800a340 <_strtol_l.constprop.0+0xc0>
 800a30c:	fb06 4603 	mla	r6, r6, r3, r4
 800a310:	f04f 0c01 	mov.w	ip, #1
 800a314:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a318:	e7e8      	b.n	800a2ec <_strtol_l.constprop.0+0x6c>
 800a31a:	2c2b      	cmp	r4, #43	; 0x2b
 800a31c:	bf04      	itt	eq
 800a31e:	782c      	ldrbeq	r4, [r5, #0]
 800a320:	1cb5      	addeq	r5, r6, #2
 800a322:	e7ca      	b.n	800a2ba <_strtol_l.constprop.0+0x3a>
 800a324:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a328:	f1be 0f19 	cmp.w	lr, #25
 800a32c:	d801      	bhi.n	800a332 <_strtol_l.constprop.0+0xb2>
 800a32e:	3c37      	subs	r4, #55	; 0x37
 800a330:	e7e2      	b.n	800a2f8 <_strtol_l.constprop.0+0x78>
 800a332:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a336:	f1be 0f19 	cmp.w	lr, #25
 800a33a:	d804      	bhi.n	800a346 <_strtol_l.constprop.0+0xc6>
 800a33c:	3c57      	subs	r4, #87	; 0x57
 800a33e:	e7db      	b.n	800a2f8 <_strtol_l.constprop.0+0x78>
 800a340:	f04f 3cff 	mov.w	ip, #4294967295
 800a344:	e7e6      	b.n	800a314 <_strtol_l.constprop.0+0x94>
 800a346:	f1bc 0f00 	cmp.w	ip, #0
 800a34a:	da05      	bge.n	800a358 <_strtol_l.constprop.0+0xd8>
 800a34c:	2322      	movs	r3, #34	; 0x22
 800a34e:	6003      	str	r3, [r0, #0]
 800a350:	4646      	mov	r6, r8
 800a352:	b942      	cbnz	r2, 800a366 <_strtol_l.constprop.0+0xe6>
 800a354:	4630      	mov	r0, r6
 800a356:	e79e      	b.n	800a296 <_strtol_l.constprop.0+0x16>
 800a358:	b107      	cbz	r7, 800a35c <_strtol_l.constprop.0+0xdc>
 800a35a:	4276      	negs	r6, r6
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	d0f9      	beq.n	800a354 <_strtol_l.constprop.0+0xd4>
 800a360:	f1bc 0f00 	cmp.w	ip, #0
 800a364:	d000      	beq.n	800a368 <_strtol_l.constprop.0+0xe8>
 800a366:	1e69      	subs	r1, r5, #1
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	e7f3      	b.n	800a354 <_strtol_l.constprop.0+0xd4>
 800a36c:	2430      	movs	r4, #48	; 0x30
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1b1      	bne.n	800a2d6 <_strtol_l.constprop.0+0x56>
 800a372:	2308      	movs	r3, #8
 800a374:	e7af      	b.n	800a2d6 <_strtol_l.constprop.0+0x56>
 800a376:	2c30      	cmp	r4, #48	; 0x30
 800a378:	d0a5      	beq.n	800a2c6 <_strtol_l.constprop.0+0x46>
 800a37a:	230a      	movs	r3, #10
 800a37c:	e7ab      	b.n	800a2d6 <_strtol_l.constprop.0+0x56>
 800a37e:	bf00      	nop
 800a380:	0800da89 	.word	0x0800da89

0800a384 <_strtol_r>:
 800a384:	f7ff bf7c 	b.w	800a280 <_strtol_l.constprop.0>

0800a388 <__swbuf_r>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	460e      	mov	r6, r1
 800a38c:	4614      	mov	r4, r2
 800a38e:	4605      	mov	r5, r0
 800a390:	b118      	cbz	r0, 800a39a <__swbuf_r+0x12>
 800a392:	6983      	ldr	r3, [r0, #24]
 800a394:	b90b      	cbnz	r3, 800a39a <__swbuf_r+0x12>
 800a396:	f001 f84b 	bl	800b430 <__sinit>
 800a39a:	4b21      	ldr	r3, [pc, #132]	; (800a420 <__swbuf_r+0x98>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d12b      	bne.n	800a3f8 <__swbuf_r+0x70>
 800a3a0:	686c      	ldr	r4, [r5, #4]
 800a3a2:	69a3      	ldr	r3, [r4, #24]
 800a3a4:	60a3      	str	r3, [r4, #8]
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	071a      	lsls	r2, r3, #28
 800a3aa:	d52f      	bpl.n	800a40c <__swbuf_r+0x84>
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	b36b      	cbz	r3, 800a40c <__swbuf_r+0x84>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	6820      	ldr	r0, [r4, #0]
 800a3b4:	1ac0      	subs	r0, r0, r3
 800a3b6:	6963      	ldr	r3, [r4, #20]
 800a3b8:	b2f6      	uxtb	r6, r6
 800a3ba:	4283      	cmp	r3, r0
 800a3bc:	4637      	mov	r7, r6
 800a3be:	dc04      	bgt.n	800a3ca <__swbuf_r+0x42>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 ffa0 	bl	800b308 <_fflush_r>
 800a3c8:	bb30      	cbnz	r0, 800a418 <__swbuf_r+0x90>
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	60a3      	str	r3, [r4, #8]
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	701e      	strb	r6, [r3, #0]
 800a3d8:	6963      	ldr	r3, [r4, #20]
 800a3da:	3001      	adds	r0, #1
 800a3dc:	4283      	cmp	r3, r0
 800a3de:	d004      	beq.n	800a3ea <__swbuf_r+0x62>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	07db      	lsls	r3, r3, #31
 800a3e4:	d506      	bpl.n	800a3f4 <__swbuf_r+0x6c>
 800a3e6:	2e0a      	cmp	r6, #10
 800a3e8:	d104      	bne.n	800a3f4 <__swbuf_r+0x6c>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 ff8b 	bl	800b308 <_fflush_r>
 800a3f2:	b988      	cbnz	r0, 800a418 <__swbuf_r+0x90>
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <__swbuf_r+0x9c>)
 800a3fa:	429c      	cmp	r4, r3
 800a3fc:	d101      	bne.n	800a402 <__swbuf_r+0x7a>
 800a3fe:	68ac      	ldr	r4, [r5, #8]
 800a400:	e7cf      	b.n	800a3a2 <__swbuf_r+0x1a>
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <__swbuf_r+0xa0>)
 800a404:	429c      	cmp	r4, r3
 800a406:	bf08      	it	eq
 800a408:	68ec      	ldreq	r4, [r5, #12]
 800a40a:	e7ca      	b.n	800a3a2 <__swbuf_r+0x1a>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f80c 	bl	800a42c <__swsetup_r>
 800a414:	2800      	cmp	r0, #0
 800a416:	d0cb      	beq.n	800a3b0 <__swbuf_r+0x28>
 800a418:	f04f 37ff 	mov.w	r7, #4294967295
 800a41c:	e7ea      	b.n	800a3f4 <__swbuf_r+0x6c>
 800a41e:	bf00      	nop
 800a420:	0800dc3c 	.word	0x0800dc3c
 800a424:	0800dc5c 	.word	0x0800dc5c
 800a428:	0800dc1c 	.word	0x0800dc1c

0800a42c <__swsetup_r>:
 800a42c:	4b32      	ldr	r3, [pc, #200]	; (800a4f8 <__swsetup_r+0xcc>)
 800a42e:	b570      	push	{r4, r5, r6, lr}
 800a430:	681d      	ldr	r5, [r3, #0]
 800a432:	4606      	mov	r6, r0
 800a434:	460c      	mov	r4, r1
 800a436:	b125      	cbz	r5, 800a442 <__swsetup_r+0x16>
 800a438:	69ab      	ldr	r3, [r5, #24]
 800a43a:	b913      	cbnz	r3, 800a442 <__swsetup_r+0x16>
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 fff7 	bl	800b430 <__sinit>
 800a442:	4b2e      	ldr	r3, [pc, #184]	; (800a4fc <__swsetup_r+0xd0>)
 800a444:	429c      	cmp	r4, r3
 800a446:	d10f      	bne.n	800a468 <__swsetup_r+0x3c>
 800a448:	686c      	ldr	r4, [r5, #4]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a450:	0719      	lsls	r1, r3, #28
 800a452:	d42c      	bmi.n	800a4ae <__swsetup_r+0x82>
 800a454:	06dd      	lsls	r5, r3, #27
 800a456:	d411      	bmi.n	800a47c <__swsetup_r+0x50>
 800a458:	2309      	movs	r3, #9
 800a45a:	6033      	str	r3, [r6, #0]
 800a45c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	f04f 30ff 	mov.w	r0, #4294967295
 800a466:	e03e      	b.n	800a4e6 <__swsetup_r+0xba>
 800a468:	4b25      	ldr	r3, [pc, #148]	; (800a500 <__swsetup_r+0xd4>)
 800a46a:	429c      	cmp	r4, r3
 800a46c:	d101      	bne.n	800a472 <__swsetup_r+0x46>
 800a46e:	68ac      	ldr	r4, [r5, #8]
 800a470:	e7eb      	b.n	800a44a <__swsetup_r+0x1e>
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <__swsetup_r+0xd8>)
 800a474:	429c      	cmp	r4, r3
 800a476:	bf08      	it	eq
 800a478:	68ec      	ldreq	r4, [r5, #12]
 800a47a:	e7e6      	b.n	800a44a <__swsetup_r+0x1e>
 800a47c:	0758      	lsls	r0, r3, #29
 800a47e:	d512      	bpl.n	800a4a6 <__swsetup_r+0x7a>
 800a480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a482:	b141      	cbz	r1, 800a496 <__swsetup_r+0x6a>
 800a484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a488:	4299      	cmp	r1, r3
 800a48a:	d002      	beq.n	800a492 <__swsetup_r+0x66>
 800a48c:	4630      	mov	r0, r6
 800a48e:	f7fe f8af 	bl	80085f0 <_free_r>
 800a492:	2300      	movs	r3, #0
 800a494:	6363      	str	r3, [r4, #52]	; 0x34
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6063      	str	r3, [r4, #4]
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	f043 0308 	orr.w	r3, r3, #8
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	b94b      	cbnz	r3, 800a4c6 <__swsetup_r+0x9a>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4bc:	d003      	beq.n	800a4c6 <__swsetup_r+0x9a>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f001 fbed 	bl	800bca0 <__smakebuf_r>
 800a4c6:	89a0      	ldrh	r0, [r4, #12]
 800a4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4cc:	f010 0301 	ands.w	r3, r0, #1
 800a4d0:	d00a      	beq.n	800a4e8 <__swsetup_r+0xbc>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60a3      	str	r3, [r4, #8]
 800a4d6:	6963      	ldr	r3, [r4, #20]
 800a4d8:	425b      	negs	r3, r3
 800a4da:	61a3      	str	r3, [r4, #24]
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	b943      	cbnz	r3, 800a4f2 <__swsetup_r+0xc6>
 800a4e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4e4:	d1ba      	bne.n	800a45c <__swsetup_r+0x30>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	0781      	lsls	r1, r0, #30
 800a4ea:	bf58      	it	pl
 800a4ec:	6963      	ldrpl	r3, [r4, #20]
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	e7f4      	b.n	800a4dc <__swsetup_r+0xb0>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e7f7      	b.n	800a4e6 <__swsetup_r+0xba>
 800a4f6:	bf00      	nop
 800a4f8:	2000004c 	.word	0x2000004c
 800a4fc:	0800dc3c 	.word	0x0800dc3c
 800a500:	0800dc5c 	.word	0x0800dc5c
 800a504:	0800dc1c 	.word	0x0800dc1c

0800a508 <quorem>:
 800a508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	6903      	ldr	r3, [r0, #16]
 800a50e:	690c      	ldr	r4, [r1, #16]
 800a510:	42a3      	cmp	r3, r4
 800a512:	4607      	mov	r7, r0
 800a514:	f2c0 8081 	blt.w	800a61a <quorem+0x112>
 800a518:	3c01      	subs	r4, #1
 800a51a:	f101 0814 	add.w	r8, r1, #20
 800a51e:	f100 0514 	add.w	r5, r0, #20
 800a522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a52c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a530:	3301      	adds	r3, #1
 800a532:	429a      	cmp	r2, r3
 800a534:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a538:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a53c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a540:	d331      	bcc.n	800a5a6 <quorem+0x9e>
 800a542:	f04f 0e00 	mov.w	lr, #0
 800a546:	4640      	mov	r0, r8
 800a548:	46ac      	mov	ip, r5
 800a54a:	46f2      	mov	sl, lr
 800a54c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a550:	b293      	uxth	r3, r2
 800a552:	fb06 e303 	mla	r3, r6, r3, lr
 800a556:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ebaa 0303 	sub.w	r3, sl, r3
 800a560:	f8dc a000 	ldr.w	sl, [ip]
 800a564:	0c12      	lsrs	r2, r2, #16
 800a566:	fa13 f38a 	uxtah	r3, r3, sl
 800a56a:	fb06 e202 	mla	r2, r6, r2, lr
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a576:	b292      	uxth	r2, r2
 800a578:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a57c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a580:	f8bd 3000 	ldrh.w	r3, [sp]
 800a584:	4581      	cmp	r9, r0
 800a586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a58a:	f84c 3b04 	str.w	r3, [ip], #4
 800a58e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a592:	d2db      	bcs.n	800a54c <quorem+0x44>
 800a594:	f855 300b 	ldr.w	r3, [r5, fp]
 800a598:	b92b      	cbnz	r3, 800a5a6 <quorem+0x9e>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	3b04      	subs	r3, #4
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	d32e      	bcc.n	800a602 <quorem+0xfa>
 800a5a4:	613c      	str	r4, [r7, #16]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f001 fea4 	bl	800c2f4 <__mcmp>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db24      	blt.n	800a5fa <quorem+0xf2>
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f04f 0c00 	mov.w	ip, #0
 800a5b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a5c0:	b293      	uxth	r3, r2
 800a5c2:	ebac 0303 	sub.w	r3, ip, r3
 800a5c6:	0c12      	lsrs	r2, r2, #16
 800a5c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a5cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5da:	45c1      	cmp	r9, r8
 800a5dc:	f840 3b04 	str.w	r3, [r0], #4
 800a5e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5e4:	d2e8      	bcs.n	800a5b8 <quorem+0xb0>
 800a5e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ee:	b922      	cbnz	r2, 800a5fa <quorem+0xf2>
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	d30a      	bcc.n	800a60e <quorem+0x106>
 800a5f8:	613c      	str	r4, [r7, #16]
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	b003      	add	sp, #12
 800a5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	3b04      	subs	r3, #4
 800a606:	2a00      	cmp	r2, #0
 800a608:	d1cc      	bne.n	800a5a4 <quorem+0x9c>
 800a60a:	3c01      	subs	r4, #1
 800a60c:	e7c7      	b.n	800a59e <quorem+0x96>
 800a60e:	6812      	ldr	r2, [r2, #0]
 800a610:	3b04      	subs	r3, #4
 800a612:	2a00      	cmp	r2, #0
 800a614:	d1f0      	bne.n	800a5f8 <quorem+0xf0>
 800a616:	3c01      	subs	r4, #1
 800a618:	e7eb      	b.n	800a5f2 <quorem+0xea>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e7ee      	b.n	800a5fc <quorem+0xf4>
	...

0800a620 <_dtoa_r>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	ed2d 8b04 	vpush	{d8-d9}
 800a628:	ec57 6b10 	vmov	r6, r7, d0
 800a62c:	b093      	sub	sp, #76	; 0x4c
 800a62e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a634:	9106      	str	r1, [sp, #24]
 800a636:	ee10 aa10 	vmov	sl, s0
 800a63a:	4604      	mov	r4, r0
 800a63c:	9209      	str	r2, [sp, #36]	; 0x24
 800a63e:	930c      	str	r3, [sp, #48]	; 0x30
 800a640:	46bb      	mov	fp, r7
 800a642:	b975      	cbnz	r5, 800a662 <_dtoa_r+0x42>
 800a644:	2010      	movs	r0, #16
 800a646:	f7fd ffb5 	bl	80085b4 <malloc>
 800a64a:	4602      	mov	r2, r0
 800a64c:	6260      	str	r0, [r4, #36]	; 0x24
 800a64e:	b920      	cbnz	r0, 800a65a <_dtoa_r+0x3a>
 800a650:	4ba7      	ldr	r3, [pc, #668]	; (800a8f0 <_dtoa_r+0x2d0>)
 800a652:	21ea      	movs	r1, #234	; 0xea
 800a654:	48a7      	ldr	r0, [pc, #668]	; (800a8f4 <_dtoa_r+0x2d4>)
 800a656:	f002 fb8d 	bl	800cd74 <__assert_func>
 800a65a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a65e:	6005      	str	r5, [r0, #0]
 800a660:	60c5      	str	r5, [r0, #12]
 800a662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	b151      	cbz	r1, 800a67e <_dtoa_r+0x5e>
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	604a      	str	r2, [r1, #4]
 800a66c:	2301      	movs	r3, #1
 800a66e:	4093      	lsls	r3, r2
 800a670:	608b      	str	r3, [r1, #8]
 800a672:	4620      	mov	r0, r4
 800a674:	f001 fbb2 	bl	800bddc <_Bfree>
 800a678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	1e3b      	subs	r3, r7, #0
 800a680:	bfaa      	itet	ge
 800a682:	2300      	movge	r3, #0
 800a684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a688:	f8c8 3000 	strge.w	r3, [r8]
 800a68c:	4b9a      	ldr	r3, [pc, #616]	; (800a8f8 <_dtoa_r+0x2d8>)
 800a68e:	bfbc      	itt	lt
 800a690:	2201      	movlt	r2, #1
 800a692:	f8c8 2000 	strlt.w	r2, [r8]
 800a696:	ea33 030b 	bics.w	r3, r3, fp
 800a69a:	d11b      	bne.n	800a6d4 <_dtoa_r+0xb4>
 800a69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a69e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a8:	4333      	orrs	r3, r6
 800a6aa:	f000 8592 	beq.w	800b1d2 <_dtoa_r+0xbb2>
 800a6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6b0:	b963      	cbnz	r3, 800a6cc <_dtoa_r+0xac>
 800a6b2:	4b92      	ldr	r3, [pc, #584]	; (800a8fc <_dtoa_r+0x2dc>)
 800a6b4:	e022      	b.n	800a6fc <_dtoa_r+0xdc>
 800a6b6:	4b92      	ldr	r3, [pc, #584]	; (800a900 <_dtoa_r+0x2e0>)
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	b013      	add	sp, #76	; 0x4c
 800a6c4:	ecbd 8b04 	vpop	{d8-d9}
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4b8b      	ldr	r3, [pc, #556]	; (800a8fc <_dtoa_r+0x2dc>)
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	e7f3      	b.n	800a6bc <_dtoa_r+0x9c>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f6 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e0:	ec4b ab19 	vmov	d9, sl, fp
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	b158      	cbz	r0, 800a700 <_dtoa_r+0xe0>
 800a6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 856b 	beq.w	800b1cc <_dtoa_r+0xbac>
 800a6f6:	4883      	ldr	r0, [pc, #524]	; (800a904 <_dtoa_r+0x2e4>)
 800a6f8:	6018      	str	r0, [r3, #0]
 800a6fa:	1e43      	subs	r3, r0, #1
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	e7df      	b.n	800a6c0 <_dtoa_r+0xa0>
 800a700:	ec4b ab10 	vmov	d0, sl, fp
 800a704:	aa10      	add	r2, sp, #64	; 0x40
 800a706:	a911      	add	r1, sp, #68	; 0x44
 800a708:	4620      	mov	r0, r4
 800a70a:	f001 ff15 	bl	800c538 <__d2b>
 800a70e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a712:	ee08 0a10 	vmov	s16, r0
 800a716:	2d00      	cmp	r5, #0
 800a718:	f000 8084 	beq.w	800a824 <_dtoa_r+0x204>
 800a71c:	ee19 3a90 	vmov	r3, s19
 800a720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a728:	4656      	mov	r6, sl
 800a72a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a72e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a736:	4b74      	ldr	r3, [pc, #464]	; (800a908 <_dtoa_r+0x2e8>)
 800a738:	2200      	movs	r2, #0
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	a365      	add	r3, pc, #404	; (adr r3, 800a8d8 <_dtoa_r+0x2b8>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	a364      	add	r3, pc, #400	; (adr r3, 800a8e0 <_dtoa_r+0x2c0>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fd9b 	bl	800028c <__adddf3>
 800a756:	4606      	mov	r6, r0
 800a758:	4628      	mov	r0, r5
 800a75a:	460f      	mov	r7, r1
 800a75c:	f7f5 fee2 	bl	8000524 <__aeabi_i2d>
 800a760:	a361      	add	r3, pc, #388	; (adr r3, 800a8e8 <_dtoa_r+0x2c8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 ff47 	bl	80005f8 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 fd8b 	bl	800028c <__adddf3>
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	f7f6 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800a77e:	2200      	movs	r2, #0
 800a780:	9000      	str	r0, [sp, #0]
 800a782:	2300      	movs	r3, #0
 800a784:	4630      	mov	r0, r6
 800a786:	4639      	mov	r1, r7
 800a788:	f7f6 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800a78c:	b150      	cbz	r0, 800a7a4 <_dtoa_r+0x184>
 800a78e:	9800      	ldr	r0, [sp, #0]
 800a790:	f7f5 fec8 	bl	8000524 <__aeabi_i2d>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	f7f6 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79c:	b910      	cbnz	r0, 800a7a4 <_dtoa_r+0x184>
 800a79e:	9b00      	ldr	r3, [sp, #0]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	2b16      	cmp	r3, #22
 800a7a8:	d85a      	bhi.n	800a860 <_dtoa_r+0x240>
 800a7aa:	9a00      	ldr	r2, [sp, #0]
 800a7ac:	4b57      	ldr	r3, [pc, #348]	; (800a90c <_dtoa_r+0x2ec>)
 800a7ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	ec51 0b19 	vmov	r0, r1, d9
 800a7ba:	f7f6 f98f 	bl	8000adc <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d050      	beq.n	800a864 <_dtoa_r+0x244>
 800a7c2:	9b00      	ldr	r3, [sp, #0]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ce:	1b5d      	subs	r5, r3, r5
 800a7d0:	1e6b      	subs	r3, r5, #1
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	bf45      	ittet	mi
 800a7d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7da:	9304      	strmi	r3, [sp, #16]
 800a7dc:	2300      	movpl	r3, #0
 800a7de:	2300      	movmi	r3, #0
 800a7e0:	bf4c      	ite	mi
 800a7e2:	9305      	strmi	r3, [sp, #20]
 800a7e4:	9304      	strpl	r3, [sp, #16]
 800a7e6:	9b00      	ldr	r3, [sp, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	db3d      	blt.n	800a868 <_dtoa_r+0x248>
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	9a00      	ldr	r2, [sp, #0]
 800a7f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f2:	4413      	add	r3, r2
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	f200 8089 	bhi.w	800a914 <_dtoa_r+0x2f4>
 800a802:	2b05      	cmp	r3, #5
 800a804:	bfc4      	itt	gt
 800a806:	3b04      	subgt	r3, #4
 800a808:	9306      	strgt	r3, [sp, #24]
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	f1a3 0302 	sub.w	r3, r3, #2
 800a810:	bfcc      	ite	gt
 800a812:	2500      	movgt	r5, #0
 800a814:	2501      	movle	r5, #1
 800a816:	2b03      	cmp	r3, #3
 800a818:	f200 8087 	bhi.w	800a92a <_dtoa_r+0x30a>
 800a81c:	e8df f003 	tbb	[pc, r3]
 800a820:	59383a2d 	.word	0x59383a2d
 800a824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a828:	441d      	add	r5, r3
 800a82a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a82e:	2b20      	cmp	r3, #32
 800a830:	bfc1      	itttt	gt
 800a832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a83a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a83e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a842:	bfda      	itte	le
 800a844:	f1c3 0320 	rsble	r3, r3, #32
 800a848:	fa06 f003 	lslle.w	r0, r6, r3
 800a84c:	4318      	orrgt	r0, r3
 800a84e:	f7f5 fe59 	bl	8000504 <__aeabi_ui2d>
 800a852:	2301      	movs	r3, #1
 800a854:	4606      	mov	r6, r0
 800a856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a85a:	3d01      	subs	r5, #1
 800a85c:	930e      	str	r3, [sp, #56]	; 0x38
 800a85e:	e76a      	b.n	800a736 <_dtoa_r+0x116>
 800a860:	2301      	movs	r3, #1
 800a862:	e7b2      	b.n	800a7ca <_dtoa_r+0x1aa>
 800a864:	900b      	str	r0, [sp, #44]	; 0x2c
 800a866:	e7b1      	b.n	800a7cc <_dtoa_r+0x1ac>
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	9a00      	ldr	r2, [sp, #0]
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	4253      	negs	r3, r2
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	2300      	movs	r3, #0
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	e7bf      	b.n	800a7fa <_dtoa_r+0x1da>
 800a87a:	2300      	movs	r3, #0
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc55      	bgt.n	800a930 <_dtoa_r+0x310>
 800a884:	2301      	movs	r3, #1
 800a886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a88a:	461a      	mov	r2, r3
 800a88c:	9209      	str	r2, [sp, #36]	; 0x24
 800a88e:	e00c      	b.n	800a8aa <_dtoa_r+0x28a>
 800a890:	2301      	movs	r3, #1
 800a892:	e7f3      	b.n	800a87c <_dtoa_r+0x25c>
 800a894:	2300      	movs	r3, #0
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	4413      	add	r3, r2
 800a89e:	9302      	str	r3, [sp, #8]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	9303      	str	r3, [sp, #12]
 800a8a6:	bfb8      	it	lt
 800a8a8:	2301      	movlt	r3, #1
 800a8aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6042      	str	r2, [r0, #4]
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	f102 0614 	add.w	r6, r2, #20
 800a8b6:	429e      	cmp	r6, r3
 800a8b8:	6841      	ldr	r1, [r0, #4]
 800a8ba:	d93d      	bls.n	800a938 <_dtoa_r+0x318>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f001 fa4d 	bl	800bd5c <_Balloc>
 800a8c2:	9001      	str	r0, [sp, #4]
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d13b      	bne.n	800a940 <_dtoa_r+0x320>
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <_dtoa_r+0x2f0>)
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8d0:	e6c0      	b.n	800a654 <_dtoa_r+0x34>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e7df      	b.n	800a896 <_dtoa_r+0x276>
 800a8d6:	bf00      	nop
 800a8d8:	636f4361 	.word	0x636f4361
 800a8dc:	3fd287a7 	.word	0x3fd287a7
 800a8e0:	8b60c8b3 	.word	0x8b60c8b3
 800a8e4:	3fc68a28 	.word	0x3fc68a28
 800a8e8:	509f79fb 	.word	0x509f79fb
 800a8ec:	3fd34413 	.word	0x3fd34413
 800a8f0:	0800db96 	.word	0x0800db96
 800a8f4:	0800dbad 	.word	0x0800dbad
 800a8f8:	7ff00000 	.word	0x7ff00000
 800a8fc:	0800db92 	.word	0x0800db92
 800a900:	0800db89 	.word	0x0800db89
 800a904:	0800da0d 	.word	0x0800da0d
 800a908:	3ff80000 	.word	0x3ff80000
 800a90c:	0800dd80 	.word	0x0800dd80
 800a910:	0800dc08 	.word	0x0800dc08
 800a914:	2501      	movs	r5, #1
 800a916:	2300      	movs	r3, #0
 800a918:	9306      	str	r3, [sp, #24]
 800a91a:	9508      	str	r5, [sp, #32]
 800a91c:	f04f 33ff 	mov.w	r3, #4294967295
 800a920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	2312      	movs	r3, #18
 800a928:	e7b0      	b.n	800a88c <_dtoa_r+0x26c>
 800a92a:	2301      	movs	r3, #1
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	e7f5      	b.n	800a91c <_dtoa_r+0x2fc>
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a936:	e7b8      	b.n	800a8aa <_dtoa_r+0x28a>
 800a938:	3101      	adds	r1, #1
 800a93a:	6041      	str	r1, [r0, #4]
 800a93c:	0052      	lsls	r2, r2, #1
 800a93e:	e7b8      	b.n	800a8b2 <_dtoa_r+0x292>
 800a940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	2b0e      	cmp	r3, #14
 800a94a:	f200 809d 	bhi.w	800aa88 <_dtoa_r+0x468>
 800a94e:	2d00      	cmp	r5, #0
 800a950:	f000 809a 	beq.w	800aa88 <_dtoa_r+0x468>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	dd32      	ble.n	800a9c0 <_dtoa_r+0x3a0>
 800a95a:	4ab7      	ldr	r2, [pc, #732]	; (800ac38 <_dtoa_r+0x618>)
 800a95c:	f003 030f 	and.w	r3, r3, #15
 800a960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a964:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a968:	9b00      	ldr	r3, [sp, #0]
 800a96a:	05d8      	lsls	r0, r3, #23
 800a96c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a970:	d516      	bpl.n	800a9a0 <_dtoa_r+0x380>
 800a972:	4bb2      	ldr	r3, [pc, #712]	; (800ac3c <_dtoa_r+0x61c>)
 800a974:	ec51 0b19 	vmov	r0, r1, d9
 800a978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a97c:	f7f5 ff66 	bl	800084c <__aeabi_ddiv>
 800a980:	f007 070f 	and.w	r7, r7, #15
 800a984:	4682      	mov	sl, r0
 800a986:	468b      	mov	fp, r1
 800a988:	2503      	movs	r5, #3
 800a98a:	4eac      	ldr	r6, [pc, #688]	; (800ac3c <_dtoa_r+0x61c>)
 800a98c:	b957      	cbnz	r7, 800a9a4 <_dtoa_r+0x384>
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	4650      	mov	r0, sl
 800a994:	4659      	mov	r1, fp
 800a996:	f7f5 ff59 	bl	800084c <__aeabi_ddiv>
 800a99a:	4682      	mov	sl, r0
 800a99c:	468b      	mov	fp, r1
 800a99e:	e028      	b.n	800a9f2 <_dtoa_r+0x3d2>
 800a9a0:	2502      	movs	r5, #2
 800a9a2:	e7f2      	b.n	800a98a <_dtoa_r+0x36a>
 800a9a4:	07f9      	lsls	r1, r7, #31
 800a9a6:	d508      	bpl.n	800a9ba <_dtoa_r+0x39a>
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9b0:	f7f5 fe22 	bl	80005f8 <__aeabi_dmul>
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	107f      	asrs	r7, r7, #1
 800a9bc:	3608      	adds	r6, #8
 800a9be:	e7e5      	b.n	800a98c <_dtoa_r+0x36c>
 800a9c0:	f000 809b 	beq.w	800aafa <_dtoa_r+0x4da>
 800a9c4:	9b00      	ldr	r3, [sp, #0]
 800a9c6:	4f9d      	ldr	r7, [pc, #628]	; (800ac3c <_dtoa_r+0x61c>)
 800a9c8:	425e      	negs	r6, r3
 800a9ca:	4b9b      	ldr	r3, [pc, #620]	; (800ac38 <_dtoa_r+0x618>)
 800a9cc:	f006 020f 	and.w	r2, r6, #15
 800a9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	ec51 0b19 	vmov	r0, r1, d9
 800a9dc:	f7f5 fe0c 	bl	80005f8 <__aeabi_dmul>
 800a9e0:	1136      	asrs	r6, r6, #4
 800a9e2:	4682      	mov	sl, r0
 800a9e4:	468b      	mov	fp, r1
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2502      	movs	r5, #2
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	d17a      	bne.n	800aae4 <_dtoa_r+0x4c4>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1d3      	bne.n	800a99a <_dtoa_r+0x37a>
 800a9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8082 	beq.w	800aafe <_dtoa_r+0x4de>
 800a9fa:	4b91      	ldr	r3, [pc, #580]	; (800ac40 <_dtoa_r+0x620>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4650      	mov	r0, sl
 800aa00:	4659      	mov	r1, fp
 800aa02:	f7f6 f86b 	bl	8000adc <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d079      	beq.n	800aafe <_dtoa_r+0x4de>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d076      	beq.n	800aafe <_dtoa_r+0x4de>
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd36      	ble.n	800aa84 <_dtoa_r+0x464>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	1e5f      	subs	r7, r3, #1
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4b88      	ldr	r3, [pc, #544]	; (800ac44 <_dtoa_r+0x624>)
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	9e02      	ldr	r6, [sp, #8]
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f7f5 fd78 	bl	8000524 <__aeabi_i2d>
 800aa34:	4652      	mov	r2, sl
 800aa36:	465b      	mov	r3, fp
 800aa38:	f7f5 fdde 	bl	80005f8 <__aeabi_dmul>
 800aa3c:	4b82      	ldr	r3, [pc, #520]	; (800ac48 <_dtoa_r+0x628>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f7f5 fc24 	bl	800028c <__adddf3>
 800aa44:	46d0      	mov	r8, sl
 800aa46:	46d9      	mov	r9, fp
 800aa48:	4682      	mov	sl, r0
 800aa4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d158      	bne.n	800ab04 <_dtoa_r+0x4e4>
 800aa52:	4b7e      	ldr	r3, [pc, #504]	; (800ac4c <_dtoa_r+0x62c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	4640      	mov	r0, r8
 800aa58:	4649      	mov	r1, r9
 800aa5a:	f7f5 fc15 	bl	8000288 <__aeabi_dsub>
 800aa5e:	4652      	mov	r2, sl
 800aa60:	465b      	mov	r3, fp
 800aa62:	4680      	mov	r8, r0
 800aa64:	4689      	mov	r9, r1
 800aa66:	f7f6 f857 	bl	8000b18 <__aeabi_dcmpgt>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f040 8295 	bne.w	800af9a <_dtoa_r+0x97a>
 800aa70:	4652      	mov	r2, sl
 800aa72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f6 f82f 	bl	8000adc <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f040 8289 	bne.w	800af96 <_dtoa_r+0x976>
 800aa84:	ec5b ab19 	vmov	sl, fp, d9
 800aa88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f2c0 8148 	blt.w	800ad20 <_dtoa_r+0x700>
 800aa90:	9a00      	ldr	r2, [sp, #0]
 800aa92:	2a0e      	cmp	r2, #14
 800aa94:	f300 8144 	bgt.w	800ad20 <_dtoa_r+0x700>
 800aa98:	4b67      	ldr	r3, [pc, #412]	; (800ac38 <_dtoa_r+0x618>)
 800aa9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f280 80d5 	bge.w	800ac54 <_dtoa_r+0x634>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f300 80d1 	bgt.w	800ac54 <_dtoa_r+0x634>
 800aab2:	f040 826f 	bne.w	800af94 <_dtoa_r+0x974>
 800aab6:	4b65      	ldr	r3, [pc, #404]	; (800ac4c <_dtoa_r+0x62c>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f6 f81d 	bl	8000b04 <__aeabi_dcmpge>
 800aaca:	9e03      	ldr	r6, [sp, #12]
 800aacc:	4637      	mov	r7, r6
 800aace:	2800      	cmp	r0, #0
 800aad0:	f040 8245 	bne.w	800af5e <_dtoa_r+0x93e>
 800aad4:	9d01      	ldr	r5, [sp, #4]
 800aad6:	2331      	movs	r3, #49	; 0x31
 800aad8:	f805 3b01 	strb.w	r3, [r5], #1
 800aadc:	9b00      	ldr	r3, [sp, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	e240      	b.n	800af66 <_dtoa_r+0x946>
 800aae4:	07f2      	lsls	r2, r6, #31
 800aae6:	d505      	bpl.n	800aaf4 <_dtoa_r+0x4d4>
 800aae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	1076      	asrs	r6, r6, #1
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	e777      	b.n	800a9ea <_dtoa_r+0x3ca>
 800aafa:	2502      	movs	r5, #2
 800aafc:	e779      	b.n	800a9f2 <_dtoa_r+0x3d2>
 800aafe:	9f00      	ldr	r7, [sp, #0]
 800ab00:	9e03      	ldr	r6, [sp, #12]
 800ab02:	e794      	b.n	800aa2e <_dtoa_r+0x40e>
 800ab04:	9901      	ldr	r1, [sp, #4]
 800ab06:	4b4c      	ldr	r3, [pc, #304]	; (800ac38 <_dtoa_r+0x618>)
 800ab08:	4431      	add	r1, r6
 800ab0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ab0c:	9908      	ldr	r1, [sp, #32]
 800ab0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d043      	beq.n	800aba2 <_dtoa_r+0x582>
 800ab1a:	494d      	ldr	r1, [pc, #308]	; (800ac50 <_dtoa_r+0x630>)
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	f7f5 fe95 	bl	800084c <__aeabi_ddiv>
 800ab22:	4652      	mov	r2, sl
 800ab24:	465b      	mov	r3, fp
 800ab26:	f7f5 fbaf 	bl	8000288 <__aeabi_dsub>
 800ab2a:	9d01      	ldr	r5, [sp, #4]
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	4649      	mov	r1, r9
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7f6 f810 	bl	8000b58 <__aeabi_d2iz>
 800ab38:	4606      	mov	r6, r0
 800ab3a:	f7f5 fcf3 	bl	8000524 <__aeabi_i2d>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fb9f 	bl	8000288 <__aeabi_dsub>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab50:	4652      	mov	r2, sl
 800ab52:	465b      	mov	r3, fp
 800ab54:	4680      	mov	r8, r0
 800ab56:	4689      	mov	r9, r1
 800ab58:	f7f5 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d163      	bne.n	800ac28 <_dtoa_r+0x608>
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	4936      	ldr	r1, [pc, #216]	; (800ac40 <_dtoa_r+0x620>)
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7f5 fb8e 	bl	8000288 <__aeabi_dsub>
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	465b      	mov	r3, fp
 800ab70:	f7f5 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f040 80b5 	bne.w	800ace4 <_dtoa_r+0x6c4>
 800ab7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab7c:	429d      	cmp	r5, r3
 800ab7e:	d081      	beq.n	800aa84 <_dtoa_r+0x464>
 800ab80:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <_dtoa_r+0x624>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	4650      	mov	r0, sl
 800ab86:	4659      	mov	r1, fp
 800ab88:	f7f5 fd36 	bl	80005f8 <__aeabi_dmul>
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <_dtoa_r+0x624>)
 800ab8e:	4682      	mov	sl, r0
 800ab90:	468b      	mov	fp, r1
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	4689      	mov	r9, r1
 800aba0:	e7c6      	b.n	800ab30 <_dtoa_r+0x510>
 800aba2:	4650      	mov	r0, sl
 800aba4:	4659      	mov	r1, fp
 800aba6:	f7f5 fd27 	bl	80005f8 <__aeabi_dmul>
 800abaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abac:	9d01      	ldr	r5, [sp, #4]
 800abae:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb0:	4682      	mov	sl, r0
 800abb2:	468b      	mov	fp, r1
 800abb4:	4649      	mov	r1, r9
 800abb6:	4640      	mov	r0, r8
 800abb8:	f7f5 ffce 	bl	8000b58 <__aeabi_d2iz>
 800abbc:	4606      	mov	r6, r0
 800abbe:	f7f5 fcb1 	bl	8000524 <__aeabi_i2d>
 800abc2:	3630      	adds	r6, #48	; 0x30
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 fb5c 	bl	8000288 <__aeabi_dsub>
 800abd0:	f805 6b01 	strb.w	r6, [r5], #1
 800abd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd6:	429d      	cmp	r5, r3
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	f04f 0200 	mov.w	r2, #0
 800abe0:	d124      	bne.n	800ac2c <_dtoa_r+0x60c>
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <_dtoa_r+0x630>)
 800abe4:	4650      	mov	r0, sl
 800abe6:	4659      	mov	r1, fp
 800abe8:	f7f5 fb50 	bl	800028c <__adddf3>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d173      	bne.n	800ace4 <_dtoa_r+0x6c4>
 800abfc:	4652      	mov	r2, sl
 800abfe:	465b      	mov	r3, fp
 800ac00:	4913      	ldr	r1, [pc, #76]	; (800ac50 <_dtoa_r+0x630>)
 800ac02:	2000      	movs	r0, #0
 800ac04:	f7f5 fb40 	bl	8000288 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 ff64 	bl	8000adc <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f af35 	beq.w	800aa84 <_dtoa_r+0x464>
 800ac1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac1c:	1e6b      	subs	r3, r5, #1
 800ac1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d0f8      	beq.n	800ac1a <_dtoa_r+0x5fa>
 800ac28:	9700      	str	r7, [sp, #0]
 800ac2a:	e049      	b.n	800acc0 <_dtoa_r+0x6a0>
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <_dtoa_r+0x624>)
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	4680      	mov	r8, r0
 800ac34:	4689      	mov	r9, r1
 800ac36:	e7bd      	b.n	800abb4 <_dtoa_r+0x594>
 800ac38:	0800dd80 	.word	0x0800dd80
 800ac3c:	0800dd58 	.word	0x0800dd58
 800ac40:	3ff00000 	.word	0x3ff00000
 800ac44:	40240000 	.word	0x40240000
 800ac48:	401c0000 	.word	0x401c0000
 800ac4c:	40140000 	.word	0x40140000
 800ac50:	3fe00000 	.word	0x3fe00000
 800ac54:	9d01      	ldr	r5, [sp, #4]
 800ac56:	4656      	mov	r6, sl
 800ac58:	465f      	mov	r7, fp
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	f7f5 fdf3 	bl	800084c <__aeabi_ddiv>
 800ac66:	f7f5 ff77 	bl	8000b58 <__aeabi_d2iz>
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	f7f5 fc5a 	bl	8000524 <__aeabi_i2d>
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	f7f5 fcc0 	bl	80005f8 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac84:	f7f5 fb00 	bl	8000288 <__aeabi_dsub>
 800ac88:	f805 6b01 	strb.w	r6, [r5], #1
 800ac8c:	9e01      	ldr	r6, [sp, #4]
 800ac8e:	9f03      	ldr	r7, [sp, #12]
 800ac90:	1bae      	subs	r6, r5, r6
 800ac92:	42b7      	cmp	r7, r6
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	d135      	bne.n	800ad06 <_dtoa_r+0x6e6>
 800ac9a:	f7f5 faf7 	bl	800028c <__adddf3>
 800ac9e:	4642      	mov	r2, r8
 800aca0:	464b      	mov	r3, r9
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	f7f5 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 800acaa:	b9d0      	cbnz	r0, 800ace2 <_dtoa_r+0x6c2>
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	4630      	mov	r0, r6
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb8:	b110      	cbz	r0, 800acc0 <_dtoa_r+0x6a0>
 800acba:	f01a 0f01 	tst.w	sl, #1
 800acbe:	d110      	bne.n	800ace2 <_dtoa_r+0x6c2>
 800acc0:	4620      	mov	r0, r4
 800acc2:	ee18 1a10 	vmov	r1, s16
 800acc6:	f001 f889 	bl	800bddc <_Bfree>
 800acca:	2300      	movs	r3, #0
 800accc:	9800      	ldr	r0, [sp, #0]
 800acce:	702b      	strb	r3, [r5, #0]
 800acd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd2:	3001      	adds	r0, #1
 800acd4:	6018      	str	r0, [r3, #0]
 800acd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f43f acf1 	beq.w	800a6c0 <_dtoa_r+0xa0>
 800acde:	601d      	str	r5, [r3, #0]
 800ace0:	e4ee      	b.n	800a6c0 <_dtoa_r+0xa0>
 800ace2:	9f00      	ldr	r7, [sp, #0]
 800ace4:	462b      	mov	r3, r5
 800ace6:	461d      	mov	r5, r3
 800ace8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acec:	2a39      	cmp	r2, #57	; 0x39
 800acee:	d106      	bne.n	800acfe <_dtoa_r+0x6de>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d1f7      	bne.n	800ace6 <_dtoa_r+0x6c6>
 800acf6:	9901      	ldr	r1, [sp, #4]
 800acf8:	2230      	movs	r2, #48	; 0x30
 800acfa:	3701      	adds	r7, #1
 800acfc:	700a      	strb	r2, [r1, #0]
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	3201      	adds	r2, #1
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	e790      	b.n	800ac28 <_dtoa_r+0x608>
 800ad06:	4ba6      	ldr	r3, [pc, #664]	; (800afa0 <_dtoa_r+0x980>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	4606      	mov	r6, r0
 800ad14:	460f      	mov	r7, r1
 800ad16:	f7f5 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d09d      	beq.n	800ac5a <_dtoa_r+0x63a>
 800ad1e:	e7cf      	b.n	800acc0 <_dtoa_r+0x6a0>
 800ad20:	9a08      	ldr	r2, [sp, #32]
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	f000 80d7 	beq.w	800aed6 <_dtoa_r+0x8b6>
 800ad28:	9a06      	ldr	r2, [sp, #24]
 800ad2a:	2a01      	cmp	r2, #1
 800ad2c:	f300 80ba 	bgt.w	800aea4 <_dtoa_r+0x884>
 800ad30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	f000 80b2 	beq.w	800ae9c <_dtoa_r+0x87c>
 800ad38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad3c:	9e07      	ldr	r6, [sp, #28]
 800ad3e:	9d04      	ldr	r5, [sp, #16]
 800ad40:	9a04      	ldr	r2, [sp, #16]
 800ad42:	441a      	add	r2, r3
 800ad44:	9204      	str	r2, [sp, #16]
 800ad46:	9a05      	ldr	r2, [sp, #20]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	441a      	add	r2, r3
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	9205      	str	r2, [sp, #20]
 800ad50:	f001 f946 	bl	800bfe0 <__i2b>
 800ad54:	4607      	mov	r7, r0
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	dd0c      	ble.n	800ad74 <_dtoa_r+0x754>
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dd09      	ble.n	800ad74 <_dtoa_r+0x754>
 800ad60:	42ab      	cmp	r3, r5
 800ad62:	9a04      	ldr	r2, [sp, #16]
 800ad64:	bfa8      	it	ge
 800ad66:	462b      	movge	r3, r5
 800ad68:	1ad2      	subs	r2, r2, r3
 800ad6a:	9204      	str	r2, [sp, #16]
 800ad6c:	9a05      	ldr	r2, [sp, #20]
 800ad6e:	1aed      	subs	r5, r5, r3
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	9305      	str	r3, [sp, #20]
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	b31b      	cbz	r3, 800adc0 <_dtoa_r+0x7a0>
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80af 	beq.w	800aede <_dtoa_r+0x8be>
 800ad80:	2e00      	cmp	r6, #0
 800ad82:	dd13      	ble.n	800adac <_dtoa_r+0x78c>
 800ad84:	4639      	mov	r1, r7
 800ad86:	4632      	mov	r2, r6
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f001 f9e9 	bl	800c160 <__pow5mult>
 800ad8e:	ee18 2a10 	vmov	r2, s16
 800ad92:	4601      	mov	r1, r0
 800ad94:	4607      	mov	r7, r0
 800ad96:	4620      	mov	r0, r4
 800ad98:	f001 f938 	bl	800c00c <__multiply>
 800ad9c:	ee18 1a10 	vmov	r1, s16
 800ada0:	4680      	mov	r8, r0
 800ada2:	4620      	mov	r0, r4
 800ada4:	f001 f81a 	bl	800bddc <_Bfree>
 800ada8:	ee08 8a10 	vmov	s16, r8
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	1b9a      	subs	r2, r3, r6
 800adb0:	d006      	beq.n	800adc0 <_dtoa_r+0x7a0>
 800adb2:	ee18 1a10 	vmov	r1, s16
 800adb6:	4620      	mov	r0, r4
 800adb8:	f001 f9d2 	bl	800c160 <__pow5mult>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	2101      	movs	r1, #1
 800adc2:	4620      	mov	r0, r4
 800adc4:	f001 f90c 	bl	800bfe0 <__i2b>
 800adc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	4606      	mov	r6, r0
 800adce:	f340 8088 	ble.w	800aee2 <_dtoa_r+0x8c2>
 800add2:	461a      	mov	r2, r3
 800add4:	4601      	mov	r1, r0
 800add6:	4620      	mov	r0, r4
 800add8:	f001 f9c2 	bl	800c160 <__pow5mult>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	4606      	mov	r6, r0
 800ade2:	f340 8081 	ble.w	800aee8 <_dtoa_r+0x8c8>
 800ade6:	f04f 0800 	mov.w	r8, #0
 800adea:	6933      	ldr	r3, [r6, #16]
 800adec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adf0:	6918      	ldr	r0, [r3, #16]
 800adf2:	f001 f8a5 	bl	800bf40 <__hi0bits>
 800adf6:	f1c0 0020 	rsb	r0, r0, #32
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	4418      	add	r0, r3
 800adfe:	f010 001f 	ands.w	r0, r0, #31
 800ae02:	f000 8092 	beq.w	800af2a <_dtoa_r+0x90a>
 800ae06:	f1c0 0320 	rsb	r3, r0, #32
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	f340 808a 	ble.w	800af24 <_dtoa_r+0x904>
 800ae10:	f1c0 001c 	rsb	r0, r0, #28
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4403      	add	r3, r0
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	4403      	add	r3, r0
 800ae1e:	4405      	add	r5, r0
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd07      	ble.n	800ae38 <_dtoa_r+0x818>
 800ae28:	ee18 1a10 	vmov	r1, s16
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f001 f9f0 	bl	800c214 <__lshift>
 800ae34:	ee08 0a10 	vmov	s16, r0
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dd05      	ble.n	800ae4a <_dtoa_r+0x82a>
 800ae3e:	4631      	mov	r1, r6
 800ae40:	461a      	mov	r2, r3
 800ae42:	4620      	mov	r0, r4
 800ae44:	f001 f9e6 	bl	800c214 <__lshift>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d06e      	beq.n	800af2e <_dtoa_r+0x90e>
 800ae50:	ee18 0a10 	vmov	r0, s16
 800ae54:	4631      	mov	r1, r6
 800ae56:	f001 fa4d 	bl	800c2f4 <__mcmp>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	da67      	bge.n	800af2e <_dtoa_r+0x90e>
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	ee18 1a10 	vmov	r1, s16
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	220a      	movs	r2, #10
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 ffd7 	bl	800be20 <__multadd>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	ee08 0a10 	vmov	s16, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 81b1 	beq.w	800b1e0 <_dtoa_r+0xbc0>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4639      	mov	r1, r7
 800ae82:	220a      	movs	r2, #10
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 ffcb 	bl	800be20 <__multadd>
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	4607      	mov	r7, r0
 800ae90:	f300 808e 	bgt.w	800afb0 <_dtoa_r+0x990>
 800ae94:	9b06      	ldr	r3, [sp, #24]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	dc51      	bgt.n	800af3e <_dtoa_r+0x91e>
 800ae9a:	e089      	b.n	800afb0 <_dtoa_r+0x990>
 800ae9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aea2:	e74b      	b.n	800ad3c <_dtoa_r+0x71c>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1e5e      	subs	r6, r3, #1
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	42b3      	cmp	r3, r6
 800aeac:	bfbf      	itttt	lt
 800aeae:	9b07      	ldrlt	r3, [sp, #28]
 800aeb0:	9607      	strlt	r6, [sp, #28]
 800aeb2:	1af2      	sublt	r2, r6, r3
 800aeb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aeb6:	bfb6      	itet	lt
 800aeb8:	189b      	addlt	r3, r3, r2
 800aeba:	1b9e      	subge	r6, r3, r6
 800aebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	bfb8      	it	lt
 800aec2:	2600      	movlt	r6, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bfb7      	itett	lt
 800aec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aed0:	1a9d      	sublt	r5, r3, r2
 800aed2:	2300      	movlt	r3, #0
 800aed4:	e734      	b.n	800ad40 <_dtoa_r+0x720>
 800aed6:	9e07      	ldr	r6, [sp, #28]
 800aed8:	9d04      	ldr	r5, [sp, #16]
 800aeda:	9f08      	ldr	r7, [sp, #32]
 800aedc:	e73b      	b.n	800ad56 <_dtoa_r+0x736>
 800aede:	9a07      	ldr	r2, [sp, #28]
 800aee0:	e767      	b.n	800adb2 <_dtoa_r+0x792>
 800aee2:	9b06      	ldr	r3, [sp, #24]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	dc18      	bgt.n	800af1a <_dtoa_r+0x8fa>
 800aee8:	f1ba 0f00 	cmp.w	sl, #0
 800aeec:	d115      	bne.n	800af1a <_dtoa_r+0x8fa>
 800aeee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef2:	b993      	cbnz	r3, 800af1a <_dtoa_r+0x8fa>
 800aef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aef8:	0d1b      	lsrs	r3, r3, #20
 800aefa:	051b      	lsls	r3, r3, #20
 800aefc:	b183      	cbz	r3, 800af20 <_dtoa_r+0x900>
 800aefe:	9b04      	ldr	r3, [sp, #16]
 800af00:	3301      	adds	r3, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9b05      	ldr	r3, [sp, #20]
 800af06:	3301      	adds	r3, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	f04f 0801 	mov.w	r8, #1
 800af0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af10:	2b00      	cmp	r3, #0
 800af12:	f47f af6a 	bne.w	800adea <_dtoa_r+0x7ca>
 800af16:	2001      	movs	r0, #1
 800af18:	e76f      	b.n	800adfa <_dtoa_r+0x7da>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	e7f6      	b.n	800af0e <_dtoa_r+0x8ee>
 800af20:	4698      	mov	r8, r3
 800af22:	e7f4      	b.n	800af0e <_dtoa_r+0x8ee>
 800af24:	f43f af7d 	beq.w	800ae22 <_dtoa_r+0x802>
 800af28:	4618      	mov	r0, r3
 800af2a:	301c      	adds	r0, #28
 800af2c:	e772      	b.n	800ae14 <_dtoa_r+0x7f4>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc37      	bgt.n	800afa4 <_dtoa_r+0x984>
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	2b02      	cmp	r3, #2
 800af38:	dd34      	ble.n	800afa4 <_dtoa_r+0x984>
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	b96b      	cbnz	r3, 800af5e <_dtoa_r+0x93e>
 800af42:	4631      	mov	r1, r6
 800af44:	2205      	movs	r2, #5
 800af46:	4620      	mov	r0, r4
 800af48:	f000 ff6a 	bl	800be20 <__multadd>
 800af4c:	4601      	mov	r1, r0
 800af4e:	4606      	mov	r6, r0
 800af50:	ee18 0a10 	vmov	r0, s16
 800af54:	f001 f9ce 	bl	800c2f4 <__mcmp>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f73f adbb 	bgt.w	800aad4 <_dtoa_r+0x4b4>
 800af5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af60:	9d01      	ldr	r5, [sp, #4]
 800af62:	43db      	mvns	r3, r3
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	4631      	mov	r1, r6
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 ff35 	bl	800bddc <_Bfree>
 800af72:	2f00      	cmp	r7, #0
 800af74:	f43f aea4 	beq.w	800acc0 <_dtoa_r+0x6a0>
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	d005      	beq.n	800af8a <_dtoa_r+0x96a>
 800af7e:	45b8      	cmp	r8, r7
 800af80:	d003      	beq.n	800af8a <_dtoa_r+0x96a>
 800af82:	4641      	mov	r1, r8
 800af84:	4620      	mov	r0, r4
 800af86:	f000 ff29 	bl	800bddc <_Bfree>
 800af8a:	4639      	mov	r1, r7
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 ff25 	bl	800bddc <_Bfree>
 800af92:	e695      	b.n	800acc0 <_dtoa_r+0x6a0>
 800af94:	2600      	movs	r6, #0
 800af96:	4637      	mov	r7, r6
 800af98:	e7e1      	b.n	800af5e <_dtoa_r+0x93e>
 800af9a:	9700      	str	r7, [sp, #0]
 800af9c:	4637      	mov	r7, r6
 800af9e:	e599      	b.n	800aad4 <_dtoa_r+0x4b4>
 800afa0:	40240000 	.word	0x40240000
 800afa4:	9b08      	ldr	r3, [sp, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80ca 	beq.w	800b140 <_dtoa_r+0xb20>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	dd05      	ble.n	800afc0 <_dtoa_r+0x9a0>
 800afb4:	4639      	mov	r1, r7
 800afb6:	462a      	mov	r2, r5
 800afb8:	4620      	mov	r0, r4
 800afba:	f001 f92b 	bl	800c214 <__lshift>
 800afbe:	4607      	mov	r7, r0
 800afc0:	f1b8 0f00 	cmp.w	r8, #0
 800afc4:	d05b      	beq.n	800b07e <_dtoa_r+0xa5e>
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fec7 	bl	800bd5c <_Balloc>
 800afce:	4605      	mov	r5, r0
 800afd0:	b928      	cbnz	r0, 800afde <_dtoa_r+0x9be>
 800afd2:	4b87      	ldr	r3, [pc, #540]	; (800b1f0 <_dtoa_r+0xbd0>)
 800afd4:	4602      	mov	r2, r0
 800afd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afda:	f7ff bb3b 	b.w	800a654 <_dtoa_r+0x34>
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	3202      	adds	r2, #2
 800afe2:	0092      	lsls	r2, r2, #2
 800afe4:	f107 010c 	add.w	r1, r7, #12
 800afe8:	300c      	adds	r0, #12
 800afea:	f7fd faeb 	bl	80085c4 <memcpy>
 800afee:	2201      	movs	r2, #1
 800aff0:	4629      	mov	r1, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	f001 f90e 	bl	800c214 <__lshift>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	f103 0901 	add.w	r9, r3, #1
 800affe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b002:	4413      	add	r3, r2
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	f00a 0301 	and.w	r3, sl, #1
 800b00a:	46b8      	mov	r8, r7
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	4607      	mov	r7, r0
 800b010:	4631      	mov	r1, r6
 800b012:	ee18 0a10 	vmov	r0, s16
 800b016:	f7ff fa77 	bl	800a508 <quorem>
 800b01a:	4641      	mov	r1, r8
 800b01c:	9002      	str	r0, [sp, #8]
 800b01e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b022:	ee18 0a10 	vmov	r0, s16
 800b026:	f001 f965 	bl	800c2f4 <__mcmp>
 800b02a:	463a      	mov	r2, r7
 800b02c:	9003      	str	r0, [sp, #12]
 800b02e:	4631      	mov	r1, r6
 800b030:	4620      	mov	r0, r4
 800b032:	f001 f97b 	bl	800c32c <__mdiff>
 800b036:	68c2      	ldr	r2, [r0, #12]
 800b038:	f109 3bff 	add.w	fp, r9, #4294967295
 800b03c:	4605      	mov	r5, r0
 800b03e:	bb02      	cbnz	r2, 800b082 <_dtoa_r+0xa62>
 800b040:	4601      	mov	r1, r0
 800b042:	ee18 0a10 	vmov	r0, s16
 800b046:	f001 f955 	bl	800c2f4 <__mcmp>
 800b04a:	4602      	mov	r2, r0
 800b04c:	4629      	mov	r1, r5
 800b04e:	4620      	mov	r0, r4
 800b050:	9207      	str	r2, [sp, #28]
 800b052:	f000 fec3 	bl	800bddc <_Bfree>
 800b056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b05a:	ea43 0102 	orr.w	r1, r3, r2
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	430b      	orrs	r3, r1
 800b062:	464d      	mov	r5, r9
 800b064:	d10f      	bne.n	800b086 <_dtoa_r+0xa66>
 800b066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06a:	d02a      	beq.n	800b0c2 <_dtoa_r+0xaa2>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dd02      	ble.n	800b078 <_dtoa_r+0xa58>
 800b072:	9b02      	ldr	r3, [sp, #8]
 800b074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b078:	f88b a000 	strb.w	sl, [fp]
 800b07c:	e775      	b.n	800af6a <_dtoa_r+0x94a>
 800b07e:	4638      	mov	r0, r7
 800b080:	e7ba      	b.n	800aff8 <_dtoa_r+0x9d8>
 800b082:	2201      	movs	r2, #1
 800b084:	e7e2      	b.n	800b04c <_dtoa_r+0xa2c>
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	db04      	blt.n	800b096 <_dtoa_r+0xa76>
 800b08c:	9906      	ldr	r1, [sp, #24]
 800b08e:	430b      	orrs	r3, r1
 800b090:	9904      	ldr	r1, [sp, #16]
 800b092:	430b      	orrs	r3, r1
 800b094:	d122      	bne.n	800b0dc <_dtoa_r+0xabc>
 800b096:	2a00      	cmp	r2, #0
 800b098:	ddee      	ble.n	800b078 <_dtoa_r+0xa58>
 800b09a:	ee18 1a10 	vmov	r1, s16
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f001 f8b7 	bl	800c214 <__lshift>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	ee08 0a10 	vmov	s16, r0
 800b0ac:	f001 f922 	bl	800c2f4 <__mcmp>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	dc03      	bgt.n	800b0bc <_dtoa_r+0xa9c>
 800b0b4:	d1e0      	bne.n	800b078 <_dtoa_r+0xa58>
 800b0b6:	f01a 0f01 	tst.w	sl, #1
 800b0ba:	d0dd      	beq.n	800b078 <_dtoa_r+0xa58>
 800b0bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0c0:	d1d7      	bne.n	800b072 <_dtoa_r+0xa52>
 800b0c2:	2339      	movs	r3, #57	; 0x39
 800b0c4:	f88b 3000 	strb.w	r3, [fp]
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0d2:	2a39      	cmp	r2, #57	; 0x39
 800b0d4:	d071      	beq.n	800b1ba <_dtoa_r+0xb9a>
 800b0d6:	3201      	adds	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e746      	b.n	800af6a <_dtoa_r+0x94a>
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	dd07      	ble.n	800b0f0 <_dtoa_r+0xad0>
 800b0e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0e4:	d0ed      	beq.n	800b0c2 <_dtoa_r+0xaa2>
 800b0e6:	f10a 0301 	add.w	r3, sl, #1
 800b0ea:	f88b 3000 	strb.w	r3, [fp]
 800b0ee:	e73c      	b.n	800af6a <_dtoa_r+0x94a>
 800b0f0:	9b05      	ldr	r3, [sp, #20]
 800b0f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0f6:	4599      	cmp	r9, r3
 800b0f8:	d047      	beq.n	800b18a <_dtoa_r+0xb6a>
 800b0fa:	ee18 1a10 	vmov	r1, s16
 800b0fe:	2300      	movs	r3, #0
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fe8c 	bl	800be20 <__multadd>
 800b108:	45b8      	cmp	r8, r7
 800b10a:	ee08 0a10 	vmov	s16, r0
 800b10e:	f04f 0300 	mov.w	r3, #0
 800b112:	f04f 020a 	mov.w	r2, #10
 800b116:	4641      	mov	r1, r8
 800b118:	4620      	mov	r0, r4
 800b11a:	d106      	bne.n	800b12a <_dtoa_r+0xb0a>
 800b11c:	f000 fe80 	bl	800be20 <__multadd>
 800b120:	4680      	mov	r8, r0
 800b122:	4607      	mov	r7, r0
 800b124:	f109 0901 	add.w	r9, r9, #1
 800b128:	e772      	b.n	800b010 <_dtoa_r+0x9f0>
 800b12a:	f000 fe79 	bl	800be20 <__multadd>
 800b12e:	4639      	mov	r1, r7
 800b130:	4680      	mov	r8, r0
 800b132:	2300      	movs	r3, #0
 800b134:	220a      	movs	r2, #10
 800b136:	4620      	mov	r0, r4
 800b138:	f000 fe72 	bl	800be20 <__multadd>
 800b13c:	4607      	mov	r7, r0
 800b13e:	e7f1      	b.n	800b124 <_dtoa_r+0xb04>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	9302      	str	r3, [sp, #8]
 800b144:	9d01      	ldr	r5, [sp, #4]
 800b146:	ee18 0a10 	vmov	r0, s16
 800b14a:	4631      	mov	r1, r6
 800b14c:	f7ff f9dc 	bl	800a508 <quorem>
 800b150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	f805 ab01 	strb.w	sl, [r5], #1
 800b15a:	1aea      	subs	r2, r5, r3
 800b15c:	9b02      	ldr	r3, [sp, #8]
 800b15e:	4293      	cmp	r3, r2
 800b160:	dd09      	ble.n	800b176 <_dtoa_r+0xb56>
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2300      	movs	r3, #0
 800b168:	220a      	movs	r2, #10
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 fe58 	bl	800be20 <__multadd>
 800b170:	ee08 0a10 	vmov	s16, r0
 800b174:	e7e7      	b.n	800b146 <_dtoa_r+0xb26>
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfc8      	it	gt
 800b17c:	461d      	movgt	r5, r3
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	bfd8      	it	le
 800b182:	2501      	movle	r5, #1
 800b184:	441d      	add	r5, r3
 800b186:	f04f 0800 	mov.w	r8, #0
 800b18a:	ee18 1a10 	vmov	r1, s16
 800b18e:	2201      	movs	r2, #1
 800b190:	4620      	mov	r0, r4
 800b192:	f001 f83f 	bl	800c214 <__lshift>
 800b196:	4631      	mov	r1, r6
 800b198:	ee08 0a10 	vmov	s16, r0
 800b19c:	f001 f8aa 	bl	800c2f4 <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	dc91      	bgt.n	800b0c8 <_dtoa_r+0xaa8>
 800b1a4:	d102      	bne.n	800b1ac <_dtoa_r+0xb8c>
 800b1a6:	f01a 0f01 	tst.w	sl, #1
 800b1aa:	d18d      	bne.n	800b0c8 <_dtoa_r+0xaa8>
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	461d      	mov	r5, r3
 800b1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1b4:	2a30      	cmp	r2, #48	; 0x30
 800b1b6:	d0fa      	beq.n	800b1ae <_dtoa_r+0xb8e>
 800b1b8:	e6d7      	b.n	800af6a <_dtoa_r+0x94a>
 800b1ba:	9a01      	ldr	r2, [sp, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d184      	bne.n	800b0ca <_dtoa_r+0xaaa>
 800b1c0:	9b00      	ldr	r3, [sp, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2331      	movs	r3, #49	; 0x31
 800b1c8:	7013      	strb	r3, [r2, #0]
 800b1ca:	e6ce      	b.n	800af6a <_dtoa_r+0x94a>
 800b1cc:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <_dtoa_r+0xbd4>)
 800b1ce:	f7ff ba95 	b.w	800a6fc <_dtoa_r+0xdc>
 800b1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f47f aa6e 	bne.w	800a6b6 <_dtoa_r+0x96>
 800b1da:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <_dtoa_r+0xbd8>)
 800b1dc:	f7ff ba8e 	b.w	800a6fc <_dtoa_r+0xdc>
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dcae      	bgt.n	800b144 <_dtoa_r+0xb24>
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	f73f aea8 	bgt.w	800af3e <_dtoa_r+0x91e>
 800b1ee:	e7a9      	b.n	800b144 <_dtoa_r+0xb24>
 800b1f0:	0800dc08 	.word	0x0800dc08
 800b1f4:	0800da0c 	.word	0x0800da0c
 800b1f8:	0800db89 	.word	0x0800db89

0800b1fc <__sflush_r>:
 800b1fc:	898a      	ldrh	r2, [r1, #12]
 800b1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	4605      	mov	r5, r0
 800b204:	0710      	lsls	r0, r2, #28
 800b206:	460c      	mov	r4, r1
 800b208:	d458      	bmi.n	800b2bc <__sflush_r+0xc0>
 800b20a:	684b      	ldr	r3, [r1, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dc05      	bgt.n	800b21c <__sflush_r+0x20>
 800b210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b212:	2b00      	cmp	r3, #0
 800b214:	dc02      	bgt.n	800b21c <__sflush_r+0x20>
 800b216:	2000      	movs	r0, #0
 800b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b21e:	2e00      	cmp	r6, #0
 800b220:	d0f9      	beq.n	800b216 <__sflush_r+0x1a>
 800b222:	2300      	movs	r3, #0
 800b224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b228:	682f      	ldr	r7, [r5, #0]
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	d032      	beq.n	800b294 <__sflush_r+0x98>
 800b22e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	075a      	lsls	r2, r3, #29
 800b234:	d505      	bpl.n	800b242 <__sflush_r+0x46>
 800b236:	6863      	ldr	r3, [r4, #4]
 800b238:	1ac0      	subs	r0, r0, r3
 800b23a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b23c:	b10b      	cbz	r3, 800b242 <__sflush_r+0x46>
 800b23e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b240:	1ac0      	subs	r0, r0, r3
 800b242:	2300      	movs	r3, #0
 800b244:	4602      	mov	r2, r0
 800b246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b248:	6a21      	ldr	r1, [r4, #32]
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b0      	blx	r6
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	d106      	bne.n	800b262 <__sflush_r+0x66>
 800b254:	6829      	ldr	r1, [r5, #0]
 800b256:	291d      	cmp	r1, #29
 800b258:	d82c      	bhi.n	800b2b4 <__sflush_r+0xb8>
 800b25a:	4a2a      	ldr	r2, [pc, #168]	; (800b304 <__sflush_r+0x108>)
 800b25c:	40ca      	lsrs	r2, r1
 800b25e:	07d6      	lsls	r6, r2, #31
 800b260:	d528      	bpl.n	800b2b4 <__sflush_r+0xb8>
 800b262:	2200      	movs	r2, #0
 800b264:	6062      	str	r2, [r4, #4]
 800b266:	04d9      	lsls	r1, r3, #19
 800b268:	6922      	ldr	r2, [r4, #16]
 800b26a:	6022      	str	r2, [r4, #0]
 800b26c:	d504      	bpl.n	800b278 <__sflush_r+0x7c>
 800b26e:	1c42      	adds	r2, r0, #1
 800b270:	d101      	bne.n	800b276 <__sflush_r+0x7a>
 800b272:	682b      	ldr	r3, [r5, #0]
 800b274:	b903      	cbnz	r3, 800b278 <__sflush_r+0x7c>
 800b276:	6560      	str	r0, [r4, #84]	; 0x54
 800b278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b27a:	602f      	str	r7, [r5, #0]
 800b27c:	2900      	cmp	r1, #0
 800b27e:	d0ca      	beq.n	800b216 <__sflush_r+0x1a>
 800b280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b284:	4299      	cmp	r1, r3
 800b286:	d002      	beq.n	800b28e <__sflush_r+0x92>
 800b288:	4628      	mov	r0, r5
 800b28a:	f7fd f9b1 	bl	80085f0 <_free_r>
 800b28e:	2000      	movs	r0, #0
 800b290:	6360      	str	r0, [r4, #52]	; 0x34
 800b292:	e7c1      	b.n	800b218 <__sflush_r+0x1c>
 800b294:	6a21      	ldr	r1, [r4, #32]
 800b296:	2301      	movs	r3, #1
 800b298:	4628      	mov	r0, r5
 800b29a:	47b0      	blx	r6
 800b29c:	1c41      	adds	r1, r0, #1
 800b29e:	d1c7      	bne.n	800b230 <__sflush_r+0x34>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0c4      	beq.n	800b230 <__sflush_r+0x34>
 800b2a6:	2b1d      	cmp	r3, #29
 800b2a8:	d001      	beq.n	800b2ae <__sflush_r+0xb2>
 800b2aa:	2b16      	cmp	r3, #22
 800b2ac:	d101      	bne.n	800b2b2 <__sflush_r+0xb6>
 800b2ae:	602f      	str	r7, [r5, #0]
 800b2b0:	e7b1      	b.n	800b216 <__sflush_r+0x1a>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b8:	81a3      	strh	r3, [r4, #12]
 800b2ba:	e7ad      	b.n	800b218 <__sflush_r+0x1c>
 800b2bc:	690f      	ldr	r7, [r1, #16]
 800b2be:	2f00      	cmp	r7, #0
 800b2c0:	d0a9      	beq.n	800b216 <__sflush_r+0x1a>
 800b2c2:	0793      	lsls	r3, r2, #30
 800b2c4:	680e      	ldr	r6, [r1, #0]
 800b2c6:	bf08      	it	eq
 800b2c8:	694b      	ldreq	r3, [r1, #20]
 800b2ca:	600f      	str	r7, [r1, #0]
 800b2cc:	bf18      	it	ne
 800b2ce:	2300      	movne	r3, #0
 800b2d0:	eba6 0807 	sub.w	r8, r6, r7
 800b2d4:	608b      	str	r3, [r1, #8]
 800b2d6:	f1b8 0f00 	cmp.w	r8, #0
 800b2da:	dd9c      	ble.n	800b216 <__sflush_r+0x1a>
 800b2dc:	6a21      	ldr	r1, [r4, #32]
 800b2de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2e0:	4643      	mov	r3, r8
 800b2e2:	463a      	mov	r2, r7
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b0      	blx	r6
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	dc06      	bgt.n	800b2fa <__sflush_r+0xfe>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f2:	81a3      	strh	r3, [r4, #12]
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	e78e      	b.n	800b218 <__sflush_r+0x1c>
 800b2fa:	4407      	add	r7, r0
 800b2fc:	eba8 0800 	sub.w	r8, r8, r0
 800b300:	e7e9      	b.n	800b2d6 <__sflush_r+0xda>
 800b302:	bf00      	nop
 800b304:	20400001 	.word	0x20400001

0800b308 <_fflush_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	690b      	ldr	r3, [r1, #16]
 800b30c:	4605      	mov	r5, r0
 800b30e:	460c      	mov	r4, r1
 800b310:	b913      	cbnz	r3, 800b318 <_fflush_r+0x10>
 800b312:	2500      	movs	r5, #0
 800b314:	4628      	mov	r0, r5
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	b118      	cbz	r0, 800b322 <_fflush_r+0x1a>
 800b31a:	6983      	ldr	r3, [r0, #24]
 800b31c:	b90b      	cbnz	r3, 800b322 <_fflush_r+0x1a>
 800b31e:	f000 f887 	bl	800b430 <__sinit>
 800b322:	4b14      	ldr	r3, [pc, #80]	; (800b374 <_fflush_r+0x6c>)
 800b324:	429c      	cmp	r4, r3
 800b326:	d11b      	bne.n	800b360 <_fflush_r+0x58>
 800b328:	686c      	ldr	r4, [r5, #4]
 800b32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0ef      	beq.n	800b312 <_fflush_r+0xa>
 800b332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b334:	07d0      	lsls	r0, r2, #31
 800b336:	d404      	bmi.n	800b342 <_fflush_r+0x3a>
 800b338:	0599      	lsls	r1, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_fflush_r+0x3a>
 800b33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b33e:	f000 fc88 	bl	800bc52 <__retarget_lock_acquire_recursive>
 800b342:	4628      	mov	r0, r5
 800b344:	4621      	mov	r1, r4
 800b346:	f7ff ff59 	bl	800b1fc <__sflush_r>
 800b34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b34c:	07da      	lsls	r2, r3, #31
 800b34e:	4605      	mov	r5, r0
 800b350:	d4e0      	bmi.n	800b314 <_fflush_r+0xc>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	059b      	lsls	r3, r3, #22
 800b356:	d4dd      	bmi.n	800b314 <_fflush_r+0xc>
 800b358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b35a:	f000 fc7b 	bl	800bc54 <__retarget_lock_release_recursive>
 800b35e:	e7d9      	b.n	800b314 <_fflush_r+0xc>
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <_fflush_r+0x70>)
 800b362:	429c      	cmp	r4, r3
 800b364:	d101      	bne.n	800b36a <_fflush_r+0x62>
 800b366:	68ac      	ldr	r4, [r5, #8]
 800b368:	e7df      	b.n	800b32a <_fflush_r+0x22>
 800b36a:	4b04      	ldr	r3, [pc, #16]	; (800b37c <_fflush_r+0x74>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	bf08      	it	eq
 800b370:	68ec      	ldreq	r4, [r5, #12]
 800b372:	e7da      	b.n	800b32a <_fflush_r+0x22>
 800b374:	0800dc3c 	.word	0x0800dc3c
 800b378:	0800dc5c 	.word	0x0800dc5c
 800b37c:	0800dc1c 	.word	0x0800dc1c

0800b380 <std>:
 800b380:	2300      	movs	r3, #0
 800b382:	b510      	push	{r4, lr}
 800b384:	4604      	mov	r4, r0
 800b386:	e9c0 3300 	strd	r3, r3, [r0]
 800b38a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b38e:	6083      	str	r3, [r0, #8]
 800b390:	8181      	strh	r1, [r0, #12]
 800b392:	6643      	str	r3, [r0, #100]	; 0x64
 800b394:	81c2      	strh	r2, [r0, #14]
 800b396:	6183      	str	r3, [r0, #24]
 800b398:	4619      	mov	r1, r3
 800b39a:	2208      	movs	r2, #8
 800b39c:	305c      	adds	r0, #92	; 0x5c
 800b39e:	f7fd f91f 	bl	80085e0 <memset>
 800b3a2:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <std+0x38>)
 800b3a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <std+0x3c>)
 800b3a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3aa:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <std+0x40>)
 800b3ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <std+0x44>)
 800b3b0:	6224      	str	r4, [r4, #32]
 800b3b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b3b4:	bd10      	pop	{r4, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800cc89 	.word	0x0800cc89
 800b3bc:	0800ccab 	.word	0x0800ccab
 800b3c0:	0800cce3 	.word	0x0800cce3
 800b3c4:	0800cd07 	.word	0x0800cd07

0800b3c8 <_cleanup_r>:
 800b3c8:	4901      	ldr	r1, [pc, #4]	; (800b3d0 <_cleanup_r+0x8>)
 800b3ca:	f000 b8af 	b.w	800b52c <_fwalk_reent>
 800b3ce:	bf00      	nop
 800b3d0:	0800b309 	.word	0x0800b309

0800b3d4 <__sfmoreglue>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	2268      	movs	r2, #104	; 0x68
 800b3d8:	1e4d      	subs	r5, r1, #1
 800b3da:	4355      	muls	r5, r2
 800b3dc:	460e      	mov	r6, r1
 800b3de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3e2:	f7fd f971 	bl	80086c8 <_malloc_r>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	b140      	cbz	r0, 800b3fc <__sfmoreglue+0x28>
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b3f0:	300c      	adds	r0, #12
 800b3f2:	60a0      	str	r0, [r4, #8]
 800b3f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3f8:	f7fd f8f2 	bl	80085e0 <memset>
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}

0800b400 <__sfp_lock_acquire>:
 800b400:	4801      	ldr	r0, [pc, #4]	; (800b408 <__sfp_lock_acquire+0x8>)
 800b402:	f000 bc26 	b.w	800bc52 <__retarget_lock_acquire_recursive>
 800b406:	bf00      	nop
 800b408:	20002551 	.word	0x20002551

0800b40c <__sfp_lock_release>:
 800b40c:	4801      	ldr	r0, [pc, #4]	; (800b414 <__sfp_lock_release+0x8>)
 800b40e:	f000 bc21 	b.w	800bc54 <__retarget_lock_release_recursive>
 800b412:	bf00      	nop
 800b414:	20002551 	.word	0x20002551

0800b418 <__sinit_lock_acquire>:
 800b418:	4801      	ldr	r0, [pc, #4]	; (800b420 <__sinit_lock_acquire+0x8>)
 800b41a:	f000 bc1a 	b.w	800bc52 <__retarget_lock_acquire_recursive>
 800b41e:	bf00      	nop
 800b420:	20002552 	.word	0x20002552

0800b424 <__sinit_lock_release>:
 800b424:	4801      	ldr	r0, [pc, #4]	; (800b42c <__sinit_lock_release+0x8>)
 800b426:	f000 bc15 	b.w	800bc54 <__retarget_lock_release_recursive>
 800b42a:	bf00      	nop
 800b42c:	20002552 	.word	0x20002552

0800b430 <__sinit>:
 800b430:	b510      	push	{r4, lr}
 800b432:	4604      	mov	r4, r0
 800b434:	f7ff fff0 	bl	800b418 <__sinit_lock_acquire>
 800b438:	69a3      	ldr	r3, [r4, #24]
 800b43a:	b11b      	cbz	r3, 800b444 <__sinit+0x14>
 800b43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b440:	f7ff bff0 	b.w	800b424 <__sinit_lock_release>
 800b444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b448:	6523      	str	r3, [r4, #80]	; 0x50
 800b44a:	4b13      	ldr	r3, [pc, #76]	; (800b498 <__sinit+0x68>)
 800b44c:	4a13      	ldr	r2, [pc, #76]	; (800b49c <__sinit+0x6c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	62a2      	str	r2, [r4, #40]	; 0x28
 800b452:	42a3      	cmp	r3, r4
 800b454:	bf04      	itt	eq
 800b456:	2301      	moveq	r3, #1
 800b458:	61a3      	streq	r3, [r4, #24]
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 f820 	bl	800b4a0 <__sfp>
 800b460:	6060      	str	r0, [r4, #4]
 800b462:	4620      	mov	r0, r4
 800b464:	f000 f81c 	bl	800b4a0 <__sfp>
 800b468:	60a0      	str	r0, [r4, #8]
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 f818 	bl	800b4a0 <__sfp>
 800b470:	2200      	movs	r2, #0
 800b472:	60e0      	str	r0, [r4, #12]
 800b474:	2104      	movs	r1, #4
 800b476:	6860      	ldr	r0, [r4, #4]
 800b478:	f7ff ff82 	bl	800b380 <std>
 800b47c:	68a0      	ldr	r0, [r4, #8]
 800b47e:	2201      	movs	r2, #1
 800b480:	2109      	movs	r1, #9
 800b482:	f7ff ff7d 	bl	800b380 <std>
 800b486:	68e0      	ldr	r0, [r4, #12]
 800b488:	2202      	movs	r2, #2
 800b48a:	2112      	movs	r1, #18
 800b48c:	f7ff ff78 	bl	800b380 <std>
 800b490:	2301      	movs	r3, #1
 800b492:	61a3      	str	r3, [r4, #24]
 800b494:	e7d2      	b.n	800b43c <__sinit+0xc>
 800b496:	bf00      	nop
 800b498:	0800d9f8 	.word	0x0800d9f8
 800b49c:	0800b3c9 	.word	0x0800b3c9

0800b4a0 <__sfp>:
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	f7ff ffac 	bl	800b400 <__sfp_lock_acquire>
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <__sfp+0x84>)
 800b4aa:	681e      	ldr	r6, [r3, #0]
 800b4ac:	69b3      	ldr	r3, [r6, #24]
 800b4ae:	b913      	cbnz	r3, 800b4b6 <__sfp+0x16>
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ffbd 	bl	800b430 <__sinit>
 800b4b6:	3648      	adds	r6, #72	; 0x48
 800b4b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	d503      	bpl.n	800b4c8 <__sfp+0x28>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	b30b      	cbz	r3, 800b508 <__sfp+0x68>
 800b4c4:	6836      	ldr	r6, [r6, #0]
 800b4c6:	e7f7      	b.n	800b4b8 <__sfp+0x18>
 800b4c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4cc:	b9d5      	cbnz	r5, 800b504 <__sfp+0x64>
 800b4ce:	4b16      	ldr	r3, [pc, #88]	; (800b528 <__sfp+0x88>)
 800b4d0:	60e3      	str	r3, [r4, #12]
 800b4d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b4d8:	f000 fbba 	bl	800bc50 <__retarget_lock_init_recursive>
 800b4dc:	f7ff ff96 	bl	800b40c <__sfp_lock_release>
 800b4e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4e8:	6025      	str	r5, [r4, #0]
 800b4ea:	61a5      	str	r5, [r4, #24]
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4f4:	f7fd f874 	bl	80085e0 <memset>
 800b4f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b500:	4620      	mov	r0, r4
 800b502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b504:	3468      	adds	r4, #104	; 0x68
 800b506:	e7d9      	b.n	800b4bc <__sfp+0x1c>
 800b508:	2104      	movs	r1, #4
 800b50a:	4638      	mov	r0, r7
 800b50c:	f7ff ff62 	bl	800b3d4 <__sfmoreglue>
 800b510:	4604      	mov	r4, r0
 800b512:	6030      	str	r0, [r6, #0]
 800b514:	2800      	cmp	r0, #0
 800b516:	d1d5      	bne.n	800b4c4 <__sfp+0x24>
 800b518:	f7ff ff78 	bl	800b40c <__sfp_lock_release>
 800b51c:	230c      	movs	r3, #12
 800b51e:	603b      	str	r3, [r7, #0]
 800b520:	e7ee      	b.n	800b500 <__sfp+0x60>
 800b522:	bf00      	nop
 800b524:	0800d9f8 	.word	0x0800d9f8
 800b528:	ffff0001 	.word	0xffff0001

0800b52c <_fwalk_reent>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	4606      	mov	r6, r0
 800b532:	4688      	mov	r8, r1
 800b534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b538:	2700      	movs	r7, #0
 800b53a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b53e:	f1b9 0901 	subs.w	r9, r9, #1
 800b542:	d505      	bpl.n	800b550 <_fwalk_reent+0x24>
 800b544:	6824      	ldr	r4, [r4, #0]
 800b546:	2c00      	cmp	r4, #0
 800b548:	d1f7      	bne.n	800b53a <_fwalk_reent+0xe>
 800b54a:	4638      	mov	r0, r7
 800b54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b550:	89ab      	ldrh	r3, [r5, #12]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d907      	bls.n	800b566 <_fwalk_reent+0x3a>
 800b556:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b55a:	3301      	adds	r3, #1
 800b55c:	d003      	beq.n	800b566 <_fwalk_reent+0x3a>
 800b55e:	4629      	mov	r1, r5
 800b560:	4630      	mov	r0, r6
 800b562:	47c0      	blx	r8
 800b564:	4307      	orrs	r7, r0
 800b566:	3568      	adds	r5, #104	; 0x68
 800b568:	e7e9      	b.n	800b53e <_fwalk_reent+0x12>

0800b56a <rshift>:
 800b56a:	6903      	ldr	r3, [r0, #16]
 800b56c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b574:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b578:	f100 0414 	add.w	r4, r0, #20
 800b57c:	dd45      	ble.n	800b60a <rshift+0xa0>
 800b57e:	f011 011f 	ands.w	r1, r1, #31
 800b582:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b586:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b58a:	d10c      	bne.n	800b5a6 <rshift+0x3c>
 800b58c:	f100 0710 	add.w	r7, r0, #16
 800b590:	4629      	mov	r1, r5
 800b592:	42b1      	cmp	r1, r6
 800b594:	d334      	bcc.n	800b600 <rshift+0x96>
 800b596:	1a9b      	subs	r3, r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	1eea      	subs	r2, r5, #3
 800b59c:	4296      	cmp	r6, r2
 800b59e:	bf38      	it	cc
 800b5a0:	2300      	movcc	r3, #0
 800b5a2:	4423      	add	r3, r4
 800b5a4:	e015      	b.n	800b5d2 <rshift+0x68>
 800b5a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5aa:	f1c1 0820 	rsb	r8, r1, #32
 800b5ae:	40cf      	lsrs	r7, r1
 800b5b0:	f105 0e04 	add.w	lr, r5, #4
 800b5b4:	46a1      	mov	r9, r4
 800b5b6:	4576      	cmp	r6, lr
 800b5b8:	46f4      	mov	ip, lr
 800b5ba:	d815      	bhi.n	800b5e8 <rshift+0x7e>
 800b5bc:	1a9a      	subs	r2, r3, r2
 800b5be:	0092      	lsls	r2, r2, #2
 800b5c0:	3a04      	subs	r2, #4
 800b5c2:	3501      	adds	r5, #1
 800b5c4:	42ae      	cmp	r6, r5
 800b5c6:	bf38      	it	cc
 800b5c8:	2200      	movcc	r2, #0
 800b5ca:	18a3      	adds	r3, r4, r2
 800b5cc:	50a7      	str	r7, [r4, r2]
 800b5ce:	b107      	cbz	r7, 800b5d2 <rshift+0x68>
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	1b1a      	subs	r2, r3, r4
 800b5d4:	42a3      	cmp	r3, r4
 800b5d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b5da:	bf08      	it	eq
 800b5dc:	2300      	moveq	r3, #0
 800b5de:	6102      	str	r2, [r0, #16]
 800b5e0:	bf08      	it	eq
 800b5e2:	6143      	streq	r3, [r0, #20]
 800b5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e8:	f8dc c000 	ldr.w	ip, [ip]
 800b5ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800b5f0:	ea4c 0707 	orr.w	r7, ip, r7
 800b5f4:	f849 7b04 	str.w	r7, [r9], #4
 800b5f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5fc:	40cf      	lsrs	r7, r1
 800b5fe:	e7da      	b.n	800b5b6 <rshift+0x4c>
 800b600:	f851 cb04 	ldr.w	ip, [r1], #4
 800b604:	f847 cf04 	str.w	ip, [r7, #4]!
 800b608:	e7c3      	b.n	800b592 <rshift+0x28>
 800b60a:	4623      	mov	r3, r4
 800b60c:	e7e1      	b.n	800b5d2 <rshift+0x68>

0800b60e <__hexdig_fun>:
 800b60e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b612:	2b09      	cmp	r3, #9
 800b614:	d802      	bhi.n	800b61c <__hexdig_fun+0xe>
 800b616:	3820      	subs	r0, #32
 800b618:	b2c0      	uxtb	r0, r0
 800b61a:	4770      	bx	lr
 800b61c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b620:	2b05      	cmp	r3, #5
 800b622:	d801      	bhi.n	800b628 <__hexdig_fun+0x1a>
 800b624:	3847      	subs	r0, #71	; 0x47
 800b626:	e7f7      	b.n	800b618 <__hexdig_fun+0xa>
 800b628:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d801      	bhi.n	800b634 <__hexdig_fun+0x26>
 800b630:	3827      	subs	r0, #39	; 0x27
 800b632:	e7f1      	b.n	800b618 <__hexdig_fun+0xa>
 800b634:	2000      	movs	r0, #0
 800b636:	4770      	bx	lr

0800b638 <__gethex>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	ed2d 8b02 	vpush	{d8}
 800b640:	b089      	sub	sp, #36	; 0x24
 800b642:	ee08 0a10 	vmov	s16, r0
 800b646:	9304      	str	r3, [sp, #16]
 800b648:	4bb4      	ldr	r3, [pc, #720]	; (800b91c <__gethex+0x2e4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	4618      	mov	r0, r3
 800b650:	468b      	mov	fp, r1
 800b652:	4690      	mov	r8, r2
 800b654:	f7f4 fdbc 	bl	80001d0 <strlen>
 800b658:	9b01      	ldr	r3, [sp, #4]
 800b65a:	f8db 2000 	ldr.w	r2, [fp]
 800b65e:	4403      	add	r3, r0
 800b660:	4682      	mov	sl, r0
 800b662:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b666:	9305      	str	r3, [sp, #20]
 800b668:	1c93      	adds	r3, r2, #2
 800b66a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b66e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b672:	32fe      	adds	r2, #254	; 0xfe
 800b674:	18d1      	adds	r1, r2, r3
 800b676:	461f      	mov	r7, r3
 800b678:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b67c:	9100      	str	r1, [sp, #0]
 800b67e:	2830      	cmp	r0, #48	; 0x30
 800b680:	d0f8      	beq.n	800b674 <__gethex+0x3c>
 800b682:	f7ff ffc4 	bl	800b60e <__hexdig_fun>
 800b686:	4604      	mov	r4, r0
 800b688:	2800      	cmp	r0, #0
 800b68a:	d13a      	bne.n	800b702 <__gethex+0xca>
 800b68c:	9901      	ldr	r1, [sp, #4]
 800b68e:	4652      	mov	r2, sl
 800b690:	4638      	mov	r0, r7
 800b692:	f001 fb3c 	bl	800cd0e <strncmp>
 800b696:	4605      	mov	r5, r0
 800b698:	2800      	cmp	r0, #0
 800b69a:	d168      	bne.n	800b76e <__gethex+0x136>
 800b69c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b6a0:	eb07 060a 	add.w	r6, r7, sl
 800b6a4:	f7ff ffb3 	bl	800b60e <__hexdig_fun>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d062      	beq.n	800b772 <__gethex+0x13a>
 800b6ac:	4633      	mov	r3, r6
 800b6ae:	7818      	ldrb	r0, [r3, #0]
 800b6b0:	2830      	cmp	r0, #48	; 0x30
 800b6b2:	461f      	mov	r7, r3
 800b6b4:	f103 0301 	add.w	r3, r3, #1
 800b6b8:	d0f9      	beq.n	800b6ae <__gethex+0x76>
 800b6ba:	f7ff ffa8 	bl	800b60e <__hexdig_fun>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	fab0 f480 	clz	r4, r0
 800b6c4:	0964      	lsrs	r4, r4, #5
 800b6c6:	4635      	mov	r5, r6
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	463a      	mov	r2, r7
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	3201      	adds	r2, #1
 800b6d0:	7830      	ldrb	r0, [r6, #0]
 800b6d2:	f7ff ff9c 	bl	800b60e <__hexdig_fun>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d1f8      	bne.n	800b6cc <__gethex+0x94>
 800b6da:	9901      	ldr	r1, [sp, #4]
 800b6dc:	4652      	mov	r2, sl
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f001 fb15 	bl	800cd0e <strncmp>
 800b6e4:	b980      	cbnz	r0, 800b708 <__gethex+0xd0>
 800b6e6:	b94d      	cbnz	r5, 800b6fc <__gethex+0xc4>
 800b6e8:	eb06 050a 	add.w	r5, r6, sl
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4616      	mov	r6, r2
 800b6f0:	3201      	adds	r2, #1
 800b6f2:	7830      	ldrb	r0, [r6, #0]
 800b6f4:	f7ff ff8b 	bl	800b60e <__hexdig_fun>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1f8      	bne.n	800b6ee <__gethex+0xb6>
 800b6fc:	1bad      	subs	r5, r5, r6
 800b6fe:	00ad      	lsls	r5, r5, #2
 800b700:	e004      	b.n	800b70c <__gethex+0xd4>
 800b702:	2400      	movs	r4, #0
 800b704:	4625      	mov	r5, r4
 800b706:	e7e0      	b.n	800b6ca <__gethex+0x92>
 800b708:	2d00      	cmp	r5, #0
 800b70a:	d1f7      	bne.n	800b6fc <__gethex+0xc4>
 800b70c:	7833      	ldrb	r3, [r6, #0]
 800b70e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b712:	2b50      	cmp	r3, #80	; 0x50
 800b714:	d13b      	bne.n	800b78e <__gethex+0x156>
 800b716:	7873      	ldrb	r3, [r6, #1]
 800b718:	2b2b      	cmp	r3, #43	; 0x2b
 800b71a:	d02c      	beq.n	800b776 <__gethex+0x13e>
 800b71c:	2b2d      	cmp	r3, #45	; 0x2d
 800b71e:	d02e      	beq.n	800b77e <__gethex+0x146>
 800b720:	1c71      	adds	r1, r6, #1
 800b722:	f04f 0900 	mov.w	r9, #0
 800b726:	7808      	ldrb	r0, [r1, #0]
 800b728:	f7ff ff71 	bl	800b60e <__hexdig_fun>
 800b72c:	1e43      	subs	r3, r0, #1
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b18      	cmp	r3, #24
 800b732:	d82c      	bhi.n	800b78e <__gethex+0x156>
 800b734:	f1a0 0210 	sub.w	r2, r0, #16
 800b738:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b73c:	f7ff ff67 	bl	800b60e <__hexdig_fun>
 800b740:	1e43      	subs	r3, r0, #1
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b18      	cmp	r3, #24
 800b746:	d91d      	bls.n	800b784 <__gethex+0x14c>
 800b748:	f1b9 0f00 	cmp.w	r9, #0
 800b74c:	d000      	beq.n	800b750 <__gethex+0x118>
 800b74e:	4252      	negs	r2, r2
 800b750:	4415      	add	r5, r2
 800b752:	f8cb 1000 	str.w	r1, [fp]
 800b756:	b1e4      	cbz	r4, 800b792 <__gethex+0x15a>
 800b758:	9b00      	ldr	r3, [sp, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bf14      	ite	ne
 800b75e:	2700      	movne	r7, #0
 800b760:	2706      	moveq	r7, #6
 800b762:	4638      	mov	r0, r7
 800b764:	b009      	add	sp, #36	; 0x24
 800b766:	ecbd 8b02 	vpop	{d8}
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	463e      	mov	r6, r7
 800b770:	4625      	mov	r5, r4
 800b772:	2401      	movs	r4, #1
 800b774:	e7ca      	b.n	800b70c <__gethex+0xd4>
 800b776:	f04f 0900 	mov.w	r9, #0
 800b77a:	1cb1      	adds	r1, r6, #2
 800b77c:	e7d3      	b.n	800b726 <__gethex+0xee>
 800b77e:	f04f 0901 	mov.w	r9, #1
 800b782:	e7fa      	b.n	800b77a <__gethex+0x142>
 800b784:	230a      	movs	r3, #10
 800b786:	fb03 0202 	mla	r2, r3, r2, r0
 800b78a:	3a10      	subs	r2, #16
 800b78c:	e7d4      	b.n	800b738 <__gethex+0x100>
 800b78e:	4631      	mov	r1, r6
 800b790:	e7df      	b.n	800b752 <__gethex+0x11a>
 800b792:	1bf3      	subs	r3, r6, r7
 800b794:	3b01      	subs	r3, #1
 800b796:	4621      	mov	r1, r4
 800b798:	2b07      	cmp	r3, #7
 800b79a:	dc0b      	bgt.n	800b7b4 <__gethex+0x17c>
 800b79c:	ee18 0a10 	vmov	r0, s16
 800b7a0:	f000 fadc 	bl	800bd5c <_Balloc>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	b940      	cbnz	r0, 800b7ba <__gethex+0x182>
 800b7a8:	4b5d      	ldr	r3, [pc, #372]	; (800b920 <__gethex+0x2e8>)
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	21de      	movs	r1, #222	; 0xde
 800b7ae:	485d      	ldr	r0, [pc, #372]	; (800b924 <__gethex+0x2ec>)
 800b7b0:	f001 fae0 	bl	800cd74 <__assert_func>
 800b7b4:	3101      	adds	r1, #1
 800b7b6:	105b      	asrs	r3, r3, #1
 800b7b8:	e7ee      	b.n	800b798 <__gethex+0x160>
 800b7ba:	f100 0914 	add.w	r9, r0, #20
 800b7be:	f04f 0b00 	mov.w	fp, #0
 800b7c2:	f1ca 0301 	rsb	r3, sl, #1
 800b7c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7ca:	f8cd b000 	str.w	fp, [sp]
 800b7ce:	9306      	str	r3, [sp, #24]
 800b7d0:	42b7      	cmp	r7, r6
 800b7d2:	d340      	bcc.n	800b856 <__gethex+0x21e>
 800b7d4:	9802      	ldr	r0, [sp, #8]
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	f840 3b04 	str.w	r3, [r0], #4
 800b7dc:	eba0 0009 	sub.w	r0, r0, r9
 800b7e0:	1080      	asrs	r0, r0, #2
 800b7e2:	0146      	lsls	r6, r0, #5
 800b7e4:	6120      	str	r0, [r4, #16]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fbaa 	bl	800bf40 <__hi0bits>
 800b7ec:	1a30      	subs	r0, r6, r0
 800b7ee:	f8d8 6000 	ldr.w	r6, [r8]
 800b7f2:	42b0      	cmp	r0, r6
 800b7f4:	dd63      	ble.n	800b8be <__gethex+0x286>
 800b7f6:	1b87      	subs	r7, r0, r6
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 ff4e 	bl	800c69c <__any_on>
 800b800:	4682      	mov	sl, r0
 800b802:	b1a8      	cbz	r0, 800b830 <__gethex+0x1f8>
 800b804:	1e7b      	subs	r3, r7, #1
 800b806:	1159      	asrs	r1, r3, #5
 800b808:	f003 021f 	and.w	r2, r3, #31
 800b80c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b810:	f04f 0a01 	mov.w	sl, #1
 800b814:	fa0a f202 	lsl.w	r2, sl, r2
 800b818:	420a      	tst	r2, r1
 800b81a:	d009      	beq.n	800b830 <__gethex+0x1f8>
 800b81c:	4553      	cmp	r3, sl
 800b81e:	dd05      	ble.n	800b82c <__gethex+0x1f4>
 800b820:	1eb9      	subs	r1, r7, #2
 800b822:	4620      	mov	r0, r4
 800b824:	f000 ff3a 	bl	800c69c <__any_on>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d145      	bne.n	800b8b8 <__gethex+0x280>
 800b82c:	f04f 0a02 	mov.w	sl, #2
 800b830:	4639      	mov	r1, r7
 800b832:	4620      	mov	r0, r4
 800b834:	f7ff fe99 	bl	800b56a <rshift>
 800b838:	443d      	add	r5, r7
 800b83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b83e:	42ab      	cmp	r3, r5
 800b840:	da4c      	bge.n	800b8dc <__gethex+0x2a4>
 800b842:	ee18 0a10 	vmov	r0, s16
 800b846:	4621      	mov	r1, r4
 800b848:	f000 fac8 	bl	800bddc <_Bfree>
 800b84c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b84e:	2300      	movs	r3, #0
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	27a3      	movs	r7, #163	; 0xa3
 800b854:	e785      	b.n	800b762 <__gethex+0x12a>
 800b856:	1e73      	subs	r3, r6, #1
 800b858:	9a05      	ldr	r2, [sp, #20]
 800b85a:	9303      	str	r3, [sp, #12]
 800b85c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b860:	4293      	cmp	r3, r2
 800b862:	d019      	beq.n	800b898 <__gethex+0x260>
 800b864:	f1bb 0f20 	cmp.w	fp, #32
 800b868:	d107      	bne.n	800b87a <__gethex+0x242>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	9a00      	ldr	r2, [sp, #0]
 800b86e:	f843 2b04 	str.w	r2, [r3], #4
 800b872:	9302      	str	r3, [sp, #8]
 800b874:	2300      	movs	r3, #0
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	469b      	mov	fp, r3
 800b87a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b87e:	f7ff fec6 	bl	800b60e <__hexdig_fun>
 800b882:	9b00      	ldr	r3, [sp, #0]
 800b884:	f000 000f 	and.w	r0, r0, #15
 800b888:	fa00 f00b 	lsl.w	r0, r0, fp
 800b88c:	4303      	orrs	r3, r0
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	f10b 0b04 	add.w	fp, fp, #4
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	e00d      	b.n	800b8b4 <__gethex+0x27c>
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	9a06      	ldr	r2, [sp, #24]
 800b89c:	4413      	add	r3, r2
 800b89e:	42bb      	cmp	r3, r7
 800b8a0:	d3e0      	bcc.n	800b864 <__gethex+0x22c>
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	9901      	ldr	r1, [sp, #4]
 800b8a6:	9307      	str	r3, [sp, #28]
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	f001 fa30 	bl	800cd0e <strncmp>
 800b8ae:	9b07      	ldr	r3, [sp, #28]
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d1d7      	bne.n	800b864 <__gethex+0x22c>
 800b8b4:	461e      	mov	r6, r3
 800b8b6:	e78b      	b.n	800b7d0 <__gethex+0x198>
 800b8b8:	f04f 0a03 	mov.w	sl, #3
 800b8bc:	e7b8      	b.n	800b830 <__gethex+0x1f8>
 800b8be:	da0a      	bge.n	800b8d6 <__gethex+0x29e>
 800b8c0:	1a37      	subs	r7, r6, r0
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	ee18 0a10 	vmov	r0, s16
 800b8c8:	463a      	mov	r2, r7
 800b8ca:	f000 fca3 	bl	800c214 <__lshift>
 800b8ce:	1bed      	subs	r5, r5, r7
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	f100 0914 	add.w	r9, r0, #20
 800b8d6:	f04f 0a00 	mov.w	sl, #0
 800b8da:	e7ae      	b.n	800b83a <__gethex+0x202>
 800b8dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b8e0:	42a8      	cmp	r0, r5
 800b8e2:	dd72      	ble.n	800b9ca <__gethex+0x392>
 800b8e4:	1b45      	subs	r5, r0, r5
 800b8e6:	42ae      	cmp	r6, r5
 800b8e8:	dc36      	bgt.n	800b958 <__gethex+0x320>
 800b8ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d02a      	beq.n	800b948 <__gethex+0x310>
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d02c      	beq.n	800b950 <__gethex+0x318>
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d11c      	bne.n	800b934 <__gethex+0x2fc>
 800b8fa:	42ae      	cmp	r6, r5
 800b8fc:	d11a      	bne.n	800b934 <__gethex+0x2fc>
 800b8fe:	2e01      	cmp	r6, #1
 800b900:	d112      	bne.n	800b928 <__gethex+0x2f0>
 800b902:	9a04      	ldr	r2, [sp, #16]
 800b904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	2301      	movs	r3, #1
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	f8c9 3000 	str.w	r3, [r9]
 800b912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b914:	2762      	movs	r7, #98	; 0x62
 800b916:	601c      	str	r4, [r3, #0]
 800b918:	e723      	b.n	800b762 <__gethex+0x12a>
 800b91a:	bf00      	nop
 800b91c:	0800dce4 	.word	0x0800dce4
 800b920:	0800dc08 	.word	0x0800dc08
 800b924:	0800dc7c 	.word	0x0800dc7c
 800b928:	1e71      	subs	r1, r6, #1
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 feb6 	bl	800c69c <__any_on>
 800b930:	2800      	cmp	r0, #0
 800b932:	d1e6      	bne.n	800b902 <__gethex+0x2ca>
 800b934:	ee18 0a10 	vmov	r0, s16
 800b938:	4621      	mov	r1, r4
 800b93a:	f000 fa4f 	bl	800bddc <_Bfree>
 800b93e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b940:	2300      	movs	r3, #0
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	2750      	movs	r7, #80	; 0x50
 800b946:	e70c      	b.n	800b762 <__gethex+0x12a>
 800b948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1f2      	bne.n	800b934 <__gethex+0x2fc>
 800b94e:	e7d8      	b.n	800b902 <__gethex+0x2ca>
 800b950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1d5      	bne.n	800b902 <__gethex+0x2ca>
 800b956:	e7ed      	b.n	800b934 <__gethex+0x2fc>
 800b958:	1e6f      	subs	r7, r5, #1
 800b95a:	f1ba 0f00 	cmp.w	sl, #0
 800b95e:	d131      	bne.n	800b9c4 <__gethex+0x38c>
 800b960:	b127      	cbz	r7, 800b96c <__gethex+0x334>
 800b962:	4639      	mov	r1, r7
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fe99 	bl	800c69c <__any_on>
 800b96a:	4682      	mov	sl, r0
 800b96c:	117b      	asrs	r3, r7, #5
 800b96e:	2101      	movs	r1, #1
 800b970:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b974:	f007 071f 	and.w	r7, r7, #31
 800b978:	fa01 f707 	lsl.w	r7, r1, r7
 800b97c:	421f      	tst	r7, r3
 800b97e:	4629      	mov	r1, r5
 800b980:	4620      	mov	r0, r4
 800b982:	bf18      	it	ne
 800b984:	f04a 0a02 	orrne.w	sl, sl, #2
 800b988:	1b76      	subs	r6, r6, r5
 800b98a:	f7ff fdee 	bl	800b56a <rshift>
 800b98e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b992:	2702      	movs	r7, #2
 800b994:	f1ba 0f00 	cmp.w	sl, #0
 800b998:	d048      	beq.n	800ba2c <__gethex+0x3f4>
 800b99a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d015      	beq.n	800b9ce <__gethex+0x396>
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d017      	beq.n	800b9d6 <__gethex+0x39e>
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d109      	bne.n	800b9be <__gethex+0x386>
 800b9aa:	f01a 0f02 	tst.w	sl, #2
 800b9ae:	d006      	beq.n	800b9be <__gethex+0x386>
 800b9b0:	f8d9 0000 	ldr.w	r0, [r9]
 800b9b4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b9b8:	f01a 0f01 	tst.w	sl, #1
 800b9bc:	d10e      	bne.n	800b9dc <__gethex+0x3a4>
 800b9be:	f047 0710 	orr.w	r7, r7, #16
 800b9c2:	e033      	b.n	800ba2c <__gethex+0x3f4>
 800b9c4:	f04f 0a01 	mov.w	sl, #1
 800b9c8:	e7d0      	b.n	800b96c <__gethex+0x334>
 800b9ca:	2701      	movs	r7, #1
 800b9cc:	e7e2      	b.n	800b994 <__gethex+0x35c>
 800b9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9d0:	f1c3 0301 	rsb	r3, r3, #1
 800b9d4:	9315      	str	r3, [sp, #84]	; 0x54
 800b9d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0f0      	beq.n	800b9be <__gethex+0x386>
 800b9dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b9e0:	f104 0314 	add.w	r3, r4, #20
 800b9e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b9e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b9ec:	f04f 0c00 	mov.w	ip, #0
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b9fa:	d01c      	beq.n	800ba36 <__gethex+0x3fe>
 800b9fc:	3201      	adds	r2, #1
 800b9fe:	6002      	str	r2, [r0, #0]
 800ba00:	2f02      	cmp	r7, #2
 800ba02:	f104 0314 	add.w	r3, r4, #20
 800ba06:	d13f      	bne.n	800ba88 <__gethex+0x450>
 800ba08:	f8d8 2000 	ldr.w	r2, [r8]
 800ba0c:	3a01      	subs	r2, #1
 800ba0e:	42b2      	cmp	r2, r6
 800ba10:	d10a      	bne.n	800ba28 <__gethex+0x3f0>
 800ba12:	1171      	asrs	r1, r6, #5
 800ba14:	2201      	movs	r2, #1
 800ba16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba1a:	f006 061f 	and.w	r6, r6, #31
 800ba1e:	fa02 f606 	lsl.w	r6, r2, r6
 800ba22:	421e      	tst	r6, r3
 800ba24:	bf18      	it	ne
 800ba26:	4617      	movne	r7, r2
 800ba28:	f047 0720 	orr.w	r7, r7, #32
 800ba2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba2e:	601c      	str	r4, [r3, #0]
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	601d      	str	r5, [r3, #0]
 800ba34:	e695      	b.n	800b762 <__gethex+0x12a>
 800ba36:	4299      	cmp	r1, r3
 800ba38:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba3c:	d8d8      	bhi.n	800b9f0 <__gethex+0x3b8>
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	459b      	cmp	fp, r3
 800ba42:	db19      	blt.n	800ba78 <__gethex+0x440>
 800ba44:	6861      	ldr	r1, [r4, #4]
 800ba46:	ee18 0a10 	vmov	r0, s16
 800ba4a:	3101      	adds	r1, #1
 800ba4c:	f000 f986 	bl	800bd5c <_Balloc>
 800ba50:	4681      	mov	r9, r0
 800ba52:	b918      	cbnz	r0, 800ba5c <__gethex+0x424>
 800ba54:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <__gethex+0x488>)
 800ba56:	4602      	mov	r2, r0
 800ba58:	2184      	movs	r1, #132	; 0x84
 800ba5a:	e6a8      	b.n	800b7ae <__gethex+0x176>
 800ba5c:	6922      	ldr	r2, [r4, #16]
 800ba5e:	3202      	adds	r2, #2
 800ba60:	f104 010c 	add.w	r1, r4, #12
 800ba64:	0092      	lsls	r2, r2, #2
 800ba66:	300c      	adds	r0, #12
 800ba68:	f7fc fdac 	bl	80085c4 <memcpy>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	ee18 0a10 	vmov	r0, s16
 800ba72:	f000 f9b3 	bl	800bddc <_Bfree>
 800ba76:	464c      	mov	r4, r9
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba80:	6122      	str	r2, [r4, #16]
 800ba82:	2201      	movs	r2, #1
 800ba84:	615a      	str	r2, [r3, #20]
 800ba86:	e7bb      	b.n	800ba00 <__gethex+0x3c8>
 800ba88:	6922      	ldr	r2, [r4, #16]
 800ba8a:	455a      	cmp	r2, fp
 800ba8c:	dd0b      	ble.n	800baa6 <__gethex+0x46e>
 800ba8e:	2101      	movs	r1, #1
 800ba90:	4620      	mov	r0, r4
 800ba92:	f7ff fd6a 	bl	800b56a <rshift>
 800ba96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba9a:	3501      	adds	r5, #1
 800ba9c:	42ab      	cmp	r3, r5
 800ba9e:	f6ff aed0 	blt.w	800b842 <__gethex+0x20a>
 800baa2:	2701      	movs	r7, #1
 800baa4:	e7c0      	b.n	800ba28 <__gethex+0x3f0>
 800baa6:	f016 061f 	ands.w	r6, r6, #31
 800baaa:	d0fa      	beq.n	800baa2 <__gethex+0x46a>
 800baac:	4453      	add	r3, sl
 800baae:	f1c6 0620 	rsb	r6, r6, #32
 800bab2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bab6:	f000 fa43 	bl	800bf40 <__hi0bits>
 800baba:	42b0      	cmp	r0, r6
 800babc:	dbe7      	blt.n	800ba8e <__gethex+0x456>
 800babe:	e7f0      	b.n	800baa2 <__gethex+0x46a>
 800bac0:	0800dc08 	.word	0x0800dc08

0800bac4 <L_shift>:
 800bac4:	f1c2 0208 	rsb	r2, r2, #8
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	b570      	push	{r4, r5, r6, lr}
 800bacc:	f1c2 0620 	rsb	r6, r2, #32
 800bad0:	6843      	ldr	r3, [r0, #4]
 800bad2:	6804      	ldr	r4, [r0, #0]
 800bad4:	fa03 f506 	lsl.w	r5, r3, r6
 800bad8:	432c      	orrs	r4, r5
 800bada:	40d3      	lsrs	r3, r2
 800badc:	6004      	str	r4, [r0, #0]
 800bade:	f840 3f04 	str.w	r3, [r0, #4]!
 800bae2:	4288      	cmp	r0, r1
 800bae4:	d3f4      	bcc.n	800bad0 <L_shift+0xc>
 800bae6:	bd70      	pop	{r4, r5, r6, pc}

0800bae8 <__match>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6803      	ldr	r3, [r0, #0]
 800baec:	3301      	adds	r3, #1
 800baee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf2:	b914      	cbnz	r4, 800bafa <__match+0x12>
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	2001      	movs	r0, #1
 800baf8:	bd30      	pop	{r4, r5, pc}
 800bafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb02:	2d19      	cmp	r5, #25
 800bb04:	bf98      	it	ls
 800bb06:	3220      	addls	r2, #32
 800bb08:	42a2      	cmp	r2, r4
 800bb0a:	d0f0      	beq.n	800baee <__match+0x6>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e7f3      	b.n	800baf8 <__match+0x10>

0800bb10 <__hexnan>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	680b      	ldr	r3, [r1, #0]
 800bb16:	115e      	asrs	r6, r3, #5
 800bb18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb1c:	f013 031f 	ands.w	r3, r3, #31
 800bb20:	b087      	sub	sp, #28
 800bb22:	bf18      	it	ne
 800bb24:	3604      	addne	r6, #4
 800bb26:	2500      	movs	r5, #0
 800bb28:	1f37      	subs	r7, r6, #4
 800bb2a:	4690      	mov	r8, r2
 800bb2c:	6802      	ldr	r2, [r0, #0]
 800bb2e:	9301      	str	r3, [sp, #4]
 800bb30:	4682      	mov	sl, r0
 800bb32:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb36:	46b9      	mov	r9, r7
 800bb38:	463c      	mov	r4, r7
 800bb3a:	9502      	str	r5, [sp, #8]
 800bb3c:	46ab      	mov	fp, r5
 800bb3e:	7851      	ldrb	r1, [r2, #1]
 800bb40:	1c53      	adds	r3, r2, #1
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	b341      	cbz	r1, 800bb98 <__hexnan+0x88>
 800bb46:	4608      	mov	r0, r1
 800bb48:	9205      	str	r2, [sp, #20]
 800bb4a:	9104      	str	r1, [sp, #16]
 800bb4c:	f7ff fd5f 	bl	800b60e <__hexdig_fun>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d14f      	bne.n	800bbf4 <__hexnan+0xe4>
 800bb54:	9904      	ldr	r1, [sp, #16]
 800bb56:	9a05      	ldr	r2, [sp, #20]
 800bb58:	2920      	cmp	r1, #32
 800bb5a:	d818      	bhi.n	800bb8e <__hexnan+0x7e>
 800bb5c:	9b02      	ldr	r3, [sp, #8]
 800bb5e:	459b      	cmp	fp, r3
 800bb60:	dd13      	ble.n	800bb8a <__hexnan+0x7a>
 800bb62:	454c      	cmp	r4, r9
 800bb64:	d206      	bcs.n	800bb74 <__hexnan+0x64>
 800bb66:	2d07      	cmp	r5, #7
 800bb68:	dc04      	bgt.n	800bb74 <__hexnan+0x64>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff ffa8 	bl	800bac4 <L_shift>
 800bb74:	4544      	cmp	r4, r8
 800bb76:	d950      	bls.n	800bc1a <__hexnan+0x10a>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb82:	f8cd b008 	str.w	fp, [sp, #8]
 800bb86:	464c      	mov	r4, r9
 800bb88:	461d      	mov	r5, r3
 800bb8a:	9a03      	ldr	r2, [sp, #12]
 800bb8c:	e7d7      	b.n	800bb3e <__hexnan+0x2e>
 800bb8e:	2929      	cmp	r1, #41	; 0x29
 800bb90:	d156      	bne.n	800bc40 <__hexnan+0x130>
 800bb92:	3202      	adds	r2, #2
 800bb94:	f8ca 2000 	str.w	r2, [sl]
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	d050      	beq.n	800bc40 <__hexnan+0x130>
 800bb9e:	454c      	cmp	r4, r9
 800bba0:	d206      	bcs.n	800bbb0 <__hexnan+0xa0>
 800bba2:	2d07      	cmp	r5, #7
 800bba4:	dc04      	bgt.n	800bbb0 <__hexnan+0xa0>
 800bba6:	462a      	mov	r2, r5
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff ff8a 	bl	800bac4 <L_shift>
 800bbb0:	4544      	cmp	r4, r8
 800bbb2:	d934      	bls.n	800bc1e <__hexnan+0x10e>
 800bbb4:	f1a8 0204 	sub.w	r2, r8, #4
 800bbb8:	4623      	mov	r3, r4
 800bbba:	f853 1b04 	ldr.w	r1, [r3], #4
 800bbbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800bbc2:	429f      	cmp	r7, r3
 800bbc4:	d2f9      	bcs.n	800bbba <__hexnan+0xaa>
 800bbc6:	1b3b      	subs	r3, r7, r4
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	3304      	adds	r3, #4
 800bbce:	3401      	adds	r4, #1
 800bbd0:	3e03      	subs	r6, #3
 800bbd2:	42b4      	cmp	r4, r6
 800bbd4:	bf88      	it	hi
 800bbd6:	2304      	movhi	r3, #4
 800bbd8:	4443      	add	r3, r8
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f843 2b04 	str.w	r2, [r3], #4
 800bbe0:	429f      	cmp	r7, r3
 800bbe2:	d2fb      	bcs.n	800bbdc <__hexnan+0xcc>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	b91b      	cbnz	r3, 800bbf0 <__hexnan+0xe0>
 800bbe8:	4547      	cmp	r7, r8
 800bbea:	d127      	bne.n	800bc3c <__hexnan+0x12c>
 800bbec:	2301      	movs	r3, #1
 800bbee:	603b      	str	r3, [r7, #0]
 800bbf0:	2005      	movs	r0, #5
 800bbf2:	e026      	b.n	800bc42 <__hexnan+0x132>
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	2d08      	cmp	r5, #8
 800bbf8:	f10b 0b01 	add.w	fp, fp, #1
 800bbfc:	dd06      	ble.n	800bc0c <__hexnan+0xfc>
 800bbfe:	4544      	cmp	r4, r8
 800bc00:	d9c3      	bls.n	800bb8a <__hexnan+0x7a>
 800bc02:	2300      	movs	r3, #0
 800bc04:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc08:	2501      	movs	r5, #1
 800bc0a:	3c04      	subs	r4, #4
 800bc0c:	6822      	ldr	r2, [r4, #0]
 800bc0e:	f000 000f 	and.w	r0, r0, #15
 800bc12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc16:	6022      	str	r2, [r4, #0]
 800bc18:	e7b7      	b.n	800bb8a <__hexnan+0x7a>
 800bc1a:	2508      	movs	r5, #8
 800bc1c:	e7b5      	b.n	800bb8a <__hexnan+0x7a>
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0df      	beq.n	800bbe4 <__hexnan+0xd4>
 800bc24:	f04f 32ff 	mov.w	r2, #4294967295
 800bc28:	f1c3 0320 	rsb	r3, r3, #32
 800bc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc34:	401a      	ands	r2, r3
 800bc36:	f846 2c04 	str.w	r2, [r6, #-4]
 800bc3a:	e7d3      	b.n	800bbe4 <__hexnan+0xd4>
 800bc3c:	3f04      	subs	r7, #4
 800bc3e:	e7d1      	b.n	800bbe4 <__hexnan+0xd4>
 800bc40:	2004      	movs	r0, #4
 800bc42:	b007      	add	sp, #28
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc48 <_localeconv_r>:
 800bc48:	4800      	ldr	r0, [pc, #0]	; (800bc4c <_localeconv_r+0x4>)
 800bc4a:	4770      	bx	lr
 800bc4c:	200001a4 	.word	0x200001a4

0800bc50 <__retarget_lock_init_recursive>:
 800bc50:	4770      	bx	lr

0800bc52 <__retarget_lock_acquire_recursive>:
 800bc52:	4770      	bx	lr

0800bc54 <__retarget_lock_release_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__swhatbuf_r>:
 800bc56:	b570      	push	{r4, r5, r6, lr}
 800bc58:	460e      	mov	r6, r1
 800bc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	b096      	sub	sp, #88	; 0x58
 800bc62:	4614      	mov	r4, r2
 800bc64:	461d      	mov	r5, r3
 800bc66:	da08      	bge.n	800bc7a <__swhatbuf_r+0x24>
 800bc68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	602a      	str	r2, [r5, #0]
 800bc70:	061a      	lsls	r2, r3, #24
 800bc72:	d410      	bmi.n	800bc96 <__swhatbuf_r+0x40>
 800bc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc78:	e00e      	b.n	800bc98 <__swhatbuf_r+0x42>
 800bc7a:	466a      	mov	r2, sp
 800bc7c:	f001 f8ba 	bl	800cdf4 <_fstat_r>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	dbf1      	blt.n	800bc68 <__swhatbuf_r+0x12>
 800bc84:	9a01      	ldr	r2, [sp, #4]
 800bc86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc8e:	425a      	negs	r2, r3
 800bc90:	415a      	adcs	r2, r3
 800bc92:	602a      	str	r2, [r5, #0]
 800bc94:	e7ee      	b.n	800bc74 <__swhatbuf_r+0x1e>
 800bc96:	2340      	movs	r3, #64	; 0x40
 800bc98:	2000      	movs	r0, #0
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	b016      	add	sp, #88	; 0x58
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}

0800bca0 <__smakebuf_r>:
 800bca0:	898b      	ldrh	r3, [r1, #12]
 800bca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bca4:	079d      	lsls	r5, r3, #30
 800bca6:	4606      	mov	r6, r0
 800bca8:	460c      	mov	r4, r1
 800bcaa:	d507      	bpl.n	800bcbc <__smakebuf_r+0x1c>
 800bcac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	6163      	str	r3, [r4, #20]
 800bcb8:	b002      	add	sp, #8
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	ab01      	add	r3, sp, #4
 800bcbe:	466a      	mov	r2, sp
 800bcc0:	f7ff ffc9 	bl	800bc56 <__swhatbuf_r>
 800bcc4:	9900      	ldr	r1, [sp, #0]
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7fc fcfd 	bl	80086c8 <_malloc_r>
 800bcce:	b948      	cbnz	r0, 800bce4 <__smakebuf_r+0x44>
 800bcd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d4ef      	bmi.n	800bcb8 <__smakebuf_r+0x18>
 800bcd8:	f023 0303 	bic.w	r3, r3, #3
 800bcdc:	f043 0302 	orr.w	r3, r3, #2
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	e7e3      	b.n	800bcac <__smakebuf_r+0xc>
 800bce4:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <__smakebuf_r+0x7c>)
 800bce6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	6020      	str	r0, [r4, #0]
 800bcec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	9b00      	ldr	r3, [sp, #0]
 800bcf4:	6163      	str	r3, [r4, #20]
 800bcf6:	9b01      	ldr	r3, [sp, #4]
 800bcf8:	6120      	str	r0, [r4, #16]
 800bcfa:	b15b      	cbz	r3, 800bd14 <__smakebuf_r+0x74>
 800bcfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd00:	4630      	mov	r0, r6
 800bd02:	f001 f889 	bl	800ce18 <_isatty_r>
 800bd06:	b128      	cbz	r0, 800bd14 <__smakebuf_r+0x74>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	f023 0303 	bic.w	r3, r3, #3
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	89a0      	ldrh	r0, [r4, #12]
 800bd16:	4305      	orrs	r5, r0
 800bd18:	81a5      	strh	r5, [r4, #12]
 800bd1a:	e7cd      	b.n	800bcb8 <__smakebuf_r+0x18>
 800bd1c:	0800b3c9 	.word	0x0800b3c9

0800bd20 <__ascii_mbtowc>:
 800bd20:	b082      	sub	sp, #8
 800bd22:	b901      	cbnz	r1, 800bd26 <__ascii_mbtowc+0x6>
 800bd24:	a901      	add	r1, sp, #4
 800bd26:	b142      	cbz	r2, 800bd3a <__ascii_mbtowc+0x1a>
 800bd28:	b14b      	cbz	r3, 800bd3e <__ascii_mbtowc+0x1e>
 800bd2a:	7813      	ldrb	r3, [r2, #0]
 800bd2c:	600b      	str	r3, [r1, #0]
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	1e10      	subs	r0, r2, #0
 800bd32:	bf18      	it	ne
 800bd34:	2001      	movne	r0, #1
 800bd36:	b002      	add	sp, #8
 800bd38:	4770      	bx	lr
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	e7fb      	b.n	800bd36 <__ascii_mbtowc+0x16>
 800bd3e:	f06f 0001 	mvn.w	r0, #1
 800bd42:	e7f8      	b.n	800bd36 <__ascii_mbtowc+0x16>

0800bd44 <__malloc_lock>:
 800bd44:	4801      	ldr	r0, [pc, #4]	; (800bd4c <__malloc_lock+0x8>)
 800bd46:	f7ff bf84 	b.w	800bc52 <__retarget_lock_acquire_recursive>
 800bd4a:	bf00      	nop
 800bd4c:	20002550 	.word	0x20002550

0800bd50 <__malloc_unlock>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__malloc_unlock+0x8>)
 800bd52:	f7ff bf7f 	b.w	800bc54 <__retarget_lock_release_recursive>
 800bd56:	bf00      	nop
 800bd58:	20002550 	.word	0x20002550

0800bd5c <_Balloc>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd60:	4604      	mov	r4, r0
 800bd62:	460d      	mov	r5, r1
 800bd64:	b976      	cbnz	r6, 800bd84 <_Balloc+0x28>
 800bd66:	2010      	movs	r0, #16
 800bd68:	f7fc fc24 	bl	80085b4 <malloc>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bd70:	b920      	cbnz	r0, 800bd7c <_Balloc+0x20>
 800bd72:	4b18      	ldr	r3, [pc, #96]	; (800bdd4 <_Balloc+0x78>)
 800bd74:	4818      	ldr	r0, [pc, #96]	; (800bdd8 <_Balloc+0x7c>)
 800bd76:	2166      	movs	r1, #102	; 0x66
 800bd78:	f000 fffc 	bl	800cd74 <__assert_func>
 800bd7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd80:	6006      	str	r6, [r0, #0]
 800bd82:	60c6      	str	r6, [r0, #12]
 800bd84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd86:	68f3      	ldr	r3, [r6, #12]
 800bd88:	b183      	cbz	r3, 800bdac <_Balloc+0x50>
 800bd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd92:	b9b8      	cbnz	r0, 800bdc4 <_Balloc+0x68>
 800bd94:	2101      	movs	r1, #1
 800bd96:	fa01 f605 	lsl.w	r6, r1, r5
 800bd9a:	1d72      	adds	r2, r6, #5
 800bd9c:	0092      	lsls	r2, r2, #2
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 fc9d 	bl	800c6de <_calloc_r>
 800bda4:	b160      	cbz	r0, 800bdc0 <_Balloc+0x64>
 800bda6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdaa:	e00e      	b.n	800bdca <_Balloc+0x6e>
 800bdac:	2221      	movs	r2, #33	; 0x21
 800bdae:	2104      	movs	r1, #4
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 fc94 	bl	800c6de <_calloc_r>
 800bdb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb8:	60f0      	str	r0, [r6, #12]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e4      	bne.n	800bd8a <_Balloc+0x2e>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	6802      	ldr	r2, [r0, #0]
 800bdc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdd0:	e7f7      	b.n	800bdc2 <_Balloc+0x66>
 800bdd2:	bf00      	nop
 800bdd4:	0800db96 	.word	0x0800db96
 800bdd8:	0800dcf8 	.word	0x0800dcf8

0800bddc <_Bfree>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bde0:	4605      	mov	r5, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	b976      	cbnz	r6, 800be04 <_Bfree+0x28>
 800bde6:	2010      	movs	r0, #16
 800bde8:	f7fc fbe4 	bl	80085b4 <malloc>
 800bdec:	4602      	mov	r2, r0
 800bdee:	6268      	str	r0, [r5, #36]	; 0x24
 800bdf0:	b920      	cbnz	r0, 800bdfc <_Bfree+0x20>
 800bdf2:	4b09      	ldr	r3, [pc, #36]	; (800be18 <_Bfree+0x3c>)
 800bdf4:	4809      	ldr	r0, [pc, #36]	; (800be1c <_Bfree+0x40>)
 800bdf6:	218a      	movs	r1, #138	; 0x8a
 800bdf8:	f000 ffbc 	bl	800cd74 <__assert_func>
 800bdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be00:	6006      	str	r6, [r0, #0]
 800be02:	60c6      	str	r6, [r0, #12]
 800be04:	b13c      	cbz	r4, 800be16 <_Bfree+0x3a>
 800be06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be08:	6862      	ldr	r2, [r4, #4]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be10:	6021      	str	r1, [r4, #0]
 800be12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	0800db96 	.word	0x0800db96
 800be1c:	0800dcf8 	.word	0x0800dcf8

0800be20 <__multadd>:
 800be20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be24:	690d      	ldr	r5, [r1, #16]
 800be26:	4607      	mov	r7, r0
 800be28:	460c      	mov	r4, r1
 800be2a:	461e      	mov	r6, r3
 800be2c:	f101 0c14 	add.w	ip, r1, #20
 800be30:	2000      	movs	r0, #0
 800be32:	f8dc 3000 	ldr.w	r3, [ip]
 800be36:	b299      	uxth	r1, r3
 800be38:	fb02 6101 	mla	r1, r2, r1, r6
 800be3c:	0c1e      	lsrs	r6, r3, #16
 800be3e:	0c0b      	lsrs	r3, r1, #16
 800be40:	fb02 3306 	mla	r3, r2, r6, r3
 800be44:	b289      	uxth	r1, r1
 800be46:	3001      	adds	r0, #1
 800be48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be4c:	4285      	cmp	r5, r0
 800be4e:	f84c 1b04 	str.w	r1, [ip], #4
 800be52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be56:	dcec      	bgt.n	800be32 <__multadd+0x12>
 800be58:	b30e      	cbz	r6, 800be9e <__multadd+0x7e>
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	42ab      	cmp	r3, r5
 800be5e:	dc19      	bgt.n	800be94 <__multadd+0x74>
 800be60:	6861      	ldr	r1, [r4, #4]
 800be62:	4638      	mov	r0, r7
 800be64:	3101      	adds	r1, #1
 800be66:	f7ff ff79 	bl	800bd5c <_Balloc>
 800be6a:	4680      	mov	r8, r0
 800be6c:	b928      	cbnz	r0, 800be7a <__multadd+0x5a>
 800be6e:	4602      	mov	r2, r0
 800be70:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <__multadd+0x84>)
 800be72:	480d      	ldr	r0, [pc, #52]	; (800bea8 <__multadd+0x88>)
 800be74:	21b5      	movs	r1, #181	; 0xb5
 800be76:	f000 ff7d 	bl	800cd74 <__assert_func>
 800be7a:	6922      	ldr	r2, [r4, #16]
 800be7c:	3202      	adds	r2, #2
 800be7e:	f104 010c 	add.w	r1, r4, #12
 800be82:	0092      	lsls	r2, r2, #2
 800be84:	300c      	adds	r0, #12
 800be86:	f7fc fb9d 	bl	80085c4 <memcpy>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4638      	mov	r0, r7
 800be8e:	f7ff ffa5 	bl	800bddc <_Bfree>
 800be92:	4644      	mov	r4, r8
 800be94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be98:	3501      	adds	r5, #1
 800be9a:	615e      	str	r6, [r3, #20]
 800be9c:	6125      	str	r5, [r4, #16]
 800be9e:	4620      	mov	r0, r4
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	0800dc08 	.word	0x0800dc08
 800bea8:	0800dcf8 	.word	0x0800dcf8

0800beac <__s2b>:
 800beac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	4615      	mov	r5, r2
 800beb4:	461f      	mov	r7, r3
 800beb6:	2209      	movs	r2, #9
 800beb8:	3308      	adds	r3, #8
 800beba:	4606      	mov	r6, r0
 800bebc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bec0:	2100      	movs	r1, #0
 800bec2:	2201      	movs	r2, #1
 800bec4:	429a      	cmp	r2, r3
 800bec6:	db09      	blt.n	800bedc <__s2b+0x30>
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff ff47 	bl	800bd5c <_Balloc>
 800bece:	b940      	cbnz	r0, 800bee2 <__s2b+0x36>
 800bed0:	4602      	mov	r2, r0
 800bed2:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <__s2b+0x8c>)
 800bed4:	4819      	ldr	r0, [pc, #100]	; (800bf3c <__s2b+0x90>)
 800bed6:	21ce      	movs	r1, #206	; 0xce
 800bed8:	f000 ff4c 	bl	800cd74 <__assert_func>
 800bedc:	0052      	lsls	r2, r2, #1
 800bede:	3101      	adds	r1, #1
 800bee0:	e7f0      	b.n	800bec4 <__s2b+0x18>
 800bee2:	9b08      	ldr	r3, [sp, #32]
 800bee4:	6143      	str	r3, [r0, #20]
 800bee6:	2d09      	cmp	r5, #9
 800bee8:	f04f 0301 	mov.w	r3, #1
 800beec:	6103      	str	r3, [r0, #16]
 800beee:	dd16      	ble.n	800bf1e <__s2b+0x72>
 800bef0:	f104 0909 	add.w	r9, r4, #9
 800bef4:	46c8      	mov	r8, r9
 800bef6:	442c      	add	r4, r5
 800bef8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800befc:	4601      	mov	r1, r0
 800befe:	3b30      	subs	r3, #48	; 0x30
 800bf00:	220a      	movs	r2, #10
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7ff ff8c 	bl	800be20 <__multadd>
 800bf08:	45a0      	cmp	r8, r4
 800bf0a:	d1f5      	bne.n	800bef8 <__s2b+0x4c>
 800bf0c:	f1a5 0408 	sub.w	r4, r5, #8
 800bf10:	444c      	add	r4, r9
 800bf12:	1b2d      	subs	r5, r5, r4
 800bf14:	1963      	adds	r3, r4, r5
 800bf16:	42bb      	cmp	r3, r7
 800bf18:	db04      	blt.n	800bf24 <__s2b+0x78>
 800bf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1e:	340a      	adds	r4, #10
 800bf20:	2509      	movs	r5, #9
 800bf22:	e7f6      	b.n	800bf12 <__s2b+0x66>
 800bf24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf28:	4601      	mov	r1, r0
 800bf2a:	3b30      	subs	r3, #48	; 0x30
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ff76 	bl	800be20 <__multadd>
 800bf34:	e7ee      	b.n	800bf14 <__s2b+0x68>
 800bf36:	bf00      	nop
 800bf38:	0800dc08 	.word	0x0800dc08
 800bf3c:	0800dcf8 	.word	0x0800dcf8

0800bf40 <__hi0bits>:
 800bf40:	0c03      	lsrs	r3, r0, #16
 800bf42:	041b      	lsls	r3, r3, #16
 800bf44:	b9d3      	cbnz	r3, 800bf7c <__hi0bits+0x3c>
 800bf46:	0400      	lsls	r0, r0, #16
 800bf48:	2310      	movs	r3, #16
 800bf4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf4e:	bf04      	itt	eq
 800bf50:	0200      	lsleq	r0, r0, #8
 800bf52:	3308      	addeq	r3, #8
 800bf54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf58:	bf04      	itt	eq
 800bf5a:	0100      	lsleq	r0, r0, #4
 800bf5c:	3304      	addeq	r3, #4
 800bf5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf62:	bf04      	itt	eq
 800bf64:	0080      	lsleq	r0, r0, #2
 800bf66:	3302      	addeq	r3, #2
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	db05      	blt.n	800bf78 <__hi0bits+0x38>
 800bf6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf70:	f103 0301 	add.w	r3, r3, #1
 800bf74:	bf08      	it	eq
 800bf76:	2320      	moveq	r3, #32
 800bf78:	4618      	mov	r0, r3
 800bf7a:	4770      	bx	lr
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e7e4      	b.n	800bf4a <__hi0bits+0xa>

0800bf80 <__lo0bits>:
 800bf80:	6803      	ldr	r3, [r0, #0]
 800bf82:	f013 0207 	ands.w	r2, r3, #7
 800bf86:	4601      	mov	r1, r0
 800bf88:	d00b      	beq.n	800bfa2 <__lo0bits+0x22>
 800bf8a:	07da      	lsls	r2, r3, #31
 800bf8c:	d423      	bmi.n	800bfd6 <__lo0bits+0x56>
 800bf8e:	0798      	lsls	r0, r3, #30
 800bf90:	bf49      	itett	mi
 800bf92:	085b      	lsrmi	r3, r3, #1
 800bf94:	089b      	lsrpl	r3, r3, #2
 800bf96:	2001      	movmi	r0, #1
 800bf98:	600b      	strmi	r3, [r1, #0]
 800bf9a:	bf5c      	itt	pl
 800bf9c:	600b      	strpl	r3, [r1, #0]
 800bf9e:	2002      	movpl	r0, #2
 800bfa0:	4770      	bx	lr
 800bfa2:	b298      	uxth	r0, r3
 800bfa4:	b9a8      	cbnz	r0, 800bfd2 <__lo0bits+0x52>
 800bfa6:	0c1b      	lsrs	r3, r3, #16
 800bfa8:	2010      	movs	r0, #16
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	b90a      	cbnz	r2, 800bfb2 <__lo0bits+0x32>
 800bfae:	3008      	adds	r0, #8
 800bfb0:	0a1b      	lsrs	r3, r3, #8
 800bfb2:	071a      	lsls	r2, r3, #28
 800bfb4:	bf04      	itt	eq
 800bfb6:	091b      	lsreq	r3, r3, #4
 800bfb8:	3004      	addeq	r0, #4
 800bfba:	079a      	lsls	r2, r3, #30
 800bfbc:	bf04      	itt	eq
 800bfbe:	089b      	lsreq	r3, r3, #2
 800bfc0:	3002      	addeq	r0, #2
 800bfc2:	07da      	lsls	r2, r3, #31
 800bfc4:	d403      	bmi.n	800bfce <__lo0bits+0x4e>
 800bfc6:	085b      	lsrs	r3, r3, #1
 800bfc8:	f100 0001 	add.w	r0, r0, #1
 800bfcc:	d005      	beq.n	800bfda <__lo0bits+0x5a>
 800bfce:	600b      	str	r3, [r1, #0]
 800bfd0:	4770      	bx	lr
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	e7e9      	b.n	800bfaa <__lo0bits+0x2a>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	4770      	bx	lr
 800bfda:	2020      	movs	r0, #32
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <__i2b>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	f7ff feb9 	bl	800bd5c <_Balloc>
 800bfea:	4602      	mov	r2, r0
 800bfec:	b928      	cbnz	r0, 800bffa <__i2b+0x1a>
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <__i2b+0x24>)
 800bff0:	4805      	ldr	r0, [pc, #20]	; (800c008 <__i2b+0x28>)
 800bff2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bff6:	f000 febd 	bl	800cd74 <__assert_func>
 800bffa:	2301      	movs	r3, #1
 800bffc:	6144      	str	r4, [r0, #20]
 800bffe:	6103      	str	r3, [r0, #16]
 800c000:	bd10      	pop	{r4, pc}
 800c002:	bf00      	nop
 800c004:	0800dc08 	.word	0x0800dc08
 800c008:	0800dcf8 	.word	0x0800dcf8

0800c00c <__multiply>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	4691      	mov	r9, r2
 800c012:	690a      	ldr	r2, [r1, #16]
 800c014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c018:	429a      	cmp	r2, r3
 800c01a:	bfb8      	it	lt
 800c01c:	460b      	movlt	r3, r1
 800c01e:	460c      	mov	r4, r1
 800c020:	bfbc      	itt	lt
 800c022:	464c      	movlt	r4, r9
 800c024:	4699      	movlt	r9, r3
 800c026:	6927      	ldr	r7, [r4, #16]
 800c028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c02c:	68a3      	ldr	r3, [r4, #8]
 800c02e:	6861      	ldr	r1, [r4, #4]
 800c030:	eb07 060a 	add.w	r6, r7, sl
 800c034:	42b3      	cmp	r3, r6
 800c036:	b085      	sub	sp, #20
 800c038:	bfb8      	it	lt
 800c03a:	3101      	addlt	r1, #1
 800c03c:	f7ff fe8e 	bl	800bd5c <_Balloc>
 800c040:	b930      	cbnz	r0, 800c050 <__multiply+0x44>
 800c042:	4602      	mov	r2, r0
 800c044:	4b44      	ldr	r3, [pc, #272]	; (800c158 <__multiply+0x14c>)
 800c046:	4845      	ldr	r0, [pc, #276]	; (800c15c <__multiply+0x150>)
 800c048:	f240 115d 	movw	r1, #349	; 0x15d
 800c04c:	f000 fe92 	bl	800cd74 <__assert_func>
 800c050:	f100 0514 	add.w	r5, r0, #20
 800c054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c058:	462b      	mov	r3, r5
 800c05a:	2200      	movs	r2, #0
 800c05c:	4543      	cmp	r3, r8
 800c05e:	d321      	bcc.n	800c0a4 <__multiply+0x98>
 800c060:	f104 0314 	add.w	r3, r4, #20
 800c064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c068:	f109 0314 	add.w	r3, r9, #20
 800c06c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c070:	9202      	str	r2, [sp, #8]
 800c072:	1b3a      	subs	r2, r7, r4
 800c074:	3a15      	subs	r2, #21
 800c076:	f022 0203 	bic.w	r2, r2, #3
 800c07a:	3204      	adds	r2, #4
 800c07c:	f104 0115 	add.w	r1, r4, #21
 800c080:	428f      	cmp	r7, r1
 800c082:	bf38      	it	cc
 800c084:	2204      	movcc	r2, #4
 800c086:	9201      	str	r2, [sp, #4]
 800c088:	9a02      	ldr	r2, [sp, #8]
 800c08a:	9303      	str	r3, [sp, #12]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d80c      	bhi.n	800c0aa <__multiply+0x9e>
 800c090:	2e00      	cmp	r6, #0
 800c092:	dd03      	ble.n	800c09c <__multiply+0x90>
 800c094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d05a      	beq.n	800c152 <__multiply+0x146>
 800c09c:	6106      	str	r6, [r0, #16]
 800c09e:	b005      	add	sp, #20
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	f843 2b04 	str.w	r2, [r3], #4
 800c0a8:	e7d8      	b.n	800c05c <__multiply+0x50>
 800c0aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0ae:	f1ba 0f00 	cmp.w	sl, #0
 800c0b2:	d024      	beq.n	800c0fe <__multiply+0xf2>
 800c0b4:	f104 0e14 	add.w	lr, r4, #20
 800c0b8:	46a9      	mov	r9, r5
 800c0ba:	f04f 0c00 	mov.w	ip, #0
 800c0be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0c2:	f8d9 1000 	ldr.w	r1, [r9]
 800c0c6:	fa1f fb82 	uxth.w	fp, r2
 800c0ca:	b289      	uxth	r1, r1
 800c0cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c0d8:	4461      	add	r1, ip
 800c0da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0de:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0e6:	b289      	uxth	r1, r1
 800c0e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0ec:	4577      	cmp	r7, lr
 800c0ee:	f849 1b04 	str.w	r1, [r9], #4
 800c0f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0f6:	d8e2      	bhi.n	800c0be <__multiply+0xb2>
 800c0f8:	9a01      	ldr	r2, [sp, #4]
 800c0fa:	f845 c002 	str.w	ip, [r5, r2]
 800c0fe:	9a03      	ldr	r2, [sp, #12]
 800c100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c104:	3304      	adds	r3, #4
 800c106:	f1b9 0f00 	cmp.w	r9, #0
 800c10a:	d020      	beq.n	800c14e <__multiply+0x142>
 800c10c:	6829      	ldr	r1, [r5, #0]
 800c10e:	f104 0c14 	add.w	ip, r4, #20
 800c112:	46ae      	mov	lr, r5
 800c114:	f04f 0a00 	mov.w	sl, #0
 800c118:	f8bc b000 	ldrh.w	fp, [ip]
 800c11c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c120:	fb09 220b 	mla	r2, r9, fp, r2
 800c124:	4492      	add	sl, r2
 800c126:	b289      	uxth	r1, r1
 800c128:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c12c:	f84e 1b04 	str.w	r1, [lr], #4
 800c130:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c134:	f8be 1000 	ldrh.w	r1, [lr]
 800c138:	0c12      	lsrs	r2, r2, #16
 800c13a:	fb09 1102 	mla	r1, r9, r2, r1
 800c13e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c142:	4567      	cmp	r7, ip
 800c144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c148:	d8e6      	bhi.n	800c118 <__multiply+0x10c>
 800c14a:	9a01      	ldr	r2, [sp, #4]
 800c14c:	50a9      	str	r1, [r5, r2]
 800c14e:	3504      	adds	r5, #4
 800c150:	e79a      	b.n	800c088 <__multiply+0x7c>
 800c152:	3e01      	subs	r6, #1
 800c154:	e79c      	b.n	800c090 <__multiply+0x84>
 800c156:	bf00      	nop
 800c158:	0800dc08 	.word	0x0800dc08
 800c15c:	0800dcf8 	.word	0x0800dcf8

0800c160 <__pow5mult>:
 800c160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c164:	4615      	mov	r5, r2
 800c166:	f012 0203 	ands.w	r2, r2, #3
 800c16a:	4606      	mov	r6, r0
 800c16c:	460f      	mov	r7, r1
 800c16e:	d007      	beq.n	800c180 <__pow5mult+0x20>
 800c170:	4c25      	ldr	r4, [pc, #148]	; (800c208 <__pow5mult+0xa8>)
 800c172:	3a01      	subs	r2, #1
 800c174:	2300      	movs	r3, #0
 800c176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c17a:	f7ff fe51 	bl	800be20 <__multadd>
 800c17e:	4607      	mov	r7, r0
 800c180:	10ad      	asrs	r5, r5, #2
 800c182:	d03d      	beq.n	800c200 <__pow5mult+0xa0>
 800c184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c186:	b97c      	cbnz	r4, 800c1a8 <__pow5mult+0x48>
 800c188:	2010      	movs	r0, #16
 800c18a:	f7fc fa13 	bl	80085b4 <malloc>
 800c18e:	4602      	mov	r2, r0
 800c190:	6270      	str	r0, [r6, #36]	; 0x24
 800c192:	b928      	cbnz	r0, 800c1a0 <__pow5mult+0x40>
 800c194:	4b1d      	ldr	r3, [pc, #116]	; (800c20c <__pow5mult+0xac>)
 800c196:	481e      	ldr	r0, [pc, #120]	; (800c210 <__pow5mult+0xb0>)
 800c198:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c19c:	f000 fdea 	bl	800cd74 <__assert_func>
 800c1a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1a4:	6004      	str	r4, [r0, #0]
 800c1a6:	60c4      	str	r4, [r0, #12]
 800c1a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1b0:	b94c      	cbnz	r4, 800c1c6 <__pow5mult+0x66>
 800c1b2:	f240 2171 	movw	r1, #625	; 0x271
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7ff ff12 	bl	800bfe0 <__i2b>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	6003      	str	r3, [r0, #0]
 800c1c6:	f04f 0900 	mov.w	r9, #0
 800c1ca:	07eb      	lsls	r3, r5, #31
 800c1cc:	d50a      	bpl.n	800c1e4 <__pow5mult+0x84>
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ff1a 	bl	800c00c <__multiply>
 800c1d8:	4639      	mov	r1, r7
 800c1da:	4680      	mov	r8, r0
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7ff fdfd 	bl	800bddc <_Bfree>
 800c1e2:	4647      	mov	r7, r8
 800c1e4:	106d      	asrs	r5, r5, #1
 800c1e6:	d00b      	beq.n	800c200 <__pow5mult+0xa0>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	b938      	cbnz	r0, 800c1fc <__pow5mult+0x9c>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f7ff ff0b 	bl	800c00c <__multiply>
 800c1f6:	6020      	str	r0, [r4, #0]
 800c1f8:	f8c0 9000 	str.w	r9, [r0]
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	e7e4      	b.n	800c1ca <__pow5mult+0x6a>
 800c200:	4638      	mov	r0, r7
 800c202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c206:	bf00      	nop
 800c208:	0800de48 	.word	0x0800de48
 800c20c:	0800db96 	.word	0x0800db96
 800c210:	0800dcf8 	.word	0x0800dcf8

0800c214 <__lshift>:
 800c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c218:	460c      	mov	r4, r1
 800c21a:	6849      	ldr	r1, [r1, #4]
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c222:	68a3      	ldr	r3, [r4, #8]
 800c224:	4607      	mov	r7, r0
 800c226:	4691      	mov	r9, r2
 800c228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c22c:	f108 0601 	add.w	r6, r8, #1
 800c230:	42b3      	cmp	r3, r6
 800c232:	db0b      	blt.n	800c24c <__lshift+0x38>
 800c234:	4638      	mov	r0, r7
 800c236:	f7ff fd91 	bl	800bd5c <_Balloc>
 800c23a:	4605      	mov	r5, r0
 800c23c:	b948      	cbnz	r0, 800c252 <__lshift+0x3e>
 800c23e:	4602      	mov	r2, r0
 800c240:	4b2a      	ldr	r3, [pc, #168]	; (800c2ec <__lshift+0xd8>)
 800c242:	482b      	ldr	r0, [pc, #172]	; (800c2f0 <__lshift+0xdc>)
 800c244:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c248:	f000 fd94 	bl	800cd74 <__assert_func>
 800c24c:	3101      	adds	r1, #1
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	e7ee      	b.n	800c230 <__lshift+0x1c>
 800c252:	2300      	movs	r3, #0
 800c254:	f100 0114 	add.w	r1, r0, #20
 800c258:	f100 0210 	add.w	r2, r0, #16
 800c25c:	4618      	mov	r0, r3
 800c25e:	4553      	cmp	r3, sl
 800c260:	db37      	blt.n	800c2d2 <__lshift+0xbe>
 800c262:	6920      	ldr	r0, [r4, #16]
 800c264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c268:	f104 0314 	add.w	r3, r4, #20
 800c26c:	f019 091f 	ands.w	r9, r9, #31
 800c270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c274:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c278:	d02f      	beq.n	800c2da <__lshift+0xc6>
 800c27a:	f1c9 0e20 	rsb	lr, r9, #32
 800c27e:	468a      	mov	sl, r1
 800c280:	f04f 0c00 	mov.w	ip, #0
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	fa02 f209 	lsl.w	r2, r2, r9
 800c28a:	ea42 020c 	orr.w	r2, r2, ip
 800c28e:	f84a 2b04 	str.w	r2, [sl], #4
 800c292:	f853 2b04 	ldr.w	r2, [r3], #4
 800c296:	4298      	cmp	r0, r3
 800c298:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c29c:	d8f2      	bhi.n	800c284 <__lshift+0x70>
 800c29e:	1b03      	subs	r3, r0, r4
 800c2a0:	3b15      	subs	r3, #21
 800c2a2:	f023 0303 	bic.w	r3, r3, #3
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	f104 0215 	add.w	r2, r4, #21
 800c2ac:	4290      	cmp	r0, r2
 800c2ae:	bf38      	it	cc
 800c2b0:	2304      	movcc	r3, #4
 800c2b2:	f841 c003 	str.w	ip, [r1, r3]
 800c2b6:	f1bc 0f00 	cmp.w	ip, #0
 800c2ba:	d001      	beq.n	800c2c0 <__lshift+0xac>
 800c2bc:	f108 0602 	add.w	r6, r8, #2
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	612e      	str	r6, [r5, #16]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	f7ff fd88 	bl	800bddc <_Bfree>
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	e7c1      	b.n	800c25e <__lshift+0x4a>
 800c2da:	3904      	subs	r1, #4
 800c2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2e4:	4298      	cmp	r0, r3
 800c2e6:	d8f9      	bhi.n	800c2dc <__lshift+0xc8>
 800c2e8:	e7ea      	b.n	800c2c0 <__lshift+0xac>
 800c2ea:	bf00      	nop
 800c2ec:	0800dc08 	.word	0x0800dc08
 800c2f0:	0800dcf8 	.word	0x0800dcf8

0800c2f4 <__mcmp>:
 800c2f4:	b530      	push	{r4, r5, lr}
 800c2f6:	6902      	ldr	r2, [r0, #16]
 800c2f8:	690c      	ldr	r4, [r1, #16]
 800c2fa:	1b12      	subs	r2, r2, r4
 800c2fc:	d10e      	bne.n	800c31c <__mcmp+0x28>
 800c2fe:	f100 0314 	add.w	r3, r0, #20
 800c302:	3114      	adds	r1, #20
 800c304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c30c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c314:	42a5      	cmp	r5, r4
 800c316:	d003      	beq.n	800c320 <__mcmp+0x2c>
 800c318:	d305      	bcc.n	800c326 <__mcmp+0x32>
 800c31a:	2201      	movs	r2, #1
 800c31c:	4610      	mov	r0, r2
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	4283      	cmp	r3, r0
 800c322:	d3f3      	bcc.n	800c30c <__mcmp+0x18>
 800c324:	e7fa      	b.n	800c31c <__mcmp+0x28>
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e7f7      	b.n	800c31c <__mcmp+0x28>

0800c32c <__mdiff>:
 800c32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	4606      	mov	r6, r0
 800c334:	4611      	mov	r1, r2
 800c336:	4620      	mov	r0, r4
 800c338:	4690      	mov	r8, r2
 800c33a:	f7ff ffdb 	bl	800c2f4 <__mcmp>
 800c33e:	1e05      	subs	r5, r0, #0
 800c340:	d110      	bne.n	800c364 <__mdiff+0x38>
 800c342:	4629      	mov	r1, r5
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff fd09 	bl	800bd5c <_Balloc>
 800c34a:	b930      	cbnz	r0, 800c35a <__mdiff+0x2e>
 800c34c:	4b3a      	ldr	r3, [pc, #232]	; (800c438 <__mdiff+0x10c>)
 800c34e:	4602      	mov	r2, r0
 800c350:	f240 2132 	movw	r1, #562	; 0x232
 800c354:	4839      	ldr	r0, [pc, #228]	; (800c43c <__mdiff+0x110>)
 800c356:	f000 fd0d 	bl	800cd74 <__assert_func>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	bfa4      	itt	ge
 800c366:	4643      	movge	r3, r8
 800c368:	46a0      	movge	r8, r4
 800c36a:	4630      	mov	r0, r6
 800c36c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c370:	bfa6      	itte	ge
 800c372:	461c      	movge	r4, r3
 800c374:	2500      	movge	r5, #0
 800c376:	2501      	movlt	r5, #1
 800c378:	f7ff fcf0 	bl	800bd5c <_Balloc>
 800c37c:	b920      	cbnz	r0, 800c388 <__mdiff+0x5c>
 800c37e:	4b2e      	ldr	r3, [pc, #184]	; (800c438 <__mdiff+0x10c>)
 800c380:	4602      	mov	r2, r0
 800c382:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c386:	e7e5      	b.n	800c354 <__mdiff+0x28>
 800c388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c38c:	6926      	ldr	r6, [r4, #16]
 800c38e:	60c5      	str	r5, [r0, #12]
 800c390:	f104 0914 	add.w	r9, r4, #20
 800c394:	f108 0514 	add.w	r5, r8, #20
 800c398:	f100 0e14 	add.w	lr, r0, #20
 800c39c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3a4:	f108 0210 	add.w	r2, r8, #16
 800c3a8:	46f2      	mov	sl, lr
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3b4:	fa1f f883 	uxth.w	r8, r3
 800c3b8:	fa11 f18b 	uxtah	r1, r1, fp
 800c3bc:	0c1b      	lsrs	r3, r3, #16
 800c3be:	eba1 0808 	sub.w	r8, r1, r8
 800c3c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3ca:	fa1f f888 	uxth.w	r8, r8
 800c3ce:	1419      	asrs	r1, r3, #16
 800c3d0:	454e      	cmp	r6, r9
 800c3d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c3da:	d8e7      	bhi.n	800c3ac <__mdiff+0x80>
 800c3dc:	1b33      	subs	r3, r6, r4
 800c3de:	3b15      	subs	r3, #21
 800c3e0:	f023 0303 	bic.w	r3, r3, #3
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	3415      	adds	r4, #21
 800c3e8:	42a6      	cmp	r6, r4
 800c3ea:	bf38      	it	cc
 800c3ec:	2304      	movcc	r3, #4
 800c3ee:	441d      	add	r5, r3
 800c3f0:	4473      	add	r3, lr
 800c3f2:	469e      	mov	lr, r3
 800c3f4:	462e      	mov	r6, r5
 800c3f6:	4566      	cmp	r6, ip
 800c3f8:	d30e      	bcc.n	800c418 <__mdiff+0xec>
 800c3fa:	f10c 0203 	add.w	r2, ip, #3
 800c3fe:	1b52      	subs	r2, r2, r5
 800c400:	f022 0203 	bic.w	r2, r2, #3
 800c404:	3d03      	subs	r5, #3
 800c406:	45ac      	cmp	ip, r5
 800c408:	bf38      	it	cc
 800c40a:	2200      	movcc	r2, #0
 800c40c:	441a      	add	r2, r3
 800c40e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c412:	b17b      	cbz	r3, 800c434 <__mdiff+0x108>
 800c414:	6107      	str	r7, [r0, #16]
 800c416:	e7a3      	b.n	800c360 <__mdiff+0x34>
 800c418:	f856 8b04 	ldr.w	r8, [r6], #4
 800c41c:	fa11 f288 	uxtah	r2, r1, r8
 800c420:	1414      	asrs	r4, r2, #16
 800c422:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c426:	b292      	uxth	r2, r2
 800c428:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c42c:	f84e 2b04 	str.w	r2, [lr], #4
 800c430:	1421      	asrs	r1, r4, #16
 800c432:	e7e0      	b.n	800c3f6 <__mdiff+0xca>
 800c434:	3f01      	subs	r7, #1
 800c436:	e7ea      	b.n	800c40e <__mdiff+0xe2>
 800c438:	0800dc08 	.word	0x0800dc08
 800c43c:	0800dcf8 	.word	0x0800dcf8

0800c440 <__ulp>:
 800c440:	b082      	sub	sp, #8
 800c442:	ed8d 0b00 	vstr	d0, [sp]
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	4912      	ldr	r1, [pc, #72]	; (800c494 <__ulp+0x54>)
 800c44a:	4019      	ands	r1, r3
 800c44c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c450:	2900      	cmp	r1, #0
 800c452:	dd05      	ble.n	800c460 <__ulp+0x20>
 800c454:	2200      	movs	r2, #0
 800c456:	460b      	mov	r3, r1
 800c458:	ec43 2b10 	vmov	d0, r2, r3
 800c45c:	b002      	add	sp, #8
 800c45e:	4770      	bx	lr
 800c460:	4249      	negs	r1, r1
 800c462:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c466:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	f04f 0300 	mov.w	r3, #0
 800c472:	da04      	bge.n	800c47e <__ulp+0x3e>
 800c474:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c478:	fa41 f300 	asr.w	r3, r1, r0
 800c47c:	e7ec      	b.n	800c458 <__ulp+0x18>
 800c47e:	f1a0 0114 	sub.w	r1, r0, #20
 800c482:	291e      	cmp	r1, #30
 800c484:	bfda      	itte	le
 800c486:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c48a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c48e:	2101      	movgt	r1, #1
 800c490:	460a      	mov	r2, r1
 800c492:	e7e1      	b.n	800c458 <__ulp+0x18>
 800c494:	7ff00000 	.word	0x7ff00000

0800c498 <__b2d>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	6905      	ldr	r5, [r0, #16]
 800c49c:	f100 0714 	add.w	r7, r0, #20
 800c4a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c4a4:	1f2e      	subs	r6, r5, #4
 800c4a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f7ff fd48 	bl	800bf40 <__hi0bits>
 800c4b0:	f1c0 0320 	rsb	r3, r0, #32
 800c4b4:	280a      	cmp	r0, #10
 800c4b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c534 <__b2d+0x9c>
 800c4ba:	600b      	str	r3, [r1, #0]
 800c4bc:	dc14      	bgt.n	800c4e8 <__b2d+0x50>
 800c4be:	f1c0 0e0b 	rsb	lr, r0, #11
 800c4c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c4c6:	42b7      	cmp	r7, r6
 800c4c8:	ea41 030c 	orr.w	r3, r1, ip
 800c4cc:	bf34      	ite	cc
 800c4ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4d2:	2100      	movcs	r1, #0
 800c4d4:	3015      	adds	r0, #21
 800c4d6:	fa04 f000 	lsl.w	r0, r4, r0
 800c4da:	fa21 f10e 	lsr.w	r1, r1, lr
 800c4de:	ea40 0201 	orr.w	r2, r0, r1
 800c4e2:	ec43 2b10 	vmov	d0, r2, r3
 800c4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e8:	42b7      	cmp	r7, r6
 800c4ea:	bf3a      	itte	cc
 800c4ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c4f4:	2100      	movcs	r1, #0
 800c4f6:	380b      	subs	r0, #11
 800c4f8:	d017      	beq.n	800c52a <__b2d+0x92>
 800c4fa:	f1c0 0c20 	rsb	ip, r0, #32
 800c4fe:	fa04 f500 	lsl.w	r5, r4, r0
 800c502:	42be      	cmp	r6, r7
 800c504:	fa21 f40c 	lsr.w	r4, r1, ip
 800c508:	ea45 0504 	orr.w	r5, r5, r4
 800c50c:	bf8c      	ite	hi
 800c50e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c512:	2400      	movls	r4, #0
 800c514:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c518:	fa01 f000 	lsl.w	r0, r1, r0
 800c51c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c520:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c524:	ea40 0204 	orr.w	r2, r0, r4
 800c528:	e7db      	b.n	800c4e2 <__b2d+0x4a>
 800c52a:	ea44 030c 	orr.w	r3, r4, ip
 800c52e:	460a      	mov	r2, r1
 800c530:	e7d7      	b.n	800c4e2 <__b2d+0x4a>
 800c532:	bf00      	nop
 800c534:	3ff00000 	.word	0x3ff00000

0800c538 <__d2b>:
 800c538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c53c:	4689      	mov	r9, r1
 800c53e:	2101      	movs	r1, #1
 800c540:	ec57 6b10 	vmov	r6, r7, d0
 800c544:	4690      	mov	r8, r2
 800c546:	f7ff fc09 	bl	800bd5c <_Balloc>
 800c54a:	4604      	mov	r4, r0
 800c54c:	b930      	cbnz	r0, 800c55c <__d2b+0x24>
 800c54e:	4602      	mov	r2, r0
 800c550:	4b25      	ldr	r3, [pc, #148]	; (800c5e8 <__d2b+0xb0>)
 800c552:	4826      	ldr	r0, [pc, #152]	; (800c5ec <__d2b+0xb4>)
 800c554:	f240 310a 	movw	r1, #778	; 0x30a
 800c558:	f000 fc0c 	bl	800cd74 <__assert_func>
 800c55c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c564:	bb35      	cbnz	r5, 800c5b4 <__d2b+0x7c>
 800c566:	2e00      	cmp	r6, #0
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	d028      	beq.n	800c5be <__d2b+0x86>
 800c56c:	4668      	mov	r0, sp
 800c56e:	9600      	str	r6, [sp, #0]
 800c570:	f7ff fd06 	bl	800bf80 <__lo0bits>
 800c574:	9900      	ldr	r1, [sp, #0]
 800c576:	b300      	cbz	r0, 800c5ba <__d2b+0x82>
 800c578:	9a01      	ldr	r2, [sp, #4]
 800c57a:	f1c0 0320 	rsb	r3, r0, #32
 800c57e:	fa02 f303 	lsl.w	r3, r2, r3
 800c582:	430b      	orrs	r3, r1
 800c584:	40c2      	lsrs	r2, r0
 800c586:	6163      	str	r3, [r4, #20]
 800c588:	9201      	str	r2, [sp, #4]
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	61a3      	str	r3, [r4, #24]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bf14      	ite	ne
 800c592:	2202      	movne	r2, #2
 800c594:	2201      	moveq	r2, #1
 800c596:	6122      	str	r2, [r4, #16]
 800c598:	b1d5      	cbz	r5, 800c5d0 <__d2b+0x98>
 800c59a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c59e:	4405      	add	r5, r0
 800c5a0:	f8c9 5000 	str.w	r5, [r9]
 800c5a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5a8:	f8c8 0000 	str.w	r0, [r8]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	b003      	add	sp, #12
 800c5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5b8:	e7d5      	b.n	800c566 <__d2b+0x2e>
 800c5ba:	6161      	str	r1, [r4, #20]
 800c5bc:	e7e5      	b.n	800c58a <__d2b+0x52>
 800c5be:	a801      	add	r0, sp, #4
 800c5c0:	f7ff fcde 	bl	800bf80 <__lo0bits>
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	6163      	str	r3, [r4, #20]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	6122      	str	r2, [r4, #16]
 800c5cc:	3020      	adds	r0, #32
 800c5ce:	e7e3      	b.n	800c598 <__d2b+0x60>
 800c5d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5d8:	f8c9 0000 	str.w	r0, [r9]
 800c5dc:	6918      	ldr	r0, [r3, #16]
 800c5de:	f7ff fcaf 	bl	800bf40 <__hi0bits>
 800c5e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5e6:	e7df      	b.n	800c5a8 <__d2b+0x70>
 800c5e8:	0800dc08 	.word	0x0800dc08
 800c5ec:	0800dcf8 	.word	0x0800dcf8

0800c5f0 <__ratio>:
 800c5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4688      	mov	r8, r1
 800c5f6:	4669      	mov	r1, sp
 800c5f8:	4681      	mov	r9, r0
 800c5fa:	f7ff ff4d 	bl	800c498 <__b2d>
 800c5fe:	a901      	add	r1, sp, #4
 800c600:	4640      	mov	r0, r8
 800c602:	ec55 4b10 	vmov	r4, r5, d0
 800c606:	f7ff ff47 	bl	800c498 <__b2d>
 800c60a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c60e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c612:	eba3 0c02 	sub.w	ip, r3, r2
 800c616:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c61a:	1a9b      	subs	r3, r3, r2
 800c61c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c620:	ec51 0b10 	vmov	r0, r1, d0
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfd6      	itet	le
 800c628:	460a      	movle	r2, r1
 800c62a:	462a      	movgt	r2, r5
 800c62c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c630:	468b      	mov	fp, r1
 800c632:	462f      	mov	r7, r5
 800c634:	bfd4      	ite	le
 800c636:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c63a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c63e:	4620      	mov	r0, r4
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	465b      	mov	r3, fp
 800c646:	4639      	mov	r1, r7
 800c648:	f7f4 f900 	bl	800084c <__aeabi_ddiv>
 800c64c:	ec41 0b10 	vmov	d0, r0, r1
 800c650:	b003      	add	sp, #12
 800c652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c656 <__copybits>:
 800c656:	3901      	subs	r1, #1
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	1149      	asrs	r1, r1, #5
 800c65c:	6914      	ldr	r4, [r2, #16]
 800c65e:	3101      	adds	r1, #1
 800c660:	f102 0314 	add.w	r3, r2, #20
 800c664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c66c:	1f05      	subs	r5, r0, #4
 800c66e:	42a3      	cmp	r3, r4
 800c670:	d30c      	bcc.n	800c68c <__copybits+0x36>
 800c672:	1aa3      	subs	r3, r4, r2
 800c674:	3b11      	subs	r3, #17
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	3211      	adds	r2, #17
 800c67c:	42a2      	cmp	r2, r4
 800c67e:	bf88      	it	hi
 800c680:	2300      	movhi	r3, #0
 800c682:	4418      	add	r0, r3
 800c684:	2300      	movs	r3, #0
 800c686:	4288      	cmp	r0, r1
 800c688:	d305      	bcc.n	800c696 <__copybits+0x40>
 800c68a:	bd70      	pop	{r4, r5, r6, pc}
 800c68c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c690:	f845 6f04 	str.w	r6, [r5, #4]!
 800c694:	e7eb      	b.n	800c66e <__copybits+0x18>
 800c696:	f840 3b04 	str.w	r3, [r0], #4
 800c69a:	e7f4      	b.n	800c686 <__copybits+0x30>

0800c69c <__any_on>:
 800c69c:	f100 0214 	add.w	r2, r0, #20
 800c6a0:	6900      	ldr	r0, [r0, #16]
 800c6a2:	114b      	asrs	r3, r1, #5
 800c6a4:	4298      	cmp	r0, r3
 800c6a6:	b510      	push	{r4, lr}
 800c6a8:	db11      	blt.n	800c6ce <__any_on+0x32>
 800c6aa:	dd0a      	ble.n	800c6c2 <__any_on+0x26>
 800c6ac:	f011 011f 	ands.w	r1, r1, #31
 800c6b0:	d007      	beq.n	800c6c2 <__any_on+0x26>
 800c6b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6b6:	fa24 f001 	lsr.w	r0, r4, r1
 800c6ba:	fa00 f101 	lsl.w	r1, r0, r1
 800c6be:	428c      	cmp	r4, r1
 800c6c0:	d10b      	bne.n	800c6da <__any_on+0x3e>
 800c6c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d803      	bhi.n	800c6d2 <__any_on+0x36>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bd10      	pop	{r4, pc}
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	e7f7      	b.n	800c6c2 <__any_on+0x26>
 800c6d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	d0f5      	beq.n	800c6c6 <__any_on+0x2a>
 800c6da:	2001      	movs	r0, #1
 800c6dc:	e7f6      	b.n	800c6cc <__any_on+0x30>

0800c6de <_calloc_r>:
 800c6de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6e0:	fba1 2402 	umull	r2, r4, r1, r2
 800c6e4:	b94c      	cbnz	r4, 800c6fa <_calloc_r+0x1c>
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	9201      	str	r2, [sp, #4]
 800c6ea:	f7fb ffed 	bl	80086c8 <_malloc_r>
 800c6ee:	9a01      	ldr	r2, [sp, #4]
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	b930      	cbnz	r0, 800c702 <_calloc_r+0x24>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	b003      	add	sp, #12
 800c6f8:	bd30      	pop	{r4, r5, pc}
 800c6fa:	220c      	movs	r2, #12
 800c6fc:	6002      	str	r2, [r0, #0]
 800c6fe:	2500      	movs	r5, #0
 800c700:	e7f8      	b.n	800c6f4 <_calloc_r+0x16>
 800c702:	4621      	mov	r1, r4
 800c704:	f7fb ff6c 	bl	80085e0 <memset>
 800c708:	e7f4      	b.n	800c6f4 <_calloc_r+0x16>

0800c70a <__ssputs_r>:
 800c70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c70e:	688e      	ldr	r6, [r1, #8]
 800c710:	429e      	cmp	r6, r3
 800c712:	4682      	mov	sl, r0
 800c714:	460c      	mov	r4, r1
 800c716:	4690      	mov	r8, r2
 800c718:	461f      	mov	r7, r3
 800c71a:	d838      	bhi.n	800c78e <__ssputs_r+0x84>
 800c71c:	898a      	ldrh	r2, [r1, #12]
 800c71e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c722:	d032      	beq.n	800c78a <__ssputs_r+0x80>
 800c724:	6825      	ldr	r5, [r4, #0]
 800c726:	6909      	ldr	r1, [r1, #16]
 800c728:	eba5 0901 	sub.w	r9, r5, r1
 800c72c:	6965      	ldr	r5, [r4, #20]
 800c72e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c736:	3301      	adds	r3, #1
 800c738:	444b      	add	r3, r9
 800c73a:	106d      	asrs	r5, r5, #1
 800c73c:	429d      	cmp	r5, r3
 800c73e:	bf38      	it	cc
 800c740:	461d      	movcc	r5, r3
 800c742:	0553      	lsls	r3, r2, #21
 800c744:	d531      	bpl.n	800c7aa <__ssputs_r+0xa0>
 800c746:	4629      	mov	r1, r5
 800c748:	f7fb ffbe 	bl	80086c8 <_malloc_r>
 800c74c:	4606      	mov	r6, r0
 800c74e:	b950      	cbnz	r0, 800c766 <__ssputs_r+0x5c>
 800c750:	230c      	movs	r3, #12
 800c752:	f8ca 3000 	str.w	r3, [sl]
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c75c:	81a3      	strh	r3, [r4, #12]
 800c75e:	f04f 30ff 	mov.w	r0, #4294967295
 800c762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c766:	6921      	ldr	r1, [r4, #16]
 800c768:	464a      	mov	r2, r9
 800c76a:	f7fb ff2b 	bl	80085c4 <memcpy>
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c778:	81a3      	strh	r3, [r4, #12]
 800c77a:	6126      	str	r6, [r4, #16]
 800c77c:	6165      	str	r5, [r4, #20]
 800c77e:	444e      	add	r6, r9
 800c780:	eba5 0509 	sub.w	r5, r5, r9
 800c784:	6026      	str	r6, [r4, #0]
 800c786:	60a5      	str	r5, [r4, #8]
 800c788:	463e      	mov	r6, r7
 800c78a:	42be      	cmp	r6, r7
 800c78c:	d900      	bls.n	800c790 <__ssputs_r+0x86>
 800c78e:	463e      	mov	r6, r7
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	4632      	mov	r2, r6
 800c794:	4641      	mov	r1, r8
 800c796:	f000 fb61 	bl	800ce5c <memmove>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	1b9b      	subs	r3, r3, r6
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	4433      	add	r3, r6
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	e7db      	b.n	800c762 <__ssputs_r+0x58>
 800c7aa:	462a      	mov	r2, r5
 800c7ac:	f000 fb70 	bl	800ce90 <_realloc_r>
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d1e1      	bne.n	800c77a <__ssputs_r+0x70>
 800c7b6:	6921      	ldr	r1, [r4, #16]
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	f7fb ff19 	bl	80085f0 <_free_r>
 800c7be:	e7c7      	b.n	800c750 <__ssputs_r+0x46>

0800c7c0 <_svfiprintf_r>:
 800c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	4698      	mov	r8, r3
 800c7c6:	898b      	ldrh	r3, [r1, #12]
 800c7c8:	061b      	lsls	r3, r3, #24
 800c7ca:	b09d      	sub	sp, #116	; 0x74
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	d50e      	bpl.n	800c7f2 <_svfiprintf_r+0x32>
 800c7d4:	690b      	ldr	r3, [r1, #16]
 800c7d6:	b963      	cbnz	r3, 800c7f2 <_svfiprintf_r+0x32>
 800c7d8:	2140      	movs	r1, #64	; 0x40
 800c7da:	f7fb ff75 	bl	80086c8 <_malloc_r>
 800c7de:	6028      	str	r0, [r5, #0]
 800c7e0:	6128      	str	r0, [r5, #16]
 800c7e2:	b920      	cbnz	r0, 800c7ee <_svfiprintf_r+0x2e>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	e0d1      	b.n	800c992 <_svfiprintf_r+0x1d2>
 800c7ee:	2340      	movs	r3, #64	; 0x40
 800c7f0:	616b      	str	r3, [r5, #20]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f6:	2320      	movs	r3, #32
 800c7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c800:	2330      	movs	r3, #48	; 0x30
 800c802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9ac <_svfiprintf_r+0x1ec>
 800c806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c80a:	f04f 0901 	mov.w	r9, #1
 800c80e:	4623      	mov	r3, r4
 800c810:	469a      	mov	sl, r3
 800c812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c816:	b10a      	cbz	r2, 800c81c <_svfiprintf_r+0x5c>
 800c818:	2a25      	cmp	r2, #37	; 0x25
 800c81a:	d1f9      	bne.n	800c810 <_svfiprintf_r+0x50>
 800c81c:	ebba 0b04 	subs.w	fp, sl, r4
 800c820:	d00b      	beq.n	800c83a <_svfiprintf_r+0x7a>
 800c822:	465b      	mov	r3, fp
 800c824:	4622      	mov	r2, r4
 800c826:	4629      	mov	r1, r5
 800c828:	4638      	mov	r0, r7
 800c82a:	f7ff ff6e 	bl	800c70a <__ssputs_r>
 800c82e:	3001      	adds	r0, #1
 800c830:	f000 80aa 	beq.w	800c988 <_svfiprintf_r+0x1c8>
 800c834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c836:	445a      	add	r2, fp
 800c838:	9209      	str	r2, [sp, #36]	; 0x24
 800c83a:	f89a 3000 	ldrb.w	r3, [sl]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 80a2 	beq.w	800c988 <_svfiprintf_r+0x1c8>
 800c844:	2300      	movs	r3, #0
 800c846:	f04f 32ff 	mov.w	r2, #4294967295
 800c84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c84e:	f10a 0a01 	add.w	sl, sl, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	9307      	str	r3, [sp, #28]
 800c856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c85a:	931a      	str	r3, [sp, #104]	; 0x68
 800c85c:	4654      	mov	r4, sl
 800c85e:	2205      	movs	r2, #5
 800c860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c864:	4851      	ldr	r0, [pc, #324]	; (800c9ac <_svfiprintf_r+0x1ec>)
 800c866:	f7f3 fcbb 	bl	80001e0 <memchr>
 800c86a:	9a04      	ldr	r2, [sp, #16]
 800c86c:	b9d8      	cbnz	r0, 800c8a6 <_svfiprintf_r+0xe6>
 800c86e:	06d0      	lsls	r0, r2, #27
 800c870:	bf44      	itt	mi
 800c872:	2320      	movmi	r3, #32
 800c874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c878:	0711      	lsls	r1, r2, #28
 800c87a:	bf44      	itt	mi
 800c87c:	232b      	movmi	r3, #43	; 0x2b
 800c87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c882:	f89a 3000 	ldrb.w	r3, [sl]
 800c886:	2b2a      	cmp	r3, #42	; 0x2a
 800c888:	d015      	beq.n	800c8b6 <_svfiprintf_r+0xf6>
 800c88a:	9a07      	ldr	r2, [sp, #28]
 800c88c:	4654      	mov	r4, sl
 800c88e:	2000      	movs	r0, #0
 800c890:	f04f 0c0a 	mov.w	ip, #10
 800c894:	4621      	mov	r1, r4
 800c896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c89a:	3b30      	subs	r3, #48	; 0x30
 800c89c:	2b09      	cmp	r3, #9
 800c89e:	d94e      	bls.n	800c93e <_svfiprintf_r+0x17e>
 800c8a0:	b1b0      	cbz	r0, 800c8d0 <_svfiprintf_r+0x110>
 800c8a2:	9207      	str	r2, [sp, #28]
 800c8a4:	e014      	b.n	800c8d0 <_svfiprintf_r+0x110>
 800c8a6:	eba0 0308 	sub.w	r3, r0, r8
 800c8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	46a2      	mov	sl, r4
 800c8b4:	e7d2      	b.n	800c85c <_svfiprintf_r+0x9c>
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	1d19      	adds	r1, r3, #4
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	9103      	str	r1, [sp, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfbb      	ittet	lt
 800c8c2:	425b      	neglt	r3, r3
 800c8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c8:	9307      	strge	r3, [sp, #28]
 800c8ca:	9307      	strlt	r3, [sp, #28]
 800c8cc:	bfb8      	it	lt
 800c8ce:	9204      	strlt	r2, [sp, #16]
 800c8d0:	7823      	ldrb	r3, [r4, #0]
 800c8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d4:	d10c      	bne.n	800c8f0 <_svfiprintf_r+0x130>
 800c8d6:	7863      	ldrb	r3, [r4, #1]
 800c8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8da:	d135      	bne.n	800c948 <_svfiprintf_r+0x188>
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	1d1a      	adds	r2, r3, #4
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	9203      	str	r2, [sp, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bfb8      	it	lt
 800c8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8ec:	3402      	adds	r4, #2
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9bc <_svfiprintf_r+0x1fc>
 800c8f4:	7821      	ldrb	r1, [r4, #0]
 800c8f6:	2203      	movs	r2, #3
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	f7f3 fc71 	bl	80001e0 <memchr>
 800c8fe:	b140      	cbz	r0, 800c912 <_svfiprintf_r+0x152>
 800c900:	2340      	movs	r3, #64	; 0x40
 800c902:	eba0 000a 	sub.w	r0, r0, sl
 800c906:	fa03 f000 	lsl.w	r0, r3, r0
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	4303      	orrs	r3, r0
 800c90e:	3401      	adds	r4, #1
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c916:	4826      	ldr	r0, [pc, #152]	; (800c9b0 <_svfiprintf_r+0x1f0>)
 800c918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c91c:	2206      	movs	r2, #6
 800c91e:	f7f3 fc5f 	bl	80001e0 <memchr>
 800c922:	2800      	cmp	r0, #0
 800c924:	d038      	beq.n	800c998 <_svfiprintf_r+0x1d8>
 800c926:	4b23      	ldr	r3, [pc, #140]	; (800c9b4 <_svfiprintf_r+0x1f4>)
 800c928:	bb1b      	cbnz	r3, 800c972 <_svfiprintf_r+0x1b2>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	3307      	adds	r3, #7
 800c92e:	f023 0307 	bic.w	r3, r3, #7
 800c932:	3308      	adds	r3, #8
 800c934:	9303      	str	r3, [sp, #12]
 800c936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c938:	4433      	add	r3, r6
 800c93a:	9309      	str	r3, [sp, #36]	; 0x24
 800c93c:	e767      	b.n	800c80e <_svfiprintf_r+0x4e>
 800c93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c942:	460c      	mov	r4, r1
 800c944:	2001      	movs	r0, #1
 800c946:	e7a5      	b.n	800c894 <_svfiprintf_r+0xd4>
 800c948:	2300      	movs	r3, #0
 800c94a:	3401      	adds	r4, #1
 800c94c:	9305      	str	r3, [sp, #20]
 800c94e:	4619      	mov	r1, r3
 800c950:	f04f 0c0a 	mov.w	ip, #10
 800c954:	4620      	mov	r0, r4
 800c956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c95a:	3a30      	subs	r2, #48	; 0x30
 800c95c:	2a09      	cmp	r2, #9
 800c95e:	d903      	bls.n	800c968 <_svfiprintf_r+0x1a8>
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0c5      	beq.n	800c8f0 <_svfiprintf_r+0x130>
 800c964:	9105      	str	r1, [sp, #20]
 800c966:	e7c3      	b.n	800c8f0 <_svfiprintf_r+0x130>
 800c968:	fb0c 2101 	mla	r1, ip, r1, r2
 800c96c:	4604      	mov	r4, r0
 800c96e:	2301      	movs	r3, #1
 800c970:	e7f0      	b.n	800c954 <_svfiprintf_r+0x194>
 800c972:	ab03      	add	r3, sp, #12
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	462a      	mov	r2, r5
 800c978:	4b0f      	ldr	r3, [pc, #60]	; (800c9b8 <_svfiprintf_r+0x1f8>)
 800c97a:	a904      	add	r1, sp, #16
 800c97c:	4638      	mov	r0, r7
 800c97e:	f7fb ffb7 	bl	80088f0 <_printf_float>
 800c982:	1c42      	adds	r2, r0, #1
 800c984:	4606      	mov	r6, r0
 800c986:	d1d6      	bne.n	800c936 <_svfiprintf_r+0x176>
 800c988:	89ab      	ldrh	r3, [r5, #12]
 800c98a:	065b      	lsls	r3, r3, #25
 800c98c:	f53f af2c 	bmi.w	800c7e8 <_svfiprintf_r+0x28>
 800c990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c992:	b01d      	add	sp, #116	; 0x74
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c998:	ab03      	add	r3, sp, #12
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	462a      	mov	r2, r5
 800c99e:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <_svfiprintf_r+0x1f8>)
 800c9a0:	a904      	add	r1, sp, #16
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7fc fa48 	bl	8008e38 <_printf_i>
 800c9a8:	e7eb      	b.n	800c982 <_svfiprintf_r+0x1c2>
 800c9aa:	bf00      	nop
 800c9ac:	0800de54 	.word	0x0800de54
 800c9b0:	0800de5e 	.word	0x0800de5e
 800c9b4:	080088f1 	.word	0x080088f1
 800c9b8:	0800c70b 	.word	0x0800c70b
 800c9bc:	0800de5a 	.word	0x0800de5a

0800c9c0 <__sfputc_r>:
 800c9c0:	6893      	ldr	r3, [r2, #8]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	b410      	push	{r4}
 800c9c8:	6093      	str	r3, [r2, #8]
 800c9ca:	da08      	bge.n	800c9de <__sfputc_r+0x1e>
 800c9cc:	6994      	ldr	r4, [r2, #24]
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	db01      	blt.n	800c9d6 <__sfputc_r+0x16>
 800c9d2:	290a      	cmp	r1, #10
 800c9d4:	d103      	bne.n	800c9de <__sfputc_r+0x1e>
 800c9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9da:	f7fd bcd5 	b.w	800a388 <__swbuf_r>
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	1c58      	adds	r0, r3, #1
 800c9e2:	6010      	str	r0, [r2, #0]
 800c9e4:	7019      	strb	r1, [r3, #0]
 800c9e6:	4608      	mov	r0, r1
 800c9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <__sfputs_r>:
 800c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	18d5      	adds	r5, r2, r3
 800c9f8:	42ac      	cmp	r4, r5
 800c9fa:	d101      	bne.n	800ca00 <__sfputs_r+0x12>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e007      	b.n	800ca10 <__sfputs_r+0x22>
 800ca00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca04:	463a      	mov	r2, r7
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffda 	bl	800c9c0 <__sfputc_r>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d1f3      	bne.n	800c9f8 <__sfputs_r+0xa>
 800ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca14 <_vfiprintf_r>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	460d      	mov	r5, r1
 800ca1a:	b09d      	sub	sp, #116	; 0x74
 800ca1c:	4614      	mov	r4, r2
 800ca1e:	4698      	mov	r8, r3
 800ca20:	4606      	mov	r6, r0
 800ca22:	b118      	cbz	r0, 800ca2c <_vfiprintf_r+0x18>
 800ca24:	6983      	ldr	r3, [r0, #24]
 800ca26:	b90b      	cbnz	r3, 800ca2c <_vfiprintf_r+0x18>
 800ca28:	f7fe fd02 	bl	800b430 <__sinit>
 800ca2c:	4b89      	ldr	r3, [pc, #548]	; (800cc54 <_vfiprintf_r+0x240>)
 800ca2e:	429d      	cmp	r5, r3
 800ca30:	d11b      	bne.n	800ca6a <_vfiprintf_r+0x56>
 800ca32:	6875      	ldr	r5, [r6, #4]
 800ca34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d405      	bmi.n	800ca46 <_vfiprintf_r+0x32>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	059a      	lsls	r2, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_vfiprintf_r+0x32>
 800ca40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca42:	f7ff f906 	bl	800bc52 <__retarget_lock_acquire_recursive>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	071b      	lsls	r3, r3, #28
 800ca4a:	d501      	bpl.n	800ca50 <_vfiprintf_r+0x3c>
 800ca4c:	692b      	ldr	r3, [r5, #16]
 800ca4e:	b9eb      	cbnz	r3, 800ca8c <_vfiprintf_r+0x78>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7fd fcea 	bl	800a42c <__swsetup_r>
 800ca58:	b1c0      	cbz	r0, 800ca8c <_vfiprintf_r+0x78>
 800ca5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca5c:	07dc      	lsls	r4, r3, #31
 800ca5e:	d50e      	bpl.n	800ca7e <_vfiprintf_r+0x6a>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	b01d      	add	sp, #116	; 0x74
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	4b7b      	ldr	r3, [pc, #492]	; (800cc58 <_vfiprintf_r+0x244>)
 800ca6c:	429d      	cmp	r5, r3
 800ca6e:	d101      	bne.n	800ca74 <_vfiprintf_r+0x60>
 800ca70:	68b5      	ldr	r5, [r6, #8]
 800ca72:	e7df      	b.n	800ca34 <_vfiprintf_r+0x20>
 800ca74:	4b79      	ldr	r3, [pc, #484]	; (800cc5c <_vfiprintf_r+0x248>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	bf08      	it	eq
 800ca7a:	68f5      	ldreq	r5, [r6, #12]
 800ca7c:	e7da      	b.n	800ca34 <_vfiprintf_r+0x20>
 800ca7e:	89ab      	ldrh	r3, [r5, #12]
 800ca80:	0598      	lsls	r0, r3, #22
 800ca82:	d4ed      	bmi.n	800ca60 <_vfiprintf_r+0x4c>
 800ca84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca86:	f7ff f8e5 	bl	800bc54 <__retarget_lock_release_recursive>
 800ca8a:	e7e9      	b.n	800ca60 <_vfiprintf_r+0x4c>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca90:	2320      	movs	r3, #32
 800ca92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca9a:	2330      	movs	r3, #48	; 0x30
 800ca9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc60 <_vfiprintf_r+0x24c>
 800caa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caa4:	f04f 0901 	mov.w	r9, #1
 800caa8:	4623      	mov	r3, r4
 800caaa:	469a      	mov	sl, r3
 800caac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab0:	b10a      	cbz	r2, 800cab6 <_vfiprintf_r+0xa2>
 800cab2:	2a25      	cmp	r2, #37	; 0x25
 800cab4:	d1f9      	bne.n	800caaa <_vfiprintf_r+0x96>
 800cab6:	ebba 0b04 	subs.w	fp, sl, r4
 800caba:	d00b      	beq.n	800cad4 <_vfiprintf_r+0xc0>
 800cabc:	465b      	mov	r3, fp
 800cabe:	4622      	mov	r2, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7ff ff93 	bl	800c9ee <__sfputs_r>
 800cac8:	3001      	adds	r0, #1
 800caca:	f000 80aa 	beq.w	800cc22 <_vfiprintf_r+0x20e>
 800cace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad0:	445a      	add	r2, fp
 800cad2:	9209      	str	r2, [sp, #36]	; 0x24
 800cad4:	f89a 3000 	ldrb.w	r3, [sl]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 80a2 	beq.w	800cc22 <_vfiprintf_r+0x20e>
 800cade:	2300      	movs	r3, #0
 800cae0:	f04f 32ff 	mov.w	r2, #4294967295
 800cae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae8:	f10a 0a01 	add.w	sl, sl, #1
 800caec:	9304      	str	r3, [sp, #16]
 800caee:	9307      	str	r3, [sp, #28]
 800caf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caf4:	931a      	str	r3, [sp, #104]	; 0x68
 800caf6:	4654      	mov	r4, sl
 800caf8:	2205      	movs	r2, #5
 800cafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafe:	4858      	ldr	r0, [pc, #352]	; (800cc60 <_vfiprintf_r+0x24c>)
 800cb00:	f7f3 fb6e 	bl	80001e0 <memchr>
 800cb04:	9a04      	ldr	r2, [sp, #16]
 800cb06:	b9d8      	cbnz	r0, 800cb40 <_vfiprintf_r+0x12c>
 800cb08:	06d1      	lsls	r1, r2, #27
 800cb0a:	bf44      	itt	mi
 800cb0c:	2320      	movmi	r3, #32
 800cb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb12:	0713      	lsls	r3, r2, #28
 800cb14:	bf44      	itt	mi
 800cb16:	232b      	movmi	r3, #43	; 0x2b
 800cb18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb20:	2b2a      	cmp	r3, #42	; 0x2a
 800cb22:	d015      	beq.n	800cb50 <_vfiprintf_r+0x13c>
 800cb24:	9a07      	ldr	r2, [sp, #28]
 800cb26:	4654      	mov	r4, sl
 800cb28:	2000      	movs	r0, #0
 800cb2a:	f04f 0c0a 	mov.w	ip, #10
 800cb2e:	4621      	mov	r1, r4
 800cb30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb34:	3b30      	subs	r3, #48	; 0x30
 800cb36:	2b09      	cmp	r3, #9
 800cb38:	d94e      	bls.n	800cbd8 <_vfiprintf_r+0x1c4>
 800cb3a:	b1b0      	cbz	r0, 800cb6a <_vfiprintf_r+0x156>
 800cb3c:	9207      	str	r2, [sp, #28]
 800cb3e:	e014      	b.n	800cb6a <_vfiprintf_r+0x156>
 800cb40:	eba0 0308 	sub.w	r3, r0, r8
 800cb44:	fa09 f303 	lsl.w	r3, r9, r3
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	9304      	str	r3, [sp, #16]
 800cb4c:	46a2      	mov	sl, r4
 800cb4e:	e7d2      	b.n	800caf6 <_vfiprintf_r+0xe2>
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	1d19      	adds	r1, r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	9103      	str	r1, [sp, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	bfbb      	ittet	lt
 800cb5c:	425b      	neglt	r3, r3
 800cb5e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb62:	9307      	strge	r3, [sp, #28]
 800cb64:	9307      	strlt	r3, [sp, #28]
 800cb66:	bfb8      	it	lt
 800cb68:	9204      	strlt	r2, [sp, #16]
 800cb6a:	7823      	ldrb	r3, [r4, #0]
 800cb6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb6e:	d10c      	bne.n	800cb8a <_vfiprintf_r+0x176>
 800cb70:	7863      	ldrb	r3, [r4, #1]
 800cb72:	2b2a      	cmp	r3, #42	; 0x2a
 800cb74:	d135      	bne.n	800cbe2 <_vfiprintf_r+0x1ce>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	1d1a      	adds	r2, r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	9203      	str	r2, [sp, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfb8      	it	lt
 800cb82:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb86:	3402      	adds	r4, #2
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc70 <_vfiprintf_r+0x25c>
 800cb8e:	7821      	ldrb	r1, [r4, #0]
 800cb90:	2203      	movs	r2, #3
 800cb92:	4650      	mov	r0, sl
 800cb94:	f7f3 fb24 	bl	80001e0 <memchr>
 800cb98:	b140      	cbz	r0, 800cbac <_vfiprintf_r+0x198>
 800cb9a:	2340      	movs	r3, #64	; 0x40
 800cb9c:	eba0 000a 	sub.w	r0, r0, sl
 800cba0:	fa03 f000 	lsl.w	r0, r3, r0
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	4303      	orrs	r3, r0
 800cba8:	3401      	adds	r4, #1
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb0:	482c      	ldr	r0, [pc, #176]	; (800cc64 <_vfiprintf_r+0x250>)
 800cbb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	f7f3 fb12 	bl	80001e0 <memchr>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d03f      	beq.n	800cc40 <_vfiprintf_r+0x22c>
 800cbc0:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <_vfiprintf_r+0x254>)
 800cbc2:	bb1b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x1f8>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	3307      	adds	r3, #7
 800cbc8:	f023 0307 	bic.w	r3, r3, #7
 800cbcc:	3308      	adds	r3, #8
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd2:	443b      	add	r3, r7
 800cbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd6:	e767      	b.n	800caa8 <_vfiprintf_r+0x94>
 800cbd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbdc:	460c      	mov	r4, r1
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7a5      	b.n	800cb2e <_vfiprintf_r+0x11a>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	3401      	adds	r4, #1
 800cbe6:	9305      	str	r3, [sp, #20]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f04f 0c0a 	mov.w	ip, #10
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbf4:	3a30      	subs	r2, #48	; 0x30
 800cbf6:	2a09      	cmp	r2, #9
 800cbf8:	d903      	bls.n	800cc02 <_vfiprintf_r+0x1ee>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c5      	beq.n	800cb8a <_vfiprintf_r+0x176>
 800cbfe:	9105      	str	r1, [sp, #20]
 800cc00:	e7c3      	b.n	800cb8a <_vfiprintf_r+0x176>
 800cc02:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc06:	4604      	mov	r4, r0
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e7f0      	b.n	800cbee <_vfiprintf_r+0x1da>
 800cc0c:	ab03      	add	r3, sp, #12
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	462a      	mov	r2, r5
 800cc12:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <_vfiprintf_r+0x258>)
 800cc14:	a904      	add	r1, sp, #16
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7fb fe6a 	bl	80088f0 <_printf_float>
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	1c78      	adds	r0, r7, #1
 800cc20:	d1d6      	bne.n	800cbd0 <_vfiprintf_r+0x1bc>
 800cc22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc24:	07d9      	lsls	r1, r3, #31
 800cc26:	d405      	bmi.n	800cc34 <_vfiprintf_r+0x220>
 800cc28:	89ab      	ldrh	r3, [r5, #12]
 800cc2a:	059a      	lsls	r2, r3, #22
 800cc2c:	d402      	bmi.n	800cc34 <_vfiprintf_r+0x220>
 800cc2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc30:	f7ff f810 	bl	800bc54 <__retarget_lock_release_recursive>
 800cc34:	89ab      	ldrh	r3, [r5, #12]
 800cc36:	065b      	lsls	r3, r3, #25
 800cc38:	f53f af12 	bmi.w	800ca60 <_vfiprintf_r+0x4c>
 800cc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc3e:	e711      	b.n	800ca64 <_vfiprintf_r+0x50>
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	462a      	mov	r2, r5
 800cc46:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <_vfiprintf_r+0x258>)
 800cc48:	a904      	add	r1, sp, #16
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7fc f8f4 	bl	8008e38 <_printf_i>
 800cc50:	e7e4      	b.n	800cc1c <_vfiprintf_r+0x208>
 800cc52:	bf00      	nop
 800cc54:	0800dc3c 	.word	0x0800dc3c
 800cc58:	0800dc5c 	.word	0x0800dc5c
 800cc5c:	0800dc1c 	.word	0x0800dc1c
 800cc60:	0800de54 	.word	0x0800de54
 800cc64:	0800de5e 	.word	0x0800de5e
 800cc68:	080088f1 	.word	0x080088f1
 800cc6c:	0800c9ef 	.word	0x0800c9ef
 800cc70:	0800de5a 	.word	0x0800de5a
 800cc74:	00000000 	.word	0x00000000

0800cc78 <nan>:
 800cc78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc80 <nan+0x8>
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	00000000 	.word	0x00000000
 800cc84:	7ff80000 	.word	0x7ff80000

0800cc88 <__sread>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc90:	f000 f92e 	bl	800cef0 <_read_r>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	bfab      	itete	ge
 800cc98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc9a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc9c:	181b      	addge	r3, r3, r0
 800cc9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cca2:	bfac      	ite	ge
 800cca4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cca6:	81a3      	strhlt	r3, [r4, #12]
 800cca8:	bd10      	pop	{r4, pc}

0800ccaa <__swrite>:
 800ccaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccae:	461f      	mov	r7, r3
 800ccb0:	898b      	ldrh	r3, [r1, #12]
 800ccb2:	05db      	lsls	r3, r3, #23
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	4616      	mov	r6, r2
 800ccba:	d505      	bpl.n	800ccc8 <__swrite+0x1e>
 800ccbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f000 f8b8 	bl	800ce38 <_lseek_r>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccd2:	81a3      	strh	r3, [r4, #12]
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	463b      	mov	r3, r7
 800ccd8:	4628      	mov	r0, r5
 800ccda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccde:	f000 b837 	b.w	800cd50 <_write_r>

0800cce2 <__sseek>:
 800cce2:	b510      	push	{r4, lr}
 800cce4:	460c      	mov	r4, r1
 800cce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccea:	f000 f8a5 	bl	800ce38 <_lseek_r>
 800ccee:	1c43      	adds	r3, r0, #1
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	bf15      	itete	ne
 800ccf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccfe:	81a3      	strheq	r3, [r4, #12]
 800cd00:	bf18      	it	ne
 800cd02:	81a3      	strhne	r3, [r4, #12]
 800cd04:	bd10      	pop	{r4, pc}

0800cd06 <__sclose>:
 800cd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0a:	f000 b851 	b.w	800cdb0 <_close_r>

0800cd0e <strncmp>:
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	b17a      	cbz	r2, 800cd32 <strncmp+0x24>
 800cd12:	4603      	mov	r3, r0
 800cd14:	3901      	subs	r1, #1
 800cd16:	1884      	adds	r4, r0, r2
 800cd18:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd20:	4290      	cmp	r0, r2
 800cd22:	d101      	bne.n	800cd28 <strncmp+0x1a>
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	d101      	bne.n	800cd2c <strncmp+0x1e>
 800cd28:	1a80      	subs	r0, r0, r2
 800cd2a:	bd10      	pop	{r4, pc}
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d1f3      	bne.n	800cd18 <strncmp+0xa>
 800cd30:	e7fa      	b.n	800cd28 <strncmp+0x1a>
 800cd32:	4610      	mov	r0, r2
 800cd34:	e7f9      	b.n	800cd2a <strncmp+0x1c>

0800cd36 <__ascii_wctomb>:
 800cd36:	b149      	cbz	r1, 800cd4c <__ascii_wctomb+0x16>
 800cd38:	2aff      	cmp	r2, #255	; 0xff
 800cd3a:	bf85      	ittet	hi
 800cd3c:	238a      	movhi	r3, #138	; 0x8a
 800cd3e:	6003      	strhi	r3, [r0, #0]
 800cd40:	700a      	strbls	r2, [r1, #0]
 800cd42:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd46:	bf98      	it	ls
 800cd48:	2001      	movls	r0, #1
 800cd4a:	4770      	bx	lr
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	4770      	bx	lr

0800cd50 <_write_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d07      	ldr	r5, [pc, #28]	; (800cd70 <_write_r+0x20>)
 800cd54:	4604      	mov	r4, r0
 800cd56:	4608      	mov	r0, r1
 800cd58:	4611      	mov	r1, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f7f6 fc25 	bl	80035ae <_write>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_write_r+0x1e>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_write_r+0x1e>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	20002554 	.word	0x20002554

0800cd74 <__assert_func>:
 800cd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd76:	4614      	mov	r4, r2
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <__assert_func+0x2c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	68d8      	ldr	r0, [r3, #12]
 800cd82:	b14c      	cbz	r4, 800cd98 <__assert_func+0x24>
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <__assert_func+0x30>)
 800cd86:	9100      	str	r1, [sp, #0]
 800cd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd8c:	4906      	ldr	r1, [pc, #24]	; (800cda8 <__assert_func+0x34>)
 800cd8e:	462b      	mov	r3, r5
 800cd90:	f000 f81e 	bl	800cdd0 <fiprintf>
 800cd94:	f000 f8be 	bl	800cf14 <abort>
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <__assert_func+0x38>)
 800cd9a:	461c      	mov	r4, r3
 800cd9c:	e7f3      	b.n	800cd86 <__assert_func+0x12>
 800cd9e:	bf00      	nop
 800cda0:	2000004c 	.word	0x2000004c
 800cda4:	0800de65 	.word	0x0800de65
 800cda8:	0800de72 	.word	0x0800de72
 800cdac:	0800dea0 	.word	0x0800dea0

0800cdb0 <_close_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4d06      	ldr	r5, [pc, #24]	; (800cdcc <_close_r+0x1c>)
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	4608      	mov	r0, r1
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	f7f6 fc13 	bl	80035e6 <_close>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_close_r+0x1a>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_close_r+0x1a>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20002554 	.word	0x20002554

0800cdd0 <fiprintf>:
 800cdd0:	b40e      	push	{r1, r2, r3}
 800cdd2:	b503      	push	{r0, r1, lr}
 800cdd4:	4601      	mov	r1, r0
 800cdd6:	ab03      	add	r3, sp, #12
 800cdd8:	4805      	ldr	r0, [pc, #20]	; (800cdf0 <fiprintf+0x20>)
 800cdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdde:	6800      	ldr	r0, [r0, #0]
 800cde0:	9301      	str	r3, [sp, #4]
 800cde2:	f7ff fe17 	bl	800ca14 <_vfiprintf_r>
 800cde6:	b002      	add	sp, #8
 800cde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdec:	b003      	add	sp, #12
 800cdee:	4770      	bx	lr
 800cdf0:	2000004c 	.word	0x2000004c

0800cdf4 <_fstat_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	; (800ce14 <_fstat_r+0x20>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	4611      	mov	r1, r2
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	f7f6 fbfc 	bl	80035fe <_fstat>
 800ce06:	1c43      	adds	r3, r0, #1
 800ce08:	d102      	bne.n	800ce10 <_fstat_r+0x1c>
 800ce0a:	682b      	ldr	r3, [r5, #0]
 800ce0c:	b103      	cbz	r3, 800ce10 <_fstat_r+0x1c>
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
 800ce12:	bf00      	nop
 800ce14:	20002554 	.word	0x20002554

0800ce18 <_isatty_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d06      	ldr	r5, [pc, #24]	; (800ce34 <_isatty_r+0x1c>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	f7f6 fbfb 	bl	800361e <_isatty>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_isatty_r+0x1a>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_isatty_r+0x1a>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	20002554 	.word	0x20002554

0800ce38 <_lseek_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	; (800ce58 <_lseek_r+0x20>)
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	602a      	str	r2, [r5, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	f7f6 fbf4 	bl	8003634 <_lseek>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_lseek_r+0x1e>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_lseek_r+0x1e>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20002554 	.word	0x20002554

0800ce5c <memmove>:
 800ce5c:	4288      	cmp	r0, r1
 800ce5e:	b510      	push	{r4, lr}
 800ce60:	eb01 0402 	add.w	r4, r1, r2
 800ce64:	d902      	bls.n	800ce6c <memmove+0x10>
 800ce66:	4284      	cmp	r4, r0
 800ce68:	4623      	mov	r3, r4
 800ce6a:	d807      	bhi.n	800ce7c <memmove+0x20>
 800ce6c:	1e43      	subs	r3, r0, #1
 800ce6e:	42a1      	cmp	r1, r4
 800ce70:	d008      	beq.n	800ce84 <memmove+0x28>
 800ce72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce7a:	e7f8      	b.n	800ce6e <memmove+0x12>
 800ce7c:	4402      	add	r2, r0
 800ce7e:	4601      	mov	r1, r0
 800ce80:	428a      	cmp	r2, r1
 800ce82:	d100      	bne.n	800ce86 <memmove+0x2a>
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce8e:	e7f7      	b.n	800ce80 <memmove+0x24>

0800ce90 <_realloc_r>:
 800ce90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce94:	4680      	mov	r8, r0
 800ce96:	4614      	mov	r4, r2
 800ce98:	460e      	mov	r6, r1
 800ce9a:	b921      	cbnz	r1, 800cea6 <_realloc_r+0x16>
 800ce9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cea0:	4611      	mov	r1, r2
 800cea2:	f7fb bc11 	b.w	80086c8 <_malloc_r>
 800cea6:	b92a      	cbnz	r2, 800ceb4 <_realloc_r+0x24>
 800cea8:	f7fb fba2 	bl	80085f0 <_free_r>
 800ceac:	4625      	mov	r5, r4
 800ceae:	4628      	mov	r0, r5
 800ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb4:	f000 f835 	bl	800cf22 <_malloc_usable_size_r>
 800ceb8:	4284      	cmp	r4, r0
 800ceba:	4607      	mov	r7, r0
 800cebc:	d802      	bhi.n	800cec4 <_realloc_r+0x34>
 800cebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cec2:	d812      	bhi.n	800ceea <_realloc_r+0x5a>
 800cec4:	4621      	mov	r1, r4
 800cec6:	4640      	mov	r0, r8
 800cec8:	f7fb fbfe 	bl	80086c8 <_malloc_r>
 800cecc:	4605      	mov	r5, r0
 800cece:	2800      	cmp	r0, #0
 800ced0:	d0ed      	beq.n	800ceae <_realloc_r+0x1e>
 800ced2:	42bc      	cmp	r4, r7
 800ced4:	4622      	mov	r2, r4
 800ced6:	4631      	mov	r1, r6
 800ced8:	bf28      	it	cs
 800ceda:	463a      	movcs	r2, r7
 800cedc:	f7fb fb72 	bl	80085c4 <memcpy>
 800cee0:	4631      	mov	r1, r6
 800cee2:	4640      	mov	r0, r8
 800cee4:	f7fb fb84 	bl	80085f0 <_free_r>
 800cee8:	e7e1      	b.n	800ceae <_realloc_r+0x1e>
 800ceea:	4635      	mov	r5, r6
 800ceec:	e7df      	b.n	800ceae <_realloc_r+0x1e>
	...

0800cef0 <_read_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4d07      	ldr	r5, [pc, #28]	; (800cf10 <_read_r+0x20>)
 800cef4:	4604      	mov	r4, r0
 800cef6:	4608      	mov	r0, r1
 800cef8:	4611      	mov	r1, r2
 800cefa:	2200      	movs	r2, #0
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f7f6 fb38 	bl	8003574 <_read>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_read_r+0x1e>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_read_r+0x1e>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	20002554 	.word	0x20002554

0800cf14 <abort>:
 800cf14:	b508      	push	{r3, lr}
 800cf16:	2006      	movs	r0, #6
 800cf18:	f000 f834 	bl	800cf84 <raise>
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	f7f6 fb1f 	bl	8003560 <_exit>

0800cf22 <_malloc_usable_size_r>:
 800cf22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf26:	1f18      	subs	r0, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	bfbc      	itt	lt
 800cf2c:	580b      	ldrlt	r3, [r1, r0]
 800cf2e:	18c0      	addlt	r0, r0, r3
 800cf30:	4770      	bx	lr

0800cf32 <_raise_r>:
 800cf32:	291f      	cmp	r1, #31
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	d904      	bls.n	800cf46 <_raise_r+0x14>
 800cf3c:	2316      	movs	r3, #22
 800cf3e:	6003      	str	r3, [r0, #0]
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	bd38      	pop	{r3, r4, r5, pc}
 800cf46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf48:	b112      	cbz	r2, 800cf50 <_raise_r+0x1e>
 800cf4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf4e:	b94b      	cbnz	r3, 800cf64 <_raise_r+0x32>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 f831 	bl	800cfb8 <_getpid_r>
 800cf56:	462a      	mov	r2, r5
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf60:	f000 b818 	b.w	800cf94 <_kill_r>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d00a      	beq.n	800cf7e <_raise_r+0x4c>
 800cf68:	1c59      	adds	r1, r3, #1
 800cf6a:	d103      	bne.n	800cf74 <_raise_r+0x42>
 800cf6c:	2316      	movs	r3, #22
 800cf6e:	6003      	str	r3, [r0, #0]
 800cf70:	2001      	movs	r0, #1
 800cf72:	e7e7      	b.n	800cf44 <_raise_r+0x12>
 800cf74:	2400      	movs	r4, #0
 800cf76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	4798      	blx	r3
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e7e0      	b.n	800cf44 <_raise_r+0x12>
	...

0800cf84 <raise>:
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <raise+0xc>)
 800cf86:	4601      	mov	r1, r0
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	f7ff bfd2 	b.w	800cf32 <_raise_r>
 800cf8e:	bf00      	nop
 800cf90:	2000004c 	.word	0x2000004c

0800cf94 <_kill_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d07      	ldr	r5, [pc, #28]	; (800cfb4 <_kill_r+0x20>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	602b      	str	r3, [r5, #0]
 800cfa2:	f7f6 facd 	bl	8003540 <_kill>
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	d102      	bne.n	800cfb0 <_kill_r+0x1c>
 800cfaa:	682b      	ldr	r3, [r5, #0]
 800cfac:	b103      	cbz	r3, 800cfb0 <_kill_r+0x1c>
 800cfae:	6023      	str	r3, [r4, #0]
 800cfb0:	bd38      	pop	{r3, r4, r5, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20002554 	.word	0x20002554

0800cfb8 <_getpid_r>:
 800cfb8:	f7f6 baba 	b.w	8003530 <_getpid>

0800cfbc <sqrtf>:
 800cfbc:	b508      	push	{r3, lr}
 800cfbe:	ed2d 8b02 	vpush	{d8}
 800cfc2:	eeb0 8a40 	vmov.f32	s16, s0
 800cfc6:	f000 f817 	bl	800cff8 <__ieee754_sqrtf>
 800cfca:	eeb4 8a48 	vcmp.f32	s16, s16
 800cfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd2:	d60c      	bvs.n	800cfee <sqrtf+0x32>
 800cfd4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cff4 <sqrtf+0x38>
 800cfd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe0:	d505      	bpl.n	800cfee <sqrtf+0x32>
 800cfe2:	f7fb fabd 	bl	8008560 <__errno>
 800cfe6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cfea:	2321      	movs	r3, #33	; 0x21
 800cfec:	6003      	str	r3, [r0, #0]
 800cfee:	ecbd 8b02 	vpop	{d8}
 800cff2:	bd08      	pop	{r3, pc}
 800cff4:	00000000 	.word	0x00000000

0800cff8 <__ieee754_sqrtf>:
 800cff8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cffc:	4770      	bx	lr
	...

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
